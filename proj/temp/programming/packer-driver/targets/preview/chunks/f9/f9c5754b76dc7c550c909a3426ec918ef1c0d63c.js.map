{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/rights/GatePass.ts"],"names":["Button","Label","ProgressBar","Sprite","SpriteFrame","UIOpacity","_decorator","AsyncComponent","AutoScroller","CfgMgr","ThingType","ResMgr","BagItem","proto","ItemUtil","GatePassBuyPanel","Card","SpriteLabel","ccclass","property","disallowMultiple","requireComponent","GatePass","bg","icon","title","sesson_time","Lv","proBar","curProgress","allProgress","oneKeyBtn","buyBtn","ScrollView","item","baseRewardList","heighRewardList","old_index","cur_show_index","onLoad","node","getChildByName","getComponent","getChildByPath","addComponent","font","string","spacingX","SetHandle","updateItem","bind","on","onSelect","EventType","CLICK","onOneKey","onBuy","hasLoad","Show","data","loadSub","cur_lv","seaid","SeaId","cur_exp","max_exp","getSeaGatepassNextExp","progress","seapass","getSeaGatepass","BgTexture","BigPrizeIcon","TitleIcon","LoadResAbSub","res","spriteFrame","lv_cfg","getSeaGatepassReward","i","length","element","Grate","ID","sort","a","b","UpdateDatas","index","Math","ceil","cur_data_index","setStageReward","lv","base_node","height_node1","height_node2","card_node","reward_lsit","GetSThingList","RewardType","RewardID","RewardNum","setItem","heigh_data","is_has_card","indexOf","battlecard","active","height_reward_lsit","card_cfg","GetBattleCardDeliver","card_data","base","BattleCard","cardId","CardID","createdAt","id","exp","level","nftLockExpires","ownershipType","quality","CardQuality","tradeCd","updateId","setCard","reward","is_state","base_item","mask","mask_opac","select","lock","bagItem","setThing","_color","color","fromHEX","_opacity","opacity","card","cards","SetData","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,M,OAAAA,M;AAA0BC,MAAAA,K,OAAAA,K;AAAaC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;AACpFC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,M,iBAAAA,M;AAA2FC,MAAAA,S,iBAAAA,S;;AAC3FC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,O,iBAAAA,O;;AACFC,MAAAA,K;;AACEC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,gB,iBAAAA,gB;;AACAC,MAAAA,I,kBAAAA,I;;AACAC,MAAAA,W,kBAAAA,W;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA,gBAArB;AAAuCC,QAAAA;AAAvC,O,GAA4Df,U;;0BAIrDgB,Q,WAFZJ,OAAO,CAAC,UAAD,C,UACPE,gBAAgB,CAAC,IAAD,C,+BADjB,MAEaE,QAFb;AAAA;AAAA,4CAE6C;AAAA;AAAA;AAAA,eACjCC,EADiC;AAAA,eAEjCC,IAFiC;AAAA,eAGjCC,KAHiC;AAAA,eAIjCC,WAJiC;AAAA,eAKjCC,EALiC;AAAA,eAMjCC,MANiC;AAAA,eAOjCC,WAPiC;AAAA,eAQjCC,WARiC;AAAA,eASjCC,SATiC;AAAA,eAUjCC,MAViC;AAAA,eAWjCC,UAXiC;AAAA,eAYjCC,IAZiC;AAAA,eAgBjCC,cAhBiC;AAAA,eAiBjCC,eAjBiC;AAAA,eAmBjCC,SAnBiC,GAmBrB,CAnBqB;AAAA,eAoBjCC,cApBiC,GAoBhB,CApBgB;AAAA;;AAqB/BC,QAAAA,MAAM,GAAS;AACrB,eAAKhB,EAAL,GAAU,KAAKiB,IAAL,CAAUC,cAAV,CAAyB,IAAzB,EAA+BC,YAA/B,CAA4CvC,MAA5C,CAAV;AACA,eAAKqB,IAAL,GAAY,KAAKgB,IAAL,CAAUC,cAAV,CAAyB,MAAzB,EAAiCC,YAAjC,CAA8CvC,MAA9C,CAAZ;AACA,eAAKsB,KAAL,GAAa,KAAKe,IAAL,CAAUC,cAAV,CAAyB,OAAzB,EAAkCC,YAAlC,CAA+CvC,MAA/C,CAAb;AACA,eAAKwB,EAAL,GAAU,KAAKa,IAAL,CAAUG,cAAV,CAAyB,SAAzB,EAAoCC,YAApC;AAAA;AAAA,yCAAV;AACA,eAAKjB,EAAL,CAAQkB,IAAR,GAAe,uBAAf;AACA,eAAKlB,EAAL,CAAQmB,MAAR,GAAiB,GAAjB;AACA,eAAKnB,EAAL,CAAQoB,QAAR,GAAmB,CAAC,CAApB;AACA,eAAKrB,WAAL,GAAmB,KAAKc,IAAL,CAAUG,cAAV,CAAyB,oBAAzB,EAA+CD,YAA/C,CAA4DzC,KAA5D,CAAnB;AACA,eAAK2B,MAAL,GAAc,KAAKY,IAAL,CAAUC,cAAV,CAAyB,QAAzB,EAAmCC,YAAnC,CAAgDxC,WAAhD,CAAd;AACA,eAAK2B,WAAL,GAAmB,KAAKW,IAAL,CAAUG,cAAV,CAAyB,qBAAzB,EAAgDD,YAAhD,CAA6DzC,KAA7D,CAAnB;AACA,eAAK6B,WAAL,GAAmB,KAAKU,IAAL,CAAUG,cAAV,CAAyB,qBAAzB,EAAgDD,YAAhD,CAA6DzC,KAA7D,CAAnB;AACA,eAAK8B,SAAL,GAAiB,KAAKS,IAAL,CAAUC,cAAV,CAAyB,WAAzB,EAAsCC,YAAtC,CAAmD1C,MAAnD,CAAjB;AACA,eAAKgC,MAAL,GAAc,KAAKQ,IAAL,CAAUC,cAAV,CAAyB,QAAzB,EAAmCC,YAAnC,CAAgD1C,MAAhD,CAAd;AACA,eAAKiC,UAAL,GAAkB,KAAKO,IAAL,CAAUC,cAAV,CAAyB,YAAzB,EAAuCC,YAAvC;AAAA;AAAA,2CAAlB;AACA,eAAKT,UAAL,CAAgBe,SAAhB,CAA0B,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAA1B;AACA,eAAKjB,UAAL,CAAgBO,IAAhB,CAAqBW,EAArB,CAAwB,QAAxB,EAAkC,KAAKC,QAAvC,EAAiD,IAAjD;AACA,eAAKlB,IAAL,GAAY,KAAKM,IAAL,CAAUC,cAAV,CAAyB,MAAzB,CAAZ;AACA,eAAKV,SAAL,CAAeS,IAAf,CAAoBW,EAApB,CAAuBnD,MAAM,CAACqD,SAAP,CAAiBC,KAAxC,EAA+C,KAAKC,QAApD,EAA8D,IAA9D;AACA,eAAKvB,MAAL,CAAYQ,IAAZ,CAAiBW,EAAjB,CAAoBnD,MAAM,CAACqD,SAAP,CAAiBC,KAArC,EAA4C,KAAKE,KAAjD,EAAwD,IAAxD;AAGA,eAAKC,OAAL,GAAe,IAAf;AACA,gBAAMlB,MAAN;AACH;;AAEKmB,QAAAA,IAAI,CAACC,IAAD,EAAqB;AAAA;;AAAA;AAC3B,gBAAI,CAAC,KAAI,CAACF,OAAV,EAAmB,MAAM,KAAI,CAACG,OAAX;AAEnB,gBAAIC,MAAM,GAAG,EAAb;AACA,YAAA,KAAI,CAAClC,EAAL,CAAQmB,MAAR,GAAiBe,MAAM,GAAG,EAA1B;AACA,gBAAIC,KAAK,GAAGH,IAAI,CAACI,KAAjB;AACA,gBAAIC,OAAO,GAAG,CAAd;AACA,gBAAIC,OAAe,GAAG;AAAA;AAAA,kCAAOC,qBAAP,CAA6BL,MAA7B,CAAtB;AACA,YAAA,KAAI,CAAChC,WAAL,CAAiBiB,MAAjB,GAA0BkB,OAAO,GAAG,GAApC;AACA,YAAA,KAAI,CAAClC,WAAL,CAAiBgB,MAAjB,GAA0BmB,OAAO,GAAG,EAApC;AACA,YAAA,KAAI,CAACrC,MAAL,CAAYuC,QAAZ,GAAwBH,OAAO,GAAGC,OAAlC;AAGA,gBAAIG,OAAwB,GAAG;AAAA;AAAA,kCAAOC,cAAP,CAAsBP,KAAtB,CAA/B;AACA,gBAAIQ,SAAS,GAAGF,OAAO,CAAC,CAAD,CAAP,CAAWE,SAAX,GAAuBF,OAAO,CAAC,CAAD,CAAP,CAAWE,SAAlC,GAA6C,WAA7D;AACA,gBAAIC,YAAY,GAAGH,OAAO,CAAC,CAAD,CAAP,CAAWG,YAAX,GAA0BH,OAAO,CAAC,CAAD,CAAP,CAAWG,YAArC,GAAmD,MAAtE;AACA,gBAAIC,SAAS,GAAGJ,OAAO,CAAC,CAAD,CAAP,CAAWI,SAAX,GAAuBJ,OAAO,CAAC,CAAD,CAAP,CAAWI,SAAlC,GAA6C,gBAA7D;AAEA;AAAA;AAAA,kCAAOC,YAAP,CAAoB,eAAeH,SAAf,GAA4B,cAAhD,EAA+DlE,WAA/D,EAA4EsE,GAAG,IAAE;AAC7E,cAAA,KAAI,CAACnD,EAAL,CAAQoD,WAAR,GAAsBD,GAAtB;AACH,aAFD;AAIA;AAAA;AAAA,kCAAOD,YAAP,CAAoB,wBAAwBF,YAAxB,GAAwC,cAA5D,EAA2EnE,WAA3E,EAAwFsE,GAAG,IAAE;AACzF,cAAA,KAAI,CAAClD,IAAL,CAAUmD,WAAV,GAAwBD,GAAxB;AACH,aAFD;AAIA;AAAA;AAAA,kCAAOD,YAAP,CAAoB,wBAAwBD,SAAxB,GAAqC,cAAzD,EAAwEpE,WAAxE,EAAqFsE,GAAG,IAAE;AACtF,cAAA,KAAI,CAACjD,KAAL,CAAWkD,WAAX,GAAyBD,GAAzB;AACH,aAFD;AAGA,gBAAIE,MAA+B,GAAG;AAAA;AAAA,kCAAOC,oBAAP,CAA4Bf,KAA5B,CAAtC;;AACA,iBAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,OAAO,CAACW,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,kBAAME,OAAO,GAAGZ,OAAO,CAACU,CAAD,CAAvB;;AACA,kBAAGE,OAAO,CAACC,KAAR,IAAiB,CAApB,EAAsB;AAClB,gBAAA,KAAI,CAAC9C,cAAL,GAAsB;AAAA;AAAA,sCAAO0C,oBAAP,CAA4BG,OAAO,CAACE,EAApC,CAAtB;AACH;;AAED,kBAAGF,OAAO,CAACC,KAAR,IAAiB,CAApB,EAAsB;AAClB,gBAAA,KAAI,CAAC7C,eAAL,GAAuB;AAAA;AAAA,sCAAOyC,oBAAP,CAA4BG,OAAO,CAACE,EAApC,CAAvB;AACH;AACJ;;AACD,YAAA,KAAI,CAAC/C,cAAL,CAAoBgD,IAApB,CAAyB,CAACC,CAAD,EAA0BC,CAA1B,KAAqD;AAC1E,qBAAOD,CAAC,CAACzD,EAAF,GAAO0D,CAAC,CAAC1D,EAAhB;AACH,aAFD;;AAGA,YAAA,KAAI,CAACS,eAAL,CAAqB+C,IAArB,CAA0B,CAACC,CAAD,EAA0BC,CAA1B,KAAqD;AAC3E,qBAAOD,CAAC,CAACzD,EAAF,GAAO0D,CAAC,CAAC1D,EAAhB;AACH,aAFD;;AAGA,YAAA,KAAI,CAACM,UAAL,CAAgBqD,WAAhB,CAA4B,KAAI,CAACnD,cAAjC;AA9C2B;AAgD9B;;AAEOc,QAAAA,UAAU,CAACf,IAAD,EAAayB,IAAb,EAA2C4B,KAA3C,EAAyD;AACvE,cAAIjD,cAAc,GAAG,CAArB;;AACA,cAAGiD,KAAK,GAAG,KAAKlD,SAAhB,EAA0B;AACtBC,YAAAA,cAAc,GAAGkD,IAAI,CAACC,IAAL,CAAU,CAACF,KAAK,GAAG,CAAT,IAAc,EAAxB,IAA8B,EAA/C;AACH,WAFD,MAEK;AACDjD,YAAAA,cAAc,GAAGkD,IAAI,CAACC,IAAL,CAAU,CAACF,KAAK,GAAG,CAAT,IAAc,EAAxB,IAA8B,EAA/C;AACH;;AACD,cAAGjD,cAAc,IAAI,KAAKA,cAA1B,EAAyC;AACrC,iBAAKA,cAAL,GAAsBA,cAAtB;AACA,gBAAIoD,cAAc,GAAG,KAAKpD,cAAL,IAAuB,KAAKH,cAAL,CAAoB4C,MAA3C,GAAoD,KAAKzC,cAAL,GAAsB,CAA1E,GAA8E,KAAKH,cAAL,CAAoB4C,MAApB,GAA6B,CAAhI;AACA,iBAAKY,cAAL,CAAoB,KAAKzD,IAAzB,EAA+B,KAAKC,cAAL,CAAoBuD,cAApB,CAA/B,EAAoEA,cAApE;AACH;;AACD,eAAKrD,SAAL,GAAkBkD,KAAlB;AAEA,cAAIK,EAAE,GAAG1D,IAAI,CAACO,cAAL,CAAoB,IAApB,EAA0BC,YAA1B,CAAuCzC,KAAvC,CAAT;AACA,cAAI4F,SAAS,GAAG3D,IAAI,CAACO,cAAL,CAAoB,MAApB,CAAhB;AACA,cAAIqD,YAAY,GAAG5D,IAAI,CAACS,cAAL,CAAoB,eAApB,CAAnB;AACA,cAAIoD,YAAY,GAAG7D,IAAI,CAACS,cAAL,CAAoB,eAApB,CAAnB;AACA,cAAIqD,SAAS,GAAG9D,IAAI,CAACS,cAAL,CAAoB,cAApB,CAAhB;AAEAiD,UAAAA,EAAE,CAAC9C,MAAH,GAAY,QAAQa,IAAI,CAAChC,EAAzB;AACA,cAAIsE,WAAW,GAAG;AAAA;AAAA,oCAASC,aAAT,CAAuBvC,IAAI,CAACwC,UAA5B,EAAwCxC,IAAI,CAACyC,QAA7C,EAAuDzC,IAAI,CAAC0C,SAA5D,CAAlB;AACA,eAAKC,OAAL,CAAaT,SAAb,EAAwBI,WAAW,CAAC,CAAD,CAAnC,EAAwC,CAAxC;AAEA,cAAIM,UAAU,GAAG,KAAKnE,eAAL,CAAqBmD,KAArB,CAAjB;AACA,cAAIiB,WAAW,GAAGD,UAAU,CAACJ,UAAX,CAAsBM,OAAtB,CAA8B;AAAA;AAAA,sCAAUC,UAAxC,CAAlB;AACAZ,UAAAA,YAAY,CAACa,MAAb,GAAsBH,WAAW,IAAI,CAAC,CAAtC;AACAT,UAAAA,YAAY,CAACY,MAAb,GAAsBH,WAAW,IAAI,CAAC,CAAtC;AACAR,UAAAA,SAAS,CAACW,MAAV,GAAmBH,WAAW,IAAI,CAAC,CAAnC;;AACA,cAAGA,WAAW,IAAI,CAAC,CAAnB,EAAqB;AACjB,gBAAII,kBAAkB,GAAG;AAAA;AAAA,sCAASV,aAAT,CAAuBK,UAAU,CAACJ,UAAlC,EAA8CI,UAAU,CAACH,QAAzD,EAAmEG,UAAU,CAACF,SAA9E,CAAzB;AACA,iBAAKC,OAAL,CAAaR,YAAb,EAA2Bc,kBAAkB,CAAC,CAAD,CAA7C,EAAkD,CAAlD;;AACA,gBAAIA,kBAAkB,CAAC,CAAD,CAAtB,EAA0B;AACtB,mBAAKN,OAAL,CAAaP,YAAb,EAA2Ba,kBAAkB,CAAC,CAAD,CAA7C,EAAkD,CAAlD;AACAb,cAAAA,YAAY,CAACY,MAAb,GAAsB,IAAtB;AACH,aAHD,MAGK;AACDZ,cAAAA,YAAY,CAACY,MAAb,GAAsB,KAAtB;AACH;AACJ,WATD,MASK;AACD,gBAAIE,QAAQ,GAAG;AAAA;AAAA,kCAAOC,oBAAP,CAA4BP,UAAU,CAACH,QAAX,CAAoBI,WAApB,CAA5B,CAAf;AACA,gBAAIO,SAAiC,GAAG,IAAI;AAAA;AAAA,gCAAMC,IAAN,CAAWC,UAAf,EAAxC;AACAF,YAAAA,SAAS,CAACG,MAAV,GAAmBL,QAAQ,CAACM,MAA5B;AACAJ,YAAAA,SAAS,CAACK,SAAV,GAAsB,EAAtB;AACAL,YAAAA,SAAS,CAACM,EAAV,GAAe,EAAf;AACAN,YAAAA,SAAS,CAACO,GAAV,GAAgB,CAAhB;AACAP,YAAAA,SAAS,CAACQ,KAAV,GAAkB,CAAlB;AACAR,YAAAA,SAAS,CAACS,cAAV,GAA2B,KAA3B;AACAT,YAAAA,SAAS,CAACU,aAAV,GAA0B,CAA1B;AACAV,YAAAA,SAAS,CAACW,OAAV,GAAoBb,QAAQ,CAACc,WAA7B;AACAZ,YAAAA,SAAS,CAACa,OAAV,GAAoB,CAApB;AACAb,YAAAA,SAAS,CAACc,QAAV,GAAqB,CAArB;AACA,iBAAKC,OAAL,CAAa9B,SAAb,EAAwBe,SAAxB,EAAmC,CAAnC;AACH;AACJ;;AAEOT,QAAAA,OAAO,CAACpE,IAAD,EAAa6F,MAAb,EAAwCC,QAAxC,EAAwD;AACnE,cAAIC,SAAS,GAAG/F,IAAI,CAACO,cAAL,CAAoB,MAApB,CAAhB;AACA,cAAIyF,IAAI,GAAGhG,IAAI,CAACO,cAAL,CAAoB,MAApB,EAA4BC,YAA5B,CAAyCvC,MAAzC,CAAX;AACA,cAAIgI,SAAS,GAAGjG,IAAI,CAACO,cAAL,CAAoB,MAApB,EAA4BC,YAA5B,CAAyCrC,SAAzC,CAAhB;AACA,cAAI+H,MAAM,GAAGlG,IAAI,CAACO,cAAL,CAAoB,QAApB,CAAb;AACA,cAAI4F,IAAI,GAAGnG,IAAI,CAACO,cAAL,CAAoB,MAApB,CAAX;AAEA,cAAI6F,OAAO,GAAGL,SAAS,CAACvF,YAAV;AAAA;AAAA,qCAAmCuF,SAAS,CAACrF,YAAV;AAAA;AAAA,iCAAjD;AACA0F,UAAAA,OAAO,CAACC,QAAR,CAAiBR,MAAjB;AACAC,UAAAA,QAAQ,GAAG,CAAX;;AACA,cAAIQ,MAAM,GAAGR,QAAQ,GAAG,SAAH,GAAe,SAApC;;AACAE,UAAAA,IAAI,CAACO,KAAL,CAAWC,OAAX,CAAmBF,MAAnB;;AACA,cAAIG,QAAQ,GAAGX,QAAQ,GAAG,GAAH,GAAS,GAAhC;;AACAG,UAAAA,SAAS,CAACS,OAAV,GAAoBD,QAApB;AACAP,UAAAA,MAAM,CAACzB,MAAP,GAAgBqB,QAAQ,GAAG,IAAH,GAAU,KAAlC;;AACA,cAAGK,IAAH,EAAQ;AACJA,YAAAA,IAAI,CAAC1B,MAAL,GAAcqB,QAAQ,GAAG,IAAH,GAAU,KAAhC;AACH;AACJ;;AAEOF,QAAAA,OAAO,CAAC5F,IAAD,EAAa6F,MAAb,EAA6CC,QAA7C,EAA6D;AACxE,cAAIa,IAAI,GAAG3G,IAAI,CAACO,cAAL,CAAoB,OAApB,CAAX;AACA,cAAIyF,IAAI,GAAGhG,IAAI,CAACO,cAAL,CAAoB,MAApB,EAA4BC,YAA5B,CAAyCvC,MAAzC,CAAX;AACA,cAAIgI,SAAS,GAAGjG,IAAI,CAACO,cAAL,CAAoB,MAApB,EAA4BC,YAA5B,CAAyCrC,SAAzC,CAAhB;AACA,cAAI+H,MAAM,GAAGlG,IAAI,CAACO,cAAL,CAAoB,QAApB,CAAb;AACA,cAAI4F,IAAI,GAAGnG,IAAI,CAACO,cAAL,CAAoB,MAApB,CAAX;AAEA,cAAIqG,KAAK,GAAGD,IAAI,CAACnG,YAAL;AAAA;AAAA,+BAA2BmG,IAAI,CAACjG,YAAL;AAAA;AAAA,2BAAvC;AACAkG,UAAAA,KAAK,CAACC,OAAN,CAAchB,MAAd;AAEAC,UAAAA,QAAQ,GAAG,CAAX;;AACA,cAAIQ,MAAM,GAAGR,QAAQ,GAAG,SAAH,GAAe,SAApC;;AACAE,UAAAA,IAAI,CAACO,KAAL,CAAWC,OAAX,CAAmBF,MAAnB;;AACA,cAAIG,QAAQ,GAAGX,QAAQ,GAAG,GAAH,GAAS,GAAhC;;AACAG,UAAAA,SAAS,CAACS,OAAV,GAAoBD,QAApB;AACAP,UAAAA,MAAM,CAACzB,MAAP,GAAgBqB,QAAQ,GAAG,IAAH,GAAU,KAAlC;AACAK,UAAAA,IAAI,CAAC1B,MAAL,GAAcqB,QAAQ,GAAG,IAAH,GAAU,KAAhC;AACH;;AAEOrC,QAAAA,cAAc,CAACzD,IAAD,EAAayB,IAAb,EAA2C4B,KAA3C,EAAyD;AAC3E,cAAIK,EAAE,GAAG1D,IAAI,CAACO,cAAL,CAAoB,IAApB,EAA0BC,YAA1B,CAAuCzC,KAAvC,CAAT;AACA,cAAI4F,SAAS,GAAG3D,IAAI,CAACO,cAAL,CAAoB,MAApB,CAAhB;AACA,cAAIqD,YAAY,GAAG5D,IAAI,CAACS,cAAL,CAAoB,eAApB,CAAnB;AACA,cAAIoD,YAAY,GAAG7D,IAAI,CAACS,cAAL,CAAoB,eAApB,CAAnB;AACA,cAAIqD,SAAS,GAAG9D,IAAI,CAACS,cAAL,CAAoB,cAApB,CAAhB;AAEAiD,UAAAA,EAAE,CAAC9C,MAAH,GAAY,QAAQa,IAAI,CAAChC,EAAzB;AACA,cAAIsE,WAAW,GAAG;AAAA;AAAA,oCAASC,aAAT,CAAuBvC,IAAI,CAACwC,UAA5B,EAAwCxC,IAAI,CAACyC,QAA7C,EAAuDzC,IAAI,CAAC0C,SAA5D,CAAlB;AACA,eAAKC,OAAL,CAAaT,SAAb,EAAwBI,WAAW,CAAC,CAAD,CAAnC,EAAwC,CAAxC;AAEA,cAAIM,UAAU,GAAG,KAAKnE,eAAL,CAAqBmD,KAArB,CAAjB;AACA,cAAIiB,WAAW,GAAGD,UAAU,CAACJ,UAAX,CAAsBM,OAAtB,CAA8B;AAAA;AAAA,sCAAUC,UAAxC,CAAlB;AACAZ,UAAAA,YAAY,CAACa,MAAb,GAAsBH,WAAW,IAAI,CAAC,CAAtC;AACAT,UAAAA,YAAY,CAACY,MAAb,GAAsBH,WAAW,IAAI,CAAC,CAAtC;AACAR,UAAAA,SAAS,CAACW,MAAV,GAAmBH,WAAW,IAAI,CAAC,CAAnC;;AACA,cAAGA,WAAW,IAAI,CAAC,CAAnB,EAAqB;AACjB,gBAAII,kBAAkB,GAAG;AAAA;AAAA,sCAASV,aAAT,CAAuBK,UAAU,CAACJ,UAAlC,EAA8CI,UAAU,CAACH,QAAzD,EAAmEG,UAAU,CAACF,SAA9E,CAAzB;AACA,iBAAKC,OAAL,CAAaR,YAAb,EAA2Bc,kBAAkB,CAAC,CAAD,CAA7C,EAAkD,CAAlD;;AACA,gBAAIA,kBAAkB,CAAC,CAAD,CAAtB,EAA0B;AACtB,mBAAKN,OAAL,CAAaP,YAAb,EAA2Ba,kBAAkB,CAAC,CAAD,CAA7C,EAAkD,CAAlD;AACAb,cAAAA,YAAY,CAACY,MAAb,GAAsB,IAAtB;AACH,aAHD,MAGK;AACDZ,cAAAA,YAAY,CAACY,MAAb,GAAsB,KAAtB;AACH;AACJ,WATD,MASK;AACD,gBAAIE,QAAQ,GAAG;AAAA;AAAA,kCAAOC,oBAAP,CAA4BP,UAAU,CAACH,QAAX,CAAoBI,WAApB,CAA5B,CAAf;AACA,gBAAIO,SAAiC,GAAG,IAAI;AAAA;AAAA,gCAAMC,IAAN,CAAWC,UAAf,EAAxC;AACAF,YAAAA,SAAS,CAACG,MAAV,GAAmBL,QAAQ,CAACM,MAA5B;AACAJ,YAAAA,SAAS,CAACK,SAAV,GAAsB,EAAtB;AACAL,YAAAA,SAAS,CAACM,EAAV,GAAe,EAAf;AACAN,YAAAA,SAAS,CAACO,GAAV,GAAgB,CAAhB;AACAP,YAAAA,SAAS,CAACQ,KAAV,GAAkB,CAAlB;AACAR,YAAAA,SAAS,CAACS,cAAV,GAA2B,KAA3B;AACAT,YAAAA,SAAS,CAACU,aAAV,GAA0B,CAA1B;AACAV,YAAAA,SAAS,CAACW,OAAV,GAAoBb,QAAQ,CAACc,WAA7B;AACAZ,YAAAA,SAAS,CAACa,OAAV,GAAoB,CAApB;AACAb,YAAAA,SAAS,CAACc,QAAV,GAAqB,CAArB;AACA,iBAAKC,OAAL,CAAa9B,SAAb,EAAwBe,SAAxB,EAAmC,CAAnC;AACH;AACJ;;AAEO3D,QAAAA,QAAQ,CAACmC,KAAD,EAAgBrD,IAAhB,EAA4ByB,IAA5B,EAAsC;AAClDqF,UAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH;;AAIOzF,QAAAA,KAAK,GAAE;AACX;AAAA;AAAA,oDAAiBE,IAAjB;AAEH;;AAEOH,QAAAA,QAAQ,GAAE,CAEjB;;AAtPwC,O","sourcesContent":["import { Button, Color, Component, Label, Node, ProgressBar, Sprite, SpriteFrame, UIOpacity, _decorator, path } from \"cc\";\r\nimport { AsyncComponent } from \"../common/AsyncComponent\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { CfgMgr, ItemType, StdEquityCard, StdSeaGatepass, StdSeaGatepassLv, StdSeaGatepassLvReward, ThingType } from \"../../manager/CfgMgr\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\nimport { BagItem } from \"../bag/BagItem\";\r\nimport proto from \"../../net/Protocol\";\r\nimport { ItemUtil } from \"../../utils/ItemUtils\";\r\nimport { GatePassBuyPanel } from \"./GatePassBuyPanel\";\r\nimport { Card } from \"../cards/Card\";\r\nimport { SpriteLabel } from \"../../component/SpriteLabel\";\r\n\r\nconst { ccclass, property, disallowMultiple, requireComponent } = _decorator;\r\n\r\n@ccclass('GatePass')\r\n@disallowMultiple(true)\r\nexport class GatePass extends AsyncComponent {\r\n    private bg: Sprite;\r\n    private icon: Sprite;\r\n    private title: Sprite;\r\n    private sesson_time:Label;\r\n    private Lv:SpriteLabel;\r\n    private proBar:ProgressBar\r\n    private curProgress: Label;\r\n    private allProgress: Label;\r\n    private oneKeyBtn:Button;\r\n    private buyBtn:Button;\r\n    private ScrollView:AutoScroller;\r\n    private item:Node\r\n\r\n\r\n\r\n    private baseRewardList:StdSeaGatepassLvReward[]\r\n    private heighRewardList:StdSeaGatepassLvReward[]\r\n\r\n    private old_index = 0;\r\n    private cur_show_index = 0;\r\n    protected onLoad(): void {\r\n        this.bg = this.node.getChildByName(\"bg\").getComponent(Sprite);\r\n        this.icon = this.node.getChildByName(\"icon\").getComponent(Sprite);\r\n        this.title = this.node.getChildByName(\"title\").getComponent(Sprite);\r\n        this.Lv = this.node.getChildByPath(\"lvBg/lv\").addComponent(SpriteLabel)\r\n        this.Lv.font = \"sheets/numberImg/num2\";\r\n        this.Lv.string = \"0\";\r\n        this.Lv.spacingX = -5;\r\n        this.sesson_time = this.node.getChildByPath(\"sesson/sesson_time\").getComponent(Label);\r\n        this.proBar = this.node.getChildByName(\"proBar\").getComponent(ProgressBar);\r\n        this.curProgress = this.node.getChildByPath(\"expNode/curProgress\").getComponent(Label);\r\n        this.allProgress = this.node.getChildByPath(\"expNode/allProgress\").getComponent(Label);\r\n        this.oneKeyBtn = this.node.getChildByName(\"oneKeyBtn\").getComponent(Button);\r\n        this.buyBtn = this.node.getChildByName(\"buyBtn\").getComponent(Button);\r\n        this.ScrollView = this.node.getChildByName(\"ScrollView\").getComponent(AutoScroller);\r\n        this.ScrollView.SetHandle(this.updateItem.bind(this));\r\n        this.ScrollView.node.on('select', this.onSelect, this);\r\n        this.item = this.node.getChildByName(\"item\");\r\n        this.oneKeyBtn.node.on(Button.EventType.CLICK, this.onOneKey, this)\r\n        this.buyBtn.node.on(Button.EventType.CLICK, this.onBuy, this)\r\n\r\n\r\n        this.hasLoad = true;   \r\n        super.onLoad();\r\n    }\r\n\r\n    async Show(data:StdEquityCard) {\r\n        if (!this.hasLoad) await this.loadSub;\r\n    \r\n        let cur_lv = 21;\r\n        this.Lv.string = cur_lv + \"\";\r\n        let seaid = data.SeaId;\r\n        let cur_exp = 0;\r\n        let max_exp: number = CfgMgr.getSeaGatepassNextExp(cur_lv)\r\n        this.curProgress.string = cur_exp + \"/\";\r\n        this.allProgress.string = max_exp + \"\";\r\n        this.proBar.progress =  cur_exp / max_exp;\r\n       \r\n\r\n        let seapass:StdSeaGatepass[] = CfgMgr.getSeaGatepass(seaid);\r\n        let BgTexture = seapass[0].BgTexture ? seapass[0].BgTexture: \"rightsBg1\"\r\n        let BigPrizeIcon = seapass[0].BigPrizeIcon ? seapass[0].BigPrizeIcon: \"icon\"\r\n        let TitleIcon = seapass[0].TitleIcon ? seapass[0].TitleIcon: \"nameIcon_10001\"\r\n\r\n        ResMgr.LoadResAbSub(\"sheets/bg/\" + BgTexture +  \"/spriteFrame\",SpriteFrame, res=>{\r\n            this.bg.spriteFrame = res;\r\n        })\r\n\r\n        ResMgr.LoadResAbSub(\"sheets/rights/icon/\" + BigPrizeIcon +  \"/spriteFrame\",SpriteFrame, res=>{\r\n            this.icon.spriteFrame = res;\r\n        })\r\n\r\n        ResMgr.LoadResAbSub(\"sheets/rights/icon/\" + TitleIcon +  \"/spriteFrame\",SpriteFrame, res=>{\r\n            this.title.spriteFrame = res;\r\n        })\r\n        let lv_cfg:StdSeaGatepassLvReward[] = CfgMgr.getSeaGatepassReward(seaid);\r\n        for (let i = 0; i < seapass.length; i++) {\r\n            const element = seapass[i];\r\n            if(element.Grate == 1){\r\n                this.baseRewardList = CfgMgr.getSeaGatepassReward(element.ID)\r\n            }\r\n\r\n            if(element.Grate == 2){\r\n                this.heighRewardList = CfgMgr.getSeaGatepassReward(element.ID) \r\n            }  \r\n        }\r\n        this.baseRewardList.sort((a:StdSeaGatepassLvReward,b:StdSeaGatepassLvReward)=>{\r\n            return a.Lv - b.Lv\r\n        })\r\n        this.heighRewardList.sort((a:StdSeaGatepassLvReward,b:StdSeaGatepassLvReward)=>{\r\n            return a.Lv - b.Lv\r\n        })\r\n        this.ScrollView.UpdateDatas(this.baseRewardList)\r\n       \r\n    }\r\n\r\n    private updateItem(item: Node, data: StdSeaGatepassLvReward, index: number){\r\n        let cur_show_index = 0\r\n        if(index > this.old_index){\r\n            cur_show_index = Math.ceil((index + 1) / 10) * 10\r\n        }else{\r\n            cur_show_index = Math.ceil((index + 8) / 10) * 10\r\n        }\r\n        if(cur_show_index != this.cur_show_index){\r\n            this.cur_show_index = cur_show_index\r\n            let cur_data_index = this.cur_show_index <= this.baseRewardList.length ? this.cur_show_index - 1 : this.baseRewardList.length - 1\r\n            this.setStageReward(this.item, this.baseRewardList[cur_data_index], cur_data_index)\r\n        }\r\n        this.old_index  = index;\r\n\r\n        let lv = item.getChildByName(\"lv\").getComponent(Label);\r\n        let base_node = item.getChildByName(\"free\");\r\n        let height_node1 = item.getChildByPath(\"no_free/Node1\");\r\n        let height_node2 = item.getChildByPath(\"no_free/Node2\");\r\n        let card_node = item.getChildByPath(\"no_free/card\");\r\n\r\n        lv.string = \"Lv.\" + data.Lv; \r\n        let reward_lsit = ItemUtil.GetSThingList(data.RewardType, data.RewardID, data.RewardNum) \r\n        this.setItem(base_node, reward_lsit[0], 0)\r\n\r\n        let heigh_data = this.heighRewardList[index];\r\n        let is_has_card = heigh_data.RewardType.indexOf(ThingType.battlecard)\r\n        height_node1.active = is_has_card == -1;\r\n        height_node2.active = is_has_card == -1;\r\n        card_node.active = is_has_card != -1;\r\n        if(is_has_card == -1){\r\n            let height_reward_lsit = ItemUtil.GetSThingList(heigh_data.RewardType, heigh_data.RewardID, heigh_data.RewardNum)\r\n            this.setItem(height_node1, height_reward_lsit[0], 0);\r\n            if( height_reward_lsit[1]){\r\n                this.setItem(height_node2, height_reward_lsit[1], 0)\r\n                height_node2.active = true\r\n            }else{\r\n                height_node2.active = false\r\n            }\r\n        }else{\r\n            let card_cfg = CfgMgr.GetBattleCardDeliver(heigh_data.RewardID[is_has_card])\r\n            let card_data: proto.base.IBattleCard = new proto.base.BattleCard();\r\n            card_data.cardId = card_cfg.CardID;\r\n            card_data.createdAt = \"\";\r\n            card_data.id = \"\";\r\n            card_data.exp = 0;\r\n            card_data.level = 1;\r\n            card_data.nftLockExpires = false;\r\n            card_data.ownershipType = 0;\r\n            card_data.quality = card_cfg.CardQuality;\r\n            card_data.tradeCd = 0;\r\n            card_data.updateId = 0;\r\n            this.setCard(card_node, card_data, 0);\r\n        }\r\n    }\r\n\r\n    private setItem(item: Node, reward: proto.base.IThing, is_state:number){\r\n        let base_item = item.getChildByName(\"item\");\r\n        let mask = item.getChildByName(\"mask\").getComponent(Sprite);\r\n        let mask_opac = item.getChildByName(\"mask\").getComponent(UIOpacity);\r\n        let select = item.getChildByName(\"select\");\r\n        let lock = item.getChildByName(\"lock\");\r\n\r\n        let bagItem = base_item.getComponent(BagItem) || base_item.addComponent(BagItem);  \r\n        bagItem.setThing(reward);  \r\n        is_state = 0\r\n        let _color = is_state ? \"#EDF5FE\" : \"#000000\" \r\n        mask.color.fromHEX(_color)\r\n        let _opacity = is_state ? 255 : 179 \r\n        mask_opac.opacity = _opacity\r\n        select.active = is_state ? true : false;\r\n        if(lock){\r\n            lock.active = is_state ? true : false;\r\n        }\r\n    }\r\n\r\n    private setCard(item: Node, reward: proto.base.IBattleCard, is_state:number){\r\n        let card = item.getChildByName(\"Cards\");\r\n        let mask = item.getChildByName(\"mask\").getComponent(Sprite);\r\n        let mask_opac = item.getChildByName(\"mask\").getComponent(UIOpacity);\r\n        let select = item.getChildByName(\"select\");\r\n        let lock = item.getChildByName(\"lock\");\r\n\r\n        let cards = card.getComponent(Card) || card.addComponent(Card);  \r\n        cards.SetData(reward);\r\n\r\n        is_state = 0\r\n        let _color = is_state ? \"#EDF5FE\" : \"#000000\" \r\n        mask.color.fromHEX(_color)\r\n        let _opacity = is_state ? 255 : 179 \r\n        mask_opac.opacity = _opacity\r\n        select.active = is_state ? true : false;\r\n        lock.active = is_state ? true : false;\r\n    }\r\n\r\n    private setStageReward(item: Node, data: StdSeaGatepassLvReward, index: number){\r\n        let lv = item.getChildByName(\"lv\").getComponent(Label);\r\n        let base_node = item.getChildByName(\"free\");\r\n        let height_node1 = item.getChildByPath(\"no_free/Node1\");\r\n        let height_node2 = item.getChildByPath(\"no_free/Node2\");\r\n        let card_node = item.getChildByPath(\"no_free/card\");\r\n\r\n        lv.string = \"Lv.\" + data.Lv; \r\n        let reward_lsit = ItemUtil.GetSThingList(data.RewardType, data.RewardID, data.RewardNum) \r\n        this.setItem(base_node, reward_lsit[0], 0)\r\n\r\n        let heigh_data = this.heighRewardList[index];\r\n        let is_has_card = heigh_data.RewardType.indexOf(ThingType.battlecard)\r\n        height_node1.active = is_has_card == -1;\r\n        height_node2.active = is_has_card == -1;\r\n        card_node.active = is_has_card != -1;\r\n        if(is_has_card == -1){\r\n            let height_reward_lsit = ItemUtil.GetSThingList(heigh_data.RewardType, heigh_data.RewardID, heigh_data.RewardNum)\r\n            this.setItem(height_node1, height_reward_lsit[0], 0);\r\n            if( height_reward_lsit[1]){\r\n                this.setItem(height_node2, height_reward_lsit[1], 0)\r\n                height_node2.active = true\r\n            }else{\r\n                height_node2.active = false\r\n            }\r\n        }else{\r\n            let card_cfg = CfgMgr.GetBattleCardDeliver(heigh_data.RewardID[is_has_card])\r\n            let card_data: proto.base.IBattleCard = new proto.base.BattleCard();\r\n            card_data.cardId = card_cfg.CardID;\r\n            card_data.createdAt = \"\";\r\n            card_data.id = \"\";\r\n            card_data.exp = 0;\r\n            card_data.level = 1;\r\n            card_data.nftLockExpires = false;\r\n            card_data.ownershipType = 0;\r\n            card_data.quality = card_cfg.CardQuality;\r\n            card_data.tradeCd = 0;\r\n            card_data.updateId = 0;\r\n            this.setCard(card_node, card_data, 0);\r\n        }\r\n    }\r\n\r\n    private onSelect(index: number, item: Node, data: any){\r\n        console.log(\"领奖\")\r\n    }\r\n\r\n\r\n\r\n    private onBuy(){\r\n        GatePassBuyPanel.Show();\r\n\r\n    }\r\n\r\n    private onOneKey(){\r\n\r\n    }\r\n\r\n\r\n}"]}