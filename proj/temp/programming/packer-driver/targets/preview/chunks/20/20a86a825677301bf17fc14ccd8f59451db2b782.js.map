{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/resources/bag/ComposePanel.ts"],"names":["Input","Label","Sprite","SpriteFrame","path","sp","Panel","PlayerData","RoleCardPower","Attr","CardQuality","CfgMgr","ItemSubType","JobName","FormatCardRoleAttr","ResMgr","folder_icon","folder_item","Tips","Logger","MsgTypeRet","MsgTypeSend","Session","EventMgr","Evt_Compose","formatNumber","SetLabelColor","CLICKLOCK","BeforeGameUtils","AudioMgr","Audio_GetReward","ComposePanel","prefab","level","body","targetName","quality","jobIcon","jobName","count","power","composeBtn","icon","collectAttrCont","collectAttrIcon","collectAttrValLab","Item","attrIconInfo","toHashMapObj","CollectEfficiency","WoodCollectEfficiency","WaterCollectEfficiency","RockCollectEfficiency","SeedCollectEfficiency","isClick","onLoad","CloseBy","find","Skeleton","on","EventType","TOUCH_END","onClickCompose","showByItemId","ItemID","Show","onShow","onCompose","onHide","off","flush","Getitem","SubType","shard","Hide","string","role","GetRole","ItemEffect1","Prefab","scale","Scale","node","setScale","skeletonData","LoadResAbSub","join","SkeletonData","setAnimation","Name","url","ItemEffect2","spriteFrame","PositionType","newPower","RoleType","GetItemCount","ItemEffect3","getComponent","grayscale","Items","Icon","active","attrList","attr","id","res","value","checkClick","PlayOnce","data","type","SynthesizeRoleRequest","item_id","role_type","Send","SynthesizeRoleRet","log","scheduleOnce"],"mappings":"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","sourcesContent":["import { Button, Component, EventTouch, Input, Label, Node, Sprite, SpriteFrame, Toggle, path, sp, tween } from \"cc\";\r\nimport { Panel } from \"../../GameRoot\";\r\nimport { BagItem } from \"./BagItem\";\r\nimport PlayerData, { CountPower, RoleCardPower} from \"../roleModule/PlayerData\"\r\nimport { Attr, CardQuality, CfgMgr, ItemSubType, ItemType, Job, JobName, StdCommonType, StdItem } from \"../../manager/CfgMgr\";\r\nimport { FormatCardRoleAttr } from \"../common/BaseUI\"\r\nimport { AttrSub, ConditionSub } from \"../common/AttrSub\";\r\nimport { ResMgr, folder_icon, folder_item } from \"../../manager/ResMgr\";\r\nimport { Tips } from \"../login/Tips\";\r\nimport Logger from \"../../utils/Logger\";\r\nimport { MsgTypeRet, MsgTypeSend } from \"../../MsgType\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { EventMgr, Evt_Compose } from \"../../manager/EventMgr\";\r\nimport { formatNumber, SetLabelColor } from \"../../utils/Utils\";\r\nimport { CLICKLOCK } from \"../common/Drcorator\";\r\nimport { BeforeGameUtils } from \"../../utils/BeforeGameUtils\";\r\nimport { AudioMgr, Audio_GetReward } from \"../../manager/AudioMgr\";\r\n\r\nexport class ComposePanel extends Panel {\r\n    protected prefab: string = \"prefabs/panel/bag/ComposePanel\";\r\n    private level: Label;\r\n    private body: sp.Skeleton;\r\n    private targetName: Label;\r\n    private quality: Sprite;\r\n    private jobIcon: Sprite;\r\n    private jobName: Label;\r\n    private count: Label;\r\n    private power: Label;\r\n    private composeBtn: Node;\r\n    private icon: Sprite;\r\n    private collectAttrCont:Node;\r\n    private collectAttrIcon:Sprite;\r\n    private collectAttrValLab:Label;\r\n    private Item: StdItem;\r\n    private attrIconInfo: { [key: string]: string } = BeforeGameUtils.toHashMapObj(\r\n        Attr.CollectEfficiency, \"quanneng\",\r\n        Attr.WoodCollectEfficiency, \"mucai\",\r\n        Attr.WaterCollectEfficiency, \"shui\",\r\n        Attr.RockCollectEfficiency, \"shitou\",\r\n        Attr.SeedCollectEfficiency, \"zhongzi\",\r\n    );\r\n    // private it\r\n    protected onLoad() {\r\n        this.CloseBy(\"Main/closeBtn\");\r\n        this.CloseBy(\"mask\");\r\n        this.level = this.find(`Main/level`, Label);\r\n        this.count = this.find(`Main/composeBtn/layout/value`, Label);\r\n        this.targetName = this.find(`Main/name`, Label);\r\n        this.body = this.find(`Main/body`, sp.Skeleton);\r\n        this.quality = this.find(`Main/quality`, Sprite);\r\n        this.jobIcon = this.find(`Main/jobLayout/jobIcon`, Sprite);\r\n        this.jobName = this.find(`Main/jobLayout/jobName`, Label);\r\n        this.power = this.find(`Main/power`, Label);\r\n        this.icon = this.find(`Main/composeBtn/layout/icon`, Sprite);\r\n        this.collectAttrCont = this.find(\"Main/collectAttrCont\");\r\n        this.collectAttrIcon = this.find(\"Main/collectAttrCont/icon\", Sprite);\r\n        this.collectAttrValLab = this.find(\"Main/collectAttrCont/attrLab\", Label);\r\n        this.composeBtn = this.find(`Main/composeBtn`);\r\n        \r\n        this.composeBtn.on(Input.EventType.TOUCH_END, this.onClickCompose, this);\r\n    }\r\n    public static showByItemId(ItemID: number) {\r\n        this.Show(ItemID);\r\n    }\r\n    protected onShow(): void {\r\n        EventMgr.on(Evt_Compose, this.onCompose, this);\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n        EventMgr.off(Evt_Compose);\r\n    }\r\n    public async flush(ItemID: number) {\r\n        this.Item = CfgMgr.Getitem(ItemID);\r\n        if (!this.Item || this.Item.SubType != ItemSubType.shard) {\r\n            this.Hide();\r\n            return Tips.Show(\"物品类型错误，没有该物品或者该物品不能合成！\");\r\n        }\r\n        this.level.string = `Lv.1`;\r\n        let role = CfgMgr.GetRole()[this.Item.ItemEffect1]\r\n        let prefab = role.Prefab;\r\n        let scale = role.Scale || 1;\r\n        this.body.node.setScale(0.3 * scale, 0.3 * scale);\r\n        this.body.skeletonData = await ResMgr.LoadResAbSub(path.join(\"spine/role\", prefab, prefab), sp.SkeletonData);\r\n        this.body.setAnimation(0, `Idle`, true);\r\n        this.targetName.string = `${role.Name}`;\r\n        let url = path.join(folder_icon + \"quality\", CardQuality[this.Item.ItemEffect2], \"spriteFrame\");\r\n        this.quality.spriteFrame = await ResMgr.LoadResAbSub(url, SpriteFrame);\r\n        this.jobIcon.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"pos\" + role.PositionType, \"spriteFrame\"), SpriteFrame);\r\n        this.jobName.string = `${JobName[role.PositionType]}`;\r\n        //let oldPower:number = CountPower(role.RoleType, 1);\r\n        let newPower:number = RoleCardPower(role.RoleType, this.Item.ItemEffect2);\r\n        this.power.string = formatNumber(newPower, 2);\r\n        this.count.string = `${PlayerData.GetItemCount(ItemID)}/${this.Item.ItemEffect3}`;\r\n        SetLabelColor(this.count, PlayerData.GetItemCount(ItemID), this.Item.ItemEffect3);\r\n        this.composeBtn.getComponent(Sprite).grayscale = PlayerData.GetItemCount(this.Item.Items) < this.Item.ItemEffect3;\r\n        this.icon.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_item, this.Item.Icon, \"spriteFrame\"), SpriteFrame);\r\n        this.collectAttrCont.active = false;\r\n        let attrList:AttrSub[] = FormatCardRoleAttr(role.RoleType, this.Item.ItemEffect2);\r\n        for (let attr of attrList) {\r\n            if(this.attrIconInfo[attr.id]){\r\n                this.collectAttrCont.active = true;\r\n                let url = path.join(folder_item, this.attrIconInfo[attr.id], \"spriteFrame\");\r\n                ResMgr.LoadResAbSub(url, SpriteFrame, res => {\r\n                    this.collectAttrIcon.spriteFrame = res;\r\n                });\r\n                this.collectAttrValLab.string = formatNumber(attr.value, 2);\r\n                break;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    @CLICKLOCK(1)\r\n    private onClickCompose() {\r\n        if (!this.checkClick) return;\r\n        if (PlayerData.GetItemCount(this.Item.Items) >= this.Item.ItemEffect3) {\r\n            AudioMgr.PlayOnce(Audio_GetReward);\r\n            let data = {\r\n                type: MsgTypeSend.SynthesizeRoleRequest,\r\n                data: {\r\n                    item_id: this.Item.Items,\r\n                    role_type: this.Item.ItemEffect1,\r\n                }\r\n            }\r\n            Session.Send(data, MsgTypeRet.SynthesizeRoleRet);\r\n        } else {\r\n            return Tips.Show(`碎片不足！`)\r\n        }\r\n    }\r\n\r\n    private onCompose(data) {\r\n        Logger.log(\"onCompose>>>\", data);\r\n        this.flush(this.Item.Items);\r\n        this.Hide();\r\n    }\r\n\r\n    private isClick = false;\r\n    private checkClick() {\r\n        if (this.isClick) {\r\n            Logger.log('Click too fast, please wait.');\r\n            return false;\r\n        }\r\n        this.isClick = true;\r\n        this.scheduleOnce(() => {\r\n            this.isClick = false\r\n        }, .5)\r\n        return true;\r\n    }\r\n}\r\n"]}