{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/battle/BattleDataMgr.ts"],"names":["BattleDataMgr","Battle_ShowSettlement","EventMgr","proto","DateUtils","LocalStorage","PlayerData","BattleRoomInstType","PanelDefine","FightData","CfgMgr","_creatRoomData","_roomData","_playerDatas","_terrains","_currentRound","_doubleData","_battlePackList","_playerA","Map","_curRoundRevealPlayerId","setCreatRoomData","roomData","cardBack","key","players","playerData","cardGroupData","deckAttr","stdCardBack","GetCardBackCfgById","cardBackId","cardBackName","icon1","playerId","setRoomDouble","roomId","data","getRoomDoubleNum","addCont","base","doubleCont","doubleData","doubleCount","Math","pow","getPlayerDoubleResidue","creatRoomData","addBattleData","packList","console","warn","analysisBattleData","getInstType","instId","str","split","type","RoomInstCard","RoomInstTerrain","RoomInstPlayer","log","packData","comp","changeDataCall","opType","BattleRoomOpOutputType","Out_NewRound","newRound","setBattleRoomData","gamePlayData","addBattlePackData","Out_CardDeckFrontToHandTail","cardDeckTopToHandTail","changeCardDeckFrontToHandTail","Out_WaitPlayerInput","waitPlayerInput","Out_WaitPlayerShow","waitPlayerShow","Out_Settlement","settlement","isGiveUp","leavePlayerId","emit","getPlayerId","Out_CardDataChange","cardDataChange","changeCardData","Out_DelToHand","delToHand","changeDelToHand","Out_CopyCard","copyCard","changeCopyCard","Out_HandToTerrain","handToTerrain","changeHandToTerrain","Out_HandToDrop","handToDrop","changeHandToDrop","Out_HandToDel","handToDel","changeHandToDel","Out_TerrainToDel","terrainToDel","changeTerrainToDel","Out_DropToHand","dropToHand","changeDropToHand","Out_TerrainToTerrain","terrainToTerrain","changeTerrainToTerrain","Out_DeckToDel","deckToDel","changeDeckToDel","Out_DeckToDrop","deckToDrop","changeDeckToDrop","Out_PlayerPower","playerPower","changePlayerPower","Out_RoundData","roundData","changeRoundData","Out_TerrainData","terrainData","Out_BattleRoomOpOutput_TerrainData","changeTerrainData","Out_CardTerrainState","cardTerrainState","changeCardTerrainState","curRoundRevealPlayerId","ownerPlayerId","Out_PlayerEnergy","playerEnergy","changePlayerEnergy","Out_AddCardToDeck","addCardToDeck","changeAddCardToDeck","Out_AddCardToHand","addCardToHand","changeAddCardToHand","Out_AddCardToTerrain","addCardToTerrain","changeAddCardToTerrain","Out_TerrainToDrop","terrainToDrop","changeTerrainToDrop","Out_Peek","peek","changePeek","Out_RoomDestroy","roomDestroy","Out_LockZone","lockZone","changeLockZone","Out_AddCard","addCard","changeAddCard","Out_Nullify","nullify","changeNullify","Out_HandToDeck","handToDeck","changeHandToDeck","Out_EffectSkill","effectSkill","applyBuff","Out_RetransmissionRound","retransmissionRound","round","inputData","BattleRoomOpOutput","create","touchInstId","inputPackData","BattleRoomOpOutput_WaitPlayerInput","timeout","inputComp","isPlayerInput","inputs","Out_RetransmissionSettlement","retransmissionSettlement","giveUp","error","battlePackData","curRound","battleOpData","changeDataCell","push","levelData","terrains","currentRound","addBattleLog","isReplay","set","viewPlayerId","myId","player","logDatas","GetObject","isAdd","logData","index","length","playerIds","playerDatas","playerList","createTime","ServerTime","SetObject","battlePackList","getFirstBattlePack","shift","terrainIdData","terrainIndexData","idx","getPlayerTerrainFormId","getPlayerData","terrain","getPlayerTerrainFormIdx","areaIdx","getPlayerTerrainDatas","setPlayerTerrainDatas","getPlayerTerrainTotalPow","getPlayerTerrainBasePow","cardTotalPower","getPlayerTerrainCardTotalPow","count","basePower","finalValue","isMult","cardData","cards","terrainState","BattleRoomInCardState","CardStateShow","cardMul","power","getPlayerTerrainCardPowerMul","isPlayerA","get","getEntityByInstId","k","all","deckCards","delCards","dropCards","handCards","card","i","t","selfInstId","getPlayerHandCards","setPlayerHandCards","getPlayerDropCard","getPlayerDelCard","getPlayerHandCard","getPlayerCardCost","getPlayerTerrainCard","cost","getPlayerCardPower","getPlayerCard","getPlayerDeckCard","getCard","playerIdA","playerIdB","getCardByInstId","find","value","undefined","getPlayerCardLocation","cardIdx","getPlayerAreaEmptyCardLocation","terrainCardMax","getPlayerAreaEmptyCardLocationByIdx","chekPersistentStateByInstId","buffType","traget","persistentState","state","getPersistentStateListByInstId","clearCurBattlePack","checkIsStopBattlePack","addCardToPlayerLocation","cardLocation","BattleRoomCardLocation","Hand","addPlayerHandCard","Terrain","addCardToTerrainByIdx","area","Deck","addPlayerDeckCard","Del","addPlayerDelCard","Drop","addPlayerDropCard","delPlayerLocationCard","delPlayerHandCard","delPlayerDeckCard","delPlayerDropCard","delPlayerDelCard","delTerrainCard","clearBattleData","clear","addCardToTerrainByInstId","toTerrainPlayerId","toTerrainInstId","powerData","terrainPower","resetTerrainData","resetTerrainCard","roundEnergy","energy","delCardFromTerrain","fromTerrainPlayerId","fromTerrainInstId","fromPlayerId","fromLocation","location","battleDataMgr","addRoundNum","resetPlayerEnergy","toInstId","stateValue","BattleRoomAttrValue","BaseAddMul","from","fromInstId","source","fromSkillId","toString","isMove","sourcePlayerId","sourceLocation","sourceInstId","Number","splice","tempCardData","isDel","result","num","roundMax","energys","OperateFailReason"],"mappings":"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","sourcesContent":["import { Battle_ShowSettlement, EventMgr } from \"../../manager/EventMgr\";\r\nimport { base } from \"../../net/proto/proto\";\r\nimport proto from \"../../net/Protocol\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport LocalStorage from \"../../utils/LocalStorage\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { BattleOpData, BattlePackData, BattleRoomInstType, CardLocation } from \"../player/PlayerStruct\";\r\nimport { PanelDefine } from \"../../PanelDefine\";\r\nimport { FightData } from \"../fight/FightData\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\n\r\n/**\r\n * 战斗数据管理\r\n */\r\nexport class BattleDataMgr {\r\n    //当前创建房间数据\r\n    private _creatRoomData: proto.base.IBattleRoomSummary;\r\n    //房间数据\r\n    private _roomData: proto.base.IBattleRoomLevelData;\r\n    //玩家数据\r\n    private _playerDatas: { [k: string]: proto.base.IBattleRoomPlayerData };\r\n    //地形列表\r\n    private _terrains: proto.base.IBattleRoomTerrainData[];\r\n    //当前回合\r\n    private _currentRound: number;\r\n    private _doubleData: { [k: string]: proto.base.IBattleRoomPlayerDataNotGamePlay }\r\n    //战斗数据包列表\r\n    private _battlePackList: BattleOpData[] = [];\r\n    //第一人称视觉玩家\r\n    private _playerA: Map<string, boolean> = new Map();\r\n    private _curRoundRevealPlayerId: string = \"\";\r\n    //设置创建的房间数据\r\n    public setCreatRoomData(roomData: proto.base.IBattleRoomSummary): void {\r\n        this._creatRoomData = roomData;\r\n        FightData.cardBack = {};\r\n        for (let key in this._creatRoomData.players) {\r\n            let playerData: proto.base.IBattleRoomSummaryPlayer = this._creatRoomData.players[key];\r\n            let cardGroupData: proto.base.IDeckAttrs = playerData.deckAttr;\r\n            let stdCardBack = CfgMgr.GetCardBackCfgById(cardGroupData?.cardBackId);\r\n            let cardBackName: string = stdCardBack ? stdCardBack.icon1 : \"bg_1\";\r\n            FightData.cardBack[playerData.playerId] = cardBackName;\r\n        }\r\n    }\r\n\r\n    //设置房间加倍数据\r\n    public setRoomDouble(roomId: string, data: { [k: string]: proto.base.IBattleRoomPlayerDataNotGamePlay }): void {\r\n        this._doubleData = data;\r\n    }\r\n    /**\r\n     * 获取当前加倍次数\r\n     * @returns \r\n     */\r\n    public getRoomDoubleNum(addCont: number = 0): number {\r\n        let base: number = 1;\r\n        let doubleCont: number = 0;\r\n        for (let key in this._doubleData) {\r\n            let doubleData: proto.base.IBattleRoomPlayerDataNotGamePlay = this._doubleData[key];\r\n            doubleCont += doubleData.doubleCount;\r\n        }\r\n        doubleCont += addCont;\r\n        return base * Math.pow(2, doubleCont);\r\n    }\r\n    /**获取玩家剩余可加倍次数 */\r\n    public getPlayerDoubleResidue(playerId: string): number {\r\n        let doubleData: proto.base.IBattleRoomPlayerDataNotGamePlay = this._doubleData[playerId];\r\n        return doubleData?.doubleCount || 0;\r\n    }\r\n\r\n    /**\r\n     * 获取创建的房间数据\r\n     */\r\n    public get creatRoomData(): proto.base.IBattleRoomSummary {\r\n        return this._creatRoomData;\r\n    }\r\n\r\n    /**\r\n     * 添加战斗数据\r\n     */\r\n    public addBattleData(roomId: string, packList: proto.base.IBattleRoomOpOutput[]): void {\r\n        if (!this._creatRoomData) {\r\n            console.warn(`未创建战斗房间`);\r\n            return;\r\n        } \r\n        if (this._creatRoomData.roomId != roomId) {\r\n            console.warn(`收到错误房间数据--->${roomId}当前房间----->${this._creatRoomData.roomId}`);\r\n            return;\r\n        }\r\n        for (let data of packList) {\r\n            this.analysisBattleData(roomId, data);\r\n        }\r\n    }\r\n\r\n    private getInstType(instId: string): BattleRoomInstType {\r\n        let str: string = instId.split(\":\")[0];\r\n        let type: BattleRoomInstType;\r\n        switch (str) {\r\n            case \"card\":\r\n                type = BattleRoomInstType.RoomInstCard;\r\n                break;\r\n            case \"terr\":\r\n                type = BattleRoomInstType.RoomInstTerrain;\r\n                break;\r\n            case \"player\":\r\n                type = BattleRoomInstType.RoomInstPlayer;\r\n                break;\r\n        }\r\n        return type\r\n    }\r\n    /**\r\n     * 解析战斗数据包\r\n     * @param data \r\n     */\r\n    private analysisBattleData(roomId: string, data: proto.base.IBattleRoomOpOutput): void {\r\n        console.log(\"战斗房间id-------->\" + this._creatRoomData.roomId + \"------------>\" + roomId)\r\n        let packData: any;\r\n        let comp: any;\r\n        let changeDataCall: (playerId: string, data: any) => void;\r\n        // console.dir(data);\r\n        switch (data.opType) {\r\n            //新的回合0\r\n            case proto.base.BattleRoomOpOutputType.Out_NewRound:\r\n                packData = data.newRound;\r\n                comp = PanelDefine.Out_NewRound;\r\n                this.setBattleRoomData(data.newRound.gamePlayData);\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //卡牌由卡组最前到手牌末尾1\r\n            case proto.base.BattleRoomOpOutputType.Out_CardDeckFrontToHandTail:\r\n                packData = data.cardDeckTopToHandTail;\r\n                comp = PanelDefine.Out_CardDeckFrontToHandTail;\r\n                changeDataCall = this.changeCardDeckFrontToHandTail;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //等待客户端玩家操作2\r\n            case proto.base.BattleRoomOpOutputType.Out_WaitPlayerInput:\r\n                packData = data.waitPlayerInput;\r\n                comp = PanelDefine.Out_WaitPlayerInput;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //等待客户端表现完毕3\r\n            case proto.base.BattleRoomOpOutputType.Out_WaitPlayerShow:\r\n                packData = data.waitPlayerShow;\r\n                comp = PanelDefine.Out_WaitPlayerShow;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //结算4\r\n            case proto.base.BattleRoomOpOutputType.Out_Settlement:\r\n                packData = data.settlement;\r\n                let isGiveUp: boolean = data.settlement.leavePlayerId && data.settlement.leavePlayerId != \"\";\r\n                if (isGiveUp) {\r\n                    EventMgr.emit(Battle_ShowSettlement, this._roomData.roomId, this.getPlayerId(true), data.settlement);\r\n                } else {\r\n                    comp = PanelDefine.Out_Settlement;\r\n                }\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //卡牌数据修改5\r\n            case proto.base.BattleRoomOpOutputType.Out_CardDataChange:\r\n                console.log(\"100002_Out_CardDataChange\", data);\r\n                packData = data.cardDataChange;\r\n                comp = PanelDefine.Out_CardDataChange;\r\n                changeDataCall = this.changeCardData;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //删除区域的卡回到手卡6\r\n            case proto.base.BattleRoomOpOutputType.Out_DelToHand:\r\n                packData = data.delToHand;\r\n                comp = PanelDefine.Out_DelToHand;\r\n                changeDataCall = this.changeDelToHand;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //复制一张卡7\r\n            case proto.base.BattleRoomOpOutputType.Out_CopyCard:\r\n                packData = data.copyCard;\r\n                comp = PanelDefine.Out_CopyCard;\r\n                changeDataCall = this.changeCopyCard;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //从手牌上场8\r\n            case proto.base.BattleRoomOpOutputType.Out_HandToTerrain:\r\n                packData = data.handToTerrain;\r\n                comp = PanelDefine.Out_HandToTerrain;\r\n                changeDataCall = this.changeHandToTerrain;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //从手牌区到弃卡区9\r\n            case proto.base.BattleRoomOpOutputType.Out_HandToDrop:\r\n                packData = data.handToDrop;\r\n                comp = PanelDefine.Out_HandToDrop;\r\n                changeDataCall = this.changeHandToDrop;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //从手卡区到删除区10\r\n            case proto.base.BattleRoomOpOutputType.Out_HandToDel:\r\n                packData = data.handToDel;\r\n                comp = PanelDefine.Out_HandToDel;\r\n                changeDataCall = this.changeHandToDel;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //从地形区域到删除区11\r\n            case proto.base.BattleRoomOpOutputType.Out_TerrainToDel:\r\n                packData = data.terrainToDel;\r\n                comp = PanelDefine.Out_TerrainToDel;\r\n                changeDataCall = this.changeTerrainToDel;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //从弃牌区到手牌12\r\n            case proto.base.BattleRoomOpOutputType.Out_DropToHand:\r\n                packData = data.dropToHand;\r\n                comp = PanelDefine.Out_DropToHand;\r\n                changeDataCall = this.changeDropToHand;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //区域上的卡牌移动13\r\n            case proto.base.BattleRoomOpOutputType.Out_TerrainToTerrain:\r\n                packData = data.terrainToTerrain;\r\n                comp = PanelDefine.Out_TerrainToTerrain;\r\n                changeDataCall = this.changeTerrainToTerrain;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //卡组区域到删除区域14\r\n            case proto.base.BattleRoomOpOutputType.Out_DeckToDel:\r\n                packData = data.deckToDel;\r\n                comp = PanelDefine.Out_DeckToDel;\r\n                changeDataCall = this.changeDeckToDel;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //卡组区域到弃牌区域15\r\n            case proto.base.BattleRoomOpOutputType.Out_DeckToDrop:\r\n                packData = data.deckToDrop;\r\n                comp = PanelDefine.Out_DeckToDrop;\r\n                changeDataCall = this.changeDeckToDrop;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //玩家地形战力变更16\r\n            case proto.base.BattleRoomOpOutputType.Out_PlayerPower:\r\n                packData = data.playerPower;\r\n                comp = PanelDefine.Out_PlayerPower;\r\n                changeDataCall = this.changePlayerPower;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //回合数增加17\r\n            case proto.base.BattleRoomOpOutputType.Out_RoundData:\r\n                packData = data.roundData;\r\n                comp = PanelDefine.Out_RoundData;\r\n                changeDataCall = this.changeRoundData;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //地形数据变更19\r\n            case proto.base.BattleRoomOpOutputType.Out_TerrainData:\r\n                packData = data.terrainData;\r\n                comp = PanelDefine.Out_BattleRoomOpOutput_TerrainData;\r\n                changeDataCall = this.changeTerrainData;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //卡牌在地形上变化20\r\n            case proto.base.BattleRoomOpOutputType.Out_CardTerrainState:\r\n                packData = data.cardTerrainState;\r\n                comp = PanelDefine.Out_CardTerrainState;\r\n                changeDataCall = this.changeCardTerrainState;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                //设置优先揭示卡牌玩家id\r\n                if (this._curRoundRevealPlayerId == \"\") {\r\n                    this.curRoundRevealPlayerId = data.ownerPlayerId;\r\n                    console.log(\"优先揭示卡牌玩家----->\" + data.ownerPlayerId)\r\n                }\r\n                break;\r\n            //玩家能量变更21\r\n            case proto.base.BattleRoomOpOutputType.Out_PlayerEnergy:\r\n                packData = data.playerEnergy;\r\n                comp = PanelDefine.Out_PlayerEnergy;\r\n                changeDataCall = this.changePlayerEnergy;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //往卡组上添加卡牌22\r\n            case proto.base.BattleRoomOpOutputType.Out_AddCardToDeck:\r\n                packData = data.addCardToDeck;\r\n                comp = PanelDefine.Out_AddCardToDeck;\r\n                changeDataCall = this.changeAddCardToDeck;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //往卡组上添加卡牌23\r\n            case proto.base.BattleRoomOpOutputType.Out_AddCardToHand:\r\n                packData = data.addCardToHand;\r\n                comp = PanelDefine.Out_AddCardToHand;\r\n                changeDataCall = this.changeAddCardToHand;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //往区域添加卡牌24\r\n            case proto.base.BattleRoomOpOutputType.Out_AddCardToTerrain:\r\n                packData = data.addCardToTerrain;\r\n                comp = PanelDefine.Out_AddCardToTerrain;\r\n                changeDataCall = this.changeAddCardToTerrain;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //从场景区域到弃卡区25\r\n            case proto.base.BattleRoomOpOutputType.Out_TerrainToDrop:\r\n                packData = data.terrainToDrop;\r\n                comp = PanelDefine.Out_TerrainToDrop;\r\n                changeDataCall = this.changeTerrainToDrop;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //窥视卡牌26\r\n            case proto.base.BattleRoomOpOutputType.Out_Peek:\r\n                packData = data.peek;\r\n                comp = PanelDefine.Out_Peek;\r\n                changeDataCall = this.changePeek;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //战斗房间异常27\r\n            case proto.base.BattleRoomOpOutputType.Out_RoomDestroy:\r\n                packData = data.roomDestroy;\r\n                comp = PanelDefine.Out_RoomDestroy;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                //EventMgr.emit(Battle_RoomUnusual, data.roomDestroy.reason);\r\n                break;\r\n            //增加区域持续状态29\r\n            case proto.base.BattleRoomOpOutputType.Out_LockZone:\r\n                packData = data.lockZone;\r\n                comp = PanelDefine.Out_LockZone;\r\n                changeDataCall = this.changeLockZone;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //从场上数据选择来源卡牌数据31\r\n            case proto.base.BattleRoomOpOutputType.Out_AddCard:\r\n                packData = data.addCard;\r\n                comp = PanelDefine.Out_AddCard;\r\n                changeDataCall = this.changeAddCard;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //移除持续状态32\r\n            case proto.base.BattleRoomOpOutputType.Out_Nullify:\r\n                // console.log(\"100002_Out_Nullify\", data);\r\n                packData = data.nullify;\r\n                comp = PanelDefine.Out_Nullify;\r\n                changeDataCall = this.changeNullify;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            case proto.base.BattleRoomOpOutputType.Out_HandToDeck:\r\n                packData = data.handToDeck;\r\n                comp = PanelDefine.Out_HandToDeck;\r\n                changeDataCall = this.changeHandToDeck;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            //技能释放\r\n            case proto.base.BattleRoomOpOutputType.Out_EffectSkill:\r\n                // console.log(\"100002_Out_EffectSkill\", data);\r\n                packData = data.effectSkill;\r\n                comp = PanelDefine.Out_EffectSkill;\r\n                changeDataCall = this.applyBuff;\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            case proto.base.BattleRoomOpOutputType.Out_RetransmissionRound:\r\n                packData = data.retransmissionRound.round;\r\n                comp = PanelDefine.Out_RetransmissionRound;\r\n                this.setBattleRoomData(data.retransmissionRound.round.gamePlayData);\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                //处于输入状态，重新添加输入包\r\n                if (data.retransmissionRound.waitPlayerInput) {\r\n                    let inputData = proto.base.BattleRoomOpOutput.create();\r\n                    inputData.ownerPlayerId = data.ownerPlayerId;\r\n                    inputData.touchInstId = data.touchInstId;\r\n                    inputData.opType = proto.base.BattleRoomOpOutputType.Out_WaitPlayerInput;\r\n                    let inputPackData = proto.base.BattleRoomOpOutput_WaitPlayerInput.create();\r\n                    inputPackData.timeout = data.retransmissionRound.timeout;\r\n                    let inputComp = PanelDefine.Out_WaitPlayerInput;\r\n                    inputPackData[\"isPlayerInput\"] = data.retransmissionRound.isPlayerInput;\r\n                    inputPackData[\"inputs\"] = data.retransmissionRound.inputs;\r\n                    this.addBattlePackData(inputData, inputPackData, inputComp);\r\n                }\r\n                break;\r\n            case proto.base.BattleRoomOpOutputType.Out_RetransmissionSettlement:\r\n                packData = data.retransmissionSettlement.settlement;\r\n                let giveUp: boolean = data.retransmissionSettlement.settlement.leavePlayerId && data.retransmissionSettlement.settlement.leavePlayerId != \"\";\r\n                if (giveUp) {\r\n                    EventMgr.emit(Battle_ShowSettlement, this._roomData.roomId, this.getPlayerId(true), data.retransmissionSettlement.settlement);\r\n                } else {\r\n                    comp = PanelDefine.Out_Settlement;\r\n                }\r\n                this.addBattlePackData(data, packData, comp, changeDataCall);\r\n                break;\r\n            default:\r\n                console.error(`未定义战斗数据包----->${data.opType}`);\r\n                break;\r\n        }\r\n        console.log(`battleData push----> round ${this._currentRound} --->${proto.base.BattleRoomOpOutputType[data.opType]}`, data);\r\n        \r\n\r\n    }\r\n\r\n    private addBattlePackData(data: proto.base.IBattleRoomOpOutput, packData: any, comp: any, changeDataCall?: (playerId: string, data: any) => void): void {\r\n        if (packData && comp) {\r\n            let battlePackData: BattlePackData = {\r\n                roomId: this._roomData.roomId,\r\n                round: this.curRound,\r\n                ownerPlayerId: data.ownerPlayerId,\r\n                data: packData,\r\n                touchInstId: data.touchInstId\r\n            };\r\n            let battleOpData: BattleOpData = {\r\n                packData: battlePackData,\r\n                comp: comp,\r\n                type: data.opType,\r\n                changeDataCell: changeDataCall,\r\n            };\r\n            this._battlePackList.push(battleOpData);\r\n        }\r\n    }\r\n    /**\r\n     * 设置当前回合优先揭示玩家id\r\n     */\r\n    public set curRoundRevealPlayerId(playerId: string) {\r\n        this._curRoundRevealPlayerId = playerId;\r\n    }\r\n    /**\r\n     * 获取当前回合优先揭示玩家id\r\n     */\r\n    public get curRoundRevealPlayerId(): string {\r\n        return this._curRoundRevealPlayerId;\r\n    }\r\n\r\n    /**\r\n     *设置当前房间数据 \r\n     */\r\n    private setBattleRoomData(data: proto.base.IBattleRoomGamePlayData): void {\r\n        this.curRoundRevealPlayerId = \"\";\r\n        //无房间或者非同一房间，重置第一视觉玩家\r\n        if (!this._roomData || this._roomData.roomId != data.levelData.roomId) {\r\n            this._playerA = new Map();\r\n        }\r\n        this._playerDatas = data.players;\r\n        this._roomData = data.levelData;\r\n        console.log(\"设置战斗房间id ----->\" + this.roomData.roomId)\r\n        this._terrains = data.terrains;\r\n        this._currentRound = data.currentRound;\r\n        this.addBattleLog();\r\n        if (this._creatRoomData.isReplay) {\r\n            this._playerA.set(this._creatRoomData.viewPlayerId, true);\r\n            return\r\n        }\r\n        //本局作战设置过第一视觉了则不处理\r\n        let myId: string = PlayerData.player.playerId;\r\n        if (this._playerDatas[myId]) {\r\n            this._playerA.set(myId, true);\r\n            return;\r\n        }\r\n\r\n        //无自己则随便一个玩家作为第一视觉\r\n        for (let key in this._playerDatas) {\r\n            this._playerA.set(key, true);\r\n            break;\r\n        }\r\n    }\r\n    \r\n    private addBattleLog(): void {\r\n        if (this._creatRoomData.isReplay) return;\r\n        let key: string = `battleLog_${PlayerData.player.playerId}`;\r\n        let logDatas: any[] = LocalStorage.GetObject(key);\r\n        if (!logDatas) {\r\n            logDatas = [];\r\n        }\r\n        let isAdd: boolean = true;\r\n        let logData: any;\r\n        for (let index = 0; index < logDatas.length; index++) {\r\n            logData = logDatas[index];\r\n            if (logData.roomId == this.roomData.roomId) {\r\n                isAdd = false;\r\n                break;\r\n            }\r\n        }\r\n        if (isAdd) {\r\n            let playerIds: string[] = [];\r\n            for (let key in this.playerDatas) {\r\n                let playerData = this.playerDatas[key];\r\n                if (playerData.playerId == PlayerData.player.playerId) {\r\n                    playerIds[0] = playerData.playerId;\r\n                } else {\r\n                    playerIds[1] = playerData.playerId;\r\n                }\r\n            }\r\n            logDatas.push({\r\n                playerList: playerIds,\r\n                roomId: this.roomData.roomId,\r\n                createTime: DateUtils.ServerTime,\r\n            })\r\n        }\r\n        LocalStorage.SetObject(key, logDatas);\r\n    }\r\n    /**\r\n     * 获取当前回合数\r\n     */\r\n    public get curRound(): number {\r\n        return this._currentRound;\r\n    }\r\n\r\n    /**\r\n     * 获取战斗数据包列表\r\n     */\r\n    public get battlePackList(): BattleOpData[] {\r\n        return this._battlePackList;\r\n    }\r\n\r\n    /**\r\n     * 获取首个战斗数据包\r\n     */\r\n    public getFirstBattlePack(): BattleOpData {\r\n        return this._battlePackList.length > 0 ? this._battlePackList.shift() : null;\r\n    }\r\n\r\n    /**\r\n     * 获取房间数据\r\n     */\r\n    public get roomData(): proto.base.IBattleRoomLevelData {\r\n        return this._roomData;\r\n    }\r\n\r\n    /**\r\n     * 获取地形数据列表\r\n     */\r\n    public get terrains(): proto.base.IBattleRoomTerrainData[] {\r\n        return this._terrains;\r\n    }\r\n\r\n    /**\r\n     * 根据地形实体id获取地形数据\r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public terrainIdData(instId: string): proto.base.IBattleRoomTerrainData {\r\n        for (let terrainData of this._terrains) {\r\n            if (terrainData.instId == instId) return terrainData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 根据地形下标获取地形数据\r\n     * @param idx \r\n     * @returns \r\n     */\r\n    public terrainIndexData(idx: number): proto.base.IBattleRoomTerrainData {\r\n        if (idx < this._terrains.length) {\r\n            return this._terrains[idx];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 根据区域实例id获取玩家区域数据\r\n     * @param playerId \r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public getPlayerTerrainFormId(playerId: string, instId: string): proto.base.IBattleRoomTerrainPlayerData {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData[] = playerData.terrain;\r\n        for (let terrainData of terrains) {\r\n            if (terrainData.instId == instId) return terrainData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 根据区域下标获取玩家区域数据\r\n     * @param playerId \r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public getPlayerTerrainFormIdx(playerId: string, areaIdx: number): proto.base.IBattleRoomTerrainPlayerData {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData = playerData.terrain[areaIdx];\r\n        return terrains;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家区域列表\r\n     * @param playerId \r\n     * @returns \r\n     */\r\n    public getPlayerTerrainDatas(playerId: string): proto.base.IBattleRoomTerrainPlayerData[] {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData[] = playerData.terrain;\r\n        return terrains;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家区域列表\r\n     * @param playerId \r\n     * @returns \r\n     */\r\n    public setPlayerTerrainDatas(playerId: string, terrains: proto.base.IBattleRoomTerrainPlayerData[]): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        playerData.terrain = [...terrains];\r\n    }\r\n    /**\r\n     * 获取玩家区域总战力\r\n     * @param playerId \r\n     * @param areaIdx \r\n     * @returns \r\n     */\r\n    public getPlayerTerrainTotalPow(playerId: string, areaIdx: number): number {\r\n        let base: number = this.getPlayerTerrainBasePow(playerId, areaIdx);\r\n        let cardTotalPower: number = this.getPlayerTerrainCardTotalPow(playerId, areaIdx);\r\n        return base + cardTotalPower;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家区域基础战力\r\n     * @param playerId \r\n     * @param areaIdx \r\n     * @returns \r\n     */\r\n    public getPlayerTerrainBasePow(playerId: string, areaIdx: number): number {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrainData: proto.base.IBattleRoomTerrainPlayerData = playerData.terrain[areaIdx];\r\n        let count: number = 0;\r\n        if (terrainData) {\r\n            count = terrainData.basePower.finalValue;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n    * 获取玩家区域卡牌总战力\r\n    * @param playerId \r\n    * @param areaIdx \r\n    * @param isMult 是否计算卡的倍数 \r\n    * @returns \r\n    */\r\n    public getPlayerTerrainCardTotalPow(playerId: string, areaIdx: number, isMult: boolean = true): number {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrainData: proto.base.IBattleRoomTerrainPlayerData = playerData.terrain[areaIdx];\r\n        let count: number = 0;\r\n        if (terrainData) {\r\n            for (let cardData of terrainData.cards) {\r\n                //未揭示不计算战力\r\n                if (cardData.terrainState != proto.base.BattleRoomInCardState.CardStateShow) continue;\r\n                count += isMult ? terrainData.cardMul.finalValue * cardData.power.finalValue : cardData.power.finalValue;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家卡的地形卡倍数\r\n     * @param playerId \r\n     * @param areaIdx \r\n     * @returns \r\n     */\r\n    public getPlayerTerrainCardPowerMul(playerId: string, areaIdx: number): number {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrainData: proto.base.IBattleRoomTerrainPlayerData = playerData.terrain[areaIdx];\r\n        if (terrainData) {\r\n            return terrainData.cardMul.finalValue;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家数据\r\n     * @param playerId \r\n     */\r\n    public get playerDatas(): { [k: string]: proto.base.IBattleRoomPlayerData } {\r\n        return this._playerDatas;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家数据\r\n     * @param playerId \r\n     */\r\n    public getPlayerData(playerId: string): proto.base.IBattleRoomPlayerData {\r\n        return this._playerDatas[playerId];\r\n    }\r\n\r\n    /**\r\n     * 获取是否第一人称视觉\r\n     * @param playerId \r\n     * @returns \r\n     */\r\n    public isPlayerA(playerId: string): boolean {\r\n        return this._playerA.get(playerId) ?? false;\r\n    }\r\n\r\n    /**\r\n     * 获取指定的实体\r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public getEntityByInstId(instId: string): proto.base.IBattleRoomPlayerData | base.IBattleRoomTerrainPlayerData | base.IBattleRoomCardData {\r\n        for (let k in this.playerDatas) {\r\n            let player = this.playerDatas[k];\r\n            if (instId == player.instId) {\r\n                return player;\r\n            }\r\n            let all = [player.deckCards, player.delCards, player.dropCards, player.handCards];\r\n            for (let cards of all) {\r\n                if (cards) {\r\n                    for (let card of cards) {\r\n                        if (card.instId == instId) return card;\r\n                    }\r\n                }\r\n            }\r\n            let terrain = player.terrain || [];\r\n            for (let i = 0; i < terrain.length; i++) {\r\n                let t = terrain[i];\r\n                if (t.selfInstId == instId) {\r\n                    t['area'] = t;\r\n                    return t;\r\n                }\r\n                for (let card of t.cards) {\r\n                    if (card.instId == instId) return card;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取玩家id\r\n     * @param isPlayerA 是否第一视觉玩家 \r\n     * @returns \r\n     */\r\n    public getPlayerId(isPlayerA: boolean = true): string {\r\n        for (let key in this.playerDatas) {\r\n            if (isPlayerA) {\r\n                if (this.isPlayerA(key)) {\r\n                    return key;\r\n                }\r\n            } else {\r\n                if (!this.isPlayerA(key)) {\r\n                    return key;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家手卡列表\r\n     * @param playerId \r\n     */\r\n    public getPlayerHandCards(playerId: string): proto.base.IBattleRoomCardData[] {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        return playerData.handCards;\r\n    }\r\n\r\n    /**\r\n     * 设置玩家手牌\r\n     * @param playerId \r\n     * @returns \r\n     */\r\n    public setPlayerHandCards(playerId: string, cards: proto.base.IBattleRoomCardData[]): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        playerData.handCards = [...cards];\r\n    }\r\n\r\n    /**\r\n     * 获取玩家弃卡\r\n     * @param playerId \r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public getPlayerDropCard(playerId: string, instId: string): proto.base.IBattleRoomCardData {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        for (let cardData of playerData.dropCards) {\r\n            if (cardData.instId == instId) return cardData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家删除卡\r\n     * @param playerId \r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public getPlayerDelCard(playerId: string, instId: string): proto.base.IBattleRoomCardData {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        for (let cardData of playerData.delCards) {\r\n            if (cardData.instId == instId) return cardData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家的卡\r\n     * @param playerId \r\n     * @param cardData \r\n     */\r\n    public getPlayerHandCard(playerId: string, instId: string): proto.base.IBattleRoomCardData {\r\n        let cards: proto.base.IBattleRoomCardData[] = this.getPlayerHandCards(playerId);\r\n        for (let cardData of cards) {\r\n            if (cardData.instId == instId) return cardData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家卡的能量\r\n     * @param playerId \r\n     * @param instId \r\n     */\r\n    public getPlayerCardCost(playerId: string, instId: string): number {\r\n        let cardData: proto.base.IBattleRoomCardData = this.getPlayerHandCard(playerId, instId);\r\n        cardData ?? this.getPlayerTerrainCard(playerId, instId);\r\n        if (cardData) return cardData.cost?.finalValue ?? 0;\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家卡的战力\r\n     * @param playerId \r\n     * @param instId \r\n     */\r\n    public getPlayerCardPower(playerId: string, instId: string): number {\r\n        let cardData: proto.base.IBattleRoomCardData = this.getPlayerHandCard(playerId, instId);\r\n        if (!cardData) cardData = this.getPlayerTerrainCard(playerId, instId);\r\n        if (cardData && cardData.terrainState == proto.base.BattleRoomInCardState.CardStateShow) return cardData?.power?.finalValue || 0;\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家地形上的卡\r\n     * @param playerId \r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public getPlayerTerrainCard(playerId: string, instId: string): proto.base.IBattleRoomCardData {\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData[] = this.getPlayerTerrainDatas(playerId);\r\n        for (let terrainData of terrains) {\r\n            for (let cardData of terrainData.cards) {\r\n                if (cardData.instId == instId) return cardData;\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    /**\r\n     * 获取玩家身上某一张卡（手卡、地形上的卡）\r\n     * @param playerId \r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public getPlayerCard(playerId: string, instId: string): proto.base.IBattleRoomCardData {\r\n        if (playerId == \"\") return null;\r\n        return this.getPlayerHandCard(playerId, instId) ||\r\n            this.getPlayerTerrainCard(playerId, instId) ||\r\n            this.getPlayerDeckCard(playerId, instId) ||\r\n            this.getPlayerDropCard(playerId, instId) ||\r\n            this.getPlayerDelCard(playerId, instId);\r\n    }\r\n    /**\r\n     * 获取对战卡牌\r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public getCard(instId: string): proto.base.IBattleRoomCardData {\r\n        let playerIdA: string = this.getPlayerId();\r\n        let playerIdB: string = this.getPlayerId(false);\r\n        let cardData: proto.base.IBattleRoomCardData = this.getPlayerCard(playerIdA, instId);\r\n        if (!cardData) {\r\n            cardData = this.getPlayerCard(playerIdB, instId);\r\n        }\r\n        return cardData;\r\n    }\r\n\r\n    /**\r\n     * 通过唯一id获取卡牌数据\r\n     * @param instId \r\n     * @param all \r\n     * @returns \r\n     */\r\n    getCardByInstId(instId: string, all = false) {\r\n        for (let terrains of this._terrains) {\r\n            if (terrains.instId == instId) return terrains;\r\n        }\r\n        for (let k in this._playerDatas) {\r\n            let player = this._playerDatas[k];\r\n            let card = player.handCards.find(value => value.instId == instId);\r\n            if (card) return card;\r\n            card = player.terrain.find(value => value.instId == instId);\r\n            if (card) return card;\r\n            card = player.deckCards.find(value => value.instId == instId);\r\n            if (card) return card;\r\n            if (all) {\r\n                card = player.dropCards.find(value => value.instId == instId);\r\n                if (card) return card;\r\n                card = player.delCards.find(value => value.instId == instId);\r\n                if (card) return card;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 从玩家卡组中获取一张卡牌\r\n     * @param playerId 玩家id\r\n     * @param instId 卡牌id\r\n     */\r\n    public getPlayerDeckCard(playerId: string, instId: string): proto.base.IBattleRoomCardData {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        for (let cardData of playerData.deckCards) {\r\n            if (cardData.instId == instId) return cardData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 根据卡牌实例id获取卡牌位置\r\n     * @param playerId \r\n     * @param instId \r\n     * @returns \r\n     */\r\n    public getPlayerCardLocation(playerId: string, instId: string): CardLocation {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        for (let cardIdx = 0; cardIdx < playerData.handCards.length; cardIdx++) {\r\n            let cardData = playerData.handCards[cardIdx];\r\n            if (cardData.instId == instId) {\r\n                return { areaIdx: -1, cardIdx: cardIdx, card: cardData };\r\n            }\r\n        }\r\n\r\n        for (let areaIdx = 0; areaIdx < playerData.terrain.length; areaIdx++) {\r\n            let terrainData = playerData.terrain[areaIdx];\r\n            for (let cardIdx = 0; cardIdx < terrainData.cards.length; cardIdx++) {\r\n                let cardData = terrainData.cards[cardIdx];\r\n                if (cardData.instId == instId) {\r\n                    return { areaIdx: areaIdx, cardIdx: cardIdx, card: cardData };\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家区域空位卡牌位置\r\n     * @param playerId 玩家id\r\n     * @param instId 区域实体id\r\n     * @returns \r\n     */\r\n    public getPlayerAreaEmptyCardLocation(playerId: string, instId: string): CardLocation {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        for (let areaIdx = 0; areaIdx < playerData.terrain.length; areaIdx++) {\r\n            let terrainData = playerData.terrain[areaIdx];\r\n            if (terrainData.instId == instId) {\r\n                if (terrainData.cards.length < this.roomData.terrainCardMax) {\r\n                    return { areaIdx: areaIdx, cardIdx: terrainData.cards.length };\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家区域空位卡牌位置\r\n     * @param playerId 玩家id\r\n     * @param areaIdx 区域实体下标\r\n     * @returns \r\n     */\r\n    public getPlayerAreaEmptyCardLocationByIdx(playerId: string, areaIdx: number): CardLocation {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrainData = playerData.terrain[areaIdx];\r\n        if (terrainData.cards.length < this.roomData.terrainCardMax) {\r\n            return { areaIdx: areaIdx, cardIdx: terrainData.cards.length };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 根据实例id检查实体上获取某种持续状态值\r\n     * @param instId \r\n     * @param buffType \r\n     * @returns \r\n     */\r\n    public chekPersistentStateByInstId(instId: string, buffType: proto.base.BattleRoomPersistentState): boolean {\r\n        let traget: proto.base.IBattleRoomPlayerData | base.IBattleRoomTerrainPlayerData | base.IBattleRoomCardData = this.getEntityByInstId(instId);\r\n        if (!traget || !traget.persistentState) return false;\r\n        let state: proto.base.IBattleRoomAttrValue = traget.persistentState[buffType];\r\n        if (!state || !state.base || state.base.length < 1) return false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 根据实例id检查实体上获取某种持续状态值\r\n     * @param instId \r\n     * @param buffType \r\n     * @returns \r\n     */\r\n    public getPersistentStateListByInstId(instId: string, buffType: proto.base.BattleRoomPersistentState): proto.base.IBaseAddMul[] {\r\n        let traget: proto.base.IBattleRoomPlayerData | base.IBattleRoomTerrainPlayerData | base.IBattleRoomCardData = this.getEntityByInstId(instId);\r\n        if (!traget || !traget.persistentState) return null;\r\n        let state: proto.base.IBattleRoomAttrValue = traget.persistentState[buffType];\r\n        if (!state || !state.base || state.base.length < 1) return null;\r\n        return state.base;\r\n    }\r\n\r\n    public clearCurBattlePack(): void {\r\n        for (let data of this._battlePackList) {\r\n            if (data.changeDataCell != null) {\r\n                data.changeDataCell(data.packData.ownerPlayerId, data);\r\n            }\r\n        }\r\n        this._battlePackList.length = 0;\r\n        this._curRoundRevealPlayerId = \"\";\r\n    }\r\n    /**\r\n     * 检查是否停止战斗包输出\r\n     * @param type \r\n     */\r\n    public checkIsStopBattlePack(type: proto.base.BattleRoomOpOutputType) {\r\n        if (type == proto.base.BattleRoomOpOutputType.Out_Settlement) {\r\n            return true;\r\n        } else if (type == proto.base.BattleRoomOpOutputType.Out_RoomDestroy) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 添加卡牌到玩家\r\n     * @param playerId \r\n     * @param cardLocation \r\n     * @param card \r\n     */\r\n    private addCardToPlayerLocation(playerId: string, cardLocation: proto.base.BattleRoomCardLocation, card: proto.base.IBattleRoomCardData): void {\r\n        switch (cardLocation) {\r\n            case proto.base.BattleRoomCardLocation.Hand:\r\n                this.addPlayerHandCard(playerId, card);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Terrain:\r\n                this.addCardToTerrainByIdx(playerId, card.area, card);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Deck:\r\n                this.addPlayerDeckCard(playerId, card);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Del:\r\n                this.addPlayerDelCard(playerId, card);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Drop:\r\n                this.addPlayerDropCard(playerId, card);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除玩家卡牌\r\n     * @param playerId \r\n     * @param cardLocation \r\n     * @param card \r\n     */\r\n    private delPlayerLocationCard(playerId: string, cardLocation: proto.base.BattleRoomCardLocation, instId: string): void {\r\n        switch (cardLocation) {\r\n            case proto.base.BattleRoomCardLocation.Hand:\r\n                this.delPlayerHandCard(playerId, instId);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Deck:\r\n                this.delPlayerDeckCard(playerId, instId);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Drop:\r\n                this.delPlayerDropCard(playerId, instId);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Del:\r\n                this.delPlayerDelCard(playerId, instId);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Terrain:\r\n                this.delTerrainCard(playerId, instId);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * 清理战场数据\r\n     */\r\n    public clearBattleData(): void {\r\n        this._playerA.clear();\r\n        this._creatRoomData = null;\r\n        this._roomData = null;\r\n        this._playerDatas = null;\r\n        this._terrains = null;\r\n        this._currentRound = null;\r\n        this._battlePackList.length = 0;\r\n    }\r\n\r\n\r\n\r\n    /****************以下是修改数据源***************/\r\n    //修改从卡组中补牌到手卡\r\n    private changeCardDeckFrontToHandTail(playerId: string, data: proto.base.IBattleRoomOpOutput_CardDeckTopToHandTail): void {\r\n        if (!this._roomData) return;\r\n        for (let cardData of data.cards) {\r\n            this.delPlayerDeckCard(playerId, cardData.instId);\r\n            this.addPlayerHandCard(playerId, cardData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从手卡出牌到地形\r\n     * @param data \r\n     */\r\n    private changeHandToTerrain(playerId: string, data: proto.base.IBattleRoomOpOutput_HandToTerrain): void {\r\n        if (!this._roomData) return;\r\n        this.addCardToTerrainByInstId(data.toTerrainPlayerId, data.toTerrainInstId, data.card);\r\n        this.delPlayerHandCard(data.toTerrainPlayerId, data.card.instId);\r\n    }\r\n\r\n    /**\r\n     * 修改玩家手卡到移除\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private changeHandToDrop(playerId: string, data: proto.base.IBattleRoomOpOutput_HandToDrop): void {\r\n        if (!this._roomData) return;\r\n        this.addPlayerDropCard(playerId, data.card);\r\n        this.delPlayerHandCard(playerId, data.card.instId);\r\n    }\r\n    /**\r\n     * 修改玩家手卡到删除区\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private changeHandToDel(playerId: string, data: proto.base.IBattleRoomOpOutput_HandToDel): void {\r\n        if (!this._roomData) return;\r\n        this.addPlayerDelCard(playerId, data.card);\r\n        this.delPlayerHandCard(playerId, data.card.instId);\r\n    }\r\n\r\n    /**\r\n     * 修改从地形区到删除区\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private changeTerrainToDel(playerId: string, data: proto.base.IBattleRoomOpOutput_TerrainToDel): void {\r\n        if (!this._roomData) return;\r\n        this.delTerrainCard(playerId, data.card.instId);\r\n        this.addPlayerDelCard(playerId, data.card);\r\n    }\r\n\r\n    /**\r\n     * 修改从地形区到删除区\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private changeTerrainToDrop(playerId: string, data: proto.base.IBattleRoomOpOutput_TerrainToDrop): void {\r\n        if (!this._roomData) return;\r\n        this.delTerrainCard(playerId, data.card.instId);\r\n        this.addPlayerDropCard(playerId, data.card);\r\n    }\r\n\r\n    /**\r\n     * 修改从弃卡区到手卡区\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private changeDropToHand(playerId: string, data: proto.base.IBattleRoomOpOutput_DropToHand): void {\r\n        if (!this._roomData) return;\r\n        this.delPlayerDropCard(playerId, data.card.instId);\r\n        this.addPlayerHandCard(playerId, data.card);\r\n    }\r\n\r\n    /**\r\n     * 修改玩家战力\r\n     * @param data \r\n     */\r\n    private changePlayerPower(playerId: string, data: proto.base.IBattleRoomOpOutput_PlayerPower): void {\r\n        if (!this._roomData) return;\r\n        let powerData: proto.base.IBattleRoomOpOutput_TerrainPower;\r\n        for (let key in data.terrainPower) {\r\n            powerData = data.terrainPower[key];\r\n            let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(key);\r\n            for (let index = 0; index < powerData.basePower.length; index++) {\r\n                playerData.terrain[index].basePower = powerData.basePower[index];\r\n                playerData.terrain[index].cardMul = powerData.cardMul[index];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 改变地形数据\r\n     * @param data \r\n     */\r\n    private changeTerrainData(playerId: string, data: proto.base.IBattleRoomOpOutput_TerrainData): void {\r\n        if (!this._roomData) return;\r\n        this.resetTerrainData(data.terrainData);\r\n    }\r\n\r\n    /**\r\n     * 改变卡牌在地形上的变化\r\n     */\r\n    private changeCardTerrainState(playerId: string, data: proto.base.IBattleRoomOpOutput_CardTerrainState): void {\r\n        if (!this._roomData) return;\r\n        this.resetTerrainCard(playerId, data.instId, data.card);\r\n    }\r\n\r\n    /**\r\n     * 改变玩家能量\r\n     * @param playerId \r\n     * @param energys \r\n     */\r\n    private changePlayerEnergy(playerId: string, data: proto.base.IBattleRoomOpOutput_PlayerEnergy): void {\r\n        if (!this._roomData) return;\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(data.playerId);\r\n        playerData.roundEnergy = data.energy;\r\n    }\r\n\r\n    /**\r\n     * 改变地形上卡牌移动\r\n     */\r\n    private changeTerrainToTerrain(playerId: string, data: proto.base.IBattleRoomOpOutput_TerrainToTerrain): void {\r\n        if (!this._roomData) return;\r\n        this.delCardFromTerrain(data.fromTerrainPlayerId, data.fromTerrainInstId, data.card);\r\n        this.addCardToTerrainByInstId(data.toTerrainPlayerId, data.toTerrainInstId, data.card);\r\n    }\r\n\r\n    /**\r\n     * 从删除区增加一张卡到手牌去\r\n     */\r\n    private changeDelToHand(playerId: string, data: proto.base.IBattleRoomOpOutput_DelToHand): void {\r\n        if (!this._roomData) return;\r\n        this.delPlayerDelCard(playerId, data.card.instId);\r\n        this.addPlayerHandCard(playerId, data.card);\r\n    }\r\n\r\n    /**\r\n     * 改变卡组区到删除区\r\n     */\r\n    private changeDeckToDel(playerId: string, data: proto.base.IBattleRoomOpOutput_DeckToDel): void {\r\n        if (!this._roomData) return;\r\n        this.delPlayerDeckCard(playerId, data.card.instId);\r\n        this.addPlayerDelCard(playerId, data.card);\r\n    }\r\n\r\n    /**\r\n    * 改变卡组区到弃卡区\r\n    */\r\n    private changeDeckToDrop(playerId: string, data: proto.base.IBattleRoomOpOutput_DeckToDel): void {\r\n        if (!this._roomData) return;\r\n        this.delPlayerDeckCard(playerId, data.card.instId);\r\n        this.addPlayerDropCard(playerId, data.card);\r\n    }\r\n\r\n    /**\r\n    * 改变添加卡牌到卡组区域\r\n    */\r\n    private changeAddCardToDeck(playerId: string, data: proto.base.IBattleRoomOpOutput_AddCardToDeck): void {\r\n        if (!this._roomData) return;\r\n        this.addPlayerDeckCard(playerId, data.card);\r\n    }\r\n\r\n    /**\r\n     * 改变往添加卡牌到手卡区\r\n     */\r\n    private changeAddCardToHand(playerId: string, data: proto.base.IBattleRoomOpOutput_AddCardToHand): void {\r\n        if (!this._roomData) return;\r\n        this.delPlayerLocationCard(data.fromPlayerId, data.fromLocation, data.card.instId);\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(data.card.playerId);\r\n        playerData.handCards.push(data.card);\r\n    }\r\n\r\n    /**\r\n     * 改变往添加卡牌到地形区\r\n     */\r\n    private changeAddCardToTerrain(playerId: string, data: proto.base.IBattleRoomOpOutput_AddCardToTerrain): void {\r\n        if (!this._roomData) return;\r\n        this.delPlayerLocationCard(data.fromPlayerId, data.fromLocation, data.card.instId);\r\n        this.addCardToPlayerLocation(data.card.playerId, data.card.location, data.card);\r\n    }\r\n\r\n    /**改变卡牌数据 */\r\n    private changeCardData(playerId: string, data: proto.base.IBattleRoomOpOutput_CardDataChange): void {\r\n        if (!this._roomData) return;\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        if (data.card.location == proto.base.BattleRoomCardLocation.Hand) {\r\n            //修改手卡\r\n            for (let index = 0; index < playerData.handCards.length; index++) {\r\n                if (playerData.handCards[index].instId == data.card.instId) {\r\n                    playerData.handCards[index] = data.card;\r\n                    break;\r\n                }\r\n            }\r\n        } else if (data.card.location == proto.base.BattleRoomCardLocation.Deck) {\r\n            //修改卡组\r\n            for (let index = 0; index < playerData.deckCards.length; index++) {\r\n                if (playerData.deckCards[index].instId == data.card.instId) {\r\n                    playerData.deckCards[index] = data.card;\r\n                    break;\r\n                }\r\n            }\r\n        } else if (data.card.location == proto.base.BattleRoomCardLocation.Drop) {\r\n            //修改弃卡\r\n            for (let index = 0; index < playerData.dropCards.length; index++) {\r\n                if (playerData.dropCards[index].instId == data.card.instId) {\r\n                    playerData.dropCards[index] = data.card;\r\n                    break;\r\n                }\r\n            }\r\n        } else if (data.card.location == proto.base.BattleRoomCardLocation.Del) {\r\n            //修改删除卡\r\n            for (let index = 0; index < playerData.delCards.length; index++) {\r\n                if (playerData.delCards[index].instId == data.card.instId) {\r\n                    playerData.delCards[index] = data.card;\r\n                    break;\r\n                }\r\n            }\r\n        } else if (data.card.location == proto.base.BattleRoomCardLocation.Terrain) {\r\n            //修改地形卡\r\n            let terrainData: proto.base.IBattleRoomTerrainPlayerData = playerData.terrain[data.card.area];\r\n            for (let index = 0; index < terrainData.cards.length; index++) {\r\n                if (terrainData.cards[index].instId == data.card.instId) {\r\n                    terrainData.cards[index] = data.card;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    /**\r\n     * 改变复制卡牌数据\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private changeCopyCard(playerId: string, data: proto.base.IBattleRoomOpOutput_CopyCard): void {\r\n        if (!this._roomData) return;\r\n        this.addCardToPlayerLocation(data.card.playerId, data.card.location, data.card);\r\n\r\n    }\r\n\r\n    /**\r\n     * 改变回合数增加数据\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private changeRoundData(playerId: string, data: proto.base.IBattleRoomOpOutput_RoundData): void {\r\n        if (!this._roomData) return;\r\n        if (battleDataMgr.isPlayerA(playerId)) {\r\n            this.addRoundNum();\r\n            this.resetPlayerEnergy(playerId, data.roundEnergy);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 修改窥视卡牌\r\n     */\r\n    private changePeek(playerId: string, data: proto.base.IBattleRoomOpOutput_Peek): void {\r\n        if (!this._roomData) return;\r\n        //只有地形有持续效果固只修改地形即可\r\n        if (data.terrainData) {\r\n            for (const key in data.terrainData) {\r\n                this.resetTerrainData(data.terrainData[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 改变区域持续状体数据\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private changeLockZone(playerId: string, data: proto.base.IBattleRoomOpOutput_LockZone): void {\r\n        if (!this._roomData) return;\r\n        let traget: proto.base.IBattleRoomPlayerData | base.IBattleRoomTerrainPlayerData | base.IBattleRoomCardData = this.getEntityByInstId(data.toInstId);\r\n        if (!traget) return;\r\n        if (!traget.persistentState) {\r\n            traget.persistentState = {};\r\n        }\r\n        for (let state of data.state) {\r\n            let stateValue: proto.base.IBattleRoomAttrValue = traget.persistentState[state];\r\n            if (!stateValue) {\r\n                stateValue = proto.base.BattleRoomAttrValue.create();\r\n                stateValue.base = [];\r\n                traget.persistentState[state] = stateValue;\r\n            }\r\n            traget.persistentState[state] = stateValue;\r\n            let base: proto.base.IBaseAddMul = proto.base.BaseAddMul.create();\r\n            base.from = data.fromInstId;\r\n            base.source = data.fromSkillId.toString();\r\n            stateValue.base.push(base);\r\n            stateValue.finalValue = stateValue.base.length;\r\n        }\r\n    }\r\n\r\n    private changeAddCard(playerId: string, data: proto.base.IBattleRoomOpOutput_AddCard): void {\r\n        if (!this._roomData) return;\r\n        if (data.isMove) {\r\n            this.delPlayerLocationCard(data.sourcePlayerId, data.sourceLocation, data.sourceInstId);\r\n        }\r\n        this.addCardToPlayerLocation(data.card.playerId, data.card.location, data.card);\r\n\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * 检测是否有buff\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private applyBuff(playerId: string, data: proto.base.IBattleRoomOpOutput_EffectSkill) {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 改变移除玩家buff数据\r\n     * @param playerId \r\n     * @param data \r\n     */\r\n    private changeNullify(playerId: string, data: proto.base.IBattleRoomOpOutput_Nullify): void {\r\n        if (!this._roomData) return;\r\n        let traget: proto.base.IBattleRoomPlayerData | proto.base.IBattleRoomTerrainPlayerData | proto.base.IBattleRoomCardData = this.getEntityByInstId(data.toInstId);\r\n        if (!traget || !traget.persistentState) return;\r\n        if (!data.state) return;\r\n        for (let state of data.state) {\r\n            let stateValue: proto.base.IBattleRoomAttrValue = traget.persistentState[state];\r\n            if (stateValue && stateValue.base && stateValue.base.length) {\r\n                for (let index = 0; index < stateValue.base.length; index++) {\r\n                    let base: proto.base.IBaseAddMul = stateValue.base[index];\r\n                    if (base.from == data.fromInstId && Number(base.source) == data.fromSkillId) {\r\n                        stateValue.base.splice(index, 1);\r\n                        break;\r\n                    }\r\n                }\r\n                if (stateValue.base.length < 1) {\r\n                    traget.persistentState[state] = null;\r\n                    delete traget.persistentState[state];\r\n                } else {\r\n                    stateValue.finalValue = stateValue.base.length;\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    private changeHandToDeck(playerId: string, data: proto.base.IBattleRoomOpOutput_HandToDeck): void {\r\n        if (!this._roomData) return;\r\n        this.delPlayerHandCard(playerId, data.card.instId);\r\n        this.addPlayerDeckCard(playerId, data.card);\r\n    }\r\n\r\n    /***********详细处理函数**********/\r\n\r\n    /**\r\n     * 添加卡牌到地形\r\n     * @param playerId 玩家id\r\n     * @param instId 地形实例id\r\n     * @param cardData 卡牌数据\r\n     * @returns \r\n     */\r\n    private addCardToTerrainByInstId(playerId: string, instId: string, cardData: proto.base.IBattleRoomCardData): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData[] = playerData.terrain;\r\n        for (let terrainData of terrains) {\r\n            if (terrainData.instId == instId) {\r\n                if (!terrainData.cards) terrainData.cards = [];\r\n                terrainData.cards.push(cardData);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 按地形区域下标添加卡牌到玩家地形区域\r\n     * @param playerId \r\n     * @param areaIdx \r\n     * @param cardData \r\n     */\r\n    private addCardToTerrainByIdx(playerId: string, areaIdx: number, cardData: proto.base.IBattleRoomCardData): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData[] = playerData.terrain;\r\n        let terrainData: proto.base.IBattleRoomTerrainPlayerData = terrains[areaIdx];\r\n        if (terrainData) {\r\n            if (!terrainData.cards) terrainData.cards = [];\r\n            terrainData.cards.push(cardData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除地形上的卡\r\n     * @param playerId 玩家id\r\n     * @param instId 地形实例id\r\n     * @param cardData 卡牌数据\r\n     * @returns \r\n     */\r\n    private delCardFromTerrain(playerId: string, instId: string, cardData: proto.base.IBattleRoomCardData): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData[] = playerData.terrain;\r\n        let tempCardData: proto.base.IBattleRoomCardData;\r\n        let isDel: boolean = false;\r\n        for (let terrainData of terrains) {\r\n            if (terrainData.instId == instId) {\r\n                for (let cardIdx = 0; cardIdx < terrainData.cards.length; cardIdx++) {\r\n                    tempCardData = terrainData.cards[cardIdx];\r\n                    if (tempCardData.instId == cardData.instId) {\r\n                        terrainData.cards.splice(cardIdx, 1);\r\n                        isDel = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (isDel) break;\r\n        }\r\n    }\r\n    /**\r\n     * 删除地形上的卡牌\r\n     * @param playerId \r\n     * @param instId \r\n     */\r\n    private delTerrainCard(playerId: string, instId: string): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData[] = playerData.terrain;\r\n        let cardData: proto.base.IBattleRoomCardData;\r\n        let isDel: boolean = false;\r\n        for (let terrainData of terrains) {\r\n            for (let cardIdx = 0; cardIdx < terrainData.cards.length; cardIdx++) {\r\n                cardData = terrainData.cards[cardIdx];\r\n                if (cardData.instId == instId) {\r\n                    terrainData.cards.splice(cardIdx, 1);\r\n                    isDel = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isDel) break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重置地形上卡牌数据\r\n     * @param playerId \r\n     * @param instId \r\n     * @param cardData \r\n     */\r\n    private resetTerrainCard(playerId: string, instId: string, cardData: proto.base.IBattleRoomCardData): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData[] = playerData.terrain;\r\n        let result: boolean = false;\r\n        for (let terrainData of terrains) {\r\n            if (terrainData.instId == instId) {\r\n                for (let index = 0; index < terrainData.cards.length; index++) {\r\n                    if (terrainData.cards[index].instId == cardData.instId) {\r\n                        terrainData.cards[index] = cardData;\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (result) break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 覆盖地形区域数据\r\n     * @param terrainData \r\n     */\r\n    private resetTerrainData(terrainData: proto.base.IBattleRoomTerrainPlayerData): void {\r\n        let terrains: proto.base.IBattleRoomTerrainPlayerData[] = this.terrains;\r\n        for (let index = 0; index < terrains.length; index++) {\r\n            if (terrains[index].instId == terrainData.instId) {\r\n                terrains[index] = terrainData;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除玩家手卡\r\n     * @param playerId \r\n     * @param instId \r\n     */\r\n    private delPlayerHandCard(playerId: string, instId: string): proto.base.IBattleRoomCardData {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let cardData: proto.base.IBattleRoomCardData;\r\n        for (let index = 0; index < playerData.handCards.length; index++) {\r\n            cardData = playerData.handCards[index];\r\n            if (cardData.instId == instId) {\r\n                playerData.handCards.splice(index, 1);\r\n                return cardData;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 增加一张卡牌到玩家弃牌区\r\n     * @param playerId \r\n     * @param instId \r\n     */\r\n    private addPlayerDropCard(playerId: string, cardData: proto.base.IBattleRoomCardData): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        playerData.dropCards.push(cardData);\r\n    }\r\n\r\n    /**\r\n     * 增加一张卡牌到玩家弃牌区\r\n     * @param playerId \r\n     * @param instId \r\n     */\r\n    private delPlayerDropCard(playerId: string, instId: string): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let cardData: proto.base.IBattleRoomCardData;\r\n        for (let index = 0; index < playerData.dropCards.length; index++) {\r\n            cardData = playerData.dropCards[index];\r\n            if (cardData.instId == instId) {\r\n                playerData.dropCards.splice(index, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加一张卡牌到玩家手卡区\r\n     * @param playerId \r\n     * @param cardData \r\n     */\r\n    private addPlayerHandCard(playerId: string, cardData: proto.base.IBattleRoomCardData): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        playerData.handCards.push(cardData);\r\n    }\r\n\r\n    /**\r\n     * 从玩家卡组中删除一张卡牌\r\n     * @param playerId 玩家id\r\n     * @param instId 卡牌实例id\r\n     */\r\n    private delPlayerDeckCard(playerId: string, instId: string): proto.base.IBattleRoomCardData {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let cardData: proto.base.IBattleRoomCardData;\r\n        for (let index = 0; index < playerData.deckCards.length; index++) {\r\n            cardData = playerData.deckCards[index];\r\n            if (cardData.instId == instId) {\r\n                playerData.deckCards.splice(index, 0);\r\n                return cardData;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 从玩家卡组中添加一张卡牌\r\n     * @param playerId 玩家id\r\n     * @param cardData 卡牌数据\r\n     */\r\n    private addPlayerDeckCard(playerId: string, cardData: proto.base.IBattleRoomCardData): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        playerData.deckCards.push(cardData);\r\n    }\r\n\r\n    /**\r\n     * 从玩家删除区中删除一张卡牌\r\n     * @param playerId \r\n     * @param instId \r\n     */\r\n    private delPlayerDelCard(playerId: string, instId: string): proto.base.IBattleRoomCardData {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        let cardData: proto.base.IBattleRoomCardData;\r\n        for (let index = 0; index < playerData.delCards.length; index++) {\r\n            cardData = playerData.delCards[index];\r\n            if (cardData.instId == instId) {\r\n                playerData.delCards.splice(index, 1);\r\n                return cardData;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 添加一张卡牌到玩家删除区\r\n     * @param playerId \r\n     * @param instId \r\n     */\r\n    private addPlayerDelCard(playerId: string, cardData: proto.base.IBattleRoomCardData): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        playerData.delCards.push(cardData);\r\n    }\r\n\r\n    /**\r\n     * 增加回合数\r\n     * @param num \r\n     */\r\n    private addRoundNum(num: number = 1): void {\r\n        this.roomData.roundMax.finalValue++;\r\n    }\r\n\r\n    /**\r\n     * 重置玩家回合能量\r\n     * @param playerId \r\n     * @param num \r\n     */\r\n    private resetPlayerEnergy(playerId: string, energys: proto.base.IBattleRoomAttrValue[]): void {\r\n        let playerData: proto.base.IBattleRoomPlayerData = this.getPlayerData(playerId);\r\n        playerData.roundEnergy = energys;\r\n    }\r\n}\r\n\r\n/**\r\n * 操作失败原因\r\n */\r\nexport enum OperateFailReason {\r\n    none,       // 成功\r\n    undefine,   // 找不到卡\r\n    mustLast,   // 只能操作上一个\r\n    areaLock,   // 区域锁定\r\n    areaDestroy,// 区域已销毁\r\n    limit,      // 区域已满\r\n    duplicate,  // 重复\r\n    handToHandArea, //已是编辑手卡只能放回手卡区\r\n    terrainToTerrainArea, //已是编辑地形卡回到编辑前的位置\r\n    confirmInput, //已是确认操作\r\n    areaHaveNoPutBuff, //区域有不可放置buff\r\n    areaHaveMoveBuff, //区域有不可移动buff\r\n    error,\r\n}\r\n\r\n\r\nexport const battleDataMgr = new BattleDataMgr();"]}