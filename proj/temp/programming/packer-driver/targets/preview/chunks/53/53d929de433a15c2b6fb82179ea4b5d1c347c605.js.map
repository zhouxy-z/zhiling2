{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/trade/BuyPanel.ts"],"names":["BuyPanel","Button","Input","Label","Slider","Sprite","SpriteFrame","UITransform","path","ResMgr","folder_item","Session","Panel","SOrderType","CfgMgr","ThingTypeName","PlayerData","Utils","Tips","Req","Route","AutoScroller","Card","BagItem","MsgPanel","prefab","quality","tittle","item_node","item_name","card_node","card_name","item_count","Price","money_icon","need_count","maxBtn","buyBtn","buyVaule","buyicon","sellNode","sellBtn","sellVaule","get_money_icon","costVaule","progress","max_count","right","left","item_tips","ScrollView","aa","type","selectData","selectCount","costNum","market_type","itemSelectData","maxItemNum","touchIndex","touchTime","addNum","tradeData","select_card_data","onLoad","CloseBy","find","node","on","onSend","getComponent","SetHandle","UpdateCardItem","bind","SelectItem","onAA","onShow","flush","_data","active","keepPre","data","item_data","item_cfg","card_cfg","tittle_name","url","num","card","BattleCard","GetCard","cardId","string","CardName","getChildByName","cards","addComponent","SetData","Item","itemOrderData","item","id","itemId","count","quantity","Getitem","ItemName","Quality","item_num","GetItemCount","bagItem","setThing","quantityRemaining","groupNum","LoadResAbSub","res","spriteFrame","GetTradeData","GroupSize","Fees","icon_spr","Currencies","Icon","join","SELL","hasNum","GetCardDataById","enabled","grayscale","max_has","Math","floor","Remark","SkillDesc","ToFixed","price","off","EventType","TOUCH_END","TOUCH_CANCEL","TOUCH_START","SetNodeGray","onSlide","onAdd","onDel","onTouchStart","onMaxBtn","updateProgress","index","e","ceil","all_price","AddFees","UpdateDatas","value","currency","is_gem","BUY","need_currency","Show","buyData","orderId","takeGroup","Send","cardUnionId","orderType","iterator","level","update","dt","size","contentSize","setContentSize","width","height","cardItem","$hasLoad","initSub","getData","onHide","undefined"],"mappings":"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","sourcesContent":["import { Button, Color, Component, EventTouch, Input, Label, Node, Slider, Sprite, SpriteFrame, Toggle, UITransform, find, instantiate, path, sp, tween, view } from \"cc\";\r\nimport { ResMgr, folder_icon, folder_item } from \"../../manager/ResMgr\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { SOrderType } from \"../player/PlayerStruct\";\r\nimport { CardQuality, CfgMgr, StdMarketItem, StdItem, ThingTypeName, StdMarketCard, StdCard } from \"../../manager/CfgMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Utils } from \"../../utils/Utils\";\r\nimport { Tips } from \"../common/Tips\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { Card } from \"../cards/Card\";\r\nimport { base } from \"../../net/proto/proto\";\r\nimport { BagItem } from \"../bag/BagItem\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\n\r\n\r\n\r\nexport class BuyPanel extends Panel {\r\n    protected prefab: string = \"prefabs/Trade/BuyPanel\";\r\n\r\n    private quality: Sprite;\r\n    private tittle: Label;\r\n    private item_node:Node;\r\n    private item_name: Label;\r\n    private card_node:Node;\r\n    private card_name: Label;\r\n    private item_count: Label;\r\n    private Price: Label;\r\n    private money_icon: Sprite;\r\n    private need_count: Label;\r\n    private maxBtn: Button;\r\n    private buyBtn: Button;\r\n    private buyVaule: Label;\r\n    private buyicon: Sprite;\r\n    private sellNode: Node;\r\n    private sellBtn: Button;\r\n    private sellVaule: Label;\r\n    private get_money_icon: Sprite;\r\n    private costVaule: Label;\r\n    private Slider: Slider;\r\n    private progress: Node;\r\n    private max_count: Label;\r\n    private right: Node;\r\n    private left: Node;\r\n    private item_tips: Label;\r\n    private ScrollView:AutoScroller;\r\n    private aa:Button;\r\n\r\n    private type: number;//买or卖\r\n    private selectData: proto.base.IMarketItemOrder;\r\n    private selectCount: number;//当前选择的数量\r\n    private costNum: number;//损耗\r\n    private market_type: string;//商品的类型 //道具或卡牌\r\n    private itemSelectData: proto.base.IThing;//选择的商品是道具\r\n    private maxItemNum: number;//能够买卖的最大组数   \r\n    private touchIndex = 0;\r\n    private touchTime = 0;\r\n    private addNum = 0;\r\n    private tradeData:StdMarketItem | StdMarketCard;\r\n    private select_card_data:proto.base.IBattleCard\r\n\r\n    protected onLoad() {\r\n        this.CloseBy(\"mask\");\r\n        this.CloseBy(\"spriteFrame/Close\");\r\n        this.quality = this.find(\"spriteFrame/left/quality\", Sprite);\r\n        this.tittle = this.find(\"spriteFrame/title/title_name\", Label);\r\n        this.item_tips = this.find(\"spriteFrame/desc\", Label);\r\n        this.item_node = this.find(\"spriteFrame/left/itemNode\")\r\n        this.item_name = this.find(\"spriteFrame/left/itemNode/item_name\", Label);\r\n        this.card_node = this.find(\"spriteFrame/left/cardNode\");\r\n        this.card_name = this.find(\"spriteFrame/left/cardNode/card_name\", Label);\r\n       \r\n        this.item_count = this.find(\"spriteFrame/item_count\", Label);\r\n        this.Price = this.find(\"spriteFrame/PriceLayout/Price\", Label);\r\n        this.money_icon = this.find(\"spriteFrame/PriceLayout/money_icon\", Sprite);\r\n        this.need_count = this.find(\"spriteFrame/mid/need_count\", Label);\r\n        this.max_count = this.find(\"spriteFrame/mid/max_count\", Label);\r\n        this.maxBtn = this.find(\"spriteFrame/mid/page1/maxBtn\", Button);\r\n        this.buyBtn = this.find(\"spriteFrame/mid/buyBtn\", Button);\r\n        this.buyVaule = this.find(\"spriteFrame/mid/buyBtn/layout/buyVaule\", Label);\r\n        this.buyicon = this.find(\"spriteFrame/mid/buyBtn/layout/icon\", Sprite);\r\n        this.sellNode = this.find(\"spriteFrame/mid/sellNode\");\r\n        this.sellBtn = this.find(\"spriteFrame/mid/sellNode/sellBtn\", Button);\r\n        this.sellVaule = this.find(\"spriteFrame/mid/sellNode/layout/sellVaule\", Label);\r\n        this.get_money_icon = this.find(\"spriteFrame/mid/sellNode/layout/get_money_icon\", Sprite);\r\n        this.costVaule = this.find(\"spriteFrame/mid/sellNode/layout/costVaule\", Label);\r\n        this.Slider = this.find(\"spriteFrame/mid/page1/Slider\", Slider);\r\n        this.progress = this.find(\"spriteFrame/mid/page1/Slider/progress\");\r\n        this.right = this.find(\"spriteFrame/mid/page1/right\")\r\n        this.left = this.find(\"spriteFrame/mid/page1/left\")\r\n        this.buyBtn.node.on(\"click\", this.onSend, this);\r\n        this.sellBtn.node.on(\"click\", this.onSend, this);\r\n\r\n        this.ScrollView = this.find(\"spriteFrame/ScrollView\").getComponent(AutoScroller);\r\n        this.ScrollView.SetHandle(this.UpdateCardItem.bind(this));\r\n        this.ScrollView.node.on('select', this.SelectItem, this);\r\n        this.aa = this.find(\"spriteFrame/aa\", Button);\r\n        this.aa.node.on(\"click\", this.onAA, this);\r\n\r\n    }\r\n\r\n    protected onShow(): void {\r\n    }\r\n\r\n    flush(type: number, _data: proto.base.IMarketItemOrder |  proto.base.IMarketCardOrder) {\r\n        if (!_data) return;\r\n        this.ScrollView.node.active = false;\r\n        this.type = type;\r\n        let keepPre = 2;\r\n        let data = _data \r\n        this.selectData = data;\r\n        let item_data :proto.base.IThing\r\n        let item_cfg: StdItem;   \r\n        let card_cfg: StdCard;\r\n        this.item_node.active = false;\r\n        this.card_node.active = false;\r\n        let tittle_name = \"商品详情\"\r\n        let url = \"\";\r\n        let num = 1\r\n        if((data as proto.base.IMarketCardOrder).card){\r\n            this.market_type = ThingTypeName.BattleCard\r\n            item_data = {type:ThingTypeName.BattleCard, card:(data as proto.base.IMarketCardOrder).card}\r\n            tittle_name = \"卡牌详情\"\r\n            card_cfg = CfgMgr.GetCard(item_data.card.cardId)\r\n            this.card_name.string = card_cfg.CardName\r\n            this.card_node.active = true;\r\n            let card = this.card_node.getChildByName(\"Cards\");\r\n            let cards = card.getComponent(Card)\r\n            if(!cards) cards = card.addComponent(Card)\r\n            cards.SetData(item_data.card)\r\n            url = \"sheets/bag/Quality_\" + item_data.card.quality + \"/spriteFrame\"\r\n            this.select_card_data = item_data.card;\r\n        }else{    \r\n            this.market_type = ThingTypeName.Item\r\n            let itemOrderData = data as proto.base.IMarketItemOrder\r\n            item_data = {type:ThingTypeName.Item,item:{id:itemOrderData.itemId, count:itemOrderData.quantity}} ;          \r\n            item_cfg = CfgMgr.Getitem(item_data.item.id);\r\n            if (item_cfg) {\r\n                this.item_name.string = item_cfg.ItemName;\r\n                url = \"sheets/bag/Quality_\" + item_cfg.Quality + \"/spriteFrame\"\r\n            }\r\n            let item_num = this.item_node.getChildByName(\"item_num\").getComponent(Label);\r\n            item_num.string = \"拥有数量\" + PlayerData.GetItemCount(item_data.item.id)\r\n            this.item_node.active = true;\r\n            let item = this.item_node.getChildByName(\"item\");\r\n            let bagItem = item.getComponent(BagItem)\r\n            if(!bagItem) bagItem = item.addComponent(BagItem)\r\n            bagItem.setThing(item_data)\r\n\r\n            num = itemOrderData.quantityRemaining / (itemOrderData.quantity / itemOrderData.groupNum)\r\n        }\r\n        this.tittle.string = tittle_name;\r\n        ResMgr.LoadResAbSub(url, SpriteFrame, res=>{\r\n            this.quality.spriteFrame = res;\r\n        })\r\n        this.addNum = 1;\r\n        this.tradeData = CfgMgr.GetTradeData(item_data);\r\n        let GroupSize = this.tradeData.GroupSize ? this.tradeData.GroupSize : 1\r\n        this.costNum = this.tradeData.Fees / 10000;\r\n        this.itemSelectData = item_data;\r\n\r\n        let icon_spr = CfgMgr.Getitem(this.tradeData.Currencies[0]).Icon;\r\n        ResMgr.LoadResAbSub(path.join(folder_item, icon_spr, \"spriteFrame\"), SpriteFrame, res=>{\r\n            this.money_icon.spriteFrame = res;\r\n            this.get_money_icon.spriteFrame = res;\r\n            this.buyicon.spriteFrame = res;\r\n        })\r\n        \r\n        if (type == SOrderType.SELL) {\r\n            //数量不够置灰\r\n            let hasNum: number   \r\n            \r\n            hasNum = this.market_type == ThingTypeName.Item ? PlayerData.GetItemCount(this.itemSelectData.item.id) : PlayerData.GetCardDataById(this.itemSelectData.card.id);\r\n            if (hasNum == 0) {\r\n                this.sellBtn.enabled = false\r\n                this.sellBtn.node.getComponent(Sprite).grayscale = true;\r\n\r\n            } else {\r\n                this.sellBtn.enabled = true\r\n                this.sellBtn.node.getComponent(Sprite).grayscale = false;\r\n            }\r\n            let max_has = Math.floor(hasNum / GroupSize);\r\n            if(this.market_type == ThingTypeName.Item){\r\n                this.maxItemNum = max_has > num ? num : max_has;\r\n            }else{\r\n                this.maxItemNum = 1\r\n            }\r\n        } else {\r\n            if(this.market_type == ThingTypeName.Item){\r\n                this.maxItemNum = num;\r\n            }else{\r\n                this.maxItemNum = 1\r\n            }\r\n            \r\n        }\r\n        this.item_tips.string = this.market_type == ThingTypeName.Item ? item_cfg.Remark : card_cfg.SkillDesc;\r\n        this.selectCount = this.addNum;\r\n\r\n        this.item_count.string = \"(每组数量：\" + GroupSize + \"个)\";\r\n       \r\n        this.max_count.string = \"/\" + num;\r\n        this.Price.string = Utils.ToFixed(data.price / 10000, keepPre);\r\n        this.need_count.string = \"0\";\r\n        this.costVaule.string = \"(扣除\" + this.costNum * 100 + \"%损耗)\";\r\n        this.sellNode.active = (type == SOrderType.SELL)\r\n        this.buyBtn.node.active = !(type == SOrderType.SELL)\r\n        if (this.selectCount > this.maxItemNum || this.maxItemNum <= 0) {\r\n            this.selectCount = 0;\r\n            this.maxItemNum = 1;\r\n            this.Slider.enabled = false;\r\n            this.Slider.node.off('slide');\r\n            this.right.off(Input.EventType.TOUCH_END);\r\n            this.left.off(Input.EventType.TOUCH_END);\r\n            this.right.off(Input.EventType.TOUCH_CANCEL);\r\n            this.left.off(Input.EventType.TOUCH_CANCEL);\r\n            this.right.off(Input.EventType.TOUCH_START);\r\n            this.left.off(Input.EventType.TOUCH_START);\r\n            this.maxBtn.node.off(\"click\");\r\n            this.Slider.progress = 0;\r\n            Utils.SetNodeGray(this.sellBtn.node, true);\r\n        } else {\r\n            this.Slider.enabled = true;\r\n            this.Slider.node.on('slide', this.onSlide, this);\r\n            this.right.on(Input.EventType.TOUCH_END, this.onAdd, this);\r\n            this.left.on(Input.EventType.TOUCH_END, this.onDel, this);\r\n            this.right.on(Input.EventType.TOUCH_CANCEL, this.onAdd, this);\r\n            this.left.on(Input.EventType.TOUCH_CANCEL, this.onDel, this);\r\n            this.right.on(Input.EventType.TOUCH_START, () => { this.onTouchStart(1) }, this);\r\n            this.left.on(Input.EventType.TOUCH_START, () => { this.onTouchStart(2) }, this);\r\n            this.maxBtn.node.on(\"click\", this.onMaxBtn, this);\r\n            Utils.SetNodeGray(this.sellBtn.node, false);\r\n        }\r\n        this.updateProgress();\r\n        \r\n    }\r\n    private onTouchStart(index: number) {\r\n        this.touchIndex = index;\r\n    }\r\n\r\n    private onAdd(e?: any) {\r\n        this.selectCount += this.addNum;\r\n        //超出拥有数量\r\n        if (this.selectCount > this.maxItemNum) {\r\n            this.selectCount = this.maxItemNum;\r\n        }\r\n        this.updateProgress();\r\n        if (e) {\r\n            this.touchIndex = 0;\r\n            this.touchTime = 0;\r\n        }\r\n    }\r\n\r\n    private onDel(e?: any) {\r\n        if (this.selectCount <= this.addNum) return;\r\n        this.selectCount -= this.addNum;\r\n        if (this.selectCount < this.addNum) {\r\n            this.selectCount = this.addNum;\r\n        }\r\n        this.updateProgress();\r\n        if (e) {\r\n            this.touchIndex = 0;\r\n            this.touchTime = 0;\r\n        }\r\n    }\r\n\r\n    private onSlide(e?: Slider) {\r\n        this.selectCount = Math.ceil(this.maxItemNum * this.Slider.progress);\r\n        if (this.selectCount % this.addNum != 0) {\r\n            this.selectCount = Math.ceil(this.selectCount / this.addNum) * this.addNum;\r\n        }\r\n        if (this.selectCount > this.maxItemNum) {\r\n            this.selectCount = this.maxItemNum;\r\n        }\r\n        if (this.selectCount < this.addNum) {\r\n            this.selectCount = this.addNum;\r\n        }\r\n        this.updateProgress();\r\n        if (e) {\r\n            this.touchIndex = 0;\r\n            this.touchTime = 0;\r\n        }\r\n    }\r\n\r\n    private onMaxBtn() {\r\n        this.selectCount = this.maxItemNum;\r\n        this.updateProgress();\r\n        this.touchIndex = 0;\r\n        this.touchTime = 0;\r\n    }\r\n\r\n    private updateProgress() {\r\n        let price = this.selectData.price //单价\r\n        let keepPre = 2;\r\n        this.need_count.string = this.selectCount + \"\";\r\n        let all_price = this.selectCount * price; //选择数量的总价\r\n        this.buyVaule.string = Utils.ToFixed(all_price  / 10000, keepPre);\r\n        // let is_can_buy = (num / 10000) <= PlayerData.GetItemCount(1);\r\n        // this.buyVaule.color = is_can_buy ? new Color().fromHEX(\"#ffffff\") : new Color().fromHEX(\"#ff3f3f\");\r\n        this.sellVaule.string = Utils.ToFixed(all_price / 10000 - (this.selectCount * this.costNum + this.tradeData.AddFees / 10000));\r\n        this.Slider.progress = this.selectCount / this.maxItemNum;\r\n    }\r\n\r\n    private onAA(){\r\n        if(this.type == SOrderType.SELL && this.market_type == ThingTypeName.BattleCard){\r\n            this.ScrollView.node.active = true;\r\n            this.ScrollView.UpdateDatas(PlayerData.cards)\r\n        }\r\n    }\r\n\r\n    private onSend() {\r\n        let value = 0\r\n        let currency = PlayerData.GetItemCount(1);\r\n        let is_gem: boolean = true\r\n        value = this.selectData.price / 10000 \r\n        if (this.type == SOrderType.BUY && is_gem) {\r\n            let need_currency = this.selectCount * value;\r\n            if (currency < need_currency) {\r\n                Tips.Show(\"货币不足\")\r\n                return;\r\n            }\r\n        }\r\n\r\n        if(this.market_type == ThingTypeName.Item){\r\n            let buyData = new Req[\"market.protocol.takeitemorder\"]();\r\n            buyData.orderId = this.selectData.orderId;\r\n            buyData.takeGroup = this.selectCount;\r\n            Session.Send(Route[\"market.protocol.takeitemorder\"],buyData);\r\n        }else{\r\n\r\n            //随机一个匹配的卡牌\r\n            let cardUnionId =  this.select_card_data.id\r\n            if(this.selectData.orderType == \"buy\"){\r\n                cardUnionId = \"\"\r\n                for (const iterator of PlayerData.cards) {\r\n                    if(iterator.cardId == this.select_card_data.cardId && iterator.level == this.select_card_data.level && iterator.quality == this.select_card_data.quality){\r\n                        cardUnionId = iterator.id\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(cardUnionId == \"\"){\r\n                MsgPanel.Show(\"没有匹配英雄\")\r\n                return\r\n            }\r\n\r\n            this.ScrollView.node.active = false;\r\n            let buyData = new Req[\"market.protocol.takecardorder\"]();\r\n            buyData.orderId = this.selectData.orderId;\r\n            buyData.cardUnionId = cardUnionId;\r\n            Session.Send(Route[\"market.protocol.takecardorder\"],buyData);\r\n        }\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        let size = this.Slider.node.getComponent(UITransform).contentSize;\r\n        this.progress.getComponent(UITransform).setContentSize(this.Slider.progress * size.width, size.height);\r\n        if (this.touchIndex != 0) {\r\n            this.touchTime += dt;\r\n            if (this.touchTime >= 0.5) {\r\n                this.touchTime = 0.47;\r\n                switch (this.touchIndex) {\r\n                    case 1:\r\n                        this.onAdd()\r\n                        break;\r\n                    case 2:\r\n                        this.onDel();\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private UpdateCardItem(item: Node, data: proto.base.IBattleCard, index: number) {\r\n        // item.getChildByPath(\"cardNode/select\").active = index == this.select_index;\r\n        let cardItem = item.getComponent(Card);\r\n        if (!cardItem) cardItem = item.addComponent(Card);\r\n        // cardItem.setSelect(index == this.select_index)\r\n        cardItem.SetData(data);\r\n    }\r\n\r\n        /**\r\n     * 选中道具\r\n     * @param index \r\n     */\r\n        protected async SelectItem(index: number, item: Node) {\r\n            if (!this.$hasLoad) await this.initSub;\r\n            let card = item.getComponent(Card);\r\n            this.select_card_data = card.getData();\r\n        }\r\n    \r\n\r\n\r\n    protected onHide(...args: any[]): void {\r\n        this.selectData = undefined;\r\n        this.Slider.node.off('slide');\r\n        this.right.off(Input.EventType.TOUCH_END);\r\n        this.left.off(Input.EventType.TOUCH_END);\r\n        this.right.off(Input.EventType.TOUCH_CANCEL);\r\n        this.left.off(Input.EventType.TOUCH_CANCEL);\r\n        this.right.off(Input.EventType.TOUCH_START);\r\n        this.left.off(Input.EventType.TOUCH_START);\r\n        this.maxBtn.node.off(\"click\");\r\n\r\n    }\r\n}"]}