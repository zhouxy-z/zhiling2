{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/task/SeasonActiveTaskCont.ts"],"names":["SeasonActiveTaskCont","Component","Input","Label","ProgressBar","Sprite","SpriteFrame","Vec3","PlayerData","Req","Route","Session","EventMgr","Evt_TaskShowBoxTips","DateUtils","ResMgr","proBar","tips_lab","lv","time","expNum","maxExp","proNum","boxItemTemp","box","isInit","datas","curNum","maxNum","chapt_cfg_data","onLoad","node","getChildByName","getComponent","getChildByPath","on","EventType","TOUCH_END","onBtnClick","updateShow","SetData","name","count","index","length","element","GetTaskState","string","taskData","stsTask","exp","max_exp","tempNum","progress","data","player","tasks","TopTask","task_state","console","log","GetCurSeasonEndTime","ServerTime","FormatTime","S","M","H","D","url","LoadResAbSub","res","spriteFrame","send_task","taskId","TaskId","server","Send","tipsW","itemPos","worldPosition","clone","showPos","offset","x","y","emit","update","dt","endTime"],"mappings":"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","sourcesContent":["import { Button, Component, Input, instantiate, Label, Node, ProgressBar, Sprite, SpriteFrame, UITransform, v3, Vec3 } from \"cc\";\r\nimport { CfgMgr, StdTask } from \"../../manager/CfgMgr\";\r\nimport { SPlayerDataTask } from \"../player/PlayerStruct\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Req, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { EventMgr, Evt_TaskShowBoxTips } from \"../../manager/EventMgr\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\n\r\nexport class SeasonActiveTaskCont extends Component {\r\n    private proBar:ProgressBar;\r\n    private tips_lab:Label;\r\n    private lv:Label;\r\n    private time:Label;\r\n    private expNum:Label;\r\n    private maxExp:Label;\r\n    private proNum:Label;\r\n    private boxItemTemp:Node;\r\n    private box:Sprite\r\n    \r\n    private isInit:boolean;\r\n    private datas:SPlayerDataTask[];\r\n    private curNum:number;\r\n    private maxNum:number;\r\n    private chapt_cfg_data:StdTask;\r\n    protected onLoad(): void {\r\n        this.proBar = this.node.getChildByName(\"proBar\").getComponent(ProgressBar);\r\n        this.tips_lab = this.node.getChildByPath(\"tipsCont/lab\").getComponent(Label);\r\n        this.lv = this.node.getChildByName(\"lv\").getComponent(Label);\r\n        this.time = this.node.getChildByName(\"time\").getComponent(Label);\r\n        this.expNum = this.node.getChildByPath(\"expNode/expNum\").getComponent(Label);\r\n        this.maxExp = this.node.getChildByPath(\"expNode/maxExp\").getComponent(Label);\r\n        this.box = this.node.getChildByPath(\"boxItemTemp/box\").getComponent(Sprite);\r\n        this.proNum = this.node.getChildByPath(\"boxItemTemp/check/progreed/proNum\").getComponent(Label);\r\n        this.boxItemTemp = this.node.getChildByName(\"boxItemTemp\");\r\n        this.boxItemTemp.on(Input.EventType.TOUCH_END, this.onBtnClick, this);\r\n      \r\n        this.isInit = true;\r\n        this.updateShow();\r\n    }\r\n\r\n    /**\r\n     * 设置角色数据\r\n     * @param roleId \r\n     */\r\n    SetData(datas:SPlayerDataTask[], name:string, chapt_cfg_data:StdTask) {\r\n        let count = 0\r\n        for (let index = 0; index < datas.length; index++) {\r\n            const element = datas[index];\r\n            if(PlayerData.GetTaskState(element) == 1){\r\n                count++;\r\n            }\r\n        }\r\n        this.datas = datas || [];1111\r\n        this.tips_lab.string = name;\r\n        this.curNum = count;\r\n        this.maxNum = datas.length;\r\n        this.chapt_cfg_data = chapt_cfg_data;\r\n        this.updateShow();\r\n    }\r\n\r\n    private updateShow():void{\r\n        if (!this.isInit || !this.datas) return;\r\n        let taskData:SPlayerDataTask;\r\n        let stsTask:StdTask;\r\n        let lv = 0;\r\n        let exp = 0;\r\n        let max_exp = 100\r\n        this.expNum.string = exp + \"/\";\r\n        this.maxExp.string = max_exp + \"\";\r\n        this.lv.string = \"Lv.\" + lv + \"\";  \r\n        let tempNum:number = this.curNum;\r\n        if(this.curNum > this.maxNum){\r\n            tempNum = this.maxNum;\r\n        }\r\n        this.proNum.string = tempNum + \"/\" + this.maxNum;\r\n        this.proBar.progress = exp / max_exp;\r\n        let data = PlayerData.player.tasks[this.chapt_cfg_data.TopTask]\r\n        let task_state = 3\r\n        if(data){\r\n            task_state =  PlayerData.GetTaskState(data)\r\n        }\r\n        console.log(PlayerData.GetCurSeasonEndTime())\r\n        let time = PlayerData.GetCurSeasonEndTime() - DateUtils.ServerTime\r\n        if(time > 86400){\r\n            this.time.string = DateUtils.FormatTime(time,{S: \"%{s}秒\", M: \"%{m}分%{s}秒\",H: \"%{h}时%{m}分%{s}秒\",D:\"%{d}天\"});\r\n        }   \r\n        let url = \"sheets/task/seasonBox/spriteFrame\"\r\n        if(task_state == 1){\r\n            url = \"sheets/task/box_open/spriteFrame\"\r\n        }\r\n        ResMgr.LoadResAbSub(url, SpriteFrame, res=>{\r\n            this.box.spriteFrame = res;\r\n        })\r\n    }\r\n\r\n    private onBtnClick(): void {\r\n        let data = PlayerData.player.tasks[this.chapt_cfg_data.TopTask]\r\n        let task_state = 3\r\n        if(data){\r\n            task_state =  PlayerData.GetTaskState(data)\r\n        }\r\n        if (task_state == 2) {\r\n            let send_task = new Req[\"player.protocol.completetask\"]();\r\n            send_task.taskId = this.chapt_cfg_data.TaskId;\r\n            send_task.server = PlayerData.server;\r\n            Session.Send(Route[\"player.protocol.completetask\"], send_task);\r\n        } else {\r\n            let tipsW: number = 382;\r\n            let itemPos = this.boxItemTemp.worldPosition.clone();\r\n            let showPos: Vec3;\r\n            let offset: number = tipsW / 2 + itemPos.x;\r\n            if (offset > 1450) {\r\n                offset = 1450 - tipsW / 2;\r\n            } else {\r\n                offset = itemPos.x;\r\n            }\r\n            showPos = new Vec3(offset, itemPos.y - 197, 0);\r\n            EventMgr.emit(Evt_TaskShowBoxTips, this.chapt_cfg_data, showPos, this.boxItemTemp);\r\n        }\r\n\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        let endTime: number = PlayerData.GetCurSeasonEndTime();\r\n        let time = endTime - DateUtils.ServerTime\r\n        if (time < 86400) {\r\n            if(time >= 0){\r\n                this.time.string = DateUtils.FormatTime(time, \"%{hh}:%{mm}:%{ss}\");\r\n            }else{\r\n                this.time.string = \"\";\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}