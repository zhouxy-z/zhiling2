{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/utils/Snapshot.ts"],"names":["Snapshot","_decorator","Component","Node","RenderTexture","SpriteFrame","Camera","Layers","director","Sprite","UITransform","RenderRoot2D","Rect","Color","sp","view","instantiate","Mask","Second","Utils","GameObj","ResMgr","GameSet","ccclass","property","init","_instance","_root","layer","addComponent","getScene","addChild","sceneCameras","uiCameras","Root","Add","targetNode","oldLayer","results","MapParentBy","forEach","value","console","log","toString","size","getVisibleSize","width","height","getComponent","renderMap","has","obj","get","spriteNode","active","cameraNode","isNew","Enum","img","DEFAULT","camera","undefined","tex","mainCamera","node","setWorldPosition","worldPosition","UICamera","clearColor","clearFlags","ClearFlag","SOLID_COLOR","visibility","priority","initialize","sf","rect","texture","spriteFrame","hasLoad","GetLoadSub","then","MapChildrenFor","child","targetTexture","set","masks","comp","Skeleton","customMaterial","uuid","depth_material_uuid","getDepthMaterial","material","Remove","key","clear","delete","Map"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, RenderTexture, SpriteFrame, Camera, Layers, director, Vec3, math, geometry, Sprite, UITransform, MeshRenderer, find, Size, RenderRoot2D, Rect, Color, v3, sp, resources, Material, view, instantiate, Mask } from 'cc';\r\nimport { Second, Utils } from './Utils';\r\nimport { GameObj } from '../manager/GameRoot';\r\nimport { ResMgr } from '../manager/ResMgr';\r\nimport { GameSet } from '../manager/GameSet';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport class Snapshot extends Component {\r\n    private static _instance: Snapshot = null!;\r\n    private static _root: Node;\r\n    private static sceneCameras: { [layer: number]: { camera: Camera, img: Node, tex: RenderTexture } } = {};\r\n    private static uiCameras: { [layer: number]: { camera: Camera, img: Node, tex: RenderTexture } } = {};\r\n    private static renderMap = new Map<Node, {\r\n        camera: Camera,\r\n        layer: number,\r\n        masks: Node[],\r\n        oldLayer: number,\r\n        spriteNode: Node\r\n    }>();\r\n\r\n    private static init(): Snapshot {\r\n        if (!this._instance) {\r\n            this._root = new Node('Snapshot');\r\n            this._root.layer = 4;\r\n            this._root.addComponent(RenderRoot2D);\r\n            this._instance = this._root.addComponent(Snapshot);\r\n            director.getScene()?.addChild(this._root);\r\n            this.sceneCameras = {};\r\n            this.uiCameras = {};\r\n        }\r\n        return this._instance;\r\n    }\r\n    static get Root() { return this._root; }\r\n    static Add(targetNode: Node): Node {\r\n        let layer = 4;\r\n        let oldLayer = targetNode.layer;\r\n        targetNode['$$old_layer'] = oldLayer;\r\n        targetNode.layer = targetNode.layer | layer;\r\n        let results = Utils.MapParentBy(targetNode, Mask);\r\n        results.forEach(value => value.layer = value.layer | layer);\r\n        console.log(\"layer\", targetNode.layer.toString(2), layer.toString(2));\r\n        let size = view.getVisibleSize();\r\n        let width = size.width, height = size.height;\r\n        if (!this._instance) this.init();\r\n        if (!targetNode.getComponent) targetNode.addComponent(UITransform);\r\n        if (this.renderMap.has(targetNode)) {\r\n            let obj = this.renderMap.get(targetNode);\r\n            return obj.spriteNode;\r\n        }\r\n        this._root.active = true;\r\n        let obj: { camera: Camera, img: Node, tex: RenderTexture };\r\n        let cameraNode: Node, isNew = false;\r\n        if (oldLayer & Layers.Enum['SCENE']) {\r\n            obj = this.sceneCameras[layer];\r\n            if (!obj) {\r\n                isNew = true;\r\n                let img = new Node();\r\n                img.layer = Layers.Enum.DEFAULT;\r\n                img.addComponent(Sprite);\r\n                obj = { camera: undefined, img: img, tex: undefined };\r\n                cameraNode = instantiate(GameSet.mainCamera.node);\r\n                obj.camera = cameraNode.getComponent(Camera);\r\n                obj.camera.node.setWorldPosition(GameSet.mainCamera.node.worldPosition);\r\n                this.sceneCameras[layer] = obj;\r\n            }\r\n        } else {\r\n            obj = this.uiCameras[layer];\r\n            if (!obj) {\r\n                isNew = true;\r\n                let img = new Node();\r\n                img.layer = Layers.Enum.DEFAULT;\r\n                img.addComponent(Sprite);\r\n                obj = { camera: undefined, img: img, tex: undefined };\r\n                cameraNode = instantiate(GameSet.UICamera.node);\r\n                obj.camera = cameraNode.getComponent(Camera);\r\n                obj.camera.node.setWorldPosition(GameSet.UICamera.node.worldPosition);\r\n                this.uiCameras[layer] = obj;\r\n            }\r\n        }\r\n        if (isNew) {\r\n            obj.camera.clearColor = new Color(0, 0, 0, 200); // 透明背景\r\n            obj.camera.clearFlags = Camera.ClearFlag.SOLID_COLOR;\r\n            obj.camera.visibility = layer;\r\n            cameraNode.layer = layer;\r\n            obj.camera.priority = -1;\r\n            this._root.addChild(cameraNode);\r\n\r\n            let tex = new RenderTexture();\r\n            tex.initialize({ width: width, height: height });\r\n            let sf = new SpriteFrame();\r\n            sf.rect = new Rect(0, 0, width, height);\r\n            sf.texture = tex;\r\n            obj.tex = tex;\r\n            obj.img.getComponent(Sprite).spriteFrame = sf;\r\n\r\n        }\r\n        if (targetNode instanceof GameObj) {\r\n            if (!targetNode.hasLoad) {\r\n                targetNode.GetLoadSub().then(() => {\r\n                    Utils.MapChildrenFor(targetNode, child => {\r\n                        child.layer = child.layer | layer;\r\n                    });\r\n                    obj.camera.targetTexture = obj.tex;\r\n                })\r\n            } else {\r\n                Second(1).then(() => {\r\n                    Utils.MapChildrenFor(targetNode, child => {\r\n                        child.layer = child.layer | layer;\r\n                    });\r\n                    obj.camera.targetTexture = obj.tex;\r\n                });\r\n            }\r\n        } else {\r\n            Second(0).then(() => {\r\n                Utils.MapChildrenFor(targetNode, child => {\r\n                    child.layer = child.layer | layer;\r\n                });\r\n                obj.camera.targetTexture = obj.tex;\r\n            });\r\n        }\r\n\r\n        let spriteNode = obj.img;\r\n        this.renderMap.set(targetNode, {\r\n            camera: obj.camera,\r\n            layer: layer,\r\n            masks: results,\r\n            oldLayer: oldLayer,\r\n            spriteNode: spriteNode\r\n        })\r\n        Utils.MapChildrenFor(targetNode, child => {\r\n            let comp = child.getComponent(Sprite) || child.getComponent(sp.Skeleton);\r\n            if (comp) {\r\n                if (!comp.customMaterial || comp.customMaterial.uuid != ResMgr.depth_material_uuid) {\r\n                    ResMgr.getDepthMaterial().then(material => { comp.customMaterial = material; });\r\n                }\r\n            }\r\n            child.layer = child.layer | layer;\r\n        });\r\n        return spriteNode;\r\n    }\r\n\r\n    static Remove(targetNode?: Node) {\r\n        if (!targetNode) {\r\n            this.renderMap.forEach((obj, key) => {\r\n                key.layer = key['$$old_layer'];\r\n                Utils.MapChildrenFor(key, child => {\r\n                    child.layer = key['$$old_layer'];\r\n                });\r\n                obj.masks.forEach(value => value.layer = key['$$old_layer']);\r\n            });\r\n            this.renderMap.clear();\r\n        } else if (this.renderMap.has(targetNode)) {\r\n            targetNode.layer = targetNode['$$old_layer'];\r\n            Utils.MapChildrenFor(targetNode, child => {\r\n                child.layer = targetNode['$$old_layer'];\r\n            });\r\n            let obj = this.renderMap.get(targetNode);\r\n            obj.masks.forEach(value => value.layer = targetNode['$$old_layer']);\r\n            this.renderMap.delete(targetNode);\r\n        }\r\n    }\r\n}\r\n"]}