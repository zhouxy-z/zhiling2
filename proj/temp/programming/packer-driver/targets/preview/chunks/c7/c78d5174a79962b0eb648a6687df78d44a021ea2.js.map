{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/SettingCardsGroupPanel.ts"],"names":["SettingCardsGroupPanel","Button","EditBox","Input","Layout","ScrollView","instantiate","CfgMgr","Session","Panel","PlayerData","Card","Protocol","prefab","tile","scroller","noneListCont","okBtn","setName","clone_item","limit","datas","selects","onLoad","CloseBy","find","node","on","onSelect","EventType","CLICK","onOk","flush","iterator","cards","push","sort","a","b","a_cost","GetCard","cardId","Cost","b_cost","content","removeAllChildren","card","TOUCH_END","updateCardItem","addChild","layout","getComponent","enabled","updateLayout","scrollToTop","children","forEach","item","console","log","getPosition","onShow","Send","getplayerdecks","data","addComponent","SetData","string","add","setdeckattrs","attrs","id","cur_id","name","type","send_data","setdeckcards","cardIds","deckId","setSelect","event","getCurrentTarget","index","getSiblingIndex","is_select","getSelectState","splice","indexOf","onHide"],"mappings":"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","sourcesContent":["import { Button, EditBox, EventTouch, Input, Label, Layout, Node, ScrollView, Sprite, SpriteFrame, Toggle, UIOpacity, instantiate } from \"cc\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Card } from \"./Card\";\r\nimport  base  from \"../../net/proto/BaseUtils\";\r\nimport { Protocol } from \"../../net/Protocol\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\n\r\n\r\nexport class SettingCardsGroupPanel extends Panel {\r\n    protected prefab: string = \"prefabs/cards/SettingCardsGroupPanel\";\r\n \r\n    protected tile: Label;\r\n    protected scroller: ScrollView;\r\n    private noneListCont:Node;\r\n    private okBtn:Button;\r\n    private setName: EditBox;\r\n    private clone_item: Node;\r\n    protected limit = 0;\r\n    protected datas: base.IBattleCard[];\r\n    private selects = [];\r\n    \r\n\r\n    protected onLoad() {\r\n        this.CloseBy(\"closeBtn\");\r\n        this.noneListCont = this.find(\"noneListCont\");\r\n        this.scroller = this.find(\"ScrollView\", ScrollView);\r\n        this.clone_item = this.find(\"ScrollView/view/content/Cards\");\r\n        this.scroller.node.on('select', this.onSelect, this);\r\n        this.setName = this.find(\"setName\", EditBox);\r\n        this.find(\"okBtn\", Button).node.on(Button.EventType.CLICK, this.onOk, this);\r\n       \r\n    }\r\n\r\n    public flush(...args: any[]): void { \r\n        this.datas = [];\r\n        for (const iterator of PlayerData.cards) {\r\n            this.datas.push(iterator)\r\n        }\r\n        this.datas.sort((a:base.IBattleCard, b:base.IBattleCard)=>{\r\n            let a_cost = CfgMgr.GetCard(a.cardId).Cost;\r\n            let b_cost = CfgMgr.GetCard(b.cardId).Cost;\r\n            return a_cost - b_cost;\r\n        })\r\n        this.scroller.content.removeAllChildren();\r\n        for (const iterator of this.datas) {\r\n            let card = instantiate(this.clone_item);\r\n            card.on(Input.EventType.TOUCH_END, this.onSelect, this)\r\n            this.updateCardItem(card, iterator);\r\n            this.scroller.content.addChild(card);\r\n        }\r\n        const layout = this.scroller.content.getComponent(Layout);\r\n        layout.enabled = false;\r\n        layout.enabled = true;\r\n        layout.updateLayout();\r\n        this.scroller.scrollToTop(0.01)\r\n\r\n        \r\n       this.scroller.content.children.forEach(item=>{\r\n        console.log(item.getPosition())\r\n        })\r\n    }\r\n\r\n    protected onShow(): void {\r\n        Session.Send(Protocol.getplayerdecks)\r\n    }\r\n   \r\n\r\n\r\n    protected updateCardItem(item: Node, data: base.IBattleCard) {\r\n        let card = item.getComponent(Card);\r\n        if (!card) card = item.addComponent(Card);\r\n        card.SetData(data);\r\n    }\r\n\r\n\r\n\r\n    protected onOk() {\r\n        if(this.setName.string != \"\"){\r\n            let add = new Protocol.setdeckattrs();\r\n            add.attrs = {id: PlayerData.cur_id, name: this.setName.string, type:null};\r\n            Session.Send(add)\r\n            this.setName.string = \"\";\r\n        }\r\n        let send_data = new Protocol.setdeckcards();\r\n        send_data.cardIds = this.selects;\r\n        send_data.deckId = PlayerData.cur_id;\r\n        Session.Send(send_data);\r\n        this.selects = [];\r\n        this.scroller.content.children.forEach(item =>{\r\n            item.getComponent(Card).setSelect(false);\r\n        })\r\n    }\r\n\r\n    protected  onSelect(event:EventTouch) {\r\n        let item = event.getCurrentTarget();\r\n        let index = item.getSiblingIndex();\r\n        let cards = item.getComponent(Card);\r\n        let is_select = cards.getSelectState();\r\n        cards.setSelect(!is_select)\r\n        if(!is_select){\r\n            this.selects.push(this.datas[index].id)\r\n        }else{\r\n           this.selects.splice(this.selects.indexOf(this.datas[index].id), 1)\r\n        }\r\n    }\r\n\r\n\r\n    protected onHide(...args: any[]): void {\r\n    }\r\n\r\n}\r\n"]}