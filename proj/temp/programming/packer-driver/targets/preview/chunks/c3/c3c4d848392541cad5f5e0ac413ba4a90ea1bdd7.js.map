{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/battle/opOutput/Out_CardDeckFrontToHandTail.ts"],"names":["Out_CardDeckFrontToHandTail","tween","UITransform","v3","BattleBaseComp","battleLogicMgr","BattleCard","battleDataMgr","start","showCardLayer","active","data","cards","length","creatCard","console","error","exit","reset","shift","cardNode","fromPoolCard","cardCom","getComponent","addComponent","setData","parent","layer","position","layerTrans","node","startPos","convertToWorldSpaceAR","getPosition","worldPosition","targetPos","isPlayerA","ownerPlayerId","grid","handGridList","cardData","flyCard","checkNextCard","width","height","to","easing","call","index"],"mappings":"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","sourcesContent":["import { Node, tween, UITransform, v3, Vec3 } from \"cc\";\r\nimport { base } from \"../../../net/proto/proto\";\r\nimport { BattleBaseComp } from \"../BattleBaseComp\";\r\nimport { battleLogicMgr } from \"../BattleLogicMgr\";\r\nimport { BattleCard } from \"../BattleCard\";\r\nimport { battleDataMgr } from \"../BattleDataMgr\";\r\nimport { BattleCardGrid } from \"../BattleCardGrid\";\r\n/**\r\n * 卡牌由卡组最前到手牌末尾\r\n */\r\nexport class Out_CardDeckFrontToHandTail extends BattleBaseComp<base.IBattleRoomOpOutput_CardDeckTopToHandTail> {\r\n    protected start(): void {\r\n        battleLogicMgr.showCardLayer.active = true;\r\n        if (this.data.cards && this.data.cards.length) {\r\n            this.creatCard();\r\n        } else {\r\n            console.error(\"补卡数据为空\");\r\n            this.exit();\r\n        }\r\n    }\r\n\r\n    protected reset(): void {\r\n        battleLogicMgr.showCardLayer.active = false;\r\n    }\r\n\r\n    private creatCard(): void {\r\n        let data: base.IBattleRoomCardData = this.data.cards.shift();\r\n        let cardNode: Node = battleLogicMgr.fromPoolCard;\r\n        let cardCom: BattleCard = cardNode.getComponent(BattleCard) || cardNode.addComponent(BattleCard);\r\n        cardCom.setData(data);\r\n        cardNode.parent = battleLogicMgr.showCardLayer;\r\n        cardNode.layer = cardNode.parent.layer;\r\n        cardNode.position = v3(0,0,0);\r\n        cardNode.active = true;\r\n        let layerTrans: UITransform = cardCom.node.parent.getComponent(UITransform);\r\n        let startPos: Vec3 = layerTrans.convertToWorldSpaceAR(cardCom.node.getPosition());\r\n        cardCom.node.worldPosition = startPos;\r\n        let targetPos: Vec3;\r\n        //第一视觉补牌\r\n        if (battleDataMgr.isPlayerA(this.ownerPlayerId)) {\r\n            for (let grid of battleLogicMgr.handGridList) {\r\n                if (!grid.cardData) {\r\n                    targetPos = grid.node.worldPosition;\r\n                    break;\r\n                }\r\n            }\r\n            if (targetPos) {\r\n                this.flyCard(cardCom, targetPos);\r\n            } else {\r\n                this.checkNextCard();\r\n            }\r\n        } else {\r\n            targetPos = layerTrans.convertToWorldSpaceAR(v3(layerTrans.width * 0.5, layerTrans.height * 0.5, 0));\r\n            this.flyCard(cardCom, targetPos);\r\n        }\r\n    }\r\n\r\n    private flyCard(cardCom: BattleCard, targetPos: Vec3): void {\r\n        tween(cardCom.node)\r\n        .to(0.5, { worldPosition: targetPos }, { easing: 'cubicIn' })\r\n        .call(()=>{\r\n            if (battleDataMgr.isPlayerA(this.ownerPlayerId)) {\r\n                let grid: BattleCardGrid;\r\n                for (let index = 0; index < battleLogicMgr.handGridList.length; index++) {\r\n                    grid = battleLogicMgr.handGridList[index];\r\n                    if (!grid.cardData) {\r\n                        grid.setData(cardCom.cardData);\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n            }\r\n            this.checkNextCard();\r\n        })\r\n        .start();\r\n    }\r\n\r\n    private checkNextCard(): void {\r\n        if (this.data.cards.length > 0) {\r\n            this.creatCard();\r\n        } else {\r\n            this.exit();\r\n        }\r\n    }\r\n}"]}