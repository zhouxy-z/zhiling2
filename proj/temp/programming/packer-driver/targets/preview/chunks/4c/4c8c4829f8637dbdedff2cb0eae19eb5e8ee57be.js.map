{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/manager/RedDotNode.ts"],"names":["RedDotNode","constructor","nodeID","parent","children","isActive","addChild","child","indexOf","push","activate","console","log","deactivate","allChildrenInactive","every"],"mappings":";;;iBAAMA,U;;;;;;;;;;;AAAAA,MAAAA,U,GAAN,MAAMA,UAAN,CAAiB;AAIa;AAE1BC,QAAAA,WAAW,CAACC,MAAD,EAAiBC,MAAjB,EAAmD;AAAA,cAAlCA,MAAkC;AAAlCA,YAAAA,MAAkC,GAAN,IAAM;AAAA;;AAAA,eALvDD,MAKuD;AALvC;AAKuC,eAJvDC,MAIuD;AAJ5B;AAI4B,eAHvDC,QAGuD;AAH/B;AAG+B,eAFvDC,QAEuD;AAC1D,eAAKH,MAAL,GAAcA,MAAd;AACA,eAAKC,MAAL,GAAcA,MAAd;AACA,eAAKC,QAAL,GAAgB,EAAhB;AACA,eAAKC,QAAL,GAAgB,KAAhB;AACH,SAXY,CAab;;;AACOC,QAAAA,QAAQ,CAACC,KAAD,EAA0B;AACrC,cAAIA,KAAK,KAAK,IAAV,IAAkB,KAAKH,QAAL,CAAcI,OAAd,CAAsBD,KAAtB,CAAtB,EAAoD;AACpD,eAAKH,QAAL,CAAcK,IAAd,CAAmBF,KAAnB;AACAA,UAAAA,KAAK,CAACJ,MAAN,GAAe,IAAf;AACH,SAlBY,CAoBb;;;AACOO,QAAAA,QAAQ,GAAS;AACpB,cAAI,KAAKL,QAAT,EAAmB,OADC,CACO;;AAE3B,eAAKA,QAAL,GAAgB,IAAhB;AACAM,UAAAA,OAAO,CAACC,GAAR,mBAAkB,KAAKV,MAAvB,0BAJoB,CAMpB;;AACA,cAAI,KAAKC,MAAT,EAAiB;AACb,iBAAKA,MAAL,CAAYO,QAAZ;AACH;AACJ,SA/BY,CAiCb;;;AACOG,QAAAA,UAAU,GAAS;AACtB,cAAI,CAAC,KAAKR,QAAV,EAAoB,OADE,CACM;AAE5B;;AACA,cAAMS,mBAAmB,GAAG,KAAKV,QAAL,CAAcW,KAAd,CAAoBR,KAAK,IAAI,CAACA,KAAK,CAACF,QAApC,CAA5B;;AAEA,cAAIS,mBAAJ,EAAyB;AACrB,iBAAKT,QAAL,GAAgB,KAAhB;AACAM,YAAAA,OAAO,CAACC,GAAR,mBAAkB,KAAKV,MAAvB,0BAFqB,CAIrB;;AACA,gBAAI,KAAKC,MAAT,EAAiB;AACb,mBAAKA,MAAL,CAAYU,UAAZ;AACH;AACJ;AACJ;;AAjDY,O","sourcesContent":["class RedDotNode {\r\n    public nodeID: number; // 节点唯一标识\r\n    public parent: RedDotNode | null; // 父节点\r\n    public children: RedDotNode[]; // 子节点列表\r\n    public isActive: boolean; // 红点状态\r\n\r\n    constructor(nodeID: number, parent: RedDotNode | null = null) {\r\n        this.nodeID = nodeID;\r\n        this.parent = parent;\r\n        this.children = [];\r\n        this.isActive = false;\r\n    }\r\n\r\n    // 添加子节点\r\n    public addChild(child: RedDotNode): void {\r\n        if (child === null || this.children.indexOf(child)) return;\r\n        this.children.push(child);\r\n        child.parent = this;\r\n    }\r\n\r\n    // 点亮当前节点及其所有父节点\r\n    public activate(): void {\r\n        if (this.isActive) return; // 如果已经点亮，则直接返回\r\n\r\n        this.isActive = true;\r\n        console.log(`节点 ${this.nodeID} 被点亮`);\r\n\r\n        // 递归点亮父节点\r\n        if (this.parent) {\r\n            this.parent.activate();\r\n        }\r\n    }\r\n\r\n    // 熄灭当前节点及其父节点（如果所有子节点都熄灭）\r\n    public deactivate(): void {\r\n        if (!this.isActive) return; // 如果已经熄灭，则直接返回\r\n\r\n        // 检查所有子节点是否都熄灭\r\n        const allChildrenInactive = this.children.every(child => !child.isActive);\r\n\r\n        if (allChildrenInactive) {\r\n            this.isActive = false;\r\n            console.log(`节点 ${this.nodeID} 被熄灭`);\r\n\r\n            // 递归熄灭父节点\r\n            if (this.parent) {\r\n                this.parent.deactivate();\r\n            }\r\n        }\r\n    }\r\n}"]}