{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardsGroupSetting.ts"],"names":["CardsGroupSetting","Button","Component","Input","Label","Sprite","SpriteFrame","Toggle","Route","Session","EventMgr","Evt_Card_Back_Update","Evt_Card_Group_Update","Evt_Card_Head_Update","PlayerData","ResMgr","cardBack","Goto","CfgMgr","CardGroupHead","AutoScroller","back_btn","navBtns","ornamentNode","sortBtn","sortNode","sortNav","sortNodeBack","filtrateBtn","filtrateNode","filtrateNav","filtrateNodeBack","btnList","headScroller","backScroller","noneListCont","card_back","headitem","namelabel","tag1","tag2","filtrate_type","sort_type","callback","$loadSub","complete","hasLoad","onLoad","node","getChildByName","on","EventType","TOUCH_END","Hide","children","concat","btn","off","onPage","getChildByPath","CLICK","onBtnPage","getComponent","SetHandle","updateHeadItem","bind","onSelectHead","updateCardBackItem","addComponent","forEach","index","isChecked","setSort","onClick","active","TOGGLE","setFiltrate","setHeadList","setBackList","updateScroll","loadSub","thisObj","Promise","resolve","reject","SetPage","page","callBack","undefined","t","indexOf","setRightData","updatePage","length","element","unCheckmark","Checkmark","Send","data_list","data","cardHeadList","list","key","push","UpdateDatas","cardBackList","item","head","is_use","getCardGroupDataById","cur_id","avatarId","SetData","like","icon","favorite","use","icon_spr","GetCardBackCfgById","cardBackId","LoadResAbSub","res","spriteFrame","string","name","head_data","lsit","SortData","Object","keys","sort","a","b","parseInt","a_data","b_data","createdAt","is_select","is_filtrate_open","is_sort_open"],"mappings":"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","sourcesContent":["import { Button, Component, EditBox, EventTouch, Input, Label, Layout, Node, ScrollView, Sprite, SpriteFrame, Toggle, UITransform, Vec3, Widget, instantiate, js, size, view } from \"cc\";\r\nimport proto, { Req, Ret, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { EventMgr, Evt_Card_Back_Update, Evt_Card_Group_Update, Evt_Card_Head_Update } from \"../../manager/EventMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { ResMgr, cardBack, card_quality, folder_card, folder_head, folder_icon } from \"../../manager/ResMgr\";\r\nimport { Goto } from \"../../DL\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { CardGroupHead } from \"./CardGroupHead\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\n\r\nexport class CardsGroupSetting extends Component {\r\n\r\n    private back_btn:Node\r\n    private navBtns: Node[];\r\n    private ornamentNode: Node;\r\n    private sortBtn:Button;\r\n    private sortNode: Node;\r\n    private sortNav: Node[];\r\n    private sortNodeBack:Node;\r\n\r\n    private filtrateBtn:Button;\r\n    private filtrateNode: Node;\r\n    private filtrateNav: Node[];\r\n    private filtrateNodeBack:Node;\r\n\r\n    private btnList: Node[];\r\n    private headScroller: AutoScroller;\r\n    private backScroller: AutoScroller;\r\n    private noneListCont: Node;\r\n\r\n    private card_back: Sprite;\r\n    private headitem:CardGroupHead;\r\n    private namelabel:Label;\r\n\r\n    private tag1\r\n    private tag2\r\n    private filtrate_type\r\n    private sort_type\r\n    private callback:Function;\r\n    protected $loadSub: Promise<any>;\r\n    protected complete: Function;\r\n    protected hasLoad = false;\r\n\r\n    protected onLoad() {\r\n        this.back_btn = this.node.getChildByName(\"backBtn\");\r\n        this.back_btn.on(Input.EventType.TOUCH_END, this.Hide, this);\r\n        this.navBtns = this.node.getChildByName(\"nav\").children.concat();\r\n        for (let btn of this.navBtns) {\r\n            btn.off('toggle', this.onPage, this);\r\n            btn.on('toggle', this.onPage, this);\r\n        }\r\n        this.ornamentNode = this.node.getChildByName(\"ornamentNode\")\r\n        this.btnList = this.node.getChildByPath(\"ornamentNode/btnList\").children.concat();\r\n        for (let btn of this.btnList) {\r\n            btn.off(Button.EventType.CLICK, this.onBtnPage, this);\r\n            btn.on(Button.EventType.CLICK, this.onBtnPage, this);\r\n        }\r\n        this.noneListCont = this.node.getChildByPath(\"ornamentNode/noneListCont\");\r\n        this.headScroller = this.node.getChildByPath(\"ornamentNode/cardHeadScrollView\").getComponent(AutoScroller);\r\n        this.headScroller.SetHandle(this.updateHeadItem.bind(this));\r\n        this.headScroller.node.on('select', this.onSelectHead, this);\r\n\r\n        this.backScroller = this.node.getChildByPath(\"ornamentNode/cardBackScrollView\").getComponent(AutoScroller);\r\n        this.backScroller.SetHandle(this.updateCardBackItem.bind(this));\r\n        this.backScroller.node.on('select', this.onSelectHead, this);\r\n\r\n        this.card_back = this.node.getChildByPath(\"ornamentNode/showNode/card_back\").getComponent(Sprite);\r\n        this.headitem = this.node.getChildByPath(\"ornamentNode/showNode/headitem\").addComponent(CardGroupHead);\r\n        this.namelabel = this.node.getChildByPath(\"ornamentNode/showNode/name_bg/namelabel\").getComponent(Label);\r\n\r\n        this.sortNode = this.node.getChildByPath(\"ornamentNode/sortNode\");\r\n        this.sortNav = this.node.getChildByPath(\"ornamentNode/sortNode/bg/nav\").children.concat();\r\n        this.sortNav.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                node.getComponent(Toggle).isChecked = true;\r\n                this.sort_type = index;\r\n                this.setSort();\r\n            }, this)\r\n        })\r\n       \r\n        this.sortBtn = this.node.getChildByPath(\"ornamentNode/sortBtn\").getComponent(Button);\r\n        this.sortBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.sortNodeBack = this.node.getChildByPath(\"ornamentNode/sortNode/back\");\r\n        this.sortNodeBack.on(Input.EventType.TOUCH_END, () => {\r\n            this.sortNode.active = false;\r\n            this.sortBtn.node.getChildByName(\"close\").active = true;\r\n            this.sortBtn.node.getChildByName(\"open\").active = false;\r\n        }, this)\r\n\r\n        this.filtrateNode = this.node.getChildByPath(\"ornamentNode/filtrateNode\");\r\n        this.filtrateNav = this.node.getChildByPath(\"ornamentNode/filtrateNode/bg/nav\").children.concat();\r\n        this.filtrateNav.forEach((node, index) => {\r\n            node.on(Toggle.EventType.TOGGLE, () => {\r\n                this.filtrate_type = index;\r\n                this.setFiltrate();\r\n            }, this)\r\n        })\r\n        this.filtrateBtn = this.node.getChildByPath(\"ornamentNode/filtrateBtn\").getComponent(Button);\r\n        this.filtrateBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.filtrateNodeBack = this.node.getChildByPath(\"ornamentNode/filtrateNode/back\");\r\n        this.filtrateNodeBack.on(Input.EventType.TOUCH_END, () => {\r\n            this.filtrateNode.active = false;\r\n            this.filtrateBtn.node.getChildByName(\"close\").active = true;\r\n            this.filtrateBtn.node.getChildByName(\"open\").active = false;\r\n        }, this)\r\n\r\n        EventMgr.on(Evt_Card_Head_Update, this.setHeadList, this)\r\n        EventMgr.on(Evt_Card_Back_Update, this.setBackList, this)\r\n        EventMgr.on(Evt_Card_Group_Update, this.updateScroll, this);\r\n\r\n        this.ornamentNode.active = false\r\n        this.hasLoad = true;\r\n    }\r\n\r\n    \r\n    protected get loadSub() {\r\n        if (this.$loadSub) return this.$loadSub;\r\n        let thisObj = this;\r\n        this.$loadSub = new Promise((resolve, reject) => {\r\n            thisObj.complete = resolve;\r\n        });\r\n        return this.$loadSub;\r\n    }\r\n\r\n\r\n    async SetPage(page: number, callBack:Function) {\r\n        if (!this.hasLoad) await this.loadSub;\r\n        if (!this.navBtns[page]) return;\r\n        this.callback = callBack;\r\n        this.tag1 = undefined;\r\n        this.navBtns[page].getComponent(Toggle).isChecked = true;\r\n        this.onPage(this.navBtns[page].getComponent(Toggle));\r\n    }\r\n\r\n    private onPage(t: Toggle) {\r\n        let page = this.navBtns.indexOf(t.node);\r\n        if (page < 0 || page == this.tag1) return;\r\n        this.tag1 = page;     \r\n        if (page == 0) {\r\n            this.ornamentNode.active = false;\r\n        } else if (page == 1) {\r\n            this.ornamentNode.active = true;\r\n            this.onBtnPage(this.btnList[0].getComponent(Button))\r\n            this.setRightData()\r\n        }\r\n    }\r\n\r\n    private onBtnPage(t: Button) {\r\n        let page = this.btnList.indexOf(t.node);\r\n        if (page < 0 || page == this.tag2) return;\r\n        this.tag2 = page;\r\n        this.updatePage();\r\n       \r\n    }\r\n\r\n    private updatePage(){\r\n        for (let index = 0; index < this.btnList.length; index++) {\r\n            const element = this.btnList[index];\r\n            let unCheckmark = element.getChildByName(\"unCheckmark\")\r\n            let Checkmark = element.getChildByName(\"Checkmark\")    \r\n            Checkmark.active = index == this.tag2;\r\n            unCheckmark.active = index != this.tag2  \r\n        }     \r\n        this.headScroller.node.active = false;\r\n        this.backScroller.node.active = false;\r\n        if (this.tag2 == 0) {\r\n            Session.Send(Route[\"logic.protocol.getavatarinfos\"])\r\n            this.headScroller.node.active = true;\r\n        } else if (this.tag2 == 1) {\r\n            Session.Send(Route[\"logic.protocol.getcardbackinfos\"]) \r\n            this.backScroller.node.active = true;\r\n        }\r\n    }\r\n\r\n\r\n    /**设置头像 */\r\n    private setHeadList(data_list?:{[key:string]:proto.base.IAvatarInfo}) {\r\n        let data = data_list ? data_list : PlayerData.cardHeadList\r\n        let list = []\r\n        for (const key in data) {\r\n            const element = data[key];\r\n            list.push(element);\r\n        }\r\n        this.headScroller.UpdateDatas(list)\r\n    }\r\n\r\n    /**设置卡背 */\r\n    private setBackList(data_list?:{[key:string]:proto.base.ICardBackInfo}) {\r\n        let data = data_list ? data_list : PlayerData.cardBackList\r\n        let list = []\r\n        for (const key in data) {\r\n            const element = data[key];\r\n            list.push(element);\r\n        }\r\n        this.backScroller.UpdateDatas(list)\r\n    }\r\n\r\n    protected updateHeadItem(item: Node, data: proto.base.IAvatarInfo) {\r\n        let head = item.getComponent(CardGroupHead);\r\n        if(!head) head = item.addComponent(CardGroupHead)\r\n        let is_use = PlayerData.getCardGroupDataById(PlayerData.cur_id).avatarId == data.avatarId\r\n        head.SetData(data.avatarId, data.like, is_use)\r\n    }\r\n\r\n    protected updateCardBackItem(item: Node, data: proto.base.ICardBackInfo) {\r\n        let icon = item.getChildByName(\"icon\").getComponent(Sprite);\r\n        let favorite = item.getChildByName(\"favorite\").getComponent(Sprite);\r\n        let use = item.getChildByName(\"use\").getComponent(Sprite);\r\n\r\n        let icon_spr = CfgMgr.GetCardBackCfgById(data.cardBackId).icon\r\n        ResMgr.LoadResAbSub(cardBack + icon_spr + \"/spriteFrame\", SpriteFrame, res=>{\r\n            icon.spriteFrame = res;\r\n        })\r\n        favorite.node.active = data.like;   \r\n        use.node.active = PlayerData.getCardGroupDataById(PlayerData.cur_id).cardBackId == data.cardBackId\r\n    }\r\n\r\n    protected onSelectHead(index: number, item: Node, data: proto.base.IAvatarInfo | proto.base.CardBackInfo) {    \r\n       Goto(\"cardGroupSettingTips\", this.tag2 + 1, data)\r\n    }\r\n\r\n    private updateScroll(){\r\n        this.updatePage()\r\n        this.setRightData()\r\n    }\r\n\r\n    private setRightData(){\r\n        let data:proto.base.IDeckAttrs = PlayerData.getCardGroupDataById(PlayerData.cur_id);\r\n\r\n        if(data){\r\n            let icon_spr = CfgMgr.GetCardBackCfgById(data.cardBackId).icon\r\n            ResMgr.LoadResAbSub(cardBack + icon_spr + \"/spriteFrame\", SpriteFrame, res=>{\r\n                this.card_back.spriteFrame  = res;\r\n            })\r\n\r\n            this.namelabel.string = data.name;\r\n            let head_data:proto.base.IAvatarInfo = null;\r\n            for (const key in PlayerData.cardHeadList) {   \r\n                const element = PlayerData.cardHeadList[key];\r\n                if(element.avatarId == data.avatarId){\r\n                    head_data = element;\r\n                    break;\r\n                }\r\n            }\r\n            this.headitem.SetData(data.avatarId, head_data && head_data.like, true)\r\n\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    private setSort(){\r\n        let lsit = this.SortData();\r\n        let data_list = [];\r\n        if(this.tag2 == 0){\r\n            for (let index = 0; index < lsit.length; index++) {\r\n                const element = lsit[index];\r\n                data_list.push(PlayerData.cardHeadList[element])   \r\n            }\r\n            this.headScroller.UpdateDatas(data_list)\r\n        }else{\r\n            for (let index = 0; index < lsit.length; index++) {\r\n                const element = lsit[index];\r\n                data_list.push(PlayerData.cardBackList[element])   \r\n            }\r\n            this.backScroller.UpdateDatas(data_list)\r\n        }\r\n    }\r\n\r\n    private SortData(){\r\n        let list = null;\r\n        let data = null;\r\n        if(this.tag2 == 0){\r\n            list = Object.keys(PlayerData.cardHeadList)\r\n            data = PlayerData.cardHeadList\r\n        }else{\r\n            list = Object.keys(PlayerData.cardBackList)\r\n            data = PlayerData.cardBackList\r\n        }\r\n\r\n        switch (this.sort_type) {\r\n            case 0:\r\n                //取消排序\r\n                list.sort((a:string,b:string)=>{\r\n                    return parseInt(a) - parseInt(b)\r\n                })\r\n                break;\r\n            case 1:\r\n                //时间最新\r\n                list.sort((a:string,b:string)=>{\r\n                    let a_data = data[a];\r\n                    let b_data = data[b]\r\n                    return b_data.createdAt - a_data.createdAt\r\n                })\r\n                break;\r\n            case 2:\r\n                //时间最旧\r\n                list.sort((a:string,b:string)=>{\r\n                    let a_data = data[a];\r\n                    let b_data = data[b]\r\n                    return a_data.createdAt - b_data.createdAt\r\n                })\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n\r\n        return list\r\n    }\r\n\r\n    private setFiltrate(){\r\n        let is_select = this.filtrateNav[this.filtrate_type].getComponent(Toggle).isChecked\r\n        if(this.tag2 == 0){\r\n            let data_list:{[key:string]:proto.base.IAvatarInfo} = {}\r\n            let list = Object.keys(PlayerData.cardHeadList)\r\n            for (let index = 0; index < list.length; index++) {\r\n                const element = list[index];\r\n                if(is_select){\r\n                    if(PlayerData.cardHeadList[element].like){\r\n                        data_list[element] = PlayerData.cardHeadList[element]\r\n                    }\r\n                }else{\r\n                    if(PlayerData.cardHeadList[element]){\r\n                        data_list[element] = PlayerData.cardHeadList[element]\r\n                    }\r\n                }\r\n            }\r\n            this.setHeadList(data_list)\r\n        }else{\r\n            let data_list:{[key:string]:proto.base.ICardBackInfo} = {}\r\n            let list = Object.keys(PlayerData.cardBackList)\r\n            for (let index = 0; index < list.length; index++) {\r\n                const element = list[index];\r\n                if(is_select){\r\n                    if(PlayerData.cardBackList[element].like){\r\n                        data_list[element] = PlayerData.cardBackList[element]\r\n                    }\r\n                }else{\r\n                    if(PlayerData.cardBackList[element]){\r\n                        data_list[element] = PlayerData.cardBackList[element]\r\n                    }\r\n                }\r\n            }\r\n            this.setBackList(data_list)\r\n        }\r\n    }\r\n\r\n\r\n    private onClick(btn: Button) {\r\n        let name = btn.node.name\r\n        switch (name) {\r\n            case \"filtrateBtn\":\r\n                let is_filtrate_open = this.filtrateBtn.node.getChildByName(\"open\").active\r\n                this.filtrateNode.active = !is_filtrate_open;\r\n                this.filtrateBtn.node.getChildByName(\"close\").active = is_filtrate_open;\r\n                this.filtrateBtn.node.getChildByName(\"open\").active = !is_filtrate_open;\r\n                break;\r\n            case \"sortBtn\":\r\n                let is_sort_open = this.filtrateBtn.node.getChildByName(\"open\").active\r\n                this.sortNode.active = !is_sort_open;\r\n                this.sortBtn.node.getChildByName(\"close\").active = is_sort_open;\r\n                this.sortBtn.node.getChildByName(\"open\").active = !is_sort_open;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    private Hide(){\r\n        if(this.callback){\r\n            this.callback();\r\n            this.callback = null;\r\n        }\r\n        this.ornamentNode.active = false;\r\n        this.node.active = false\r\n    }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n}"]}