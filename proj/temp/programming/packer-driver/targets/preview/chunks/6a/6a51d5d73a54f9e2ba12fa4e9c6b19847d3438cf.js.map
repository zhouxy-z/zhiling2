{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/vs/VSSeasonPage.ts"],"names":["VSSeasonPage","Button","Component","EditBox","Label","ProgressBar","Sprite","path","SpriteFrame","v3","CardGroupCoverItem","CfgMgr","proto","PlayerData","DateUtils","EventMgr","Evt_SectionUpdate","Evt_Set_Battle_Card_Group_Update","MsgPanel","ResMgr","Goto","battleLogBtn","awardBtn","sectionIcon","sectionNameImg","starCont","maxStarCont","maxStarNumLab","expNumCont","expLineBg","curNumLab","maxNumLab","pro","vsBtn","cardGroupBtn","cardGroupCoverItem","nameImg","timeLab","curStdPVPSnatch","curStdPvpLv","seasonData","curStar","maxStar","cardGroupData","changeBtn","addBtn","subBtn","onLoad","node","getChildByPath","getComponent","addComponent","on","EventType","CLICK","onBtnClick","onEnable","onSetCardGroup","onSectionUpdate","onDisable","off","update","dt","openTime","GetCurSeasonOpenTime","endTime","GetCurSeasonEndTime","residueTime","ServerTime","day","Math","floor","string","FormatTime","Show","active","initShow","Hide","btn","size","CardGuroupComm","DeckFullSize","CurSeasonData","currentSeasonId","base","BattleMode","BattleModeRank","num","Number","isNaN","currentRankInfo","rankPoints","updateSection","num1","num2","updateCardGroup","CurFightCardGroup","SetData","GetStdPVPSnatch","LoadResAbSub","join","View","res","spriteFrame","toString","GetStdPvpLvByPoint","RankGroupID","point","max","LevelPoints","StarPoints","Star","position","starNode","getChildByName","bright","index","children","length","LevelIcon","LevelNameImg","curExp","mapExp","progress"],"mappings":"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","sourcesContent":["import { Node, Button, Component, EditBox, Label, ProgressBar, Sprite, path, SpriteFrame, v3 } from \"cc\";\r\nimport { CardGroupCoverItem } from \"../common/CardGroupCoverItem\";\r\nimport { CfgMgr, StdPvpLevel, StdPVPSnatch } from \"../../manager/CfgMgr\";\r\nimport proto from \"../../net/Protocol\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport { EventMgr, Evt_SectionUpdate, Evt_Set_Battle_Card_Group_Update } from \"../../manager/EventMgr\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\nimport { Goto } from \"../../DL\";\r\n\r\nexport class VSSeasonPage extends Component {\r\n    private battleLogBtn: Button;\r\n    private awardBtn: Button;\r\n    private sectionIcon: Sprite;\r\n    private sectionNameImg: Sprite;\r\n    private starCont: Node;\r\n    private maxStarCont: Node;\r\n    private maxStarNumLab: Label;\r\n    private expNumCont: Node;\r\n    private expLineBg: Node;\r\n    private curNumLab: Label;\r\n    private maxNumLab: Label;\r\n    private pro: ProgressBar;\r\n    private vsBtn: Button;\r\n    private cardGroupBtn: Button;\r\n    private cardGroupCoverItem: CardGroupCoverItem;\r\n    private nameImg: Sprite;\r\n    private timeLab: Label;\r\n    private curStdPVPSnatch: StdPVPSnatch;\r\n    private curStdPvpLv: StdPvpLevel;\r\n    private seasonData: proto.pb.PlayerPvpInfoPush;\r\n    private curStar: number;\r\n    private maxStar: number;\r\n    private cardGroupData: proto.base.IDeckAttrs;\r\n    private changeBtn: Button;\r\n    private addBtn: Button;\r\n    private subBtn: Button;\r\n    private EditBox: EditBox;\r\n    protected onLoad() {\r\n        this.battleLogBtn = this.node.getChildByPath(\"btnCont/battleLogBtn\").getComponent(Button);\r\n        this.awardBtn = this.node.getChildByPath(\"btnCont/awardBtn\").getComponent(Button);\r\n        this.sectionIcon = this.node.getChildByPath(\"sectionCont/sectionIcon\").getComponent(Sprite);\r\n        this.sectionNameImg = this.node.getChildByPath(\"sectionCont/sectionNameImg\").getComponent(Sprite);\r\n        this.expNumCont = this.node.getChildByPath(\"sectionCont/expCont\");\r\n        this.expLineBg = this.node.getChildByPath(\"sectionCont/expCont/expLineBg\");\r\n        this.curNumLab = this.node.getChildByPath(\"sectionCont/expCont/numCont/curNumLab\").getComponent(Label);\r\n        this.maxNumLab = this.node.getChildByPath(\"sectionCont/expCont/numCont/maxNumLab\").getComponent(Label);\r\n        this.starCont = this.node.getChildByPath(\"sectionCont/starCont\");\r\n        this.maxStarCont = this.node.getChildByPath(\"sectionCont/maxStarCont\");\r\n        this.maxStarNumLab = this.node.getChildByPath(\"sectionCont/maxStarCont/maxStarNumLab\").getComponent(Label);\r\n        this.pro = this.node.getChildByPath(\"sectionCont/pro\").getComponent(ProgressBar);\r\n        this.vsBtn = this.node.getChildByPath(\"vsBtn\").getComponent(Button);\r\n        this.cardGroupBtn = this.node.getChildByPath(\"cardGroupBtn\").getComponent(Button);\r\n        this.cardGroupCoverItem = this.node.getChildByPath(\"cardGroupBtn/CardGroupCoverItem\").addComponent(CardGroupCoverItem);\r\n        this.changeBtn = this.node.getChildByPath(\"changeBtn\").getComponent(Button);\r\n        this.addBtn = this.node.getChildByPath(\"addBtn\").getComponent(Button);\r\n        this.subBtn = this.node.getChildByPath(\"subBtn\").getComponent(Button);\r\n        this.EditBox = this.node.getChildByPath(\"EditBox\").getComponent(EditBox);\r\n        this.nameImg = this.node.getChildByPath(\"topRightCont/nameImg\").getComponent(Sprite);\r\n        this.timeLab = this.node.getChildByPath(\"topRightCont/timeCont/timeLab\").getComponent(Label);\r\n        \r\n        this.battleLogBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.awardBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.cardGroupBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.vsBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.changeBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.addBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.subBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        EventMgr.on(Evt_Set_Battle_Card_Group_Update, this.onSetCardGroup, this);\r\n        EventMgr.on(Evt_SectionUpdate, this.onSectionUpdate, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        EventMgr.off(Evt_Set_Battle_Card_Group_Update, this.onSetCardGroup, this);\r\n        EventMgr.off(Evt_SectionUpdate, this.onSectionUpdate, this);\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        if (this.curStdPVPSnatch) {\r\n            let openTime: number = PlayerData.GetCurSeasonOpenTime();\r\n            if (openTime > 0) {\r\n                let endTime: number = PlayerData.GetCurSeasonEndTime();\r\n                if (endTime > 0) {\r\n                    let residueTime: number = endTime - DateUtils.ServerTime;\r\n                    let day: number = Math.floor(residueTime / 86400);\r\n                    if (day >= 1) {\r\n                        this.timeLab.string = `${day}天` + DateUtils.FormatTime(residueTime - day * 86400, \"%{hh}:%{mm}:%{ss}\");\r\n                    } else {\r\n                        if (residueTime > 0) {\r\n                            this.timeLab.string = DateUtils.FormatTime(residueTime, \"%{hh}:%{mm}:%{ss}\");\r\n                        } else {\r\n                            this.timeLab.string = \"赛季已结束\";\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    this.timeLab.string = \"赛季未开启\";\r\n                }\r\n                \r\n            } else {\r\n                this.timeLab.string = \"赛季未开启\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public Show(): void {\r\n        this.node.active = true;\r\n        this.initShow();\r\n    }\r\n    \r\n    public Hide(): void {\r\n        this.node.active = false;\r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.battleLogBtn:\r\n                Goto(\"VSSeasonFightLogPanel\");\r\n                break;\r\n            case this.awardBtn:\r\n                Goto(\"VSSectionAwardPanel\");\r\n                break;\r\n            case this.cardGroupBtn:\r\n                Goto(\"VSCardGroupPanel\");\r\n                break;\r\n            case this.vsBtn:\r\n                if (!this.cardGroupData) {\r\n                    MsgPanel.Show(\"未设置战斗卡组不可对战\")\r\n                    return;\r\n                }\r\n                if (this.cardGroupData.size < CfgMgr.CardGuroupComm.DeckFullSize) {\r\n                    MsgPanel.Show(`卡组卡牌数量不足${CfgMgr.CardGuroupComm.DeckFullSize}张`);\r\n                    return;\r\n                }\r\n                if (!PlayerData.CurSeasonData || PlayerData.CurSeasonData.currentSeasonId == 0) {\r\n                    MsgPanel.Show(\"暂时没有赛季进行中\");\r\n                    return;\r\n                }\r\n                if (DateUtils.ServerTime > PlayerData.GetCurSeasonEndTime()) {\r\n                    MsgPanel.Show(\"赛季已结束\");\r\n                    return;\r\n                }\r\n                Goto(\"VSPanel\", proto.base.BattleMode.BattleModeRank);\r\n                break;\r\n            case this.changeBtn:\r\n                let num: number = Number(this.EditBox.string);\r\n                if (isNaN(num)) return;\r\n                this.seasonData.currentRankInfo.rankPoints = num;\r\n                this.updateSection();\r\n                break;\r\n            case this.addBtn:\r\n                let num1: number = this.seasonData.currentRankInfo.rankPoints + 1;\r\n                this.seasonData.currentRankInfo.rankPoints = num1;\r\n                this.updateSection();\r\n                break\r\n            case this.subBtn:\r\n                let num2: number = this.seasonData.currentRankInfo.rankPoints - 1;\r\n                this.seasonData.currentRankInfo.rankPoints = num2;\r\n                this.updateSection();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onSetCardGroup(): void {\r\n        this.updateCardGroup();\r\n    }\r\n\r\n    private onSectionUpdate(): void {\r\n        this.updateSection();\r\n    }\r\n\r\n    private updateCardGroup(): void {\r\n        this.cardGroupData = PlayerData.CurFightCardGroup;\r\n        this.cardGroupCoverItem.SetData(this.cardGroupData, false);\r\n    }\r\n\r\n    private initShow(): void {\r\n        this.updateCardGroup();\r\n        this.updateSection();\r\n    }\r\n\r\n    private updateSection(): void {\r\n        this.seasonData = PlayerData.CurSeasonData;\r\n        if (this.seasonData) {\r\n            this.curStdPVPSnatch = CfgMgr.GetStdPVPSnatch(this.seasonData.currentSeasonId);\r\n            if (!this.curStdPVPSnatch) {\r\n                \r\n                return;\r\n            }\r\n            ResMgr.LoadResAbSub(path.join(\"sheets/vs\", `${this.curStdPVPSnatch.View}`, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n                this.nameImg.spriteFrame = res;\r\n            });\r\n        } else {\r\n            \r\n            return;\r\n        }\r\n        this.EditBox.string = this.seasonData.currentRankInfo.rankPoints.toString();\r\n        this.curStdPvpLv = CfgMgr.GetStdPvpLvByPoint(this.curStdPVPSnatch.RankGroupID, this.seasonData.currentRankInfo.rankPoints);\r\n        let point: number = Math.max(this.seasonData.currentRankInfo.rankPoints - this.curStdPvpLv.LevelPoints, 0);\r\n        this.curStar = Math.floor( point / this.curStdPvpLv.StarPoints);\r\n        this.maxStar = this.curStdPvpLv.Star -1;\r\n        if (this.curStdPvpLv.Star == 1) {\r\n            this.starCont.active = false;\r\n            this.expLineBg.active = false;\r\n            this.maxStarCont.active = true;\r\n            this.maxStarNumLab.string = `x ${this.curStar}`;\r\n            this.expNumCont.position = v3(296, -268, 0);\r\n            let starNode: Node = this.maxStarCont.getChildByName(\"star\");\r\n            let bright: Node = starNode.getChildByName(\"bright\");\r\n            bright.active = this.curStar > 0;\r\n        } else {\r\n            this.maxStarCont.active = false;\r\n            this.expLineBg.active = true;\r\n            this.starCont.active = true;\r\n            this.expNumCont.position = v3(0, -194, 0);\r\n            \r\n            for (let index = 0; index < this.starCont.children.length; index++) {\r\n                let starNode: Node = this.starCont.children[index];\r\n                if (index < this.maxStar) {\r\n                    starNode.active = true;\r\n                    let bright: Node = starNode.getChildByName(\"bright\");\r\n                    bright.active = this.curStar > index;\r\n                } else {\r\n                    starNode.active = false;\r\n                }\r\n                \r\n            }\r\n        }\r\n        \r\n        ResMgr.LoadResAbSub(path.join(\"sheets/sectionIcon\", this.curStdPvpLv.LevelIcon, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.sectionIcon.spriteFrame = res;\r\n        });\r\n        ResMgr.LoadResAbSub(path.join(\"sheets/sectionIcon\", this.curStdPvpLv.LevelNameImg, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.sectionNameImg.spriteFrame = res;\r\n        });\r\n        let curExp: number = point % this.curStdPvpLv.StarPoints;\r\n        let mapExp: number = this.curStdPvpLv.StarPoints;\r\n        this.curNumLab.string = curExp.toString();\r\n        this.maxNumLab.string = mapExp.toString();\r\n        this.pro.progress = curExp / mapExp;\r\n    }\r\n}"]}