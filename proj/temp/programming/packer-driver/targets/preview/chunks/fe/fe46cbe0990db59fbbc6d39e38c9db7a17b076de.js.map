{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/player/PlayerModule.ts"],"names":["PlayerModule","Session","PlayerData","MainPanel","LoginPanel","Tips","Req","Ret","Route","EventMgr","Evt_Box_Update","Evt_Card_Add","Evt_Card_Chage","Evt_Card_Del","Evt_Player_Exp_Update","Evt_Player_Level_Update","Evt_PlayerDataInit","Evt_SeasonFightLog","Evt_SectionAwardInit","Evt_SectionAwardUpdate","Evt_SectionSettle","Evt_SectionUpdate","Evt_StarElementSettle","Evt_StarElementUpdate","Evt_Upgrade_Award_Update","Evt_User_Info_Update","MsgPanel","CfgMgr","ServerPanel","constructor","on","onGetuserinfo","onGetPlayerData","PlayerBattleCardChangePush","onChangeCardData","onResetPasswordValid","RiskLevelPush","onRiskLevelPush","onBattleCardUpgrade","onPlayerLevelExpChangedPush","onPlayerLevelRewardClaim","onGetPlayerLevelRewards","onGetProcessBoxRewards","onProcessBoxOpen","onPlayerPvpInfoPush","onGetranklevelreward","onRanklevelrewardclaim","onPlayerPvpRankBattleSettlePush","onPvpRankSeasonChangedPush","onGetpvprankinfo","onUserInfoChangePush","onGetpvprankbattlerecords","onPlayerPvpStarInfoPush","onPvpStarSeasonChangedPush","onPlayerPvpStarBattleSettlePush","data","user","decode","console","log","info","Setplayer","Hide","Show","emit","change","AddCardData","card","oledCardData","GetCardDataById","id","changeNum","quality","UpdateCardData","DelCardData","Send","passwordData","res","code","msg","passwordSet","RiskLevel","result","levelAfter","levelBefore","player","level","levelExpAfter","levelExpBefore","levelExp","AddUpgradeAward","levelReward","rewardThing","InitUpgradeAward","levelRewards","InitBoxProcessList","rewards","UpdateBoxProcessData","boxReward","rewardThings","SetSeasonData","sendData","seasonId","currentSeasonId","SetSectionAwardData","ChangeSectionAwardData","reward","CurSeasonData","rankRecord","newData","currentRankInfo","rankPoints","pointAfter","stdPVPSnatch","GetStdPVPSnatchList","seasonIds","std","push","MatchID","seasonRankInfo","SetUserInfo","records","SetSatrElementData"],"mappings":"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","sourcesContent":["import { Session } from \"../../net/Session\";\r\nimport { PlayerData } from \"./PlayerData\";\r\nimport { MainPanel } from \"../main/MainPanel\";\r\nimport { LoginPanel } from \"../login/LoginPanel\";\r\nimport { Tips } from \"../common/Tips\";\r\nimport proto, { Req, Ret, Route } from \"../../net/Protocol\";\r\nimport { EventMgr, Evt_Box_Update, Evt_Card_Add, Evt_Card_Chage, Evt_Card_Del, Evt_Player_Exp_Update, Evt_Player_Level_Update, Evt_PlayerDataInit, Evt_SeasonFightLog, Evt_SectionAwardInit, Evt_SectionAwardUpdate, Evt_SectionSettle, Evt_SectionUpdate, Evt_StarElementSettle, Evt_StarElementUpdate, Evt_Upgrade_Award_Update, Evt_User_Info_Update } from \"../../manager/EventMgr\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { CfgMgr, StdPVPSnatch } from \"../../manager/CfgMgr\";\r\nimport { ServerPanel } from \"../login/ServerPanel\";\r\n\r\nexport class PlayerModule {\r\n    constructor() {\r\n        Session.on(Route[\"user.protocol.getuserinfo\"], this.onGetuserinfo, this);\r\n        Session.on(Route[\"player.protocol.getplayerdata\"], this.onGetPlayerData, this);\r\n        Session.on(Route.PlayerBattleCardChangePush, this.onChangeCardData, this);\r\n        Session.on(Route[\"user.protocol.passwordset\"], this.onResetPasswordValid, this);\r\n        Session.on(Route.RiskLevelPush, this.onRiskLevelPush, this);\r\n        Session.on(Route[\"logic.protocol.battlecardupgrade\"], this.onBattleCardUpgrade, this);\r\n        Session.on(Route[\"PlayerLevelExpChangedPush\"], this.onPlayerLevelExpChangedPush, this);\r\n        Session.on(Route[\"logic.protocol.playerlevelrewardclaim\"], this.onPlayerLevelRewardClaim, this);\r\n        Session.on(Route[\"logic.protocol.getplayerlevelrewards\"], this.onGetPlayerLevelRewards, this);\r\n        Session.on(Route[\"logic.protocol.getprocessboxrewards\"], this.onGetProcessBoxRewards, this);\r\n        Session.on(Route[\"logic.protocol.processboxopen\"], this.onProcessBoxOpen, this);\r\n        Session.on(Route[\"PlayerPvpInfoPush\"], this.onPlayerPvpInfoPush, this);\r\n        Session.on(Route[\"pvp.protocol.getranklevelreward\"], this.onGetranklevelreward, this);\r\n        Session.on(Route[\"pvp.protocol.ranklevelrewardclaim\"], this.onRanklevelrewardclaim, this);\r\n        Session.on(Route[\"PlayerPvpRankBattleSettlePush\"], this.onPlayerPvpRankBattleSettlePush, this);\r\n        Session.on(Route[\"PvpRankSeasonChangedPush\"], this.onPvpRankSeasonChangedPush, this);\r\n        Session.on(Route[\"pvp.protocol.getpvprankinfo\"], this.onGetpvprankinfo, this);\r\n        Session.on(Route[\"UserInfoChangePush\"], this.onUserInfoChangePush, this);\r\n        Session.on(Route[\"pvp.protocol.getpvprankbattlerecords\"], this.onGetpvprankbattlerecords, this);\r\n        Session.on(Route[\"PlayerPvpStarInfoPush\"], this.onPlayerPvpStarInfoPush, this);\r\n        Session.on(Route[\"PvpStarSeasonChangedPush\"], this.onPvpStarSeasonChangedPush, this);\r\n        Session.on(Route[\"PlayerPvpStarBattleSettlePush\"], this.onPlayerPvpStarBattleSettlePush, this);\r\n\r\n    }\r\n    protected onGetuserinfo(data: any) {\r\n        PlayerData.user = Ret[\"user.protocol.getuserinfo\"].decode(data);\r\n        console.log(\"onGetuserinfo\", PlayerData.user);\r\n    }\r\n    protected async onGetPlayerData(data: any) {\r\n        let info = Ret[\"player.protocol.getplayerdata\"].decode(data);\r\n        console.log(\"onGetPlayerData\", info);\r\n        PlayerData.Setplayer(info.data);       \r\n        ServerPanel.Hide();\r\n        LoginPanel.Hide();\r\n        await MainPanel.Show();\r\n        EventMgr.emit(Evt_PlayerDataInit);\r\n    }\r\n    protected onChangeCardData(data: any) {\r\n        let info = Ret.PlayerBattleCardChangePush.decode(data);\r\n        console.log(\"PlayerBattleCardChangePush\", info);\r\n        switch (info.change) {\r\n            case 1:\r\n                PlayerData.AddCardData(info.card);\r\n                EventMgr.emit(Evt_Card_Add, info.card);\r\n                break;\r\n            case 2:\r\n                let oledCardData: proto.base.IBattleCard = PlayerData.GetCardDataById(info.card.id);\r\n                let changeNum: number = oledCardData ? info.card.quality - oledCardData.quality : 0;\r\n                PlayerData.UpdateCardData(info.card);\r\n                EventMgr.emit(Evt_Card_Chage, info.card, changeNum);\r\n                break;\r\n            case 3:\r\n                PlayerData.DelCardData(info.card);\r\n                Session.Send(Route[\"logic.protocol.getplayerdecks\"]);\r\n                EventMgr.emit(Evt_Card_Del, info.card);\r\n                break;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private onResetPasswordValid(data: any): void {\r\n        let passwordData = Ret[\"user.protocol.passwordset\"].decode(data);\r\n        if (passwordData.res.code > 0) {\r\n            Tips.Show(passwordData.res.msg);\r\n            return;\r\n        }\r\n        // SettingPasswordSuccessPanel.Show();\r\n        // SettingPasswordPanel.Hide();\r\n        PlayerData.user.info.passwordSet = true;\r\n    }\r\n\r\n    private onRiskLevelPush(data: any) {\r\n        let RiskLevel = Ret.RiskLevelPush.decode(data);\r\n        console.log(RiskLevel);\r\n    }\r\n\r\n    private onBattleCardUpgrade(data: any): void {\r\n        let result = Ret[\"logic.protocol.battlecardupgrade\"].decode(data);\r\n        if (result.res.code != 200) {\r\n            MsgPanel.Show(result.res.msg);\r\n            return;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private onPlayerLevelExpChangedPush(data: any): void {\r\n        let result = Ret[\"PlayerLevelExpChangedPush\"].decode(data);\r\n        if (result.levelAfter != result.levelBefore) {\r\n            PlayerData.player.level = result.levelAfter;\r\n            EventMgr.emit(Evt_Player_Level_Update, result);\r\n        }\r\n        if (result.levelExpAfter != result.levelExpBefore) {\r\n            PlayerData.player.levelExp = result.levelExpAfter;\r\n            EventMgr.emit(Evt_Player_Exp_Update, result);\r\n        }\r\n    }\r\n\r\n    private onPlayerLevelRewardClaim(data: any): void {\r\n        let result = Ret[\"logic.protocol.playerlevelrewardclaim\"].decode(data);\r\n        if (result.res.code != 200) {\r\n            MsgPanel.Show(result.res.msg);\r\n            return;\r\n        }\r\n        PlayerData.AddUpgradeAward(result.levelReward);\r\n        EventMgr.emit(Evt_Upgrade_Award_Update, result.rewardThing);\r\n    }\r\n\r\n    private onGetPlayerLevelRewards(data: any): void {\r\n        let result = Ret[\"logic.protocol.getplayerlevelrewards\"].decode(data);\r\n        if (result.res.code != 200) {\r\n            MsgPanel.Show(result.res.msg);\r\n            return;\r\n        }\r\n        PlayerData.InitUpgradeAward(result.levelRewards);\r\n        EventMgr.emit(Evt_Upgrade_Award_Update);\r\n    }\r\n\r\n    private onGetProcessBoxRewards(data: any): void {\r\n        let result = Ret[\"logic.protocol.getprocessboxrewards\"].decode(data);\r\n        if (result.res.code != 200) {\r\n            MsgPanel.Show(result.res.msg);\r\n            return;\r\n        }\r\n        PlayerData.InitBoxProcessList(result.rewards);\r\n        EventMgr.emit(Evt_Box_Update);\r\n    }\r\n\r\n    private onProcessBoxOpen(data: any): void {\r\n        let result = Ret[\"logic.protocol.processboxopen\"].decode(data);\r\n        if (result.res.code != 200) {\r\n            MsgPanel.Show(result.res.msg);\r\n            return;\r\n        }\r\n        PlayerData.UpdateBoxProcessData(result.boxReward);\r\n        EventMgr.emit(Evt_Box_Update, result.rewardThings);\r\n    }\r\n\r\n    private onPlayerPvpInfoPush(data: any): void {\r\n        let result = Ret[\"PlayerPvpInfoPush\"].decode(data);\r\n        PlayerData.SetSeasonData(result);\r\n        EventMgr.emit(Evt_SectionUpdate);\r\n        let sendData = new Req[\"pvp.protocol.getranklevelreward\"]();\r\n        sendData.seasonId = result.currentSeasonId;\r\n        Session.Send(Route[\"pvp.protocol.getranklevelreward\"], sendData);\r\n\r\n    }\r\n\r\n    private onGetranklevelreward(data: any): void {\r\n        let result = Ret[\"pvp.protocol.getranklevelreward\"].decode(data);\r\n        if (result.res.code == 200) {\r\n            PlayerData.SetSectionAwardData(result.levelReward);\r\n            EventMgr.emit(Evt_SectionAwardInit);\r\n        } else {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n    }\r\n\r\n    private onRanklevelrewardclaim(data: any): void {\r\n        let result = Ret[\"pvp.protocol.ranklevelrewardclaim\"].decode(data);\r\n        if (result.res.code == 200) {\r\n            PlayerData.ChangeSectionAwardData(result.reward);\r\n            EventMgr.emit(Evt_SectionAwardUpdate, result.reward);\r\n        } else {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n    }\r\n\r\n    private onPlayerPvpRankBattleSettlePush(data: any): void {\r\n        let result = Ret[\"PlayerPvpRankBattleSettlePush\"].decode(data);\r\n        if (PlayerData.CurSeasonData) {\r\n            if (result.rankRecord.seasonId == PlayerData.CurSeasonData.currentSeasonId) {\r\n                let newData: proto.pb.PlayerPvpInfoPush = PlayerData.CurSeasonData;\r\n                //newData.currentRankInfo.rankLevelId = result.rankRecord.rankLevelId;\r\n                newData.currentRankInfo.rankPoints = result.rankRecord.pointAfter;\r\n                console.log(\"排位结算---->\" + result.rankRecord);\r\n                PlayerData.SetSeasonData(newData);\r\n            }\r\n        }\r\n        EventMgr.emit(Evt_SectionSettle, result);\r\n    }\r\n\r\n    private onPvpRankSeasonChangedPush(data: any): void {\r\n        let result = Ret[\"PvpRankSeasonChangedPush\"].decode(data);\r\n        let newData: proto.pb.PlayerPvpInfoPush = PlayerData.CurSeasonData;\r\n        newData.currentSeasonId = result.currentSeasonId;\r\n        let stdPVPSnatch: StdPVPSnatch[] = CfgMgr.GetStdPVPSnatchList();\r\n        let seasonIds: number[] = [];\r\n        for (let std of stdPVPSnatch) {\r\n            seasonIds.push(std.MatchID);\r\n        }\r\n        let sendData = new Req[\"pvp.protocol.getpvprankinfo\"]();\r\n        sendData.seasonIds = seasonIds;\r\n        Session.Send(Route[\"pvp.protocol.getpvprankinfo\"], sendData);\r\n        PlayerData.SetSeasonData(newData);\r\n    }\r\n\r\n    private onGetpvprankinfo(data: any): void {\r\n        let result = Ret[\"pvp.protocol.getpvprankinfo\"].decode(data);\r\n        if (result.res.code == 200) {\r\n            let newData: proto.pb.PlayerPvpInfoPush = PlayerData.CurSeasonData;\r\n            newData.currentRankInfo = result.seasonRankInfo[newData.currentSeasonId];\r\n            PlayerData.SetSeasonData(newData);\r\n            EventMgr.emit(Evt_SectionUpdate);\r\n            //赛季变更重更新拉取一下段位奖励数据\r\n            let sendData = new Req[\"pvp.protocol.getranklevelreward\"]();\r\n            sendData.seasonId = newData.currentSeasonId;\r\n            Session.Send(Route[\"pvp.protocol.getranklevelreward\"], sendData);\r\n        } else {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n    }\r\n\r\n    private onUserInfoChangePush(data: any): void {\r\n        let result = Ret[\"UserInfoChangePush\"].decode(data);\r\n        PlayerData.SetUserInfo(result.info);\r\n        EventMgr.emit(Evt_User_Info_Update);\r\n    }\r\n\r\n    private onGetpvprankbattlerecords(data: any): void {\r\n        let result = Ret[\"pvp.protocol.getpvprankbattlerecords\"].decode(data);\r\n        if (result.res.code != 200) {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n        EventMgr.emit(Evt_SeasonFightLog, result.records || []);\r\n\r\n    }\r\n    private onPlayerPvpStarInfoPush(data: any): void {\r\n        let result = Ret[\"PlayerPvpStarInfoPush\"].decode(data);\r\n        PlayerData.SetSatrElementData(result);\r\n        EventMgr.emit(Evt_StarElementUpdate);\r\n    }\r\n    private onPvpStarSeasonChangedPush(data: any): void {\r\n        let result = Ret[\"PvpStarSeasonChangedPush\"].decode(data);\r\n        PlayerData.SetSatrElementData(result);\r\n        EventMgr.emit(Evt_StarElementUpdate);\r\n    }\r\n\r\n    private onPlayerPvpStarBattleSettlePush(data: any): void {\r\n        let result = Ret[\"PlayerPvpStarBattleSettlePush\"].decode(data);\r\n        EventMgr.emit(Evt_StarElementSettle, result);\r\n    }\r\n\r\n}"]}