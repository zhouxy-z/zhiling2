{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardsSortOrFiltrate.ts"],"names":["CardsSortOrFiltrate","Label","Toggle","CardSotrType1","CardSotrType2","CfgMgr","skillType","PlayerData","proto","setCardSort","type1","type2","card_list","Name","getNameSort","Cost","getCostSort","Power","getPowerSort","New","getNewSort","Quality","getQulitySort","UpLevel","getCanUpSort","data","type","sort","a","b","a_data","GetCard","cardId","b_data","Up","CardName","defaultSort","localeCompare","ID","createdAt","quality","a_up","CheckCardIsCanUpgrade","id","b_up","onEditEnd","editBox","searchStrList","nodeList","search_card_list","selectSkillType","costType","showType","list","setSearch","string","unshift","length","splice","children","forEach","item","getComponent","getSiblingIndex","index","active","iterator","cfg","includes","SkillDesc","push","skillSearch","selectSkillList","undefined","node","isChecked","costSearch","costTypeList","showSearch","showTypeList","console","log","onSetSearchShow","cards","element","GetCardCfgByType","onSetSearchCost","findIndex","card_data","base","BattleCard","exp","level","nftLockExpires","ownershipType","tradeCd","updateId","CardList","type_list","card_cfg"],"mappings":"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","sourcesContent":["import { EditBox, Label, Node, Toggle } from \"cc\";\r\nimport { CardSotrType1, CardSotrType2, CfgMgr, StdCard, skillType } from \"../../manager/CfgMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport proto from \"../../net/Protocol\";\r\n\r\nexport class CardsSortOrFiltrate {\r\n\r\n    static setCardSort(type1, type2, card_list) {\r\n        switch (type2) {\r\n            case CardSotrType2.Name:\r\n                this.getNameSort(card_list, type1,);\r\n                break;\r\n            case CardSotrType2.Cost:\r\n                this.getCostSort(card_list, type1,);\r\n                break;\r\n            case CardSotrType2.Power:\r\n                this.getPowerSort(card_list, type1,);\r\n                break;\r\n            case CardSotrType2.New:\r\n                this.getNewSort(card_list, type1,);\r\n                break;\r\n            case CardSotrType2.Quality:\r\n                this.getQulitySort(card_list, type1,);\r\n                break;\r\n            case CardSotrType2.UpLevel:\r\n                this.getCanUpSort(card_list, type1,);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return card_list\r\n    }\r\n\r\n    /**名字排序 */\r\n    static getNameSort(data, type) {\r\n        data.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (type == CardSotrType1.Up) {\r\n                if (a_data.CardName == b_data.CardName) {\r\n                    return this.defaultSort(type, a_data, b_data)\r\n                }\r\n                return a_data.CardName.localeCompare(b_data.CardName);\r\n            } else {\r\n                if (a_data.CardName == b_data.CardName) {\r\n                    return this.defaultSort(type, a_data, b_data)\r\n                }\r\n                return b_data.CardName.localeCompare(a_data.CardName);\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    /**能量排序 */\r\n    static getCostSort(data, type) {\r\n        data.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            return this.defaultSort(type, a_data, b_data)\r\n        })\r\n\r\n    }\r\n\r\n    /**战力排序 */\r\n    static getPowerSort(data, type) {\r\n       data.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (type == CardSotrType1.Up) {\r\n                if (a_data.Power == b_data.Power) {\r\n                    if (a_data.Cost == b_data.Cost) {\r\n                        return a_data.ID - b_data.ID\r\n                    }\r\n                    return a_data.Cost - b_data.Cost;\r\n                }\r\n                return a_data.Power - b_data.Power\r\n            } else {\r\n                if (a_data.Power == b_data.Power) {\r\n                    if (a_data.Cost == b_data.Cost) {\r\n                        return b_data.ID - a_data.ID\r\n                    }\r\n                    return b_data.Cost - a_data.Cost;\r\n                }\r\n                return b_data.Power - a_data.Power\r\n            }\r\n        })\r\n    }\r\n\r\n    /**最新排序 */\r\n    static getNewSort(data, type) {\r\n        data.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (type == CardSotrType1.Up) {\r\n                if (a.createdAt == b.createdAt) {\r\n                    return this.defaultSort(type, a_data, b_data)\r\n                }\r\n                return a.createdAt - b.createdAt;\r\n            } else {\r\n                if (a.createdAt == b.createdAt) {\r\n                    return this.defaultSort(type, a_data, b_data)\r\n                }\r\n                return b.createdAt - a.createdAt;\r\n            }\r\n        })\r\n    }\r\n\r\n    /**品质排序 */\r\n    static getQulitySort(data, type) {\r\n        data.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (type == CardSotrType1.Up) {\r\n                if (a.quality == b.quality) {\r\n                    return this.defaultSort(type, a_data, b_data)\r\n                }\r\n                return a.quality - b.quality;\r\n            } else {\r\n                if (a.quality == b.quality) {\r\n                    return this.defaultSort(type, a_data, b_data)\r\n                }\r\n                return b.quality - a.quality;\r\n            }\r\n        })\r\n    }\r\n\r\n    /**可升级排序 */\r\n    static getCanUpSort(data, type) {\r\n        data.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            let a_up = PlayerData.CheckCardIsCanUpgrade(a.id) ? 1 : 2;\r\n            let b_up = PlayerData.CheckCardIsCanUpgrade(b.id) ? 1 : 2;\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (type == CardSotrType1.Up) {\r\n                if (a_up == b_up) {\r\n                    return this.defaultSort(type, a_data, b_data)\r\n                }\r\n                return a_up - b_up;\r\n            } else {\r\n                if (a_up == b_up) {\r\n                    return this.defaultSort(type, a_data, b_data)\r\n                }\r\n                return b_up - a_up;\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    /**默认规则 */\r\n    static defaultSort(type, a: StdCard, b: StdCard) {\r\n        if (type == CardSotrType1.Up) {\r\n            if (a.Cost == b.Cost) {\r\n                if (a.Power == b.Power) {\r\n                    return a.ID - b.ID\r\n                }\r\n                return a.Power - b.Power\r\n            }\r\n            return a.Cost - b.Cost;\r\n        } else {\r\n            if (a.Cost == b.Cost) {\r\n                if (a.Power == b.Power) {\r\n                    return b.ID - a.ID\r\n                }\r\n                return b.Power - a.Power\r\n            }\r\n            return b.Cost - a.Cost;\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    //——————————————————————————————————————————————————————————————————————筛选相关————————————————————————————————————————————————————————\r\n\r\n    //搜索后的卡牌\r\n    static onEditEnd(editBox:EditBox, searchStrList, nodeList, search_card_list, selectSkillType, costType, showType) {\r\n        let list = []\r\n        search_card_list = this.setSearch(search_card_list, selectSkillType, costType, showType)\r\n        // this.setSearch(search_card_list, selectSkillType, costType, showType)\r\n        if (editBox.string) {\r\n            searchStrList.unshift(editBox.string)\r\n            if (searchStrList.length > 4) {\r\n                searchStrList.splice(4, 1)\r\n            }\r\n            nodeList.children.forEach(item => {\r\n                item.children[0].getComponent(Label).string = searchStrList[item.getSiblingIndex()]\r\n            })\r\n\r\n            for (let index = 0; index < searchStrList.length; index++) {\r\n                nodeList.children[index].active = true;\r\n            }\r\n            for (const iterator of search_card_list) {\r\n                let cfg = CfgMgr.GetCard(iterator.cardId)\r\n                if (cfg.CardName.includes(editBox.string) || (cfg.SkillDesc && cfg.SkillDesc.includes(editBox.string))) {\r\n                    list.push(iterator)\r\n                }\r\n            }\r\n\r\n        } else {\r\n            list = search_card_list\r\n        }\r\n        return list\r\n    }\r\n\r\n    //筛选特殊技能效果的卡牌\r\n    static skillSearch(editBox, nodeList, selectSkillList, selectSkillType, costType, showType) {\r\n        editBox.string = \"\";\r\n        selectSkillType = skillType.undefined\r\n        nodeList.children.forEach((node, index) => {\r\n            if (node.getComponent(Toggle).isChecked) {\r\n                selectSkillType = index + 1\r\n            }\r\n        })\r\n\r\n        selectSkillList = this.setSearch(selectSkillList, selectSkillType, costType, showType)\r\n        return [selectSkillList, selectSkillType]\r\n    }\r\n\r\n    //筛选能量消耗的卡牌\r\n    static costSearch(editBox, nodeList, costTypeList, selectSkillType, costType, showType) {\r\n        editBox.string = \"\";\r\n        costType = [];\r\n        nodeList.children.forEach((node, index) => {\r\n            if (node.getComponent(Toggle).isChecked) {\r\n                costType.push(index)\r\n            }\r\n        })\r\n        costTypeList = this.setSearch(costTypeList, selectSkillType, costType, showType)\r\n        return [costTypeList, costType]\r\n    }\r\n\r\n    //筛选自定义展示的卡牌\r\n    static showSearch(editBox, nodeList, showTypeList, selectSkillType, costType, showType) {\r\n        editBox.string = \"\";\r\n        showType = false;\r\n        nodeList.children.forEach((node, index) => {\r\n            if (node.getComponent(Toggle).isChecked) {\r\n                showType = true\r\n            }\r\n        })\r\n        console.log(showType)\r\n        showTypeList = this.setSearch(showTypeList, selectSkillType, costType, showType)\r\n        return [showTypeList, showType]\r\n    }\r\n\r\n    static setSearch(list, selectSkillType, costType, showType) {\r\n        list = []\r\n        if (showType) {\r\n            list = this.onSetSearchShow();\r\n        }\r\n        if (list.length == 0) {\r\n            for (let index = 0; index < PlayerData.cards.length; index++) {\r\n                const element = PlayerData.cards[index];\r\n                list.push(element)   \r\n            }\r\n        }\r\n        //加入特殊效果的条件\r\n        if (selectSkillType) {\r\n            list = CfgMgr.GetCardCfgByType(list, selectSkillType)\r\n        }\r\n        list = this.onSetSearchCost(list, costType)\r\n        return list\r\n    }\r\n\r\n    static onSetSearchShow() {\r\n        let list = []\r\n        for (const iterator of CfgMgr.CardList) {\r\n            let index = PlayerData.cards.findIndex(item => item.cardId == iterator.ID);\r\n            if (index != -1) {\r\n                list.push(PlayerData.cards[index])\r\n            } else {\r\n                let card_data: proto.base.IBattleCard = new proto.base.BattleCard();\r\n                card_data.cardId = iterator.ID;\r\n                card_data.createdAt = \"\";\r\n                card_data.id = \"\";\r\n                card_data.exp = 0;\r\n                card_data.level = 1;\r\n                card_data.nftLockExpires = false;\r\n                card_data.ownershipType = 0;\r\n                card_data.quality = 1;\r\n                card_data.tradeCd = 0;\r\n                card_data.updateId = 0;\r\n                list.push(card_data);\r\n            }\r\n        }\r\n        return list\r\n    }\r\n\r\n    static onSetSearchCost(data: proto.base.IBattleCard[], type_list: number[]) {\r\n        let list = []\r\n        if (type_list.length <= 0) {\r\n            return data;\r\n        }\r\n        for (let index = 0; index < type_list.length; index++) {\r\n            const type = type_list[index];\r\n            if (type != undefined) {\r\n                data.forEach((item, index) => {\r\n                    let card_cfg = CfgMgr.GetCard(item.cardId)\r\n                    if (type == 0) {\r\n                        if (card_cfg.Cost <= 1) {\r\n                            list.push(item)\r\n                        }\r\n                    } else {\r\n                        if (card_cfg.Cost == type + 1) {\r\n                            list.push(item)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        return list\r\n    }\r\n\r\n\r\n\r\n}"]}