{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/battle/opOutput/Out_WaitPlayerInput_2d.ts"],"names":["Out_WaitPlayerInput_2d","Button","DragDropMgr","BattleBaseComp","battleLogicMgr","BattleCardGrid","BattleTerrainArea","BattleCard","DecodeReq","Protocol","PlayerData","Session","DateUtils","battleDataMgr","base","ObjectUtils","MsgPanel","editGridList","copyHandCards","copyAreas","isInit","isSend","playerData","curEnergy","start","playerId","getPlayerId","getPlayerData","roundEnergy","round","finalValue","deepCopy","getPlayerHandCards","getPlayerTerrainDatas","dragLayer","active","registerDragDrop","roundBtn","node","on","EventType","CLICK","onBtnClick","battleroomconfirmopinput","onBattleroomconfirmopinput","onUpdate","dt","data","offset","timeout","ServerTime","endOp","console","log","sendRoundConfirm","reset","off","clear","isSucceed","updateAll","exit","result","res","code","btn","inputs","input","editCardData","terrainData","index","length","curAreaIdx","BattleRoomOpInput","create","cardData","location","BattleRoomCardLocation","Hand","opType","BattleRoomOpInputType","In_HandToTerrain","handToTerrainData","BattleRoomOpInput_HandToTerrain","terrainInstId","instId","cardInstId","HandToTerrain","Terrain","In_TerrainToTerrain","terrainToTerrainData","BattleRoomOpInput_TerrainToTerrain","toTerrainInstId","TerrainToTerrain","push","server","roomId","roomData","dir","Send","handCardList","handGridList","handCard","addDragNode","terrainAreaList","terraninAreaListA","terrainArea","addDropNode","cardGrid","gridList","handGridCont","chekIsCanDrag","battleGrid","getComponent","getEditCardData","editIdx","cost","Show","creatDragNode","dragNode","fromPoolCard","dragGrid","addComponent","setData","dradData","dragAreaIdx","areaIdx","dragGridIdx","gridIdx","dragData","isAgent","onDrag","onDrop","dropNode","dropResult","toDrop","putCardToPool","battleTerrainArea","dragCardData","areaId","formAreaIdx","delIdx","indexOf","delEditCardData","splice","cards","curGridIdx","formGridIdx","areaData","terrainIdData","terrainState","BattleRoomInTerrainState","TerrainStateDestroy","dropGrid","newEditData","pop","battleCardGrid","grid","cardIdx","isPlayerA","energyLabA","string","toString"],"mappings":"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","sourcesContent":["import { Button, Node} from \"cc\";\r\nimport { DragDropMgr, IDragData, IDragDropEvent } from \"../../../manager/DragDropMgr\";\r\nimport { BattleBaseComp } from \"../BattleBaseComp\";\r\nimport { battleLogicMgr } from \"../BattleLogicMgr\";\r\nimport { BattleCardGrid } from \"../BattleCardGrid\";\r\nimport { BattleTerrainArea } from \"../BattleTerrainArea\";\r\nimport { BattleCard } from \"../BattleCard\";\r\nimport { DecodeReq, Protocol } from \"../../../net/Protocol\";\r\nimport { PlayerData } from \"../../player/PlayerData\";\r\nimport { Session } from \"../../../net/Session\";\r\nimport { DateUtils } from \"../../../utils/DateUtils\";\r\nimport { battleDataMgr } from \"../BattleDataMgr\";\r\nimport base from \"../../../net/proto/BaseUtils\";\r\nimport { ObjectUtils } from \"../../../utils/ObjectUtils\";\r\nimport { MsgPanel } from \"../../common/MsgPanel\";\r\n\r\ninterface IEditCardData {\r\n    formAreaIdx: number; //原区域下标\r\n    formGridIdx: number; //原格子下标\r\n    curAreaIdx: number; //当前区域下标\r\n    curGridIdx: number; //当前格子下标\r\n    editIdx?: number;     //编辑下标\r\n    cardData: base.IBattleRoomCardData;\r\n}\r\ninterface IDragCardData {\r\n    dragAreaIdx: number; //拖拽区域下标\r\n    dragGridIdx: number; //拖拽格子下标\r\n    cardData: base.IBattleRoomCardData;\r\n}\r\n/**\r\n * 等待客户端玩家操作\r\n */\r\nexport class Out_WaitPlayerInput_2d extends BattleBaseComp<base.IBattleRoomOpOutput_WaitPlayerInput> implements IDragDropEvent {\r\n    //编辑中的格子信息\r\n    private editGridList: IEditCardData[] = [];\r\n    private copyHandCards: base.IBattleRoomCardData[] = [];\r\n    private copyAreas: base.IBattleRoomTerrainPlayerData[] = [];\r\n    private isInit: boolean = false;\r\n    private isSend: boolean = false;\r\n    private playerData: base.IBattleRoomPlayerData;\r\n    private curEnergy: number;//当前编辑剩余能量\r\n    protected start(): void {\r\n        let playerId = battleDataMgr.getPlayerId(true);\r\n        this.playerData = battleDataMgr.getPlayerData(playerId);\r\n        this.curEnergy = this.playerData.roundEnergy[this.round - 1].finalValue;\r\n        this.copyHandCards = ObjectUtils.deepCopy(battleDataMgr.getPlayerHandCards(playerId));\r\n        this.copyAreas = ObjectUtils.deepCopy(battleDataMgr.getPlayerTerrainDatas(playerId));\r\n        battleLogicMgr.dragLayer.active = true;\r\n        this.registerDragDrop();\r\n        this.editGridList = [];\r\n        battleLogicMgr.roundBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        Session.on(Protocol.battleroomconfirmopinput, this.onBattleroomconfirmopinput, this);\r\n        this.isInit = true;\r\n        this.isSend = false;\r\n    }\r\n\r\n    protected onUpdate(dt: number): void {\r\n        if (!this.isInit || !this.data) return;\r\n        let offset: number = this.data.timeout - DateUtils.ServerTime;\r\n        if (this.isSend) {\r\n            //服务器无响应世界结束\r\n            if (offset < 5) {\r\n                this.endOp();\r\n            }\r\n            return;\r\n        }\r\n        \r\n        if (offset <= 1) {\r\n            console.log(\"-------->出牌超时自动出牌\");\r\n            this.sendRoundConfirm();\r\n        }\r\n    }\r\n\r\n    protected reset(): void {\r\n        battleLogicMgr.dragLayer.active = false;\r\n        this.isInit = false;\r\n        this.curEnergy = null;\r\n        this.editGridList = null;\r\n        battleLogicMgr.roundBtn.node.off(Button.EventType.CLICK, this.onBtnClick, this);\r\n        Session.off(Protocol.battleroomconfirmopinput, this.onBattleroomconfirmopinput, this);\r\n        DragDropMgr.clear();\r\n    }\r\n\r\n    private endOp(isSucceed: boolean = false): void {\r\n        //出牌失败把格子打回手牌区\r\n        this.editGridList = [];\r\n        if (!isSucceed) {\r\n            console.log(\"-------->失败\");\r\n            this.copyHandCards = ObjectUtils.deepCopy(battleDataMgr.getPlayerHandCards(this.playerData.playerId));\r\n            this.copyAreas = ObjectUtils.deepCopy(battleDataMgr.getPlayerTerrainDatas(this.playerData.playerId));\r\n            this.curEnergy = this.playerData.roundEnergy[this.round - 1].finalValue;\r\n           \r\n            this.updateAll();\r\n        }\r\n        this.exit();\r\n        \r\n        \r\n    }\r\n\r\n    private onBattleroomconfirmopinput(data: any): void {\r\n        let result = DecodeReq.battleroomconfirmopinput(data);\r\n        this.endOp(result.res.code == 200);\r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case battleLogicMgr.roundBtn:\r\n                this.sendRoundConfirm();\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    private sendRoundConfirm(): void {\r\n        let inputs: base.BattleRoomOpInput[] = [];\r\n        let input: base.BattleRoomOpInput;\r\n        let editCardData: IEditCardData;\r\n        let terrainData: base.IBattleRoomTerrainPlayerData;\r\n        for (let index = 0; index < this.editGridList.length; index++) {\r\n            editCardData = this.editGridList[index];\r\n            terrainData = this.copyAreas[editCardData.curAreaIdx];\r\n            input = base.BattleRoomOpInput.create();\r\n            if (editCardData.cardData.location == base.BattleRoomCardLocation.Hand) {\r\n                input.opType = base.BattleRoomOpInputType.In_HandToTerrain;\r\n                let handToTerrainData: base.IBattleRoomOpInput_HandToTerrain;\r\n                handToTerrainData = base.BattleRoomOpInput_HandToTerrain.create();\r\n                handToTerrainData.terrainInstId = terrainData.instId;\r\n                handToTerrainData.cardInstId = editCardData.cardData.instId;\r\n                input.HandToTerrain = handToTerrainData;\r\n            } else if (editCardData.cardData.location == base.BattleRoomCardLocation.Terrain) {\r\n                input.opType = base.BattleRoomOpInputType.In_TerrainToTerrain;\r\n                let terrainToTerrainData: base.IBattleRoomOpInput_TerrainToTerrain;\r\n                terrainToTerrainData = base.BattleRoomOpInput_TerrainToTerrain.create();\r\n                terrainToTerrainData.toTerrainInstId = terrainData.instId;\r\n                terrainToTerrainData.cardInstId = editCardData.cardData.instId;\r\n                input.TerrainToTerrain = terrainToTerrainData;\r\n            }\r\n            \r\n            inputs.push(input);\r\n        }\r\n        let data = new Protocol.battleroomconfirmopinput();\r\n        data.server = PlayerData.server;\r\n        data.roomId = battleDataMgr.roomData.roomId;\r\n        data.inputs = inputs;\r\n        console.log(\"发送出牌数据---->\");\r\n        console.dir(data)\r\n        Session.Send(data);\r\n        this.isSend = true;\r\n    }\r\n    //注册拖拽节点\r\n    private registerDragDrop(): void {\r\n        let handCardList: BattleCardGrid[] = battleLogicMgr.handGridList;\r\n        for (let handCard of handCardList) {\r\n            DragDropMgr.addDragNode(handCard.node);\r\n        }\r\n    \r\n        let terrainAreaList: BattleTerrainArea[] = battleLogicMgr.terraninAreaListA;\r\n        for (let terrainArea of terrainAreaList) {\r\n            DragDropMgr.addDropNode(terrainArea.node);    \r\n            for (let cardGrid of terrainArea.gridList) {\r\n                DragDropMgr.addDragNode(cardGrid.node);\r\n            }\r\n        }\r\n\r\n        DragDropMgr.addDropNode(battleLogicMgr.handGridCont);    \r\n\r\n        DragDropMgr.on(this, battleLogicMgr.dragLayer);\r\n        \r\n    }\r\n\r\n    //检测是否可拖拽\r\n    chekIsCanDrag(node: Node): boolean {\r\n        let battleGrid: BattleCardGrid = node.getComponent(BattleCardGrid);\r\n        let cardData: base.IBattleRoomCardData = battleGrid.cardData;\r\n        if (!cardData) return false;\r\n        let editCardData: IEditCardData = this.getEditCardData(cardData.instId);\r\n        if (editCardData) {\r\n            //拖拽的是编辑列表的卡 如果是最后一个则可以拖拽 否则不可以\r\n            return editCardData.editIdx == this.editGridList.length - 1;\r\n        }\r\n        //无编辑卡\r\n        if (cardData.location == base.BattleRoomCardLocation.Hand) {\r\n            if (this.curEnergy < cardData.cost.finalValue) {\r\n                MsgPanel.Show(\"能量不足\");\r\n                //能量不足\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else if (cardData.location == base.BattleRoomCardLocation.Terrain) {\r\n            //拖拽的是地形牌\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    creatDragNode(node: Node): IDragData {\r\n        let battleGrid: BattleCardGrid = node.getComponent(BattleCardGrid);\r\n        let dragNode: Node = battleLogicMgr.fromPoolCard;\r\n        let dragGrid: BattleCard = dragNode.getComponent(BattleCard) || dragNode.addComponent(BattleCard);\r\n        let cardData: base.IBattleRoomCardData = ObjectUtils.deepCopy(battleGrid.cardData);\r\n        dragGrid.setData(cardData);\r\n        dragNode.active = true;\r\n        let dradData: IDragCardData = {\r\n            dragAreaIdx: battleGrid.areaIdx, \r\n            dragGridIdx: battleGrid.gridIdx, \r\n            cardData: battleGrid.cardData\r\n        };\r\n        let dragData: IDragData<IDragCardData> = {\r\n            dragNode: dragNode,\r\n            data: dradData,\r\n            isAgent: true,\r\n        };\r\n        return dragData; \r\n    }\r\n\r\n    onDrag(dragData: IDragData): void {\r\n        \r\n    }\r\n\r\n    onDrop(dropNode: Node, dragData: IDragData<IDragCardData>): void {\r\n        let dropResult: boolean = false;\r\n        if (dropNode && !this.isSend) {\r\n            dropResult = this.toDrop(dropNode, dragData);\r\n        } \r\n        battleLogicMgr.putCardToPool(dragData.dragNode);\r\n        //放下成功\r\n        if (dropResult) {\r\n            this.updateAll();\r\n        } else {\r\n            \r\n        }\r\n\r\n        \r\n    }\r\n\r\n    private toDrop(dropNode: Node, dragData: IDragData<IDragCardData>): boolean {\r\n        let battleTerrainArea: BattleTerrainArea = dropNode.getComponent(BattleTerrainArea);\r\n        let dragCardData: IDragCardData = dragData.data;\r\n        if (battleTerrainArea) {\r\n            //在地形区域放下\r\n            let editCardData: IEditCardData = this.getEditCardData(dragCardData.cardData.instId);\r\n            if (editCardData) {\r\n                if (dragCardData.cardData.location == base.BattleRoomCardLocation.Hand) {\r\n                    //编辑的手牌不可以在地形上放下只能放回手牌区\r\n                    return false;\r\n                } else if (dragCardData.cardData.location == base.BattleRoomCardLocation.Terrain) {\r\n                    if (battleTerrainArea.areaId != editCardData.formAreaIdx) {\r\n                        //编辑的区域牌只能放回原来区域\r\n                        return false;\r\n                    } else {\r\n                        //区域上的卡放回原来区域位置\r\n                        let delIdx: number = this.editGridList.indexOf(editCardData);\r\n                        let delEditCardData: IEditCardData = this.editGridList[delIdx];\r\n                        this.editGridList.splice(delIdx, 1);\r\n                        //this.resetEditCardIndx();\r\n                        console.log(\"删除编辑---->\" + delIdx)\r\n                        let terrainData: base.IBattleRoomTerrainPlayerData;\r\n                        terrainData = this.copyAreas[delEditCardData.curAreaIdx];\r\n                        //从当前区域删除\r\n                        terrainData.cards.splice(delEditCardData.curGridIdx, 1);\r\n                        console.log(\"从地形上删除---->\" + delEditCardData.curAreaIdx + \"------>\" + delEditCardData.curGridIdx)\r\n\r\n                        terrainData = this.copyAreas[delEditCardData.formAreaIdx];\r\n                        //插入到原来区域\r\n                        terrainData.cards.splice(delEditCardData.formGridIdx, 0, delEditCardData.cardData);\r\n                        console.log(\"添加到地形---->\" + delEditCardData.formAreaIdx + \"------>\" + delEditCardData.formGridIdx)\r\n                        \r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            let areaData: base.IBattleRoomTerrainData = battleDataMgr.terrainIdData(battleTerrainArea.terrainData.instId);\r\n            if (areaData.terrainState == base.BattleRoomInTerrainState.TerrainStateDestroy) {\r\n                //区域已销毁\r\n                return false;\r\n            }\r\n            let dropGrid: BattleCardGrid;\r\n            for (let cardGrid of battleTerrainArea.gridList) {\r\n                if (!cardGrid.cardData) {\r\n                    dropGrid = cardGrid;\r\n                    break;\r\n                }\r\n            }\r\n            //区域已满不可放置\r\n            if (!dropGrid) return false;\r\n            //原来就在此区域\r\n            if (dragCardData.dragAreaIdx == dropGrid.areaIdx) return false;\r\n            \r\n            let newEditData: IEditCardData = {\r\n                formAreaIdx: dragCardData.dragAreaIdx, \r\n                formGridIdx: dragCardData.dragGridIdx, \r\n                curAreaIdx: dropGrid.areaIdx,\r\n                curGridIdx: dropGrid.gridIdx,\r\n                editIdx: this.editGridList.length,\r\n                cardData: dragCardData.cardData,\r\n            };\r\n            \r\n            this.editGridList.push(newEditData);\r\n            console.log(\"添加编辑---->\" + newEditData.curAreaIdx + \"----->\" + newEditData.curGridIdx)\r\n            if (dragCardData.cardData.location == base.BattleRoomCardLocation.Hand) {\r\n                this.copyHandCards.splice(dragCardData.dragGridIdx, 1);\r\n                let terrainData: base.IBattleRoomTerrainPlayerData = this.copyAreas[dropGrid.areaIdx];\r\n                terrainData.cards.push(dragCardData.cardData);\r\n                this.curEnergy -= dragCardData.cardData.cost.finalValue;\r\n                \r\n            } else if (dragCardData.cardData.location == base.BattleRoomCardLocation.Terrain) {\r\n                let terrainData: base.IBattleRoomTerrainPlayerData = this.copyAreas[dragCardData.dragAreaIdx];\r\n                terrainData.cards.splice(dragCardData.dragGridIdx, 1);\r\n\r\n                terrainData = this.copyAreas[dropGrid.areaIdx];\r\n                terrainData.cards.push(dragCardData.cardData);\r\n            }\r\n            return true;\r\n        } else {\r\n            //在手牌区放下\r\n            if (dragCardData.cardData.location == base.BattleRoomCardLocation.Hand) {\r\n                let editCardData: IEditCardData = this.getEditCardData(dragCardData.cardData.instId);\r\n                if (editCardData && editCardData.editIdx == this.editGridList.length - 1) {\r\n                    this.editGridList.pop();\r\n                    this.curEnergy += dragCardData.cardData.cost.finalValue;\r\n                    let terrainData: base.IBattleRoomTerrainPlayerData = this.copyAreas[dragCardData.dragAreaIdx];\r\n                    terrainData.cards.splice(dragCardData.dragGridIdx, 1);\r\n                    this.copyHandCards.splice(editCardData.formGridIdx, 0, editCardData.cardData);\r\n                    return true;\r\n                }\r\n            } else {\r\n                //其它位置的卡牌不能放回手牌区\r\n            }\r\n            return false;\r\n        } \r\n    }\r\n    \r\n    private getEditCardData(instId: string): IEditCardData {\r\n        for (let data of this.editGridList) {\r\n            if (data.cardData.instId == instId) return data;\r\n        }\r\n    }\r\n\r\n    private updateAll(): void {\r\n        //刷新全部格子\r\n        for (let index = 0; index < battleLogicMgr.handGridList.length; index++) {\r\n            let battleCardGrid: BattleCardGrid = battleLogicMgr.handGridList[index];\r\n            battleCardGrid.setData(this.copyHandCards[index] || null);\r\n        }\r\n\r\n        let terrainArea: BattleTerrainArea;\r\n        let grid: BattleCardGrid;\r\n        let terrainData: base.IBattleRoomTerrainPlayerData;\r\n        for (let areaIdx = 0; areaIdx < battleLogicMgr.terraninAreaListA.length; areaIdx++) {\r\n            terrainArea = battleLogicMgr.terraninAreaListA[areaIdx];\r\n            terrainData = this.copyAreas[areaIdx];\r\n            for (let cardIdx = 0; cardIdx < terrainArea.gridList.length; cardIdx++) {\r\n                grid = terrainArea.gridList[cardIdx];\r\n                grid.setData(terrainData.cards[cardIdx]||null);\r\n            }\r\n        }\r\n        if (battleDataMgr.isPlayerA(this.playerData.playerId)) {\r\n            battleLogicMgr.energyLabA.string = this.curEnergy.toString();\r\n        }\r\n    }\r\n}"]}