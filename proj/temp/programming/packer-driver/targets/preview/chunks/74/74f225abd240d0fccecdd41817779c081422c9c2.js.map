{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/manager/RedDotMgr.ts"],"names":["RedDotMgr","RedDotId","constructor","nodes","Map","getInstance","instance","registerNode","nodeID","parentID","has","Error","parent","get","node","RedDotNode","set","addChild","activateNode","activate","deactivateNode","deactivate","getNodeState","isActive"],"mappings":";;;iBAMaA,S;;;;;;;;;;;;;0BANDC,Q,0BAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;eAAAA,Q;;;2BAMCD,S,GAAN,MAAMA,SAAN,CAAgB;AAEqB;AAEhCE,QAAAA,WAAW,GAAG;AAHc;AAGd,eAFdC,KAEc;AAClB,eAAKA,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACH,SANkB,CAQnB;;;AACyB,eAAXC,WAAW,GAAc;AACnC,cAAI,CAACL,SAAS,CAACM,QAAf,EAAyB;AACrBN,YAAAA,SAAS,CAACM,QAAV,GAAqB,IAAIN,SAAJ,EAArB;AACH;;AACD,iBAAOA,SAAS,CAACM,QAAjB;AACH,SAdkB,CAgBnB;;;AACOC,QAAAA,YAAY,CAACC,MAAD,EAAiBC,QAAjB,EAA6D;AAAA,cAA5CA,QAA4C;AAA5CA,YAAAA,QAA4C,GAAlB,IAAkB;AAAA;;AAC5E,cAAI,KAAKN,KAAL,CAAWO,GAAX,CAAeF,MAAf,CAAJ,EAA4B;AACxB,kBAAM,IAAIG,KAAJ,mBAAgBH,MAAhB,yBAAN;AACH;;AAED,cAAMI,MAAM,GAAGH,QAAQ,GAAG,KAAKN,KAAL,CAAWU,GAAX,CAAeJ,QAAf,CAAH,GAA8B,IAArD;AACA,cAAMK,IAAI,GAAG,IAAIC,UAAJ,CAAeP,MAAf,EAAuBI,MAAvB,CAAb;AACA,eAAKT,KAAL,CAAWa,GAAX,CAAeR,MAAf,EAAuBM,IAAvB;;AAEA,cAAIF,MAAJ,EAAY;AACRA,YAAAA,MAAM,CAACK,QAAP,CAAgBH,IAAhB;AACH;;AAED,iBAAOA,IAAP;AACH,SA/BkB,CAiCnB;;;AACOI,QAAAA,YAAY,CAACV,MAAD,EAAuB;AACtC,cAAMM,IAAI,GAAG,KAAKX,KAAL,CAAWU,GAAX,CAAeL,MAAf,CAAb;;AACA,cAAIM,IAAJ,EAAU;AACNA,YAAAA,IAAI,CAACK,QAAL;AACH,WAFD,MAEO;AACH,kBAAM,IAAIR,KAAJ,mBAAgBH,MAAhB,yBAAN;AACH;AACJ,SAzCkB,CA2CnB;;;AACOY,QAAAA,cAAc,CAACZ,MAAD,EAAuB;AACxC,cAAMM,IAAI,GAAG,KAAKX,KAAL,CAAWU,GAAX,CAAeL,MAAf,CAAb;;AACA,cAAIM,IAAJ,EAAU;AACNA,YAAAA,IAAI,CAACO,UAAL;AACH,WAFD,MAEO;AACH,kBAAM,IAAIV,KAAJ,mBAAgBH,MAAhB,yBAAN;AACH;AACJ,SAnDkB,CAqDnB;;;AACOc,QAAAA,YAAY,CAACd,MAAD,EAA0B;AACzC,cAAMM,IAAI,GAAG,KAAKX,KAAL,CAAWU,GAAX,CAAeL,MAAf,CAAb;;AACA,cAAIM,IAAJ,EAAU;AACN,mBAAOA,IAAI,CAACS,QAAZ;AACH,WAFD,MAEO;AACH,kBAAM,IAAIZ,KAAJ,mBAAgBH,MAAhB,yBAAN;AACH;AACJ;;AA7DkB,O;;AAAVR,MAAAA,S,CACMM,Q","sourcesContent":["export enum RedDotId {\r\n    zhu = 100000,\r\n    zhu_task = 100001,\r\n    \r\n}\r\n\r\nexport class RedDotMgr {\r\n    private static instance: RedDotMgr; // 单例实例\r\n    private nodes: Map<number, RedDotNode>; // 存储所有节点\r\n\r\n    private constructor() {\r\n        this.nodes = new Map();\r\n    }\r\n\r\n    // 获取单例实例\r\n    public static getInstance(): RedDotMgr {\r\n        if (!RedDotMgr.instance) {\r\n            RedDotMgr.instance = new RedDotMgr();\r\n        }\r\n        return RedDotMgr.instance;\r\n    }\r\n\r\n    // 注册节点\r\n    public registerNode(nodeID: number, parentID: number | null = null): RedDotNode {\r\n        if (this.nodes.has(nodeID)) {\r\n            throw new Error(`节点 ${nodeID} 已存在`);\r\n        }\r\n\r\n        const parent = parentID ? this.nodes.get(parentID) : null;\r\n        const node = new RedDotNode(nodeID, parent);\r\n        this.nodes.set(nodeID, node);\r\n\r\n        if (parent) {\r\n            parent.addChild(node);\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    // 点亮节点\r\n    public activateNode(nodeID: number): void {\r\n        const node = this.nodes.get(nodeID);\r\n        if (node) {\r\n            node.activate();\r\n        } else {\r\n            throw new Error(`节点 ${nodeID} 不存在`);\r\n        }\r\n    }\r\n\r\n    // 熄灭节点\r\n    public deactivateNode(nodeID: number): void {\r\n        const node = this.nodes.get(nodeID);\r\n        if (node) {\r\n            node.deactivate();\r\n        } else {\r\n            throw new Error(`节点 ${nodeID} 不存在`);\r\n        }\r\n    }\r\n\r\n    // 获取节点状态\r\n    public getNodeState(nodeID: number): boolean {\r\n        const node = this.nodes.get(nodeID);\r\n        if (node) {\r\n            return node.isActive;\r\n        } else {\r\n            throw new Error(`节点 ${nodeID} 不存在`);\r\n        }\r\n    }\r\n}"]}