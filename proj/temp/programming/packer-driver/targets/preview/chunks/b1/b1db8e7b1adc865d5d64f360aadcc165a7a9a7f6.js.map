{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardsGroupCheckPanel.ts"],"names":["CardsGroupCheckPanel","Button","EditBox","Label","CfgMgr","Session","Panel","AutoScroller","PlayerData","Card","Protocol","EventMgr","Evt_Card_Check_By_Name","prefab","tile","scroller","cardGroupScrollView","noneListCont","okBtn","setName","card_id","onLoad","CloseBy","find","SetHandle","updateCardItem","bind","updateCardGroupItem","node","on","onSelect","EventType","CLICK","onOk","onSetDefault","updateCards","flush","UpdateDatas","cardNameList","onShow","Send","getplayerdecks","data","console","log","list","key","Object","hasOwnProperty","call","element","push","sort","a","b","a_cost","GetCard","cardId","Cost","b_cost","item","card","getComponent","addComponent","SetData","card_name","getChildByName","string","name","id","index","getdeckcards","deckId","add","setdeckattrs","attrs","type","set","setdeckdefault","onHide"],"mappings":"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","sourcesContent":["import { Button, EditBox, Input, Label, Node, Sprite, SpriteFrame, Toggle, UIOpacity } from \"cc\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Card } from \"./Card\";\r\nimport  base  from \"../../net/proto/BaseUtils\";\r\nimport { Protocol } from \"../../net/Protocol\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { EventMgr, Evt_Card_Check_By_Name } from \"../../manager/EventMgr\";\r\n\r\n\r\nexport class CardsGroupCheckPanel extends Panel {\r\n    protected prefab: string = \"prefabs/cards/CardsGroupCheckPanel\";\r\n \r\n    protected tile: Label;\r\n    protected scroller: AutoScroller;\r\n    protected cardGroupScrollView: AutoScroller;\r\n    private noneListCont:Node;\r\n    private okBtn:Button;\r\n    private setName: EditBox;\r\n\r\n    private card_id:string;\r\n\r\n    protected onLoad() {\r\n        this.CloseBy(\"closeBtn\");\r\n        this.noneListCont = this.find(\"noneListCont\");\r\n        this.scroller = this.find(\"ScrollView\", AutoScroller);\r\n        this.scroller.SetHandle(this.updateCardItem.bind(this));\r\n        this.cardGroupScrollView = this.find(\"cardGroupScrollView\", AutoScroller);\r\n        this.cardGroupScrollView.SetHandle(this.updateCardGroupItem.bind(this));\r\n        this.cardGroupScrollView.node.on('select', this.onSelect, this);\r\n        this.setName = this.find(\"setName\", EditBox);\r\n        this.find(\"okBtn\", Button).node.on(Button.EventType.CLICK, this.onOk, this);\r\n        this.find(\"setDefaultBtn\", Button).node.on(Button.EventType.CLICK, this.onSetDefault, this);\r\n        EventMgr.on(Evt_Card_Check_By_Name, this.updateCards, this);\r\n       \r\n    }\r\n\r\n    public flush(...args: any[]): void {   \r\n        this.scroller.UpdateDatas([]);\r\n        this.cardGroupScrollView.UpdateDatas(PlayerData.cardNameList);\r\n    }\r\n\r\n    protected onShow(): void {\r\n        Session.Send(Protocol.getplayerdecks)\r\n    }\r\n\r\n    private updateCards(data){\r\n        console.log(\"data\", data)\r\n        \r\n        let list: base.IBattleCard[] = [];\r\n        for (const key in data) {\r\n            if (Object.hasOwnProperty.call(data, key)) {\r\n                const element = data[key];\r\n                list.push(element);\r\n            }\r\n        }\r\n        list.sort((a:base.IBattleCard, b:base.IBattleCard)=>{\r\n            let a_cost = CfgMgr.GetCard(a.cardId).Cost;\r\n            let b_cost = CfgMgr.GetCard(b.cardId).Cost;\r\n            return a_cost - b_cost;\r\n        })\r\n        this.scroller.UpdateDatas(list);\r\n\r\n        \r\n    }\r\n   \r\n\r\n\r\n    protected updateCardItem(item: Node, data: base.IBattleCard) {\r\n        let card = item.getComponent(Card);\r\n        if (!card) card = item.addComponent(Card);\r\n        card.SetData(data);\r\n    }\r\n\r\n    protected updateCardGroupItem(item: Node, data: base.IDeckAttrs) {\r\n        let card_name = item.getChildByName(\"name\").getComponent(Label);\r\n        card_name.string = data.name;\r\n        let card_id = item.getChildByName(\"id\").getComponent(Label);\r\n        card_id.string = data.id\r\n    }\r\n\r\n    protected  onSelect(index: number, item: Node) {\r\n        let card_name = item.getChildByName(\"name\").getComponent(Label);\r\n    \r\n        let card_id = item.getChildByName(\"id\").getComponent(Label);\r\n        console.log(card_name.string , card_id.string)\r\n        this.card_id = card_id.string;\r\n\r\n        let getdeckcards = new Protocol.getdeckcards();\r\n        getdeckcards.deckId = this.card_id;\r\n        Session.Send(getdeckcards);\r\n    }\r\n\r\n\r\n    protected onOk() {\r\n        let add = new Protocol.setdeckattrs();\r\n        add.attrs = {id: this.card_id, name:this.setName.string, type:null};\r\n        Session.Send(add)\r\n    }\r\n\r\n    private onSetDefault(){\r\n        let set = new Protocol.setdeckdefault();\r\n        set.deckId = this.card_id;\r\n        Session.Send(set)\r\n    }\r\n\r\n\r\n\r\n    protected onHide(...args: any[]): void {\r\n    }\r\n\r\n}\r\n"]}