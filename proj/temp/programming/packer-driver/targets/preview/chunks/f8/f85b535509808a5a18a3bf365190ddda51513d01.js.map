{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/battle/BattleLogicMgr.ts"],"names":["BattleLogicMgr","Button","instantiate","Label","NodePool","BattleCardGrid","BattleTerrainGrid","battleDataMgr","BattleTerrainArea","battleCompMgr","Protocol","PlayerData","Session","root","terraninAreaListB","terrainGrildList","terraninAreaListA","handGridCont","handGridList","showCardLayer","dragLayer","exitBtn","roundBtn","roundBtnLab","roundLab","energyA","energyLabA","energyB","energyLabB","tempBattleCard","cardPool","isInit","isRun","init","loop","terraninAreaContB","getChildByName","node","children","com","addComponent","setAreaId","push","terrainCont","setTerrainId","terraninAreaContA","setGridIdx","getComponent","getChildByPath","on","EventType","CLICK","onBtnClick","setTimeout","update","dt","btn","data","battleroomleave","server","roomId","roomData","Send","console","log","runBattle","battleOpData","getFirstBattlePack","comp","addComp","exitCall","round","playerId","removeComp","enter","packData","fromPoolCard","get","putCardToPool","put","battleLogicMgr"],"mappings":"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","sourcesContent":["import { Button, EventTouch, instantiate, Label, Node, NodePool } from \"cc\";\r\nimport { DragDropMgr, IDragData, IDragDropEvent } from \"../../manager/DragDropMgr\";\r\nimport { BattleCardGrid } from \"./BattleCardGrid\";\r\nimport { BattleTerrainGrid } from \"./BattleTerrainGrid\";\r\nimport { battleDataMgr } from \"./BattleDataMgr\";\r\nimport { BattleTerrainArea } from \"./BattleTerrainArea\";\r\nimport { battleCompMgr } from \"./BattleCompMgr\";\r\nimport { BattlePanel } from \"./BattlePanel\";\r\nimport { Protocol } from \"../../net/Protocol\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { BattleBaseComp } from \"./BattleBaseComp\";\r\nimport { BattleOpData } from \"../player/PlayerStruct\";\r\n\r\nexport class BattleLogicMgr {\r\n    public root: Node;//ui根节点\r\n    public terraninAreaListB: BattleTerrainArea[] = [];//第二视觉玩家格子区域\r\n    public terrainGrildList: BattleTerrainGrid[] = [];//地形格子列表\r\n    public terraninAreaListA: BattleTerrainArea[] = [];//第一视觉玩家格子区域\r\n    public handGridCont: Node;//手牌区\r\n    public handGridList: BattleCardGrid[] = [];//手牌格子列表\r\n    public showCardLayer: Node;//补卡层\r\n    public dragLayer: Node;//拖拽层\r\n    public exitBtn: Button;//退出战斗\r\n    public roundBtn: Button;//回合按钮\r\n    public roundBtnLab: Label;//回合按钮文本\r\n    public roundLab: Label;//回合数\r\n    public energyA: Node; //能量A\r\n    public energyLabA: Label;//能量A\r\n    public energyB: Node; //能量B\r\n    public energyLabB: Label;//能量B\r\n    public tempBattleCard: Node;\r\n    public cardPool: NodePool = new NodePool();//卡池\r\n    public isInit: boolean = false;\r\n    private isRun: boolean = false; //是否有在跑战斗包\r\n    public init(root: Node): void{\r\n        let loop: number;\r\n        //玩家b格子\r\n        let terraninAreaContB: Node = root.getChildByName(\"terraninAreaContB\");\r\n        loop = 0;\r\n        for (let node of terraninAreaContB.children) {\r\n            let com: BattleTerrainArea = node.addComponent(BattleTerrainArea);\r\n            com.setAreaId(loop);\r\n            loop ++;\r\n            this.terraninAreaListB.push(com);\r\n        }\r\n        //地形格子\r\n        let terrainCont: Node = root.getChildByName(\"terrainCont\");\r\n        loop = 0;\r\n        for (let node of terrainCont.children) {\r\n            let com: BattleTerrainGrid = node.addComponent(BattleTerrainGrid);\r\n            com.setTerrainId(loop);\r\n            loop ++;\r\n            this.terrainGrildList.push(com);\r\n        }\r\n\r\n        //玩家A格子\r\n        let terraninAreaContA: Node = root.getChildByName(\"terraninAreaContA\");\r\n        loop = 0;\r\n        for (let node of terraninAreaContA.children) {\r\n            let com: BattleTerrainArea = node.addComponent(BattleTerrainArea);\r\n            com.setAreaId(loop);\r\n            loop ++;\r\n            this.terraninAreaListA.push(com);\r\n        }\r\n        \r\n        //玩家A手牌格子\r\n        this.handGridCont = root.getChildByName(\"handGridCont\");\r\n        loop = 0;\r\n        for (let node of this.handGridCont.children) {\r\n            let com: BattleCardGrid = node.addComponent(BattleCardGrid);\r\n            com.setGridIdx(loop);\r\n            loop ++;\r\n            this.handGridList.push(com);\r\n        }\r\n\r\n        this.dragLayer = root.getChildByName(\"dragLayer\");\r\n        this.showCardLayer = root.getChildByName(\"showCardLayer\");\r\n        this.roundLab = root.getChildByName(\"roundLab\").getComponent(Label)\r\n        this.exitBtn = root.getChildByName(\"exitBtn\").getComponent(Button);\r\n        this.roundBtn = root.getChildByName(\"roundBtn\").getComponent(Button);\r\n        this.roundBtnLab = root.getChildByPath(\"roundBtn/roundBtnLab\").getComponent(Label);\r\n        this.energyA = root.getChildByPath(\"energyA\");\r\n        this.energyLabA = root.getChildByPath(\"energyA/energyLabA\").getComponent(Label);\r\n        this.energyB = root.getChildByPath(\"energyB\");\r\n        this.energyLabB = root.getChildByPath(\"energyB/energyLabB\").getComponent(Label);\r\n        this.tempBattleCard = root.getChildByName(\"tempBattleCard\");\r\n        this.exitBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        setTimeout(()=>{\r\n            this.isInit = true;\r\n        }, 200);\r\n        \r\n    }\r\n\r\n    public update(dt: number): void {\r\n        battleCompMgr.update(dt);\r\n        ///if (!this.isInit) return;\r\n        //if (!this.isRun) this.runBattle();\r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.exitBtn:\r\n                let data = new Protocol.battleroomleave();\r\n                data.server = PlayerData.server;\r\n                data.roomId = battleDataMgr.roomData.roomId;\r\n                Session.Send(data);\r\n                console.log(\"发送离开房间---->\")\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 跑战斗数据包\r\n     */\r\n    private runBattle(): void{\r\n        let battleOpData: BattleOpData = battleDataMgr.getFirstBattlePack();\r\n        if (battleOpData) {\r\n            this.isRun = true;\r\n            let comp: BattleBaseComp<any> = battleCompMgr.addComp(battleOpData.comp, 0);\r\n            comp.exitCall = (roomId: string, round: number, playerId: string) => {\r\n                battleCompMgr.removeComp(comp);\r\n                this.isRun = false;\r\n            }\r\n            comp.enter(battleOpData.packData);\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * 创建卡牌节点\r\n     * @returns \r\n     */\r\n    public get fromPoolCard(): Node {\r\n        return this.cardPool.get() || instantiate(this.tempBattleCard);\r\n    }\r\n    /**\r\n     * 将卡牌节点回收到池子\r\n     * @param node \r\n     */\r\n    public putCardToPool(node: Node): void {\r\n        this.cardPool.put(node);\r\n    }\r\n}\r\nexport const battleLogicMgr = new BattleLogicMgr();"]}