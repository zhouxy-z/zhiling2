{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardsPanelTest.ts"],"names":["CardsPanelTest","Button","EditBox","Input","Label","Toggle","UITransform","Vec3","Widget","js","size","view","EventMgr","Evt_Add_Card_Group_update","Evt_Card_Add","Evt_Card_Check_By_Name","Evt_Card_Del","Evt_Card_Group_Update","Evt_Hide_Scene","Evt_Show_Scene","Panel","AutoScroller","PlayerData","Session","CardSotrType1","CardSotrType2","CfgMgr","skillType","CardGroupItem","CardInfoStateType","Second","proto","Req","Ret","Route","CardsSortOrFiltrate","CardsGroupSetting","Goto","Tips","MsgPanel","Tips2","VList","CardTest","MoreType","prefab","scroller","noneListCont","sortNode","closeSortBtn","upOrDownBtn","sortNav","filtrateNode","searchNode","editBox","completeBtn","cancelBtn","filtrateClose","filtrateBtn","sortBtn","moreBtn","showNode","cardGroupScrollView","addCardNode","addCardScrollView","back","clone_item","groupNameEditBox","moreNode","moreNav","skillEffNode","costNode","diyNode","sortNodeBack","navBtns","illustratedScrollView","help","card_group_setting","Content","card_list","max_card_group","max_card","sort_type_1","Up","sort_type_2","Cost","search_card_list","searchStrList","selects","add_or_change","is_open_add_card_group","selectSkillType","costType","showType","selectSkillList","costTypeList","showTypeList","isCanAdd","old_selects","old_name","tag","data","data_list","select_creator_card_group_card_id","onLoad","CloseBy","find","children","concat","btn","off","onPage","on","EventType","TOUCH_END","Show","updateCell","updateCardItem","bind","selectCell","onSelectCard","node","CLICK","onClick","EDITING_DID_ENDED","onEditEnd","active","getChildByName","SetHandle","updateCardGroupItem","onCardGroupSelect","updateCardGroupCardItem","onSelectCardGroupCard","addComponent","onBack","forEach","index","getComponent","isChecked","setCardSort","onMoreBtn","string","skillSearch","costSearch","showSearch","onShow","updateCardsGroupCardData","flush","onReqSaveCardGroup","onAddCard","onDelCard","emit","getClassName","is_show_head_node","console","log","SetPage","cardData","setCardState","page","$hasLoad","initSub","undefined","t","indexOf","updateCardGroup","updateAllCardsShow","setHaveCardGroup","cfg_card_list","onSetSearchShow","UpdateDatas","updatePanel","name","cur_id","id","getdeckcards","deckId","Send","updateAllCardGroup","size_1","contentSize","size_2","size_3","setContentSize","item","updateAlignment","setSelect","height","panel_width","getVisibleSize","width","paddingLeft","paddingRight","right_width","max_width","item_width","num","Math","floor","yu","jianju","spacingX","cellCount","length","iterator","cards","push","setCardsData","player","statusMark","NoobCardsAdd","cardNameList","element","JSON","parse","stringify","initCardGroupCfg","Get","initCardGroup","base","DeckAttrs","create","avatarId","CardGroupHead","cardBackId","CardGroupBack","CardGroupName","unshift","cell","cellInfo","card","setIsShowUpEffect","getChildByPath","isSelect","SetData","setGray","cfg","GetCard","cardId","select_card_cfg","Classid","ID","setShowAdd","lastCell","lastInfo","getData","callBack","is_select","getSelectState","IsOpen","setCardGary","splice","findIndex","addCardsGroup","is_has","type","Add","Fill","Change","Del","card_data","CreaterCardGroupAnmition","Creator","setCurCardGroupCardList","card_group_item","onReqCreateCardGroup","list","key","Object","hasOwnProperty","call","sort","a","b","a_data","b_data","Power","is_gray","card_cfg","is_add","isUpdate","isDle","content","delete_node","removeChild","is_open","Down","y","setScale","resetSearchState","del_card","CurFightCardGroup","delete_data","shard","copy","add","inquiry","count","cfg_logic","GetLogic","head_id","HeadID","card_back_id","BackpackerID","attrs","onadddeck","is_change_name","is_change_card","id_list","getCardGroupDataById","Change_name","send_data","cardIds","onHide","getClassByName","setData","decode","res","code","callBack1","callBack2","set"],"mappings":"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","sourcesContent":["import { Button, EditBox, EventTouch, Input, Label, Layout, Node, ScrollView, Toggle, UITransform, Vec3, Widget, instantiate, js, size, sp, view } from \"cc\";\r\nimport { EventMgr, Evt_Add_Card_Group_update, Evt_Card_Add, Evt_Card_Check_By_Name, Evt_Card_Del, Evt_Card_Group_Update, Evt_Hide_Scene, Evt_Show_Scene } from \"../../manager/EventMgr\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { CardSotrType1, CardSotrType2, CfgMgr, StdCard, StdNoobCardGroup, skillType } from \"../../manager/CfgMgr\";\r\nimport { CardGroupItem } from \"./CardGroupItem\";\r\nimport { CardInfoStateType } from \"../player/PlayerStruct\";\r\nimport { Second, Utils } from \"../../utils/Utils\";\r\nimport proto, { Req, Ret, Route } from \"../../net/Protocol\";\r\nimport { CardsSortOrFiltrate } from \"./CardsSortOrFiltrate\";\r\nimport { CardsGroupSetting } from \"./CardsGroupSetting\";\r\nimport { Goto } from \"../../DL\";\r\nimport { Tips } from \"../common/Tips\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { Tips2 } from \"../common/Tips2\";\r\nimport { CardGroupCreatorTips } from \"./CardGroupCreatorTips\";\r\nimport { CellInfo, VList } from \"../../component/VList\";\r\nimport { CardTest } from \"./CardTest\";\r\n\r\nenum MoreType {\r\n    del_card,//删除卡组\r\n    shard,//分享\r\n    copy,//粘贴\r\n    add, //自动填充\r\n    inquiry,//询问精灵\r\n}\r\n\r\n\r\n\r\nexport class CardsPanelTest extends Panel {\r\n    protected prefab: string = \"prefabs/cards/CardsPanelTest\";\r\n\r\n    private scroller: VList;\r\n    private noneListCont: Node;\r\n    private sortNode: Node;\r\n    private closeSortBtn: Button;\r\n    private upOrDownBtn: Button;\r\n    private sortNav: Node[];\r\n    private filtrateNode: Node;\r\n    private searchNode: Node;\r\n    private editBox: EditBox;\r\n    private completeBtn: Button;\r\n    private cancelBtn: Button;\r\n\r\n    private filtrateClose: Node;\r\n    private filtrateBtn: Button;\r\n    private sortBtn: Button;\r\n    private moreBtn: Button;\r\n\r\n    private showNode: Node;\r\n    private cardGroupScrollView: AutoScroller;\r\n    private addCardNode: Node;\r\n    private addCardScrollView: AutoScroller;\r\n    private back: Node;\r\n    private clone_item: Node;\r\n    private groupNameEditBox: EditBox;\r\n    private moreNode: Node;\r\n    private moreNav: Node[];\r\n\r\n    private skillEffNode: Node;\r\n    private costNode: Node;\r\n    private diyNode: Node;\r\n\r\n    private sortNodeBack: Node;\r\n    private navBtns: Node[];\r\n    private illustratedScrollView: AutoScroller\r\n    private help: Node;\r\n    private card_group_setting: CardsGroupSetting\r\n    private Content:Node;\r\n\r\n\r\n    private card_list: proto.base.IBattleCard[] = [];\r\n    private max_card_group: number = 20; //最大卡组数\r\n    private max_card: number = 12; //最大卡牌数\r\n    private sort_type_1: CardSotrType1 = CardSotrType1.Up;\r\n    private sort_type_2: CardSotrType2 = CardSotrType2.Cost;\r\n    private search_card_list: proto.base.IBattleCard[] = [];\r\n\r\n    private searchStrList: string[] = [];\r\n    private selects: proto.base.IBattleCard[] = [];\r\n    private add_or_change: boolean; //添加卡组true 修改卡组false;\r\n    private is_open_add_card_group: boolean = false //false未打开添加卡牌界面\r\n\r\n    private selectSkillType: skillType = 0;\r\n    private costType: number[] = [];\r\n    private showType: boolean = false;\r\n\r\n    private selectSkillList: proto.base.IBattleCard[] = [];\r\n    private costTypeList: proto.base.IBattleCard[] = [];\r\n    private showTypeList: proto.base.IBattleCard[] = [];\r\n\r\n    private isCanAdd: boolean = false;\r\n    private old_selects: proto.base.IBattleCard[] = [];\r\n    private old_name: string;\r\n    private tag: number;\r\n    private data: proto.base.IDeckAttrs;\r\n    private data_list:proto.base.IBattleCard[] = [];\r\n    /**用于生成卡组的卡牌id */\r\n    private select_creator_card_group_card_id\r\n\r\n    protected onLoad() {\r\n        this.CloseBy(\"backBtn\");\r\n        this.navBtns = this.find(\"nav\").children.concat();\r\n        for (let btn of this.navBtns) {\r\n            btn.off('toggle', this.onPage, this);\r\n            btn.on('toggle', this.onPage, this);\r\n        }\r\n        this.help = this.find(\"filtrateNode/bg/help\");\r\n        this.help.on(Input.EventType.TOUCH_END, () => { Tips2.Show(1) }, this)\r\n        this.noneListCont = this.find(\"noneListCont\");\r\n        this.sortNode = this.find(\"sortNode\");\r\n        this.scroller = this.find(\"ScrollView\", VList);\r\n        this.scroller.updateCell = this.updateCardItem.bind(this);\r\n        this.scroller.selectCell = this.onSelectCard.bind(this);\r\n        this.Content = this.find(\"ScrollView/view/content\");\r\n        this.sortNav = this.find(\"sortNode/bg/nav\").children.concat();\r\n        this.upOrDownBtn = this.find(\"sortNode/bg/upOrDown\", Button);\r\n        this.upOrDownBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.closeSortBtn = this.find(\"sortNode/bg/closeSortBtn\", Button);\r\n        this.closeSortBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.filtrateNode = this.find(\"filtrateNode\");\r\n        this.searchNode = this.find(\"filtrateNode/bg/searchNode\");\r\n        this.editBox = this.find(\"filtrateNode/bg/EditBox\", EditBox)\r\n        this.editBox.node.on(EditBox.EventType.EDITING_DID_ENDED, this.onEditEnd, this)\r\n        this.skillEffNode = this.find(\"filtrateNode/bg/skillEffNode\");\r\n        this.costNode = this.find(\"filtrateNode/bg/costNode\");\r\n        this.diyNode = this.find(\"filtrateNode/bg/diyNode\");\r\n        this.filtrateClose = this.find(\"filtrateNode/filtrateClose\");\r\n        this.filtrateClose.on(Input.EventType.TOUCH_END, () => {\r\n            this.filtrateNode.active = false;\r\n            this.filtrateBtn.node.getChildByName(\"close\").active = true;\r\n            this.filtrateBtn.node.getChildByName(\"open\").active = false;\r\n        }, this)\r\n        this.completeBtn = this.find(\"filtrateNode/bg/complete\", Button);\r\n        this.completeBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.cancelBtn = this.find(\"filtrateNode/bg/cancel\", Button);\r\n        this.cancelBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n\r\n        this.filtrateBtn = this.find(\"filtrateBtn\", Button);\r\n        this.filtrateBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n\r\n        this.sortBtn = this.find(\"sortBtn\", Button);\r\n        this.sortBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.showNode = this.find(\"showNode\");\r\n        this.cardGroupScrollView = this.find(\"showNode/cardGroupScrollView\", AutoScroller);\r\n        this.cardGroupScrollView.SetHandle(this.updateCardGroupItem.bind(this));\r\n        this.cardGroupScrollView.node.on('select', this.onCardGroupSelect, this);\r\n\r\n        this.addCardNode = this.find(\"showNode/addCardNode\");\r\n        this.addCardScrollView = this.find(\"showNode/addCardNode/addCardScrollView\", AutoScroller);\r\n        this.addCardScrollView.SetHandle(this.updateCardGroupCardItem.bind(this));\r\n        this.addCardScrollView.node.on('select', this.onSelectCardGroupCard, this);\r\n        this.back = this.find(\"showNode/addCardNode/back\");\r\n        this.clone_item = this.find(\"ScrollView/view/content/item\");\r\n        this.groupNameEditBox = this.find(\"showNode/addCardNode/groupNameEditBox\", EditBox);\r\n        this.moreBtn = this.find(\"showNode/addCardNode/moreBtn\", Button);\r\n        this.moreBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.moreNode = this.find(\"moreNode\");\r\n        this.moreNode.on(Input.EventType.TOUCH_END, () => { this.moreNode.active = false }, this)\r\n        this.moreNav = this.find(\"moreNode/bg/moreNav\").children.concat();\r\n\r\n        this.illustratedScrollView = this.find(\"illustratedScrollView\", AutoScroller);\r\n        this.illustratedScrollView.SetHandle(this.updateCardItem.bind(this));\r\n\r\n        this.card_group_setting = this.find(\"CardsGroupSetting\").addComponent(CardsGroupSetting)\r\n        this.sortNodeBack = this.find(\"sortNode/back\");\r\n        this.sortNodeBack.on(Input.EventType.TOUCH_END, () => {\r\n            this.sortNode.active = false;\r\n            this.sortBtn.node.getChildByName(\"close\").active = true;\r\n            this.sortBtn.node.getChildByName(\"open\").active = false;\r\n        }, this)\r\n\r\n        this.back.on(Input.EventType.TOUCH_END, () => {\r\n            this.onBack();\r\n        }, this)\r\n\r\n\r\n        this.sortNav.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                node.getComponent(Toggle).isChecked = true;\r\n                this.sort_type_2 = index;\r\n                this.setCardSort();\r\n            }, this)\r\n        })\r\n\r\n        this.moreNav.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                node.getComponent(Toggle).isChecked = true;\r\n                this.onMoreBtn(index);\r\n            }, this)\r\n        })\r\n\r\n        this.searchNode.children.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                this.editBox.string = node.children[0].getComponent(Label).string;\r\n                this.onEditEnd();\r\n            }, this)\r\n        })\r\n\r\n        this.skillEffNode.children.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                this.skillSearch()\r\n            }, this)\r\n        })\r\n\r\n        this.costNode.children.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                this.costSearch()\r\n            }, this)\r\n        })\r\n\r\n        this.diyNode.children.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                this.showSearch()\r\n            }, this)\r\n        })\r\n\r\n    }\r\n    protected onShow(): void {\r\n        EventMgr.on(Evt_Card_Check_By_Name, this.updateCardsGroupCardData, this);\r\n        EventMgr.on(Evt_Card_Group_Update, this.flush, this);\r\n        EventMgr.on(Evt_Add_Card_Group_update, this.onReqSaveCardGroup, this);\r\n        EventMgr.on(Evt_Card_Add, this.onAddCard, this);\r\n        EventMgr.on(Evt_Card_Del, this.onDelCard, this);\r\n        EventMgr.emit(Evt_Hide_Scene, js.getClassName(this));\r\n    }\r\n    public flush(data: proto.base.IDeckAttrs): void {\r\n        let is_show_head_node = this.card_group_setting.node.getChildByName(\"ornamentNode\").active\r\n        console.log(\"装饰组件是否打开\", is_show_head_node)\r\n        if (!is_show_head_node) {\r\n            this.data = data;\r\n            this.SetPage(0)\r\n        }\r\n    }\r\n\r\n    private onAddCard(cardData: proto.base.IBattleCard): void {\r\n        this.setCardState(cardData, null, true);\r\n    }\r\n\r\n    private onDelCard(cardData: proto.base.IBattleCard): void {\r\n        this.setCardState(cardData, null, false, true);\r\n    }\r\n\r\n    async SetPage(page: number) {\r\n        if (!this.$hasLoad) await this.initSub;\r\n        if (!this.navBtns[page]) return;\r\n        this.tag = undefined;\r\n        this.navBtns[page].getComponent(Toggle).isChecked = true;\r\n        this.onPage(this.navBtns[page].getComponent(Toggle));\r\n    }\r\n\r\n    private onPage(t: Toggle) {\r\n        let page = this.navBtns.indexOf(t.node);\r\n        if (page < 0 || page == this.tag) return;\r\n        this.tag = page;\r\n        this.card_group_setting.node.active = false;\r\n        if (page == 0) {\r\n            this.filtrateBtn.node.active = true;\r\n            this.sortBtn.node.active = true;\r\n            this.illustratedScrollView.node.active = false;\r\n            this.scroller.node.active = true;\r\n            this.showNode.active = true;\r\n            this.updateCardGroup();\r\n            this.updateAllCardsShow();\r\n            if (this.data) {\r\n                this.card_group_setting.node.active = true;\r\n                this.is_open_add_card_group = true;\r\n                this.setHaveCardGroup(this.data)\r\n            }\r\n        } else if (page == 1) {\r\n            this.filtrateBtn.node.active = false;\r\n            this.sortBtn.node.active = false;\r\n            this.illustratedScrollView.node.active = true;\r\n            this.scroller.node.active = false;\r\n            this.showNode.active = false;\r\n            let cfg_card_list = CardsSortOrFiltrate.onSetSearchShow()\r\n            this.illustratedScrollView.UpdateDatas(cfg_card_list)\r\n        }\r\n    }\r\n\r\n    private setHaveCardGroup(data: proto.base.IDeckAttrs) {\r\n        //已有卡组请求该卡组数据\r\n        this.add_or_change = false;\r\n        this.updatePanel();\r\n        this.groupNameEditBox.string = data.name\r\n        this.old_name = data.name;\r\n        PlayerData.cur_id = data.id;\r\n        let getdeckcards = new Req[\"logic.protocol.getdeckcards\"]();\r\n        getdeckcards.deckId = data.id;\r\n        Session.Send(Route[\"logic.protocol.getdeckcards\"], getdeckcards);\r\n    }\r\n\r\n    private updateCardGroup() {\r\n        this.is_open_add_card_group = false;\r\n        this.updatePanel();\r\n        this.updateAllCardGroup();\r\n        this.updateAllCardsShow();\r\n    }\r\n\r\n    private updatePanel() {\r\n        this.cardGroupScrollView.node.active = !this.is_open_add_card_group\r\n        this.addCardNode.active = this.is_open_add_card_group\r\n        let size_1 = this.cardGroupScrollView.getComponent(UITransform).contentSize;\r\n        let size_2 = this.addCardNode.getComponent(UITransform).contentSize\r\n        let size_3 = this.is_open_add_card_group ? size_2 : size_1\r\n        this.showNode.getComponent(UITransform).setContentSize(size_3)\r\n        this.showNode.children.forEach(item => {\r\n            if (item.getComponent(Widget)) {\r\n                item.getComponent(Widget).updateAlignment();\r\n            }\r\n        })\r\n        this.selects = [];\r\n        this.Content.children.forEach(item => {\r\n            if (item.getComponent(CardTest)) {\r\n                item.getComponent(CardTest).setSelect(false);\r\n            }\r\n        })\r\n\r\n        let height = this.scroller.getComponent(UITransform).contentSize.height\r\n        let panel_width = view.getVisibleSize().width;\r\n        let paddingLeft = 30;\r\n        let paddingRight = 0\r\n        let right_width = size_3.width + paddingLeft + paddingRight;\r\n        let max_width = panel_width - right_width\r\n        this.scroller.getComponent(UITransform).setContentSize(size(max_width, height))\r\n        this.scroller.node.children[0].getComponent(Widget).updateAlignment();\r\n        this.Content.getComponent(UITransform).setContentSize(size(max_width, 238))\r\n    \r\n        let item_width = this.clone_item.getComponent(UITransform).contentSize.width\r\n        //最大放几个卡牌\r\n        let num = Math.floor(max_width / item_width)\r\n        //总剩余的间隙\r\n        let yu = max_width % item_width\r\n        //最大间隙\r\n        let jianju = Math.floor(yu / (num - 1))\r\n   \r\n        //最小间隙15\r\n        if (jianju < 15) {\r\n            jianju = Math.floor((yu + item_width) / (num - 2))\r\n        }\r\n        this.scroller.spacingX = jianju;\r\n        this.scroller.cellCount = this.card_list.length;\r\n\r\n    }\r\n\r\n    /**展示所有卡牌 */\r\n    private updateAllCardsShow(): void {\r\n        this.noneListCont.active = false;\r\n        if (this.card_list.length <= 0 || (this.selectSkillType == 0 && this.costType.length == 0 && !this.showType)) {\r\n            this.card_list = [];\r\n            for (const iterator of PlayerData.cards) {\r\n                this.card_list.push(iterator)\r\n            }\r\n        }\r\n        this.setCardSort();\r\n        if (this.card_list.length > 0) {\r\n            this.setCardsData(this.card_list)\r\n        } else {\r\n            this.noneListCont.active = true;\r\n        }\r\n    }\r\n\r\n    /**展示所有卡组 */\r\n    private updateAllCardGroup() {\r\n        let data = [];\r\n        if(PlayerData.player.statusMark.NoobCardsAdd){\r\n            //已领取新手卡组\r\n            for (let index = 0; index < PlayerData.cardNameList.length; index++) {\r\n                const element = PlayerData.cardNameList[index];\r\n                data.push(JSON.parse(JSON.stringify(element)));\r\n            }\r\n        }else{\r\n            //未领取新手卡组加入一个初始卡组\r\n            let initCardGroupCfg:StdNoobCardGroup = CfgMgr.Get(\"Noob_CardGroup\")[0]\r\n            let initCardGroup:proto.base.IDeckAttrs = proto.base.DeckAttrs.create()\r\n            initCardGroup.avatarId = initCardGroupCfg.CardGroupHead;\r\n            initCardGroup.cardBackId = initCardGroupCfg.CardGroupBack;\r\n            initCardGroup.name = initCardGroupCfg.CardGroupName;\r\n            initCardGroup.size = 12;\r\n            initCardGroup.id = \"\";\r\n            data.push(initCardGroup)\r\n        }\r\n\r\n        if (PlayerData.cardNameList.length < this.max_card_group) {\r\n            data.unshift(\"\")\r\n        }\r\n        this.cardGroupScrollView.UpdateDatas(data);\r\n    }\r\n\r\n    /**设置卡牌 */\r\n    private setCardsData(data_list: proto.base.IBattleCard[]) {\r\n        this.data_list = data_list;\r\n        this.scroller.cellCount = this.data_list.length;\r\n    }\r\n\r\n    protected updateCardItem(cell: Node, cellInfo: CellInfo) {\r\n        let card: CardTest = cell.getChildByName(\"CardsTest\").getComponent(CardTest) || cell.getChildByName(\"CardsTest\").addComponent(CardTest);\r\n        card.setIsShowUpEffect(true)\r\n        cell.getChildByPath(\"CardsTest/cardNode/select\").active = cellInfo.isSelect;\r\n        let data = this.data_list[cellInfo.index]\r\n        card.SetData(data);\r\n        if (data && data.id == \"\") {\r\n            card.setGray(true);\r\n        } else {\r\n            card.setGray(false);\r\n            let cfg = CfgMgr.GetCard(data.cardId)\r\n            for (const iterator of this.selects) {\r\n                let select_card_cfg = CfgMgr.GetCard(iterator.cardId)\r\n                //本体\r\n                if (iterator.id == data.id) {\r\n                    card.setSelect(true);\r\n                }\r\n                //多个同样的本体非变体\r\n                if (select_card_cfg.Classid == cfg.Classid && cfg.ID == select_card_cfg.ID && iterator.id != data.id) {\r\n                    card.setGray(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected updateCardGroupCardItem(item: Node, data: proto.base.IBattleCard, index: number) {\r\n        let card = item.getComponent(CardTest);\r\n        if (!card) card = item.addComponent(CardTest);\r\n        card.SetData(data);\r\n\r\n        if (!data && index == this.max_card - 1) {\r\n            card.setShowAdd(true)\r\n        } else {\r\n            card.setShowAdd(false)\r\n        }\r\n    }\r\n\r\n    /**选择卡牌 */\r\n    protected onSelectCard(cell: Node, cellInfo: CellInfo, lastCell?: Node, lastInfo?: CellInfo) {\r\n        let cards = cell.getComponent(CardTest);\r\n        let data: proto.base.IBattleCard = cards.getData()\r\n        if (data) {\r\n            if (this.is_open_add_card_group) {\r\n                //卡组打开卡牌加入或删除\r\n                let cfg = CfgMgr.GetCard(data.cardId)\r\n                let callBack = () => {\r\n                    let is_select = cards.getSelectState();\r\n                    if (cfg.IsOpen != 1) {\r\n                        MsgPanel.Show(\"此卡未开放\")\r\n                        return;\r\n                    }\r\n                    if (this.selects.length >= 12 && !is_select) {\r\n                        MsgPanel.Show( \"超出上限\")\r\n                        return;\r\n                    }\r\n\r\n                    cards.setSelect(!is_select)\r\n                    if (!is_select) {\r\n                        this.selects.push(data)\r\n                        this.setCardGary(data, true);\r\n                    } else {\r\n                        this.selects.splice(this.selects.findIndex(card => card.id == data.id), 1)\r\n                        this.setCardGary(data, false);\r\n                    }\r\n                    this.addCardsGroup();\r\n                }\r\n\r\n                //查找是否选择的是变体\r\n                let is_has = false\r\n                for (const iterator of this.selects) {\r\n                    let select_card_cfg = CfgMgr.GetCard(iterator.cardId)\r\n                    if (select_card_cfg.Classid == cfg.Classid && cfg.ID != select_card_cfg.ID) {\r\n                        is_has = true;\r\n                    }\r\n                }\r\n\r\n                let type = CardInfoStateType.Add\r\n                if (this.selects.length >= 12) {\r\n                    type = CardInfoStateType.Fill;\r\n                }\r\n                if (is_has) {\r\n                    type = CardInfoStateType.Change\r\n                } else if (this.selects.findIndex(card => card.id == data.id) != -1) {\r\n                    type = CardInfoStateType.Del\r\n                }\r\n                Goto(\"CardInfoPanel\", data, type, callBack.bind(this))\r\n            } else {\r\n                let callBack = (card_data) => {\r\n                    console.log(card_data)\r\n                    if (PlayerData.cardNameList.length >= this.max_card_group) {\r\n                        MsgPanel.Show(\"卡组数量已达上限！\")\r\n                        return\r\n                    }\r\n                    this.select_creator_card_group_card_id = card_data.cardId\r\n                    this.CreaterCardGroupAnmition();\r\n                }\r\n                Goto(\"CardInfoPanel\", data, CardInfoStateType.Creator, callBack.bind(this))\r\n            }\r\n        }\r\n    }\r\n\r\n    private addCardsGroup() {\r\n        let data = this.setCurCardGroupCardList(this.selects);;\r\n        this.addCardScrollView.UpdateDatas(data);\r\n    }\r\n\r\n    /**设置卡组 */\r\n    protected updateCardGroupItem(item: Node, data: proto.base.IDeckAttrs, index:number) {\r\n        let card_group_item = item.getComponent(CardGroupItem);\r\n        if (!card_group_item) card_group_item = item.addComponent(CardGroupItem);\r\n        item.name = \"cardGroupItem\" + index;\r\n        card_group_item.SetData(data);\r\n    }\r\n\r\n    /**选择卡组 */\r\n    protected onCardGroupSelect(index: number, item: Node) {\r\n        let data = item.getComponent(CardGroupItem).getData()\r\n        console.log(\"onCardGroupSelect\", data, typeof data);\r\n        /**添加卡组 */\r\n        this.is_open_add_card_group = true;\r\n        if (typeof data == \"string\") {\r\n            this.updatePanel();\r\n            let card_data = this.setCurCardGroupCardList([]);\r\n            this.addCardScrollView.UpdateDatas(card_data);\r\n\r\n            this.onReqCreateCardGroup();\r\n        } else {\r\n            //已有卡组请求该卡组数据\r\n            this.setHaveCardGroup(data)\r\n        }\r\n        this.card_group_setting.node.active = true;\r\n        this.card_group_setting.SetPage(0, this.onBack.bind(this));\r\n    }\r\n\r\n    /**展示卡组中卡牌 */\r\n    private updateCardsGroupCardData(data) {\r\n        let list: proto.base.IBattleCard[] = [];\r\n        this.old_selects = [];\r\n        for (const key in data) {\r\n            if (Object.hasOwnProperty.call(data, key)) {\r\n                const element = data[key];\r\n                list.push(element);\r\n                this.old_selects.push(element)\r\n            }\r\n        }\r\n        list.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (a_data.Cost == b_data.Cost) {\r\n                if (a_data.Power == b_data.Power) {\r\n                    return a_data.ID - b_data.ID\r\n                }\r\n                return a_data.Power - b_data.Power\r\n            }\r\n            return a_data.Cost - b_data.Cost;\r\n        })\r\n\r\n        this.selects = list;\r\n        for (let index = 0; index < this.selects.length; index++) {\r\n            const element = this.selects[index];\r\n            this.setCardState(element, true);\r\n            this.setCardGary(element, true);\r\n        }\r\n\r\n        let data_list = this.setCurCardGroupCardList(list);\r\n        this.addCardScrollView.UpdateDatas(data_list);\r\n    }\r\n\r\n    private setCardGary(data: proto.base.IBattleCard, is_gray: boolean) {\r\n        let cfg = CfgMgr.GetCard(data.cardId)\r\n        for (const iterator of this.Content.children) {\r\n            let item = iterator.getComponent(CardTest)\r\n            let card_data = item.getData()\r\n            let card_cfg = CfgMgr.GetCard(card_data.cardId)\r\n            if (is_gray) {\r\n                if (cfg.Classid == card_cfg.Classid && data.id != card_data.id) {\r\n                    item.setGray(is_gray)\r\n                    iterator.off(Input.EventType.TOUCH_END, this.onSelectCard, this)\r\n                }\r\n            } else {\r\n                if (cfg.Classid == card_cfg.Classid) {\r\n                    item.setGray(is_gray)\r\n                    iterator.on(Input.EventType.TOUCH_END, this.onSelectCard, this)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**设置当前选中卡组的卡牌 */\r\n    private setCurCardGroupCardList(list) {\r\n        let data_list = [];\r\n        for (let index = 0; index < 12; index++) {\r\n            let element = list[index] ? list[index] : null;\r\n            data_list.push(element);\r\n        }\r\n        return data_list\r\n    }\r\n    private onSelectCardGroupCard(index: number, item: Node) {\r\n        let cards = item.getComponent(CardTest);\r\n        let is_add = item.getChildByName(\"add\").active\r\n\r\n        if (is_add) {\r\n            Tips.Show(\"是否自动填充卡组\", this.CreaterCardGroupAnmition.bind(this))\r\n        }\r\n        if (!cards) return;\r\n        let data = cards.getData();\r\n        if (data) {\r\n            let callBack = () => {\r\n                this.selects.splice(this.selects.indexOf(data), 1)\r\n                this.addCardsGroup();\r\n                this.setCardState(data, false)\r\n                this.setCardGary(data, false)\r\n            }\r\n            Goto(\"CardInfoPanel\", data, CardInfoStateType.Del, callBack.bind(this))\r\n        }\r\n    }\r\n\r\n    private setCardState(data: proto.base.IBattleCard, is_select: boolean = null, isUpdate?: boolean, isDle?: boolean) {\r\n\r\n        let content = this.Content.children\r\n        let delete_node: Node;\r\n        for (let index = 0; index < content.length; index++) {\r\n            const element = content[index];\r\n            let card = element.getChildByName(\"CardsTest\").getComponent(CardTest);\r\n            if (!card) card = element.getChildByName(\"CardsTest\").addComponent(CardTest);\r\n            if (card.getData().id == data.id) {\r\n                if (is_select != null) { card.setSelect(is_select); }\r\n                if (isUpdate) { card.SetData(data); }\r\n                if (isDle) { delete_node = element; }\r\n                break\r\n            }\r\n        }\r\n\r\n        if (isDle) {\r\n            this.Content.removeChild(delete_node)\r\n        }\r\n\r\n    }\r\n\r\n    private onClick(btn: Button) {\r\n        let name = btn.node.name\r\n        console.log(name)\r\n        switch (name) {\r\n            case \"filtrateBtn\":\r\n                let is_open = this.filtrateBtn.node.getChildByName(\"open\").active\r\n                this.filtrateNode.active = !is_open;\r\n                this.filtrateBtn.node.getChildByName(\"close\").active = is_open;\r\n                this.filtrateBtn.node.getChildByName(\"open\").active = !is_open;\r\n                break;\r\n            case \"sortBtn\":\r\n                this.sortNode.active = true;\r\n                this.sortBtn.node.getChildByName(\"close\").active = false;\r\n                this.sortBtn.node.getChildByName(\"open\").active = true;\r\n                break;\r\n            case \"closeSortBtn\":\r\n                this.sortNode.active = false;\r\n                this.sortBtn.node.getChildByName(\"close\").active = true;\r\n                this.sortBtn.node.getChildByName(\"open\").active = false;\r\n                break;\r\n            case \"upOrDown\":\r\n                this.sort_type_1 = this.sort_type_1 == CardSotrType1.Up ? CardSotrType1.Down : CardSotrType1.Up;\r\n                let y = this.sort_type_1 == CardSotrType1.Up ? -1 : 1;\r\n                this.upOrDownBtn.node.getChildByName(\"icon\").setScale(new Vec3(1, y, 1))\r\n                this.setCardSort();\r\n                break;\r\n            case \"complete\":\r\n                this.filtrateNode.active = false;\r\n                this.filtrateBtn.node.getChildByName(\"close\").active = true;\r\n                this.filtrateBtn.node.getChildByName(\"open\").active = false;\r\n                break;\r\n            case \"cancel\":\r\n                this.resetSearchState();\r\n                this.setCardSort();\r\n                break;\r\n            case \"moreBtn\":\r\n                this.moreNode.active = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**重置筛选状态 */\r\n    private resetSearchState() {\r\n        this.editBox.string = \"\";\r\n        this.costNode.children.forEach(node => {\r\n            node.getComponent(Toggle).isChecked = false;\r\n        })\r\n\r\n        this.skillEffNode.children.forEach(node => {\r\n            node.getComponent(Toggle).isChecked = false;\r\n        })\r\n\r\n        this.diyNode.children.forEach(node => {\r\n            node.getComponent(Toggle).isChecked = false;\r\n        })\r\n        this.card_list = PlayerData.cards;\r\n\r\n        this.selectSkillType = skillType.undefined;\r\n        this.costType = [];\r\n        this.showType = false;\r\n    }\r\n\r\n    private onMoreBtn(index) {\r\n        switch (index) {\r\n            case MoreType.del_card:\r\n                let callBack = ()=>{\r\n                    if (PlayerData.CurFightCardGroup.id == PlayerData.cur_id) {\r\n                        MsgPanel.Show(\"出战卡组，不可删除！\");\r\n                        return\r\n                    }\r\n\r\n                    if (PlayerData.cardNameList.length == 1) {\r\n                        MsgPanel.Show(\"唯一卡组，不可删除！\");\r\n                        return\r\n                    }\r\n                    \r\n                    let delete_data = new Req[\"logic.protocol.deletedeck\"]();\r\n                    delete_data.deckId = PlayerData.cur_id;\r\n                    Session.Send(Route[\"logic.protocol.deletedeck\"], delete_data);\r\n                    \r\n                    this.setCardsData(this.card_list)\r\n                }\r\n                Tips.Show(\"删除卡组\", callBack)\r\n                break;\r\n            case MoreType.shard:\r\n\r\n                break;\r\n            case MoreType.copy:\r\n\r\n                break;\r\n            case MoreType.add:\r\n                if(this.selects.length < this.max_card){\r\n                    this.CreaterCardGroupAnmition();\r\n                }else{\r\n                    Tips.Show(\"卡牌已达上限\")\r\n                }\r\n                break;\r\n            case MoreType.inquiry:\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.moreNode.active = false;\r\n\r\n    }\r\n\r\n    /**设置空卡组 */\r\n    private onReqCreateCardGroup() {\r\n        let count = PlayerData.cardNameList.length + 1\r\n        this.groupNameEditBox.string = \"自动-卡组\" + count;\r\n        this.old_name = \"自动-卡组\" + count;\r\n        this.add_or_change = true;\r\n        let cfg_logic = CfgMgr.GetLogic(\"InitDeck\")\r\n        let head_id = cfg_logic.HeadID;\r\n        let card_back_id = cfg_logic.BackpackerID\r\n        if (this.add_or_change) {\r\n            let add = new Req[\"logic.protocol.adddeck\"]();\r\n            add.attrs = { id: null, name: this.groupNameEditBox.string, type: null, avatarId:head_id, cardBackId:card_back_id };\r\n            Session.Send(Route[\"logic.protocol.adddeck\"], add, this.onadddeck);\r\n        }\r\n    }\r\n\r\n    /**修改后保存卡组 */\r\n    private onReqSaveCardGroup() {\r\n        console.log(this.isCanAdd)\r\n        if (this.isCanAdd) {\r\n            let is_change_name = false;\r\n            if (this.old_name != this.groupNameEditBox.string) {\r\n                is_change_name = true;\r\n            }\r\n\r\n            let is_change_card = false\r\n            if (this.old_selects.length == this.selects.length) {\r\n                for (const iterator of this.selects) {\r\n                    let index = this.old_selects.findIndex(card => card.id == iterator.id)\r\n                    if (index == -1) {\r\n                        is_change_card = true;\r\n                    }\r\n                }\r\n            } else {\r\n                is_change_card = true;\r\n            }\r\n\r\n            if (is_change_name || is_change_card) {\r\n                let id_list = [];\r\n                if (is_change_name && !is_change_card) {\r\n                    //只修改名字\r\n                    let data = PlayerData.getCardGroupDataById(PlayerData.cur_id);\r\n                    data.name = this.groupNameEditBox.string\r\n                    let Change_name = new Req[\"logic.protocol.setdeckattrs\"]();\r\n                    Change_name.attrs = data;\r\n                    Session.Send(Route[\"logic.protocol.setdeckattrs\"], Change_name)\r\n                } else {\r\n                    for (const iterator of this.selects) {\r\n                        id_list.push(iterator.id);\r\n                    }\r\n                    let data = PlayerData.getCardGroupDataById(PlayerData.cur_id);\r\n                    data.name = this.groupNameEditBox.string\r\n                    let send_data = new Req[\"logic.protocol.setdeckcards\"]();\r\n                    send_data.attrs = data;\r\n                    send_data.cardIds = id_list;\r\n                    send_data.deckId = PlayerData.cur_id;\r\n                    Session.Send(Route[\"logic.protocol.setdeckcards\"], send_data);\r\n                }\r\n            } else {\r\n                this.updateCardGroup();\r\n            }\r\n            this.isCanAdd = false;\r\n        }\r\n    }\r\n\r\n    private onBack() {\r\n        this.isCanAdd = true;\r\n        this.card_group_setting.node.active = false;\r\n        this.onReqSaveCardGroup()\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n        EventMgr.off(Evt_Card_Check_By_Name, this.updateCardsGroupCardData, this);\r\n        EventMgr.off(Evt_Card_Group_Update, this.updateCardGroup, this);\r\n        EventMgr.off(Evt_Add_Card_Group_update, this.onReqSaveCardGroup, this);\r\n        EventMgr.off(Evt_Card_Add, this.onAddCard, this);\r\n        EventMgr.off(Evt_Card_Del, this.onDelCard, this);\r\n        if (this.is_open_add_card_group) {\r\n            this.isCanAdd = true;\r\n            this.onReqSaveCardGroup()\r\n        }\r\n        EventMgr.emit(Evt_Show_Scene, js.getClassByName(this));\r\n    }\r\n\r\n    //——————————————————————————————————————————————————————————————————排序相关————————————————————————————————————————\r\n\r\n    private setCardSort() {\r\n        // this.card_list = CardsSortOrFiltrate.setCardSort(this.sort_type_1, this.sort_type_2, this.card_list)\r\n        // this.setCardsData(this.card_list)\r\n    }\r\n    //——————————————————————————————————————————————————————————————————————筛选相关————————————————————————————————————————————————————————\r\n\r\n    //搜索后的卡牌\r\n    private onEditEnd() {\r\n        let list = CardsSortOrFiltrate.onEditEnd(this.editBox, this.searchStrList, this.searchNode, this.search_card_list, this.selectSkillType, this.costType, this.showType);\r\n        this.setCardsData(list);\r\n        this.card_list = list;\r\n    }\r\n\r\n    //筛选特殊技能效果的卡牌\r\n    private async skillSearch() {\r\n        await Second(0);\r\n        this.selectSkillType = skillType.undefined\r\n        let data = CardsSortOrFiltrate.skillSearch(this.editBox, this.skillEffNode, this.selectSkillList, this.selectSkillType, this.costType, this.showType);\r\n        this.selectSkillList = data[0];\r\n        this.selectSkillType = data[1];\r\n        this.setCardsData(this.selectSkillList)\r\n        this.card_list = this.selectSkillList;\r\n    }\r\n\r\n    //筛选能量消耗的卡牌\r\n    private async costSearch() {\r\n        await Second(0);\r\n        this.costType = [];\r\n        let data = CardsSortOrFiltrate.costSearch(this.editBox, this.costNode, this.costTypeList, this.selectSkillType, this.costType, this.showType);\r\n        this.costTypeList = data[0];\r\n        this.costType = data[1];\r\n        this.setCardsData(this.costTypeList)\r\n        this.card_list = this.costTypeList;\r\n    }\r\n\r\n    //筛选自定义展示的卡牌\r\n    private async showSearch() {\r\n        await Second(0);\r\n        this.showType = false;\r\n        let data = CardsSortOrFiltrate.showSearch(this.editBox, this.diyNode, this.showTypeList, this.selectSkillType, this.costType, this.showType);\r\n        this.showTypeList = data[0]\r\n        this.showType = data[1]\r\n        this.setCardsData(this.showTypeList)\r\n        this.card_list = this.showTypeList;\r\n    }\r\n\r\n    //----------------------------------特殊处理的协议------------------------------\r\n    /**添加空卡组 */\r\n    private onadddeck(data: any) {\r\n        let setData = Ret[\"logic.protocol.adddeck\"].decode(data);\r\n        console.log(setData)\r\n        if (setData.res.code == 200) {\r\n            PlayerData.cur_id = setData.attrs.id\r\n            PlayerData.cardNameList.push(setData.attrs)\r\n            EventMgr.emit(Evt_Add_Card_Group_update)\r\n        } else {\r\n            MsgPanel.Show(\"设置卡组失败 code\" + setData.res.code);\r\n        }\r\n    }\r\n\r\n    /**生成卡组动画展示 */\r\n    private CreaterCardGroupAnmition() {\r\n        let callBack1 = ()=>{\r\n            let data = PlayerData.getCardGroupDataById(PlayerData.cur_id)\r\n            this.card_group_setting.node.active = true;\r\n            this.is_open_add_card_group = true;\r\n            if(data){\r\n                this.setHaveCardGroup(data)\r\n            }\r\n        }\r\n\r\n        let callBack2 = ()=>{\r\n            let data = PlayerData.getCardGroupDataById(PlayerData.cur_id)\r\n            if(data){\r\n                let set = new Req[\"logic.protocol.setdeckdefault\"]();\r\n                set.deckId = data.id;\r\n                Session.Send(Route[\"logic.protocol.setdeckdefault\"], set);\r\n            }\r\n        }\r\n    }\r\n}"]}