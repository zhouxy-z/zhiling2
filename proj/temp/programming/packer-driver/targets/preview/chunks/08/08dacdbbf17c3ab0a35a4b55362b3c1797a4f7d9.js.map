{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/userInfo/UserHeadItem.ts"],"names":["UserHeadItem","Component","Sprite","SpriteFrame","ResMgr","headBg","frameBg","icon","frame","lock","select","limt","isInit","std","onLoad","node","getChildByName","getChildByPath","getComponent","active","updateShow","SetData","data","headUrl","LoadResAbSub","res","spriteFrame","LimitTime","ConditionId","length"],"mappings":";;;uHAIaA,Y;;;;;;;;;;;;;;;;;;;AAJJC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,M,OAAAA,M;AAAoBC,MAAAA,W,OAAAA,W;;AAECC,MAAAA,M,iBAAAA,M;;;;;;;;;8BAE5BJ,Y,GAAN,MAAMA,YAAN,SAA2BC,SAA3B,CAAqC;AAAA;AAAA;AAAA,eAChCI,MADgC;AAAA,eAEhCC,OAFgC;AAAA,eAGhCC,IAHgC;AAAA,eAIhCC,KAJgC;AAAA,eAKhCC,IALgC;AAAA,eAMhCC,MANgC;AAAA,eAOhCC,IAPgC;AAAA,eAQhCC,MARgC,GAQf,KARe;AAAA,eAShCC,GATgC;AAAA;;AAU9BC,QAAAA,MAAM,GAAS;AACrB,eAAKT,MAAL,GAAc,KAAKU,IAAL,CAAUC,cAAV,CAAyB,QAAzB,CAAd;AACA,eAAKV,OAAL,GAAe,KAAKS,IAAL,CAAUC,cAAV,CAAyB,SAAzB,CAAf;AACA,eAAKT,IAAL,GAAY,KAAKQ,IAAL,CAAUE,cAAV,CAAyB,WAAzB,EAAsCC,YAAtC,CAAmDhB,MAAnD,CAAZ;AACA,eAAKM,KAAL,GAAa,KAAKO,IAAL,CAAUC,cAAV,CAAyB,OAAzB,EAAkCE,YAAlC,CAA+ChB,MAA/C,CAAb;AACA,eAAKO,IAAL,GAAY,KAAKM,IAAL,CAAUC,cAAV,CAAyB,MAAzB,CAAZ;AACA,eAAKN,MAAL,GAAc,KAAKK,IAAL,CAAUC,cAAV,CAAyB,QAAzB,CAAd;AACA,eAAKN,MAAL,CAAYS,MAAZ,GAAqB,KAArB;AACA,eAAKR,IAAL,GAAY,KAAKI,IAAL,CAAUC,cAAV,CAAyB,OAAzB,CAAZ;AAEA,eAAKJ,MAAL,GAAc,IAAd;AACA,eAAKQ,UAAL;AACH;;AAEDC,QAAAA,OAAO,CAACC,IAAD,EAAe;AAClB,eAAKT,GAAL,GAAWS,IAAX;AACA,eAAKF,UAAL;AACH;;AAEOA,QAAAA,UAAU,GAAQ;AACtB,cAAG,CAAC,KAAKR,MAAN,IAAgB,CAAC,KAAKC,GAAzB,EAA8B;AAC9B,cAAIU,OAAJ,CAFsB,CAGtB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA,gCAAOC,YAAP,CAAoBD,OAApB,EAA6BpB,WAA7B,EAA0CsB,GAAG,IAAI;AAC7C,iBAAKlB,IAAL,CAAUmB,WAAV,GAAwBD,GAAxB;AACH,WAFD;AAGA,eAAKd,IAAL,CAAUQ,MAAV,GAAmB,KAAKN,GAAL,CAASc,SAAT,GAAqB,CAAxC;;AACA,cAAG,KAAKd,GAAL,CAASe,WAAT,IAAwB,KAAKf,GAAL,CAASe,WAAT,CAAqBC,MAAhD,EAAuD;AACnD,iBAAKpB,IAAL,CAAUU,MAAV,GAAmB,IAAnB;AACH,WAFD,MAEK;AACD,iBAAKV,IAAL,CAAUU,MAAV,GAAmB,KAAnB;AACH;AACJ;;AAzDuC,O","sourcesContent":["import { Component, Sprite, Node, path, SpriteFrame } from \"cc\";\r\nimport { StdHead } from \"../../manager/CfgMgr\";\r\nimport { folder_head, folder_head_round, ResMgr } from \"../../manager/ResMgr\";\r\n\r\nexport class UserHeadItem extends Component {\r\n    private headBg:Node;\r\n    private frameBg:Node;\r\n    private icon:Sprite;\r\n    private frame:Sprite;\r\n    private lock:Node;\r\n    private select:Node;\r\n    private limt:Node;\r\n    private isInit:boolean = false;\r\n    private std:StdHead;\r\n    protected onLoad(): void {\r\n        this.headBg = this.node.getChildByName(\"headBg\");\r\n        this.frameBg = this.node.getChildByName(\"frameBg\");\r\n        this.icon = this.node.getChildByPath(\"Mask/icon\").getComponent(Sprite);\r\n        this.frame = this.node.getChildByName(\"frame\").getComponent(Sprite);\r\n        this.lock = this.node.getChildByName(\"lock\");\r\n        this.select = this.node.getChildByName(\"select\");\r\n        this.select.active = false;\r\n        this.limt = this.node.getChildByName(\"limit\");\r\n        \r\n        this.isInit = true;\r\n        this.updateShow();\r\n    }\r\n    \r\n    SetData(data:StdHead) {\r\n        this.std = data;\r\n        this.updateShow();\r\n    }\r\n    \r\n    private updateShow():void {\r\n        if(!this.isInit || !this.std) return;\r\n        let headUrl:string;\r\n        // if(this.std.HeadType == StdHeadType.Head){\r\n        //     this.headBg.active = true;\r\n        //     this.frameBg.active = false;\r\n        //     this.frame.node.active = false;\r\n        //     headUrl = path.join(folder_head_round, this.std.IconRes, \"spriteFrame\");\r\n        // }else if(this.std.HeadType == StdHeadType.HeadFrame){\r\n            \r\n        //     this.headBg.active = false;\r\n        //     this.frameBg.active = true;\r\n        //     this.frame.node.active = true;\r\n        //     headUrl = path.join(folder_head_round, \"01\", \"spriteFrame\");\r\n        //     let frameUrl = path.join(folder_head, `frame/${this.std.IconRes}`, \"spriteFrame\");\r\n        //     ResMgr.LoadResAbSub(frameUrl, SpriteFrame, res => {\r\n        //         this.frame.spriteFrame = res;\r\n        //     });\r\n        // } \r\n        ResMgr.LoadResAbSub(headUrl, SpriteFrame, res => {\r\n            this.icon.spriteFrame = res;\r\n        });\r\n        this.limt.active = this.std.LimitTime > 0;\r\n        if(this.std.ConditionId && this.std.ConditionId.length){\r\n            this.lock.active = true;\r\n        }else{\r\n            this.lock.active = false;\r\n        }\r\n    }\r\n}"]}