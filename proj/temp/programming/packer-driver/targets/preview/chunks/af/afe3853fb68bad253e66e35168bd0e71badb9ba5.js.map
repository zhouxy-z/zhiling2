{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/utils/ItemUtils.ts"],"names":["ItemUtil","path","MsgPanel","folder_money","BeforeGameUtils","CfgMgr","ItemType","ThingName","ThingTypeName","PlayerData","GetSThingList","itemTypeList","itemIdList","itemNumList","list","itemType","itemId","itemNum","data","is_number_str","index","length","SthingType","GetItemCount","type","Item","item","id","count","push","CreateThing","_itemType","thingList","MergeThings","thing","CheckItemIsHave","CheckThingConsumes","isShowTips","isShowGetWay","tipsStr","haveNum","itemName","moneyItemNum","type_list","stdItem","Getitem","ItemName","toString","Itemtpye","money","Show","MoneyChange","ChangeItem","change_data","cfg","FormatCost","icon","lab","value","url","name","join","box","exp","shard","speed","rights","shield","piece","toHashMapObj","battlecard","BattleCard"],"mappings":"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","sourcesContent":["import { Label, Sprite, js, path } from \"cc\";\r\nimport { MsgPanel } from \"../module/common/MsgPanel\";\r\nimport { folder_icon, folder_item, folder_money } from \"../manager/ResMgr\";\r\nimport { BeforeGameUtils } from \"./BeforeGameUtils\";\r\nimport { CardQuality, CfgMgr, ItemType, StdItem, ThingName, ThingTypeName } from \"../manager/CfgMgr\";\r\nimport { PlayerData } from \"../module/player/PlayerData\";\r\nimport proto from \"../net/Protocol\";\r\n\r\nexport class ItemUtil {\r\n    static SthingType: { [key: number]: string } = BeforeGameUtils.toHashMapObj(\r\n        ThingName.item, ThingTypeName.Item,\r\n        ThingName.battlecard, ThingTypeName.BattleCard,\r\n    );\r\n\r\n    /**\r\n     * 通过配置转换SThing列表结构\r\n     * @param itemTypeList 事物类型列表\r\n     * @param itemIdList 事物id列表\r\n     * @param itemNumList 事物数量列表\r\n     */\r\n    static GetSThingList(itemTypeList: number[] | string[], itemIdList: number[], itemNumList?: number[]): proto.base.IThing[] {\r\n        let list: proto.base.IThing[] = [];\r\n        let itemType: string;\r\n        let itemId: number;\r\n        let itemNum: number;\r\n        let data: proto.base.IThing;\r\n        let is_number_str: boolean;\r\n        if (typeof itemTypeList[0] == \"number\") {\r\n            is_number_str = false\r\n        } else {\r\n            is_number_str = true\r\n        }\r\n        for (let index = 0; index < itemTypeList.length; index++) {\r\n            itemType = is_number_str ? itemTypeList[index] : this.SthingType[itemTypeList[index]];\r\n            itemId = itemIdList[index];\r\n            itemNum = itemNumList ? itemNumList[index] : PlayerData.GetItemCount(itemId);\r\n            data = {};\r\n            data.type = itemType;\r\n            switch (itemType) {\r\n                case ThingTypeName.Item:\r\n                    data.item = { id: itemId, count: itemNum };\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            list.push(data);\r\n        }\r\n        return list;\r\n    }\r\n    /**\r\n     * 创建单一事物结构体\r\n     * @param itemType \r\n     * @param itemNum \r\n     * @param itemId \r\n     * @returns \r\n     */\r\n    static CreateThing(itemType: number | string, itemId: number = 0, itemNum: number = 0): proto.base.IThing {\r\n        let _itemType: number[] | string[]\r\n        if (typeof itemType == \"number\") {\r\n            _itemType = [itemType]\r\n        } else {\r\n            _itemType = [itemType]\r\n        }\r\n        let thingList: proto.base.IThing[] = this.GetSThingList(_itemType, [itemId], [itemNum]);\r\n        return thingList && thingList.length ? thingList[0] : null;\r\n    }\r\n\r\n    /**\r\n     * 合并数量\r\n     * @param thing \r\n     * @param count \r\n     */\r\n    static MergeThings(thing: proto.base.IThing, count: number) {\r\n        switch (thing.type) {\r\n            case ThingTypeName.Item:\r\n                thing.item.count += count;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 单一事物结构检测是否拥有足够数量\r\n     * @param itemType \r\n     * @param itemNum \r\n     * @param itemId \r\n     * @returns \r\n     */\r\n    static CheckItemIsHave(itemType: number | string, itemNum: number, itemId: number = 0): boolean {\r\n        let _itemType: number[] | string[]\r\n        if (typeof itemType == \"number\") {\r\n            _itemType = [itemType]\r\n        } else {\r\n            _itemType = [itemType]\r\n        }\r\n        return this.CheckThingConsumes(_itemType, [itemId], [itemNum]);\r\n    }\r\n\r\n    /**\r\n     * 检测事物消耗是否满足\r\n     * @param itemTypeList 事物类型列表\r\n     * @param itemIdList 事物id列表\r\n     * @param itemNumList 事物数量列表\r\n     * @param isShowTips 事物不足时是否飘字\r\n     * @param isShowGetWay 事物不足时是否显示获取途径\r\n     * @param tipsStr 事物不足提示内容\r\n     */\r\n    static CheckThingConsumes(itemTypeList: number[] | string[], itemIdList: number[], itemNumList: number[], isShowTips: boolean = false, isShowGetWay: boolean = false, tipsStr: string = \"\"): boolean {\r\n        let itemType: string;\r\n        let itemId: number;\r\n        let itemNum: number;\r\n        let haveNum: number;\r\n        let itemName: string;\r\n        let is_number_str: boolean;\r\n        let moneyItemNum: number;\r\n        if (!itemTypeList) {\r\n            let type_list = []\r\n            for (let index = 0; index < itemIdList.length; index++) {\r\n                type_list.push(\"item\");\r\n            }\r\n            itemTypeList = type_list;\r\n        }\r\n        if (itemTypeList.length > 0 && typeof itemTypeList[0] == \"number\") {\r\n            is_number_str = false\r\n        } else {\r\n            is_number_str = true\r\n        }\r\n        for (let index = 0; index < itemTypeList.length; index++) {\r\n            itemType = is_number_str ? itemTypeList[index] : this.SthingType[itemTypeList[index]];\r\n            itemId = itemIdList[index];\r\n            itemNum = itemNumList[index];\r\n            haveNum = 0;\r\n            itemName = \"\";\r\n            switch (itemType) {\r\n                case ThingTypeName.Item:\r\n                    if (!itemId) return;\r\n                    let stdItem: StdItem = CfgMgr.Getitem(itemId);\r\n                    itemName = stdItem ? stdItem.ItemName : itemId.toString();\r\n                    haveNum = PlayerData.GetItemCount(itemId);\r\n                    if (stdItem.Itemtpye == ItemType.money) {\r\n                        itemNum = itemNumList[index] / 10000\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            if (haveNum < itemNumList[index]) {\r\n                if (isShowTips) MsgPanel.Show(tipsStr != \"\" ? tipsStr : `所需${itemName}数量不足${itemNum}个`);\r\n                if (isShowGetWay) {\r\n                    //TODO 打开获取途径\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 货币类型显示单位转换\r\n     */\r\n    static MoneyChange(money: number) {\r\n        //货币单位为万分比\r\n        return money / 10000\r\n    }\r\n\r\n    static ChangeItem(data: proto.base.IThing) {\r\n        let change_data: proto.base.IThing = { item: { id: 0, count: 0 } };\r\n        if (data.item) {\r\n            let cfg = CfgMgr.Getitem(data.item.id);\r\n            change_data.item.id = data.item.id;\r\n            change_data.item.count = data.item.count;\r\n            if (cfg.Itemtpye == ItemType.money) {\r\n                change_data.item.count = this.MoneyChange(data.item.count)\r\n            }\r\n            return change_data;\r\n        } else {\r\n            return data\r\n        }\r\n    }\r\n\r\n\r\n    static FormatCost(icon: Sprite, lab: Label, type: number, id: number, value: number) {\r\n        let url: string = \"\", name = 0;\r\n        switch (type) {\r\n            case ItemType.money: // 货币\r\n                url = path.join(folder_money, id.toString(), \"spriteFrame\");\r\n                break;\r\n            case ItemType.box:   // 宝箱\r\n\r\n            case ItemType.item:  // 无特殊类型的道具\r\n            case ItemType.exp:   // 经验道具\r\n            case ItemType.shard: // 角色碎片\r\n            case ItemType.speed: // 玩法门票（未生效）旧：加速道具\r\n            case ItemType.rights://权益卡\r\n            case ItemType.shield:// 玩法次数增加类道具 旧：防护罩\r\n            case ItemType.piece: //英雄粉尘（ItemEffect1填对应classid）\r\n                break;\r\n        }\r\n    }\r\n}"]}