{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/task/MainTaskCont.ts"],"names":["MainTaskCont","Button","Color","Component","Label","Session","AutoScroller","STaskState","CfgMgr","Req","Route","nameLab","proLab","goBtn","getBtn","finsh","awardList","isInit","data","std","awList","onLoad","node","getChildByPath","getComponent","getChildByName","addComponent","SetHandle","updateAwardItem","bind","on","onSelect","EventType","CLICK","onBtnClick","updateShow","btn","send_task","taskId","TaskId","Send","item","index","SetData","active","GetTaskById","id","string","Description","value","CompletionNum","colorStr","start","Finsh","color","fromHEX"],"mappings":"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","sourcesContent":["import { Button, Color, Component, Label, Node } from \"cc\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { SPlayerDataTask, STaskState, SThing } from \"../player/PlayerStruct\";\r\nimport { CfgMgr, StdTask } from \"../../manager/CfgMgr\";\r\nimport { Req, Route } from \"../../net/Protocol\";\r\n\r\nexport class MainTaskCont extends Component {\r\n    private nameLab: Label;\r\n    private proLab: Label;\r\n    private goBtn: Button;\r\n    private getBtn: Button;\r\n    private finsh: Node;\r\n    private awardList: AutoScroller;\r\n    private isInit: boolean;\r\n    private data: SPlayerDataTask;\r\n    private std: StdTask;\r\n    private awList: SThing[]\r\n    protected onLoad(): void {\r\n        this.nameLab = this.node.getChildByPath(\"titleCont/nameLab\").getComponent(Label);\r\n        this.proLab = this.node.getChildByPath(\"titleCont/proLab\").getComponent(Label);\r\n        this.awardList = this.node.getChildByName(\"awardList\").getComponent(AutoScroller);\r\n        this.goBtn = this.node.getChildByName(\"goBtn\").getComponent(Button);\r\n        this.getBtn = this.node.getChildByName(\"getBtn\").addComponent(Button);\r\n        this.finsh = this.node.getChildByName(\"finsh\");\r\n        this.awardList.SetHandle(this.updateAwardItem.bind(this));\r\n        this.awardList.node.on('select', this.onSelect, this);\r\n        this.goBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.getBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.isInit = true;\r\n        this.updateShow();\r\n    }\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.goBtn:\r\n                // Goto(this.std.Win, ...this.std.Param);\r\n                // Goto(\"TaskPanel.Hide\");\r\n                break;\r\n            case this.getBtn:\r\n                // Session.Send({type:MsgTypeSend.CompleteTask, data:{task_id: this.std.TaskId}}, MsgTypeRet.CompleteTaskRet);\r\n                let send_task = new Req[\"player.protocol.completetask\"]();\r\n                send_task.taskId = this.std.TaskId;\r\n                Session.Send(Route[\"player.protocol.completetask\"], send_task);\r\n                break;\r\n        }\r\n    }\r\n    private updateAwardItem(item: Node, data: SThing) {\r\n        // let awardItem = item.getComponent(AwardItem);\r\n        // if (!awardItem) awardItem = item.addComponent(AwardItem);\r\n        // awardItem.SetData({ itemData: data });\r\n    }\r\n    protected async onSelect(index: number, item: Node) {\r\n        // let selectData = this.awList[index];\r\n        // if(selectData){\r\n        //     ItemTips.Show(selectData);\r\n        // }\r\n    }\r\n    SetData(data: SPlayerDataTask) {\r\n        this.data = data;\r\n        this.updateShow();\r\n    }\r\n\r\n    private updateShow(): void {\r\n        if (!this.isInit || !this.data) return;\r\n        this.goBtn.node.active = false;\r\n        this.getBtn.node.active = false;\r\n        this.finsh.active = false;\r\n\r\n        this.std = CfgMgr.GetTaskById(this.data.id);\r\n        this.nameLab.string = this.std.Description;\r\n        this.proLab.string = `（${this.data.value}/${this.std.CompletionNum}）`;\r\n        let colorStr: string = \"#356DC0\";\r\n        if (this.data.value >= this.std.CompletionNum) {\r\n            colorStr = \"#1D8E32\";\r\n            this.getBtn.node.active = true;\r\n            if (this.data.start == STaskState.Finsh) {\r\n                this.finsh.active = true;\r\n            } else {\r\n                this.getBtn.node.active = true;\r\n            }\r\n        } else {\r\n            this.goBtn.node.active = true;\r\n        }\r\n\r\n        this.proLab.color = new Color().fromHEX(colorStr);\r\n        // this.awList = ItemUtil.GetSThingList(this.std.RewardType, this.std.RewardID, this.std.RewardNumber);\r\n        // this.awardList.UpdateDatas(this.awList);\r\n\r\n    }\r\n}"]}