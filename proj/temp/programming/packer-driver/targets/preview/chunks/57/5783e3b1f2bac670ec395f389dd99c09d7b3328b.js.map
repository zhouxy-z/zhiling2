{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardsMode.ts"],"names":["CardsMode","CfgMgr","ThingTypeName","EventMgr","Evt_Add_Card_Group_update","Evt_Card_Back_Update","Evt_Card_Check_By_Name","Evt_Card_Group_Update","Evt_Card_Head_Update","Evt_Main_Panel_Card_Group_Update","Evt_Set_Battle_Card_Group_Update","Req","Ret","Route","Session","MsgPanel","RewardTips","PlayerData","constructor","on","adddeck","SetCardsGroup","getPlayerdecks","setdeckattrs","getdeckcards","setdeckdefault","PlayerDefaultDeckPush","DefaultDeckPush","deletedeck","getavatarinfos","setavatarinfos","getcardbackinfos","setcardbackinfos","PlayerNewAvatarPush","NewAvatarPush","PlayerNewCardBackPush","NewCardBackPush","noobcardsclaim","data","setData","decode","console","log","res","code","cur_id","attrs","id","cardNameList","push","emit","Show","GetErrorCfgByCode","onSetHasCardGroupAttrs","index","findIndex","item","name_data_list","decks","card_data","cards","set_default","length","cardData","isDefault","delete_data","deckId","splice","isReset","set","Send","new_head","cardHeadList","newAvatar","avatarId","avatar_data","Object","keys","avatarInfos","new_cardBack","cardBackList","newCardBack","cardBackId","cardBackInfos","getCardData","card_list","key","deckInfo","element","thing_data","type","BattleCard","card","player","statusMark","NoobCardsAdd"],"mappings":"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","sourcesContent":["import { Goto } from \"../../DL\";\r\nimport { CfgMgr, ThingTypeName } from \"../../manager/CfgMgr\";\r\nimport { EventMgr, Evt_Add_Card_Group_update, Evt_Card_Back_Update, Evt_Card_Check_By_Name, Evt_Card_Group_Update, Evt_Card_Head_Update, Evt_Main_Panel_Card_Group_Update, Evt_Set_Battle_Card_Group_Update } from \"../../manager/EventMgr\";\r\nimport proto, { Req, Ret, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { RewardTips } from \"../common/RewardTips\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\n\r\nexport class CardsMode {\r\n    constructor() {\r\n        Session.on(Route[\"logic.protocol.adddeck\"], this.adddeck, this);\r\n        Session.on(Route[\"logic.protocol.setdeckcards\"], this.SetCardsGroup, this);\r\n        Session.on(Route[\"logic.protocol.getplayerdecks\"], this.getPlayerdecks, this)\r\n        Session.on(Route[\"logic.protocol.setdeckattrs\"], this.setdeckattrs, this)\r\n        Session.on(Route[\"logic.protocol.getdeckcards\"], this.getdeckcards, this)\r\n        Session.on(Route[\"logic.protocol.setdeckdefault\"], this.setdeckdefault, this);\r\n        Session.on(Route.PlayerDefaultDeckPush, this.DefaultDeckPush, this)\r\n        Session.on(Route[\"logic.protocol.deletedeck\"], this.deletedeck, this);\r\n        \r\n\r\n        Session.on(Route[\"logic.protocol.getavatarinfos\"], this.getavatarinfos, this);\r\n        Session.on(Route[\"logic.protocol.setavatarinfos\"], this.setavatarinfos, this);\r\n\r\n        Session.on(Route[\"logic.protocol.getcardbackinfos\"], this.getcardbackinfos, this);\r\n        Session.on(Route[\"logic.protocol.setcardbackinfos\"], this.setcardbackinfos, this);\r\n\r\n        Session.on(Route.PlayerNewAvatarPush, this.NewAvatarPush, this)\r\n        Session.on(Route.PlayerNewCardBackPush, this.NewCardBackPush, this)\r\n\r\n        Session.on(Route[\"logic.protocol.noobcardsclaim\"], this.noobcardsclaim, this);\r\n\r\n    }\r\n\r\n    /**添加空卡组 */\r\n    private adddeck(data: any) {\r\n        let setData = Ret[\"logic.protocol.adddeck\"].decode(data);\r\n        console.log(setData)\r\n        if (setData.res.code == 200) {\r\n            PlayerData.cur_id = setData.attrs.id\r\n            PlayerData.cardNameList.push(setData.attrs)\r\n            EventMgr.emit(Evt_Add_Card_Group_update)\r\n        } else {\r\n            MsgPanel.Show(CfgMgr.GetErrorCfgByCode(setData.res.code));\r\n        }\r\n    }\r\n\r\n    /**修改卡组 */\r\n    private SetCardsGroup(data: any) {\r\n        let setData = Ret[\"logic.protocol.setdeckcards\"].decode(data);\r\n        this.onSetHasCardGroupAttrs(setData);\r\n    }\r\n\r\n    /**设置卡组中卡牌的数量为空时的修改返回 */\r\n    private setdeckattrs(data: any) {\r\n        let setData = Ret[\"logic.protocol.setdeckattrs\"].decode(data);\r\n        this.onSetHasCardGroupAttrs(setData);\r\n    }\r\n\r\n\r\n    private onSetHasCardGroupAttrs(setData) {\r\n        if (setData.res.code == 200) {\r\n            console.log(\"修改卡组成功\", setData);\r\n            // Session.Send(Protocol.getplayerdecks)\r\n            MsgPanel.Show(\"修改成功\");\r\n            let index = PlayerData.cardNameList.findIndex(item => { return item.id == setData.attrs.id })\r\n            if (index != -1) {\r\n                PlayerData.cardNameList[index] = setData.attrs;\r\n            } else {\r\n                PlayerData.cardNameList.push(setData.attrs)\r\n            }\r\n            EventMgr.emit(Evt_Card_Group_Update);\r\n        } else {\r\n             MsgPanel.Show(CfgMgr.GetErrorCfgByCode(setData.res.code));\r\n        }\r\n    }\r\n\r\n\r\n    /**查询卡组名字 */\r\n    private getPlayerdecks(data: any) {\r\n        let name_data_list = Ret[\"logic.protocol.getplayerdecks\"].decode(data);\r\n        console.log(\"getPlayerdecks\", name_data_list);\r\n        PlayerData.cardNameList = name_data_list.decks;\r\n        EventMgr.emit(Evt_Main_Panel_Card_Group_Update)\r\n    }\r\n\r\n\r\n\r\n    /**查询卡组卡牌数据 */\r\n    private getdeckcards(data: any) {\r\n        let card_data = Ret[\"logic.protocol.getdeckcards\"].decode(data);\r\n        console.log(\"getdeckcards\", card_data);\r\n        EventMgr.emit(Evt_Card_Check_By_Name, card_data.cards)\r\n    }\r\n\r\n    /**设置默认 */\r\n    private setdeckdefault(data: any) {\r\n        let set_default = Ret[\"logic.protocol.setdeckdefault\"].decode(data);\r\n        console.log(\"setdeckdefault\", set_default);\r\n        if (set_default.res.code == 200) {\r\n            for (let index = 0; index < PlayerData.cardNameList.length; index++) {\r\n                let cardData = PlayerData.cardNameList[index];\r\n                if (cardData.id == set_default.attrs.id) {\r\n                    cardData.isDefault = set_default.attrs.isDefault;\r\n                    MsgPanel.Show(\"设置出战成功\");\r\n                } else {\r\n                    cardData.isDefault = false;\r\n                }\r\n            }\r\n            \r\n            EventMgr.emit(Evt_Set_Battle_Card_Group_Update);\r\n        } else {\r\n             MsgPanel.Show(CfgMgr.GetErrorCfgByCode(set_default.res.code));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**设置默认 */\r\n    private DefaultDeckPush(data: any) {\r\n        let set_default = Ret.PlayerDefaultDeckPush.decode(data);\r\n        console.log(\"DefaultDeckPush\", set_default);\r\n    }\r\n\r\n    /**删除卡组 */\r\n    private deletedeck(data: any) {\r\n        let delete_data = Ret[\"logic.protocol.deletedeck\"].decode(data);\r\n        console.log(\"删除卡组\", delete_data);\r\n        if (delete_data.res.code == 200) {\r\n            let index = PlayerData.cardNameList.findIndex(item => { return item.id == delete_data.deckId })\r\n            if (index != -1) {\r\n                PlayerData.cardNameList.splice(index, 1);\r\n            }\r\n            let isReset: boolean = false;\r\n            for (let index = 0; index < PlayerData.cardNameList.length; index++) {\r\n                let cardData = PlayerData.cardNameList[index];\r\n                if (cardData == delete_data.deckId) {\r\n                    PlayerData.cardNameList.splice(index, 1);\r\n                    isReset = cardData.isDefault;\r\n                    break;\r\n                }\r\n            }\r\n            if (isReset && PlayerData.cardNameList.length) {\r\n                let set = new Req[\"logic.protocol.setdeckdefault\"]();\r\n                set.deckId = PlayerData.cardNameList[0].id;\r\n                Session.Send(Route[\"logic.protocol.setdeckdefault\"], set);\r\n            }\r\n            \r\n\r\n            EventMgr.emit(Evt_Card_Group_Update);\r\n        } else {\r\n             MsgPanel.Show(CfgMgr.GetErrorCfgByCode(delete_data.res.code));\r\n        }\r\n    }\r\n\r\n    /**新头像推送 */\r\n    private NewAvatarPush(data:any){\r\n        let new_head = Ret.PlayerNewAvatarPush.decode(data);\r\n        console.log(\"NewAvatarPush\", new_head);\r\n        PlayerData.cardHeadList[new_head.newAvatar.avatarId] = new_head.newAvatar\r\n    }\r\n\r\n    /**查询头像列表返回 */\r\n    private getavatarinfos(data:any){\r\n        let avatar_data = Ret[\"logic.protocol.getavatarinfos\"].decode(data);\r\n        console.log(\"查询头像列表返回\", avatar_data, Object.keys(avatar_data.avatarInfos));\r\n        if(Object.keys(avatar_data.avatarInfos).length > 0){\r\n            PlayerData.cardHeadList = avatar_data.avatarInfos\r\n        }\r\n        EventMgr.emit(Evt_Card_Head_Update)\r\n\r\n    }\r\n\r\n    /**设置头像列表返回 */\r\n    private setavatarinfos(data:any){\r\n        let avatar_data = Ret[\"logic.protocol.setavatarinfos\"].decode(data);\r\n        console.log(\"设置头像列表返回\", avatar_data);\r\n        EventMgr.emit(Evt_Card_Head_Update)\r\n    }\r\n\r\n\r\n    /**新卡背推送 */\r\n    private NewCardBackPush(data:any){\r\n        let new_cardBack = Ret.PlayerNewCardBackPush.decode(data);\r\n        PlayerData.cardBackList[new_cardBack.newCardBack.cardBackId] = new_cardBack.newCardBack;\r\n    }\r\n\r\n    /**查询卡背列表返回 */\r\n    private getcardbackinfos(data:any){\r\n        let avatar_data = Ret[\"logic.protocol.getcardbackinfos\"].decode(data);\r\n        console.log(\"查询卡背列表返回\", avatar_data);\r\n        if(Object.keys(avatar_data.cardBackInfos).length > 0){\r\n            PlayerData.cardBackList = avatar_data.cardBackInfos\r\n        }\r\n        EventMgr.emit(Evt_Card_Back_Update)       \r\n    }\r\n\r\n    /**设置卡背列表返回 */\r\n    private setcardbackinfos(data:any){\r\n        let avatar_data = Ret[\"logic.protocol.setcardbackinfos\"].decode(data);\r\n        console.log(\"设置卡背列表返回\", avatar_data);\r\n        EventMgr.emit(Evt_Card_Back_Update)   \r\n\r\n    }\r\n\r\n    /**领取卡组 */\r\n    private noobcardsclaim(data:any){\r\n        let getCardData = Ret[\"logic.protocol.noobcardsclaim\"].decode(data);\r\n        console.log(getCardData)\r\n        if(getCardData.res.code == 200){\r\n            let card_list:proto.base.IThing[] = []\r\n            for (const key in getCardData.deckInfo.cards) {\r\n                const element = getCardData.deckInfo.cards[key];\r\n                let thing_data:proto.base.IThing = {type:ThingTypeName.BattleCard,card:null}\r\n                thing_data.type = ThingTypeName.BattleCard;\r\n                thing_data.card = element;\r\n                card_list.push(thing_data)\r\n            }\r\n            PlayerData.cur_id = getCardData.deckInfo.attrs.id;\r\n            PlayerData.player.statusMark.NoobCardsAdd = true;\r\n            PlayerData.cardNameList = [];\r\n            PlayerData.cardNameList.push(getCardData.deckInfo.attrs)\r\n            RewardTips.Show(card_list, getCardData.deckInfo.attrs)\r\n            EventMgr.emit(Evt_Card_Group_Update);\r\n        }else{\r\n            MsgPanel.Show(CfgMgr.GetErrorCfgByCode(getCardData.res.code));\r\n        }\r\n    }\r\n\r\n}"]}