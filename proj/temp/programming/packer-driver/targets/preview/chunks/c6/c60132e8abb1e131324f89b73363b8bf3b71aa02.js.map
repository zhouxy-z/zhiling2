{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/battle/opOutput/Out_HandToTerrain_2d.ts"],"names":["Out_HandToTerrain_2d","tween","UITransform","v3","BattleBaseComp","battleDataMgr","battleLogicMgr","BattleCard","start","data","card","toShow","console","error","showEnd","reset","isPlayerA","toTerrainPlayerId","isCheck","area","terraninAreaListA","terrainData","instId","grid","gridList","cardData","setData","showCardLayer","active","layerTrans","getComponent","startPos","convertToWorldSpaceAR","width","height","targetPos","getPlayerTerrainFormId","toTerrainInstId","terraninAreaListB","node","worldPosition","fromPoolCard","cardComp","addComponent","position","to","easing","call","putCardToPool","exit"],"mappings":"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","sourcesContent":["import { Node, tween, UITransform, v3, Vec3 } from \"cc\";\r\nimport { base } from \"../../../net/proto/proto\";\r\nimport { BattleBaseComp } from \"../BattleBaseComp\";\r\nimport { battleDataMgr } from \"../BattleDataMgr\";\r\nimport { battleLogicMgr } from \"../BattleLogicMgr\";\r\nimport { BattleCard } from \"../BattleCard\";\r\n/**\r\n * 从手牌上场\r\n */\r\nexport class Out_HandToTerrain_2d extends BattleBaseComp<base.IBattleRoomOpOutput_HandToTerrain> {\r\n    \r\n    protected start(): void {\r\n        if (this.data && this.data.card) {\r\n            this.toShow();\r\n        } else {\r\n            console.error(\"手牌到地形区域数据为空\");\r\n            this.showEnd();\r\n        }\r\n    }\r\n\r\n    protected reset(): void {\r\n        \r\n    }\r\n\r\n    private toShow(): void {\r\n        if (battleDataMgr.isPlayerA(this.data.toTerrainPlayerId)) {\r\n            let isCheck: boolean = false;\r\n            for (let area of battleLogicMgr.terraninAreaListA) {\r\n                if (area.terrainData.instId) {\r\n                    for (let grid of area.gridList) {\r\n                        if (grid.cardData && grid.cardData.instId == this.data.card.instId) {\r\n                            grid.setData(this.data.card);\r\n                            isCheck = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (isCheck) break;\r\n            }\r\n            this.showEnd();\r\n        } else {\r\n            battleLogicMgr.showCardLayer.active = true;\r\n            let layerTrans: UITransform = battleLogicMgr.showCardLayer.getComponent(UITransform);\r\n            let startPos: Vec3 = layerTrans.convertToWorldSpaceAR(v3(layerTrans.width * 0.5, layerTrans.height * 0.5, 0));\r\n            let targetPos: Vec3;\r\n            let terrainData: base.IBattleRoomTerrainPlayerData = battleDataMgr.getPlayerTerrainFormId(this.data.toTerrainPlayerId, this.data.toTerrainInstId);\r\n            let isCheck:boolean = false;\r\n            for (let area of battleLogicMgr.terraninAreaListB) {\r\n                if (area.terrainData.instId == terrainData.instId) {\r\n                    for (let grid of area.gridList) {\r\n                        if (!grid.cardData) {\r\n                            targetPos = grid.node.worldPosition;\r\n                            grid.setData(this.data.card);\r\n                            isCheck = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (isCheck) break;\r\n            }\r\n            let card: Node = battleLogicMgr.fromPoolCard;\r\n            let cardComp: BattleCard = card.getComponent(BattleCard) || card.addComponent(BattleCard);\r\n            cardComp.setData(this.data.card);\r\n            card.position = startPos;\r\n            tween(card)\r\n            .to(0.5, { worldPosition: targetPos }, { easing: 'cubicIn' })\r\n            .call(()=>{\r\n                battleLogicMgr.putCardToPool(card);\r\n                this.showEnd();\r\n            })\r\n            .start();\r\n        } \r\n    }\r\n    \r\n    private showEnd(): void {\r\n        this.exit();\r\n        battleLogicMgr.showCardLayer.active = false;\r\n        \r\n    }\r\n}"]}