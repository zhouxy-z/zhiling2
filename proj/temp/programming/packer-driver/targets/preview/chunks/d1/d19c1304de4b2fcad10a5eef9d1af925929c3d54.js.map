{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/battle/opOutput/Out_WaitPlayerInput.ts"],"names":["Out_WaitPlayerInput","Button","DragDropMgr","BattleBaseComp","battleLogicMgr","BattleCardGrid","BattleTerrainArea","BattleCard","DecodeReq","Protocol","PlayerData","Session","DateUtils","battleDataMgr","base","editCardList","editGridList","isInit","isSend","start","dragLayer","active","registerDragDrop","roundBtn","node","on","EventType","CLICK","onBtnClick","battleroomconfirmopinput","onBattleroomconfirmopinput","onUpdate","dt","data","offset","timeout","ServerTime","endOp","sendRoundConfirm","reset","off","clear","isSucceed","console","error","terrainAreaList","terraninAreaListA","grid","terrainArea","index","gridList","length","cardData","location","BattleRoomCardLocation","Hand","editGrid","instId","sourceGrid","handGridList","gridIdx","setData","exit","log","result","res","code","btn","inputs","input","BattleRoomOpInput","create","opType","BattleRoomOpInputType","In_HandToTerrain","HandToTerrain","push","server","roomId","roomData","Send","handCardList","handCard","addDragNode","addDropNode","cardGrid","handGridCont","chekIsCanDrag","battleGrid","getComponent","tempCardData","cardInstId","areaIdx","creatDragNode","dragNode","fromPoolCard","dragGrid","addComponent","dradData","terrainInstId","dragData","isAgent","onDrag","onDrop","dropNode","dropResult","toDrop","putCardToPool","area","battleTerrainArea","dropGrid","terrainData","handToTerrain","BattleRoomOpInput_HandToTerrain","pop"],"mappings":"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","sourcesContent":["import { Button, Node} from \"cc\";\r\nimport { DragDropMgr, IDragData, IDragDropEvent } from \"../../../manager/DragDropMgr\";\r\nimport { BattleBaseComp } from \"../BattleBaseComp\";\r\nimport { battleLogicMgr } from \"../BattleLogicMgr\";\r\nimport { BattleCardGrid } from \"../BattleCardGrid\";\r\nimport { BattleTerrainArea } from \"../BattleTerrainArea\";\r\nimport { BattleCard } from \"../BattleCard\";\r\nimport { DecodeReq, Protocol } from \"../../../net/Protocol\";\r\nimport { PlayerData } from \"../../player/PlayerData\";\r\nimport { Session } from \"../../../net/Session\";\r\nimport { DateUtils } from \"../../../utils/DateUtils\";\r\nimport { battleDataMgr } from \"../BattleDataMgr\";\r\nimport base from \"../../../net/proto/BaseUtils\";\r\n\r\ninterface IDragGridData {\r\n    gridIdx: number; //地形下的格子下标\r\n    areaIdx: number; //地形区域下标\r\n    terrainInstId: string; //地形实例id\r\n    cardData: base.IBattleRoomCardData;\r\n}\r\n/**\r\n * 等待客户端玩家操作\r\n */\r\nexport class Out_WaitPlayerInput extends BattleBaseComp<base.IBattleRoomOpOutput_WaitPlayerInput> implements IDragDropEvent {\r\n    //编辑中的卡牌列表\r\n    private editCardList:base.IBattleRoomOpInput_HandToTerrain[];\r\n    //编辑中的格子信息\r\n    private editGridList:IDragGridData[] = [];\r\n    private isInit: boolean = false;\r\n    private isSend: boolean = false;\r\n    protected start(): void {\r\n        battleLogicMgr.dragLayer.active = true;\r\n        this.registerDragDrop();\r\n        this.editCardList = [];\r\n        this.editGridList = [];\r\n        battleLogicMgr.roundBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        Session.on(Protocol.battleroomconfirmopinput, this.onBattleroomconfirmopinput, this);\r\n        this.isInit = true;\r\n        this.isSend = false;\r\n    }\r\n\r\n    protected onUpdate(dt: number): void {\r\n        if (!this.isInit || !this.data) return;\r\n        let offset: number = this.data.timeout - DateUtils.ServerTime;\r\n        if (this.isSend) {\r\n            //服务器无响应世界结束\r\n            if (offset < 5) {\r\n                this.endOp();\r\n            }\r\n            return;\r\n        }\r\n        \r\n        if (offset <= 1) {\r\n            this.sendRoundConfirm();\r\n        }\r\n    }\r\n\r\n    protected reset(): void {\r\n        battleLogicMgr.dragLayer.active = false;\r\n        this.isInit = false;\r\n        this.editCardList = null;\r\n        this.editGridList = null;\r\n        battleLogicMgr.roundBtn.node.off(Button.EventType.CLICK, this.onBtnClick, this);\r\n        Session.off(Protocol.battleroomconfirmopinput, this.onBattleroomconfirmopinput, this);\r\n        DragDropMgr.clear();\r\n    }\r\n\r\n    private endOp(isSucceed: boolean = false): void {\r\n        //出牌失败把格子打回手牌区\r\n        if (!isSucceed) {\r\n            console.error(\"出牌失败\")\r\n            let terrainAreaList: BattleTerrainArea[] = battleLogicMgr.terraninAreaListA;\r\n            let grid: BattleCardGrid;\r\n            for (let terrainArea of terrainAreaList) {\r\n                for (let index = 0; index < terrainArea.gridList.length; index++) {\r\n                    grid = terrainArea.gridList[index];\r\n                    if (grid.cardData && grid.cardData.location == base.BattleRoomCardLocation.Hand) {\r\n                        for (let editGrid of this.editGridList) {\r\n                            if (editGrid.cardData.instId == grid.cardData.instId) {\r\n                                let sourceGrid: BattleCardGrid = battleLogicMgr.handGridList[editGrid.gridIdx];\r\n                                sourceGrid.setData(grid.cardData);\r\n                                grid.setData(null);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.exit();\r\n        \r\n        console.log(\"-------->出牌完毕\")\r\n    }\r\n\r\n    private onBattleroomconfirmopinput(data: any): void {\r\n        let result = DecodeReq.battleroomconfirmopinput(data);\r\n        this.endOp(result.res.code == 200);\r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case battleLogicMgr.roundBtn:\r\n                this.sendRoundConfirm();\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    private sendRoundConfirm(): void {\r\n        if (this.editCardList) {\r\n            let inputs: base.BattleRoomOpInput[] = [];\r\n            let input: base.BattleRoomOpInput;\r\n            for (let index = 0; index < this.editCardList.length; index++) {\r\n                input = base.BattleRoomOpInput.create();\r\n                input.opType = base.BattleRoomOpInputType.In_HandToTerrain;\r\n                input.HandToTerrain = this.editCardList[index];\r\n                inputs.push(input);\r\n            }\r\n            let data = new Protocol.battleroomconfirmopinput();\r\n            data.server = PlayerData.server;\r\n            data.roomId = battleDataMgr.roomData.roomId;\r\n            data.inputs = inputs;\r\n            console.log(\"发送出牌数据---->\" + inputs)\r\n            Session.Send(data);\r\n            this.isSend = true;\r\n        }\r\n    }\r\n    //注册拖拽节点\r\n    private registerDragDrop(): void {\r\n        let handCardList: BattleCardGrid[] = battleLogicMgr.handGridList;\r\n        for (let handCard of handCardList) {\r\n            DragDropMgr.addDragNode(handCard.node);\r\n        }\r\n    \r\n        let terrainAreaList: BattleTerrainArea[] = battleLogicMgr.terraninAreaListA;\r\n        for (let terrainArea of terrainAreaList) {\r\n            DragDropMgr.addDropNode(terrainArea.node);    \r\n            for (let cardGrid of terrainArea.gridList) {\r\n                DragDropMgr.addDragNode(cardGrid.node);\r\n            }\r\n        }\r\n\r\n        DragDropMgr.addDropNode(battleLogicMgr.handGridCont);    \r\n\r\n        DragDropMgr.on(this, battleLogicMgr.dragLayer);\r\n        \r\n    }\r\n    //检测是否可拖拽\r\n    chekIsCanDrag(node: Node): boolean {\r\n        let battleGrid: BattleCardGrid = node.getComponent(BattleCardGrid);\r\n        let cardData: base.IBattleRoomCardData = battleGrid.cardData;\r\n        if (!cardData) return false;\r\n        //拖动的卡原来是手卡上去的\r\n        if (cardData.location == base.BattleRoomCardLocation.Hand) {\r\n            let tempCardData: base.IBattleRoomOpInput_HandToTerrain = this.editCardList[this.editCardList.length - 1];\r\n            if (tempCardData && tempCardData.cardInstId == cardData.instId) return true;\r\n            //手卡牌卡\r\n            if (battleGrid.areaIdx < 0) return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    creatDragNode(node: Node): IDragData {\r\n        let battleGrid: BattleCardGrid = node.getComponent(BattleCardGrid);\r\n        let dragNode: Node = battleLogicMgr.fromPoolCard;\r\n        let dragGrid: BattleCard = dragNode.getComponent(BattleCard) || dragNode.addComponent(BattleCard);\r\n        dragGrid.setData(battleGrid.cardData);\r\n        dragNode.active = true;\r\n        let dradData:IDragGridData = {\r\n            areaIdx:battleGrid.areaIdx, \r\n            gridIdx:battleGrid.gridIdx, \r\n            terrainInstId: battleGrid.terrainInstId,\r\n            cardData: battleGrid.cardData\r\n        };\r\n        let dragData: IDragData<IDragGridData> = {\r\n            dragNode: dragNode,\r\n            data: dradData,\r\n            isAgent: true,\r\n        };\r\n        return dragData; \r\n    }\r\n\r\n    onDrag(dragData: IDragData): void {\r\n        \r\n    }\r\n\r\n    onDrop(dropNode: Node, dragData: IDragData<IDragGridData>): void {\r\n        let dropResult: boolean = false;\r\n        if (dropNode) {\r\n            dropResult = this.toDrop(dropNode, dragData);\r\n        } \r\n        //放下失败\r\n        if (!dropResult) {\r\n            battleLogicMgr.putCardToPool(dragData.dragNode);\r\n        } else {\r\n            let grid: BattleCardGrid;\r\n            if (dragData.data.areaIdx < 0) {\r\n                grid = battleLogicMgr.handGridList[dragData.data.gridIdx];\r\n            } else {\r\n               let area: BattleTerrainArea = battleLogicMgr.terraninAreaListA[dragData.data.areaIdx];\r\n               grid = area.gridList[dragData.data.gridIdx];\r\n            }\r\n            grid.setData(null);\r\n            battleLogicMgr.putCardToPool(dragData.dragNode);\r\n        }\r\n    }\r\n\r\n    private toDrop(dropNode: Node, dragData: IDragData<IDragGridData>): boolean {\r\n        let battleTerrainArea: BattleTerrainArea = dropNode.getComponent(BattleTerrainArea);\r\n        //手牌区拖拽到地形区域\r\n        if (battleTerrainArea) {\r\n            //原来就是手牌区的牌拖拽到地形区\r\n            if (dragData.data.cardData.location == base.BattleRoomCardLocation.Hand) {\r\n                for (let index = 0; index < this.editCardList.length; index++) {\r\n                    if (this.editGridList[index].cardData.instId == dragData.data.cardData.instId){\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            let dropGrid: BattleCardGrid;\r\n            let terrainInstId: string = battleTerrainArea.terrainData.instId;\r\n            let cardGrid: BattleCardGrid;\r\n            for (let index = 0; index < battleTerrainArea.gridList.length; index++) {\r\n                cardGrid = battleTerrainArea.gridList[index];\r\n                if (!cardGrid.cardData) {\r\n                    dropGrid = cardGrid;\r\n                    break;\r\n                }\r\n            }\r\n            if (terrainInstId && dropGrid) {\r\n                let handToTerrain: base.IBattleRoomOpInput_HandToTerrain = base.BattleRoomOpInput_HandToTerrain.create();\r\n                handToTerrain.terrainInstId = terrainInstId;\r\n                handToTerrain.cardInstId = dragData.data.cardData.instId;\r\n                this.editCardList.push(handToTerrain);\r\n                this.editGridList.push(dragData.data);\r\n                dropGrid.setData(dragData.data.cardData);\r\n                return true;\r\n            }\r\n        } else {\r\n            //从地形区域移回手牌\r\n            let tempCardData: base.IBattleRoomOpInput_HandToTerrain = this.editCardList[this.editCardList.length - 1];\r\n            if (tempCardData && tempCardData.cardInstId == dragData.data.cardData.instId) {\r\n                this.editCardList.pop();\r\n                let dragGrid: IDragGridData = this.editGridList.pop();\r\n                let dropGrid: BattleCardGrid = battleLogicMgr.handGridList[dragGrid.gridIdx];\r\n                dropGrid.setData(dragData.data.cardData);\r\n                return true;\r\n            } \r\n            return false;\r\n        } \r\n        return false;\r\n    }\r\n    \r\n}"]}