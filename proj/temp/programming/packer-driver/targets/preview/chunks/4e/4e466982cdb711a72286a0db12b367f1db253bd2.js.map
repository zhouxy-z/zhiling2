{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/room/RoomPanel.ts"],"names":["RoomPanel","Button","Label","sp","path","RichText","EditBox","Panel","Session","PlayerData","EventMgr","Evt_BattleCreatRoomResult","battleDataMgr","MsgPanel","FightLogPanel","CfgMgr","VList","ResMgr","LocalStorage","proto","Req","Route","prefab","terrainCont","terrainBtn","terrainList","selectTerrainList","setAreaBtn","areaLab","setAiIdBtn","aiIdLab","aiIdCont","aiIdBtn","aiIdList","selectAiIndx","setAiCardBtn","aiCardLab","cardCont","cardList","selecCardList","seekLab","seekBtn","seekBtnLab","isClearSeek","cardBtn","setMyCardBtn","myCardLab","btn","btnLab","closeBtn","fightLogBtn","defTerrainId","defAiCardId","defMyCardId","defAiId","aiList","areaList","stdCardList","curCardList","setCardType","onLoad","temoAreaList","AreaList","std","IsOpen","push","AIGroupList","tempCardList","CardList","find","GetNumber","undefined","tepmAiId","index","length","aiGrop","AIGroupID","areas","GetString","tepmAreasIds","localData","JSON","parse","areaId","stdArea","getArea","stds","Get","k","Number","ads","tepmAdCardIds","cardId","GetCard","mys","tepmMyCardIds","stdCard","updateCell","cell","cellInfo","getChildByName","getComponent","string","AreaID","toString","AreaName","skillDesc","AreaAffect","skill","GetCardSkill","SkillId","Desc","clickCell","Show","cellCount","updateArea","lastCell","lastInfo","splice","active","isSelect","selectCell","selectAiId","getChildByPath","Cost","Power","CardName","ID","SkillID","body","Skeleton","LoadResAbSub","join","CardBody","SkeletonData","res","skeletonData","setAnimation","list","addCard","updateCard","node","on","EventType","CLICK","onBtnClick","flush","onShow","onCreatRoomResult","onHide","off","SetNumber","SetString","stringify","idStr","showCard","updateSeekState","seekCard","str","regex","RegExp","split","test","skillId","onCreatRoom","Hide","showArea","selectIndex","seekStr","creatRoomData","data","context","base","BattleRoomContext","create","ignoreShuffle","aiWaitSecond","areaIds","roomId","players","getPlayerData","waitSecond","Send","enterRoom","server","pb","Server","id","serverId","num","playerList","player","BattleRoomPlayerContext","playerId","level","isAi","name","aiGroupId","cards","getCardData","ids","card","BattleCard","exp","nftLockExpires","tradeCd","quality","ownershipType"],"mappings":"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","sourcesContent":["import { Node, Button, Label, sp, path, RichText, EditBox, js } from \"cc\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { EventMgr, Evt_BattleCreatRoomResult } from \"../../manager/EventMgr\";\r\nimport { battleDataMgr } from \"../battle/BattleDataMgr\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { FightLogPanel } from \"../fight/FightLogPanel\";\r\nimport { CfgMgr, StdAIGroup, StdArea, StdCard, StdSkill } from \"../../manager/CfgMgr\";\r\nimport { CellInfo, VList } from \"../../component/VList\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\nimport LocalStorage from \"../../utils/LocalStorage\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\nexport class RoomPanel extends Panel {\r\n    protected prefab: string = \"prefabs/room/RoomPanel\";\r\n    private terrainCont: Node;\r\n    private terrainBtn: Button;\r\n    private terrainList: VList;\r\n    private selectTerrainList: VList;\r\n    private setAreaBtn: Button;\r\n    private areaLab: Label;\r\n    private setAiIdBtn: Button;\r\n    private aiIdLab: Label;\r\n    private aiIdCont: Node;\r\n    private aiIdBtn: Button;\r\n    private aiIdList: VList;\r\n    private selectAiIndx: number = 0;\r\n    private setAiCardBtn: Button;\r\n    private aiCardLab: Label;\r\n    private cardCont: Node;\r\n    private cardList: VList;\r\n    private selecCardList: VList;\r\n    private seekLab: EditBox;\r\n    private seekBtn: Button;\r\n    private seekBtnLab: Label;\r\n    private isClearSeek: boolean;\r\n    private cardBtn: Button;\r\n    private setMyCardBtn: Button;\r\n    private myCardLab: Label;\r\n    private btn: Button;//创建房间\r\n    private btnLab: Label;\r\n    private closeBtn: Button;\r\n    private fightLogBtn: Button;\r\n    private defTerrainId: number[] = [];\r\n    private defAiCardId: number[] = [];\r\n    private defMyCardId: number[] = [];\r\n    private defAiId: number;\r\n    private aiList: StdAIGroup[];\r\n    private areaList: StdArea[];\r\n    private stdCardList: StdCard[];\r\n    private curCardList: StdCard[];\r\n    private setCardType: number;\r\n    protected onLoad() {\r\n        this.areaList = [];\r\n        let temoAreaList: StdArea[] = CfgMgr.AreaList;\r\n        for (let std of temoAreaList) {\r\n            if (std.IsOpen) {\r\n                this.areaList.push(std);\r\n            }\r\n        }\r\n        this.aiList = CfgMgr.AIGroupList;\r\n        this.stdCardList = []\r\n        let tempCardList: StdCard [] = CfgMgr.CardList;\r\n        for (let std of tempCardList) {\r\n            if (std.IsOpen) {\r\n                this.stdCardList.push(std);\r\n            }\r\n        }\r\n\r\n        this.setAreaBtn = this.find(\"setAreaBtn\", Button);\r\n        this.areaLab = this.find(\"areaLab\", Label);\r\n        this.terrainCont = this.find(\"terrainCont\");\r\n        this.terrainList = this.find(\"terrainCont/terrainList\", VList);\r\n        this.selectTerrainList = this.find(\"terrainCont/selectTerrainList\", VList);\r\n        this.terrainBtn = this.find(\"terrainCont/terrainBtn\", Button);\r\n\r\n        this.setAiIdBtn = this.find(\"setAiIdBtn\", Button);\r\n        this.aiIdLab = this.find(\"aiIdLab\", Label);\r\n        this.aiIdCont = this.find(\"aiIdCont\");\r\n        this.aiIdList = this.find(\"aiIdCont/aiIdList\", VList);\r\n        this.aiIdBtn = this.find(\"aiIdCont/aiIdBtn\", Button);\r\n\r\n        this.setAiCardBtn = this.find(\"setAiCardBtn\", Button);\r\n        this.aiCardLab = this.find(\"aiCardLab\", Label);\r\n        this.setMyCardBtn = this.find(\"setMyCardBtn\", Button);\r\n        this.myCardLab = this.find(\"myCardLab\", Label);\r\n        this.cardCont = this.find(\"cardCont\");\r\n        this.cardList = this.find(\"cardCont/cardList\", VList);\r\n        this.selecCardList = this.find(\"cardCont/selectCardList\", VList);\r\n        this.cardBtn = this.find(\"cardCont/cardBtn\", Button);\r\n        this.seekLab = this.find(\"cardCont/seekLab\", EditBox);\r\n        this.seekBtn = this.find(\"cardCont/seekBtn\", Button);\r\n        this.seekBtnLab = this.find(\"cardCont/seekBtn/btnLab\", Label);\r\n        let defAiId = LocalStorage.GetNumber(\"test_ai\", undefined);\r\n        if (defAiId) {\r\n            let tepmAiId: number = undefined;\r\n            for (let index = 0; index < CfgMgr.AIGroupList.length; index++) {\r\n                let aiGrop = CfgMgr.AIGroupList[index];\r\n                if (defAiId == aiGrop.AIGroupID) {\r\n                    tepmAiId = defAiId;\r\n                    break;\r\n                }\r\n            }\r\n            this.defAiId = tepmAiId;\r\n        }\r\n        if (this.defAiId == undefined) this.defAiId = CfgMgr.AIGroupList[0].AIGroupID;\r\n\r\n        let areas = LocalStorage.GetString(\"test_area\", undefined);\r\n        if (areas) {\r\n            let tepmAreasIds: number [] = [];\r\n            let localData:number [] = JSON.parse(areas);\r\n            for (let index = 0; index < localData.length; index++) {\r\n                let areaId = localData[index];\r\n                let stdArea: StdArea = CfgMgr.getArea(areaId);\r\n                if (stdArea && stdArea.IsOpen) {\r\n                    tepmAreasIds.push(areaId);\r\n                }\r\n            }\r\n            this.defTerrainId = tepmAreasIds;\r\n        } else {\r\n            this.defTerrainId = [];\r\n            let stds = CfgMgr.Get(\"Area\");\r\n            for (let k in stds) {\r\n                let stdArea: StdArea = stds[k];\r\n                if (stdArea.IsOpen) this.defTerrainId.push(Number(k));\r\n                if (this.defTerrainId.length >= 3) break;\r\n            }\r\n        }\r\n        let ads = LocalStorage.GetString(\"test_ads\", undefined);\r\n        if (ads) {\r\n            let tepmAdCardIds: number [] = [];\r\n            let localData: number[] = JSON.parse(ads);\r\n            for (let index = 0; index < localData.length; index++) {\r\n                let cardId = localData[index];\r\n                let std: StdCard = CfgMgr.GetCard(cardId);\r\n                if (std && std.IsOpen) {\r\n                    tepmAdCardIds.push(cardId);\r\n                }\r\n            }\r\n            this.defAiCardId = tepmAdCardIds;\r\n        } else {\r\n            this.defAiCardId = [];\r\n            let stds = CfgMgr.Get(\"Card\");\r\n            for (let k in stds) {\r\n                let std: StdCard = stds[k];\r\n\r\n                if (std.IsOpen) this.defAiCardId.push(Number(k));\r\n                if (this.defAiCardId.length > 6) break;\r\n            }\r\n        }\r\n        let mys = LocalStorage.GetString(\"test_mys\", undefined);\r\n        if (mys) {\r\n            let tepmMyCardIds: number [] = [];\r\n            let localData:number[] = JSON.parse(mys);\r\n            for (let index = 0; index < localData.length; index++) {\r\n                let cardId = localData[index];\r\n                let stdCard: StdCard = CfgMgr.GetCard(cardId);\r\n                if (stdCard && stdCard.IsOpen) {\r\n                    tepmMyCardIds.push(cardId);\r\n                }\r\n            }\r\n            this.defMyCardId = tepmMyCardIds;\r\n        } else {\r\n            this.defMyCardId = [];\r\n            let stds = CfgMgr.Get(\"Card\");\r\n            for (let k in stds) {\r\n                let stdCard: StdCard = stds[k];\r\n                if (stdCard.IsOpen) this.defMyCardId.push(Number(k));\r\n                if (this.defMyCardId.length > 6) break;\r\n            }\r\n        }\r\n\r\n        this.terrainList.updateCell = (cell: Node, cellInfo: CellInfo) => {\r\n            let std: StdArea = this.areaList[cellInfo.index];\r\n            cell.getChildByName(\"idLab\").getComponent(Label).string = std.AreaID.toString();\r\n            cell.getChildByName(\"nameLab\").getComponent(Label).string = std.AreaName;\r\n            let skillDesc: string = \"\";\r\n            for (let index = 0; index < std.AreaAffect.length; index++) {\r\n                let skill = CfgMgr.GetCardSkill(std.AreaAffect[index]);\r\n                if (skill) {\r\n                    skillDesc += `${skill.SkillId}-->` + skill.Desc;\r\n                    if (index < std.AreaAffect.length) {\r\n                        skillDesc += \"\\n\";\r\n                    }\r\n                }\r\n\r\n            }\r\n            cell.getChildByName(\"descLab\").getComponent(RichText).string = skillDesc;\r\n        }\r\n        this.terrainList.clickCell = (cell: Node, cellInfo: CellInfo) => {\r\n            if (this.defTerrainId.length >= 3) {\r\n                MsgPanel.Show(\"最多只能选则3个地形\")\r\n                return;\r\n            }\r\n            let std: StdArea = this.areaList[cellInfo.index];\r\n            this.defTerrainId.push(std.AreaID);\r\n            this.selectTerrainList.cellCount = this.defTerrainId.length;\r\n            this.updateArea();\r\n        }\r\n        this.terrainList.cellCount = this.areaList.length;\r\n        this.selectTerrainList.updateCell = (cell: Node, cellInfo: CellInfo, lastCell?: Node, lastInfo?: CellInfo) => {\r\n            let std: StdArea = CfgMgr.getArea(this.defTerrainId[cellInfo.index]);\r\n            cell.getChildByName(\"idLab\").getComponent(Label).string = std.AreaID.toString();\r\n            cell.getChildByName(\"nameLab\").getComponent(Label).string = std.AreaName;\r\n            let skillDesc: string = \"\";\r\n            for (let index = 0; index < std.AreaAffect.length; index++) {\r\n                let skill = CfgMgr.GetCardSkill(std.AreaAffect[index]);\r\n                if (skill) {\r\n                    skillDesc += `${skill.SkillId}-->` + skill.Desc;\r\n                    if (index < std.AreaAffect.length) {\r\n                        skillDesc += \"\\n\";\r\n                    }\r\n                }\r\n\r\n            }\r\n            cell.getChildByName(\"descLab\").getComponent(RichText).string = skillDesc;\r\n        }\r\n        this.selectTerrainList.clickCell = (cell: Node, cellInfo: CellInfo) => {\r\n            this.defTerrainId.splice(cellInfo.index, 1);\r\n            this.selectTerrainList.cellCount = this.defTerrainId.length;\r\n            this.updateArea();\r\n        }\r\n\r\n        this.aiIdList.updateCell = (cell: Node, cellInfo: CellInfo) => {\r\n            let std: StdAIGroup = this.aiList[cellInfo.index];\r\n            cell.getChildByName(\"idLab\").getComponent(Label).string = std.AIGroupID.toString();\r\n            cell.getChildByName(\"select\").active = cellInfo.isSelect;\r\n        }\r\n        this.aiIdList.selectCell = (cell: Node, cellInfo: CellInfo, lastCell?: Node, lastInfo?: CellInfo) => {\r\n            if (cell) cell.getChildByName(\"select\").active = cellInfo.isSelect;\r\n            if (lastCell && lastInfo) lastCell.getChildByName(\"select\").active = lastInfo.isSelect;\r\n            let std: StdAIGroup = this.aiList[cellInfo.index];\r\n            this.selectAiId(cellInfo.index);\r\n        }\r\n        this.aiIdList.cellCount = this.aiList.length;\r\n\r\n        this.cardList.updateCell = (cell: Node, cellInfo: CellInfo) => {\r\n            let std: StdCard = this.curCardList[cellInfo.index];\r\n            cell.getChildByPath(\"cost/label\").getComponent(Label).string = std.Cost.toString();\r\n            cell.getChildByPath(\"power/label\").getComponent(Label).string = std.Power.toString();\r\n            cell.getChildByPath(\"nameframe/name\").getComponent(Label).string = std.CardName;\r\n            cell.getChildByPath(\"idLab\").getComponent(Label).string = std.ID.toString();\r\n            let skillDesc: string = \"\";\r\n            for (let index = 0; index < std.SkillID.length; index++) {\r\n                let skill = CfgMgr.GetCardSkill(std.SkillID[index]);\r\n                if (skill) {\r\n                    skillDesc += `${skill.SkillId}-->` + skill.Desc;\r\n                    if (index < std.SkillID.length) {\r\n                        skillDesc += \"\\n\";\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            cell.getChildByPath(\"descLab\").getComponent(RichText).string = skillDesc;\r\n\r\n            let body: sp.Skeleton = cell.getChildByPath(\"body_card\").getComponent(sp.Skeleton);\r\n            ResMgr.LoadResAbSub(path.join(\"spine\", std.CardBody, std.CardBody), sp.SkeletonData, (res: sp.SkeletonData) => {\r\n                body.skeletonData = res;\r\n                body.setAnimation(0, \"Idle\", true);\r\n            });\r\n\r\n        }\r\n        this.cardList.clickCell = (cell: Node, cellInfo: CellInfo) => {\r\n            let list: number[] = this.setCardType == 1 ? this.defAiCardId : this.defMyCardId;\r\n            if (list.length >= 12) {\r\n                MsgPanel.Show(\"添加卡牌超出12张\")\r\n                return;\r\n            }\r\n            let addCard: StdCard = this.curCardList[cellInfo.index];\r\n            list.push(addCard.ID);\r\n            this.selecCardList.cellCount = list.length;\r\n            this.updateCard();\r\n        }\r\n        \r\n\r\n        this.selecCardList.updateCell = (cell: Node, cellInfo: CellInfo) => {\r\n            let list: number[] = this.setCardType == 1 ? this.defAiCardId : this.defMyCardId;\r\n            let std: StdCard = CfgMgr.GetCard(list[cellInfo.index]);\r\n            cell.getChildByPath(\"cost/label\").getComponent(Label).string = std.Cost.toString();\r\n            cell.getChildByPath(\"power/label\").getComponent(Label).string = std.Power.toString();\r\n            cell.getChildByPath(\"nameframe/name\").getComponent(Label).string = std.CardName;\r\n            cell.getChildByPath(\"idLab\").getComponent(Label).string = std.ID.toString();\r\n            let skillDesc: string = \"\";\r\n            for (let index = 0; index < std.SkillID.length; index++) {\r\n                let skill = CfgMgr.GetCardSkill(std.SkillID[index]);\r\n                if (skill) {\r\n                    skillDesc += `${skill.SkillId}-->` + skill.Desc;\r\n                    if (index < std.SkillID.length) {\r\n                        skillDesc += \"\\n\";\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            cell.getChildByPath(\"descLab\").getComponent(RichText).string = skillDesc;\r\n            let body: sp.Skeleton = cell.getChildByPath(\"body_card\").getComponent(sp.Skeleton);\r\n            ResMgr.LoadResAbSub(path.join(\"spine\", std.CardBody, std.CardBody), sp.SkeletonData, (res: sp.SkeletonData) => {\r\n                body.skeletonData = res;\r\n                body.setAnimation(0, \"Idle\", true);\r\n            });\r\n\r\n        }\r\n        this.selecCardList.clickCell = (cell: Node, cellInfo: CellInfo) => {\r\n            let list: number[] = this.setCardType == 1 ? this.defAiCardId : this.defMyCardId;\r\n            list.splice(cellInfo.index, 1);\r\n            this.selecCardList.cellCount = list.length;\r\n            this.updateCard();\r\n        }\r\n\r\n        this.btn = this.find(\"btn\", Button);\r\n        this.btnLab = this.find(\"btn/btnLab\", Label);\r\n        this.closeBtn = this.find(\"closeBtn\", Button);\r\n        this.fightLogBtn = this.find(\"fightLogBtn\", Button);\r\n        this.btn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.closeBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.fightLogBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.setAreaBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.terrainBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.setAiIdBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.aiIdBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.setAiCardBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.cardBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.setMyCardBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.seekBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.terrainCont.active = false;\r\n        this.aiIdCont.active = false;\r\n        this.cardCont.active = false;\r\n    }\r\n    public flush(...args: any[]): void {\r\n        this.btnLab.string = \"创建房间\"\r\n        this.btn.node.active = true;\r\n        //Session.Send(Protocol.getplayerdecks);\r\n    }\r\n\r\n    protected onShow(): void {\r\n\r\n        EventMgr.on(Evt_BattleCreatRoomResult, this.onCreatRoomResult, this);\r\n        this.updateArea();\r\n        this.selectAiId(this.selectAiIndx);\r\n        this.updateCard();\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n        EventMgr.off(Evt_BattleCreatRoomResult, this.onCreatRoomResult, this);\r\n\r\n        LocalStorage.SetNumber(\"test_ai\", this.defAiId);\r\n        LocalStorage.SetString(\"test_area\", JSON.stringify(this.defTerrainId));\r\n        LocalStorage.SetString(\"test_ads\", JSON.stringify(this.defAiCardId));\r\n        LocalStorage.SetString(\"test_mys\", JSON.stringify(this.defMyCardId));\r\n\r\n    }\r\n\r\n    private updateArea(): void {\r\n        let idStr: string = \"\";\r\n        for (let index = 0; index < this.defTerrainId.length; index++) {\r\n            idStr += this.defTerrainId[index] + \"\";\r\n            if (index < this.defTerrainId.length - 1) {\r\n                idStr += \"、\"\r\n            }\r\n        }\r\n        this.areaLab.string = idStr;\r\n    }\r\n\r\n    private selectAiId(index: number): void {\r\n        this.selectAiIndx = index;\r\n        let std: StdAIGroup = this.aiList[this.selectAiIndx];\r\n        this.defAiId = std.AIGroupID;\r\n        this.aiIdLab.string = this.defAiId.toString();\r\n    }\r\n\r\n\r\n    private showCard(): void {\r\n        this.curCardList = this.stdCardList;\r\n        this.cardCont.active = true;\r\n        this.cardList.cellCount = this.curCardList.length;\r\n        this.isClearSeek = false;\r\n        this.seekBtnLab.string = \"\";\r\n        this.updateSeekState();\r\n        let list: number[] = this.setCardType == 1 ? this.defAiCardId : this.defMyCardId;\r\n        this.cardCont.getChildByName(\"titleLab\").getComponent(Label).string = this.setCardType == 1 ? \"设置AI卡牌\" : \"设置我方卡牌\"\r\n        this.selecCardList.cellCount = list.length;\r\n    }\r\n\r\n    private seekCard(str: string): void {\r\n        let regex = new RegExp(str.split('').join('.*?'), 'i');\r\n        let list: StdCard[] = [];\r\n        for (let std of this.stdCardList) {\r\n            if (regex.test(std.CardName) || regex.test(std.ID.toString())) {\r\n                list.push(std);\r\n            } else {\r\n                for (let skillId of std.SkillID) {\r\n                    if (regex.test(skillId.toString())) {\r\n                        list.push(std);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (list.length < 1) {\r\n            MsgPanel.Show(`所搜不到包含${str}的卡牌`)\r\n            return;\r\n        }\r\n        this.isClearSeek = true;\r\n        this.curCardList = list;\r\n        this.cardList.cellCount = this.curCardList.length;\r\n        this.updateSeekState();\r\n    }\r\n\r\n    private updateSeekState(): void{\r\n        this.seekBtnLab.string = this.isClearSeek ? \"清空搜索\" : \"搜索\";\r\n    }\r\n\r\n    private updateCard(): void {\r\n        let list: number[] = this.defAiCardId;\r\n        let idStr: string = \"\";\r\n        for (let index = 0; index < list.length; index++) {\r\n            idStr += list[index] + \"\";\r\n            if (index < list.length - 1) {\r\n                idStr += \"、\"\r\n            }\r\n        }\r\n        this.aiCardLab.string = idStr.length > 0 ? idStr : \"无\";\r\n\r\n        idStr = \"\";\r\n        list = this.defMyCardId;\r\n        for (let index = 0; index < list.length; index++) {\r\n            idStr += list[index] + \"\";\r\n            if (index < list.length - 1) {\r\n                idStr += \"、\"\r\n            }\r\n        }\r\n        this.myCardLab.string = idStr.length > 0 ? idStr : \"无\";\r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.btn:\r\n                this.onCreatRoom();\r\n                break;\r\n            case this.closeBtn:\r\n                this.Hide();\r\n                break;\r\n            case this.fightLogBtn:\r\n                FightLogPanel.Show();\r\n                break;\r\n            case this.setAreaBtn:\r\n                this.showArea();\r\n                break;\r\n            case this.terrainBtn:\r\n                this.terrainCont.active = false;\r\n                break;\r\n            case this.setAiIdBtn:\r\n                this.aiIdCont.active = true;\r\n                this.aiIdList.selectIndex(this.selectAiIndx);\r\n                break;\r\n            case this.aiIdBtn:\r\n                this.aiIdCont.active = false;\r\n                break;\r\n            case this.setAiCardBtn:\r\n                this.setCardType = 1;\r\n                this.showCard();\r\n                break;\r\n            case this.cardBtn:\r\n                this.cardCont.active = false;\r\n                break;\r\n            case this.setMyCardBtn:\r\n                this.setCardType = 2;\r\n                this.showCard();\r\n                break;\r\n            case this.seekBtn:\r\n                if (this.isClearSeek) {\r\n                    this.isClearSeek = false;\r\n                    this.curCardList = this.stdCardList;\r\n                    this.seekLab.string = \"\";\r\n                    this.cardList.cellCount = this.curCardList.length;\r\n                    this.updateSeekState();\r\n                    return;\r\n                }\r\n                let seekStr:string = this.seekLab.string;\r\n                if(seekStr == \"\"){\r\n                    MsgPanel.Show(\"请输入要搜索的卡牌名称、卡牌id、技能id\");\r\n                    return;\r\n                }\r\n                this.seekCard(seekStr);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private showArea(): void {\r\n        this.terrainCont.active = true;\r\n        this.selectTerrainList.cellCount = this.defTerrainId.length;\r\n    }\r\n\r\n    private onCreatRoomResult(): void {\r\n        this.btnLab.string = \"进入房间\";\r\n    }\r\n\r\n    private onCreatRoom(): void {\r\n        if (!battleDataMgr.creatRoomData) {\r\n            if (this.defTerrainId.length < 3) {\r\n                MsgPanel.Show(\"地形数据量不足3个\")\r\n                return;\r\n            }\r\n            if (this.defAiCardId.length < 4) {\r\n                MsgPanel.Show(\"AI卡牌不足4张\")\r\n                return;\r\n            }\r\n            if (this.defMyCardId.length < 4) {\r\n                MsgPanel.Show(\"我方卡牌不足4张\")\r\n                return;\r\n            }\r\n            let data = new Req[\"battle_mgr.protocol.createbattlemgruserroom\"]();\r\n            data.context = proto.base.BattleRoomContext.create();\r\n            data.context.ignoreShuffle = true;\r\n            data.context.aiWaitSecond = 1;\r\n            data.context.areaIds = this.defTerrainId;\r\n            data.context.roomId = \"110\";\r\n            data.context.players = this.getPlayerData(2);\r\n            data.context.waitSecond = 3600;\r\n\r\n            Session.Send(Route[\"battle_mgr.protocol.createbattlemgruserroom\"],data);\r\n        } else {\r\n            let enterRoom = new Req[\"battle.protocol.battleroomenter\"]();\r\n            enterRoom.roomId = battleDataMgr.creatRoomData.roomId;\r\n            let server: proto.pb.IServer = proto.pb.Server.create();\r\n            server.id = battleDataMgr.creatRoomData.serverId;\r\n            enterRoom.server = server;\r\n            Session.Send(Route[\"battle.protocol.battleroomenter\"],enterRoom);\r\n        }\r\n\r\n    }\r\n\r\n    private getPlayerData(num: number): proto.base.BattleRoomPlayerContext[] {\r\n        let playerList: proto.base.BattleRoomPlayerContext[] = [];\r\n        let player: proto.base.BattleRoomPlayerContext;\r\n        for (let index = 0; index < num; index++) {\r\n            player = proto.base.BattleRoomPlayerContext.create();\r\n            player.playerId = index == 0 ? PlayerData.player.playerId : (1000 * (index + 1)) + \"\";\r\n            player.level = 1;\r\n            player.isAi = index == 0 ? false : true;\r\n            player.name = \"test_\" + player.playerId;\r\n            if (player.isAi) {\r\n                player.aiGroupId = this.defAiId;\r\n                player.cards = this.getCardData(this.defAiCardId, 1000 * index);\r\n            } else {\r\n                player.cards = this.getCardData(this.defMyCardId, 1000 * index);\r\n                // player.cards = this.getCardData([600003,600002,600003,600003,600003,600003,600003], 1000 * index);\r\n                //player.deckId = PlayerData.curSelectDeckId;\r\n            }\r\n            playerList[index] = player;\r\n        }\r\n        return playerList;\r\n    }\r\n\r\n    private getCardData(ids: number[], cardId: number): proto.base.BattleCard[] {\r\n        let cardList: proto.base.BattleCard[] = [];\r\n        let card: proto.base.BattleCard;\r\n        for (let index = 0; index < ids.length; index++) {\r\n            card = proto.base.BattleCard.create();\r\n            card.cardId = ids[index];\r\n            card.exp = 1;\r\n            card.id = (cardId * index) + \"\";\r\n            card.level = 1;\r\n            card.nftLockExpires = 1;\r\n            card.tradeCd = 0;\r\n            card.quality = 1;\r\n            card.ownershipType = 1;\r\n            cardList[index] = card;\r\n        }\r\n        return cardList;\r\n    }\r\n}"]}