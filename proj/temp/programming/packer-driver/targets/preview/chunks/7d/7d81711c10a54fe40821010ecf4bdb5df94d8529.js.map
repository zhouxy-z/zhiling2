{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/bag/OpenBoxPanel.ts"],"names":["OpenBoxPanel","Input","Label","Sprite","SpriteFrame","UITransform","Slider","path","Button","Toggle","ResMgr","folder_item","Panel","UILay","Session","BoxType","CfgMgr","ThingName","AutoScroller","PlayerData","BagItem","Tips","Second","EventMgr","Evt_GetReward","Evt_Item_Change","Req","Route","prefab","$lockLay","Modal","progress","nameLab","icon","cardBg","numLab","scroller","valueLab","maxLab","consLab","consumeNum","openBtn","BoxData","maxItemcount","selects","curSelectCount","itemData","onLoad","CloseBy","find","node","on","onSlide","SetHandle","updateItem","bind","onSelect","EventType","TOUCH_END","onDel","onAdd","onOpen","onShow","ItemChange","resetData","count","GetItemCount","Items","string","Hide","flush","ItemName","spriteFrame","LoadResAbSub","join","Icon","Quality","GetBoxData","Limit","is_select","Boxtype","select","CanSelect","updateProgress","child","children","toggle","getComponent","isChecked","SelectFirst","updateScroller","cardatas","i","length","id","type","Types","battlecard","deliver","GetBattleCardDeliver","push","card","cardId","CardID","quality","CardQuality","stdItem","Getitem","item","ItemsNum","UpdateDatas","data","index","bagItem","addComponent","setThing","indexOf","RewardNum","Show","sort","a","b","idx","splice","onHide","update","dt","size","contentSize","setContentSize","width","e","Math","max","ceil","list","open_box","boxId","ItemID","selectedItems","server","Send"],"mappings":"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","sourcesContent":["import { Input, Label, Node, Sprite, SpriteFrame, UITransform, Slider, path, Button, tween, v3, PageView, instantiate, Layout, Toggle } from \"cc\";\r\nimport { ResMgr, folder_item } from \"../../manager/ResMgr\";\r\nimport { Panel, UILay } from \"../../manager/GameRoot\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { BoxType, CfgMgr, RewardBox, StdBattleCardDelivery, StdItem, ThingName } from \"../../manager/CfgMgr\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { BagItem } from \"./BagItem\";\r\nimport { Tips } from \"../common/Tips\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport { EventMgr, Evt_GetReward, Evt_Item_Change, Evt_OpenBoxGetRewardPanel } from \"../../manager/EventMgr\";\r\nimport { ItemUtil } from \"../../utils/ItemUtils\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\n\r\nexport class OpenBoxPanel extends Panel {\r\n    protected prefab: string = \"prefabs/bag/OpenBoxPanel\";\r\n    protected $lockLay = UILay.Modal;\r\n    private Slider: Slider;\r\n    private progress: Node;\r\n    private nameLab: Label;\r\n    private icon: Sprite;\r\n    private cardBg: Sprite;\r\n    private numLab: Label;\r\n    private scroller: AutoScroller;\r\n    private valueLab: Label;\r\n    private maxLab: Label;\r\n    private consLab: Label;\r\n    private consumeNum: Label;\r\n    private openBtn: Button;\r\n\r\n    private BoxData: RewardBox;\r\n    private maxItemcount: number;\r\n    private selects: number[];\r\n    private curSelectCount: number;\r\n    private itemData: StdItem;\r\n\r\n    protected onLoad(): void {\r\n        this.CloseBy(\"right/closeBtn\");\r\n\r\n        this.nameLab = this.find(\"left/nameLab\", Label);\r\n        this.icon = this.find(\"left/icon\", Sprite);\r\n        this.cardBg = this.find(\"left/cardBg\", Sprite);\r\n        this.numLab = this.find(\"left/num\", Label);\r\n        this.consLab = this.find(\"right/label\", Label);\r\n        this.consumeNum = this.find(\"right/consumeNum\", Label);\r\n        this.scroller = this.find(\"right/ScrollView\", AutoScroller);\r\n        this.valueLab = this.find(\"right/value\", Label);\r\n        this.maxLab = this.find(\"right/max\", Label);\r\n\r\n        this.Slider = this.find(\"right/Slider\", Slider);\r\n        this.progress = this.find(\"right/Slider/progress\");\r\n        this.Slider.node.on('slide', this.onSlide, this);\r\n\r\n        this.scroller.SetHandle(this.updateItem.bind(this));\r\n        this.scroller.node.on('select', this.onSelect, this);\r\n\r\n        this.openBtn = this.find(\"right/openBtn\", Button);\r\n        this.find(\"right/del\").on(Input.EventType.TOUCH_END, this.onDel, this);\r\n        this.find(\"right/add\").on(Input.EventType.TOUCH_END, this.onAdd, this);\r\n        this.find(\"right/openBtn\").on(Input.EventType.TOUCH_END, this.onOpen, this);\r\n    }\r\n\r\n    protected onShow() {\r\n        EventMgr.on(Evt_Item_Change, this.ItemChange, this);\r\n        EventMgr.on(Evt_GetReward, this.resetData, this);\r\n    }\r\n    private ItemChange() {\r\n        let count = PlayerData.GetItemCount(this.itemData.Items);\r\n        this.numLab.string = count + \"\";\r\n        if (count <= 0) {\r\n            this.Hide();\r\n        }\r\n    }\r\n\r\n    private resetData() {\r\n        this.Hide();\r\n        if (this.maxItemcount <= 0) {\r\n            return;\r\n        }\r\n        this.flush(this.itemData);\r\n    }\r\n\r\n\r\n    async flush(itemData: StdItem) {\r\n        if (!itemData) return;\r\n        this.itemData = itemData;\r\n        this.selects = [];\r\n        this.curSelectCount = 1;\r\n        this.nameLab.string = itemData.ItemName;\r\n        let count = PlayerData.GetItemCount(itemData.Items);\r\n        this.numLab.string = count + \"\";\r\n        this.icon.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_item, itemData.Icon, \"spriteFrame\"), SpriteFrame);\r\n        this.cardBg.spriteFrame = await ResMgr.LoadResAbSub(\"sheet/bag/box/Quality\" + itemData.Quality + \"/spriteFrame\", SpriteFrame);\r\n        this.BoxData = CfgMgr.GetBoxData(itemData.Items);\r\n        this.maxItemcount = count > this.BoxData.Limit ? this.BoxData.Limit : count;\r\n        this.maxLab.string = this.maxItemcount + \"\";\r\n\r\n        let is_select = this.BoxData.Boxtype == BoxType.select;\r\n        // this.openBtn.enabled = !is_select;\r\n        // this.openBtn.node.getComponent(Sprite).grayscale = is_select;\r\n        this.scroller.CanSelect(is_select);\r\n\r\n        this.updateProgress();\r\n\r\n        for (let child of this.scroller.children) {\r\n            let toggle = child.getComponent(Toggle);\r\n            if (toggle) toggle.isChecked = false;\r\n        }\r\n        this.scroller.SelectFirst();\r\n    }\r\n    protected updateScroller() {\r\n        let cardatas = [];\r\n        for (let i = 0; i < this.BoxData.Items.length; i++) {\r\n            let id = this.BoxData.Items[i];\r\n            let type = this.BoxData.Types[i];\r\n            if (type == ThingName.battlecard) {\r\n                let deliver = CfgMgr.GetBattleCardDeliver(id);\r\n                if (deliver) cardatas.push({ card: { cardId: deliver.CardID, quality: deliver.CardQuality } });\r\n            } else {\r\n                // let awardList = ItemUtil.CreateThing(ItemUtil.SthingType[type], id, num);\r\n                // cardatas.push(awardList)\r\n                let stdItem = CfgMgr.Getitem(id);\r\n                if (stdItem) {\r\n                    cardatas.push({ item: { id: id, count: this.curSelectCount * (this.BoxData.ItemsNum[i] || 1) } });\r\n                }\r\n            }\r\n        }\r\n        this.scroller.UpdateDatas(cardatas);\r\n    }\r\n\r\n    private updateItem(item: Node, data: proto.base.IThing, index: number) {\r\n        let bagItem = item.getComponent(BagItem) || item.addComponent(BagItem);\r\n        bagItem.setThing(data);\r\n        let toggle = bagItem.getComponent(Toggle);\r\n        if (!toggle) return;\r\n        toggle.isChecked = this.selects.indexOf(index) != -1;\r\n    }\r\n    private async onSelect(index: number, item: Node, data: any) {\r\n        if (this.BoxData.Boxtype != BoxType.select) return;\r\n        let toggle = item.getComponent(Toggle);\r\n        if (!toggle) return;\r\n        await Second(0);\r\n        if (toggle.isChecked) {\r\n            if (this.selects.length >= this.BoxData.RewardNum) {\r\n                Tips.Show(\"只能选择\" + this.BoxData.RewardNum + \"个\");\r\n                toggle.isChecked = false;\r\n                return;\r\n            }\r\n            if (this.selects.indexOf(index) == -1) {\r\n                this.selects.push(index);\r\n                this.selects.sort((a, b) => a - b);\r\n            }\r\n        } else {\r\n            let idx = this.selects.indexOf(index);\r\n            if (idx != -1) this.selects.splice(idx, 1);\r\n        }\r\n        this.updateProgress();\r\n    }\r\n\r\n    protected onHide(...args: any[]) {\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        let size = this.Slider.node.getComponent(UITransform).contentSize;\r\n        this.progress.getComponent(UITransform).setContentSize(this.Slider.progress * size.width, 13.448);\r\n    }\r\n\r\n    private onAdd(e?: any) {\r\n        if (this.curSelectCount >= this.maxItemcount) return;\r\n        this.curSelectCount++;\r\n        //超出拥有数量\r\n        if (this.curSelectCount > this.maxItemcount) {\r\n            this.curSelectCount = this.maxItemcount\r\n        }\r\n        this.updateProgress();\r\n    }\r\n\r\n    private onDel(e?: any) {\r\n        if (this.curSelectCount < 1) return;\r\n        this.curSelectCount--;\r\n        if (this.curSelectCount < 1) {\r\n            this.curSelectCount = 1;\r\n        }\r\n        this.updateProgress();\r\n    }\r\n\r\n    private onSlide(e?: Slider) {\r\n        this.curSelectCount = Math.max(Math.ceil(this.maxItemcount * this.Slider.progress), 1);\r\n        this.updateProgress();\r\n    }\r\n    private updateProgress() {\r\n        this.Slider.progress = this.curSelectCount / this.maxItemcount;\r\n        this.valueLab.string = this.curSelectCount + \"\";\r\n        this.consumeNum.string = \"\";\r\n\r\n        switch (this.BoxData.Boxtype) {\r\n            case 3:\r\n                this.consLab.string = \"获得以下全部道具\";\r\n                break;\r\n            case 1:\r\n                this.consLab.string = \"随机获得以下道具\";\r\n                break;\r\n            case 2:\r\n                this.consLab.string = \"选择获得以下道具\";\r\n                this.consumeNum.string = this.selects.length + \"/\" + this.BoxData.RewardNum;\r\n                break;\r\n        }\r\n        this.updateScroller();\r\n\r\n    }\r\n\r\n    private onOpen() {\r\n        let list = this.selects;\r\n        if (this.BoxData.Boxtype == 2 && this.selects.length < this.BoxData.RewardNum) {\r\n            Tips.Show(`请选择${this.BoxData.RewardNum}个道具！`);\r\n            return;\r\n        }\r\n        if (this.BoxData.Boxtype != BoxType.select) {\r\n            list = null;\r\n        }\r\n        let open_box = new Req[\"player.protocol.openbox\"]();\r\n        open_box.boxId = this.BoxData.ItemID;\r\n        open_box.count = this.curSelectCount;\r\n        open_box.selectedItems = list\r\n        open_box.server = PlayerData.server\r\n        Session.Send(Route[\"player.protocol.openbox\"], open_box);\r\n    }\r\n}"]}