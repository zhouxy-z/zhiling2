{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/task/TaskModule.ts"],"names":["TaskModule","CfgMgr","EventMgr","Evt_MainTaskChange","Evt_RefreshTaskChange","Evt_TaskChange","Ret","Route","Session","MsgPanel","RewardTips","PlayerData","TaskChangeType","constructor","on","PlayerTasksChangedPush","onTaskChange","onCompleteTask","onRefreshDailyTask","PlayerDailyTaskRefreshTimesChangePush","onRefreshDailyTaskPush","onGetrefreshdailytasktimes","data","task_data","decode","iterator","list","mode","TaskDel","player","tasks","id","task_state","GetTaskState","task_cfg","GetTaskByData","isMainShow","change_task_list","push","emit","res","code","Show","Data","datas","getTaskRewardThings","end","change","changeBefore","taskRefreshCount","times"],"mappings":"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","sourcesContent":["import { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { EventMgr, Evt_MainTaskChange, Evt_RefreshTaskChange, Evt_TaskChange } from \"../../manager/EventMgr\";\r\nimport { Ret, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { RewardTips } from \"../common/RewardTips\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { STaskShowType } from \"../player/PlayerStruct\";\r\n\r\nenum TaskChangeType{\r\n    TaskUpdate = 0,//更新任务，没有任务数据则添加\r\n    TaskDel = 1,//删除任务\r\n  }\r\nexport class TaskModule {\r\n\r\n   \r\n    constructor() {\r\n        Session.on(Route.PlayerTasksChangedPush, this.onTaskChange, this);\r\n        Session.on(Route[\"player.protocol.completetask\"], this.onCompleteTask, this);\r\n        Session.on(Route[\"logic.protocol.refreshdailytask\"], this.onRefreshDailyTask, this)\r\n        Session.on(Route.PlayerDailyTaskRefreshTimesChangePush, this.onRefreshDailyTaskPush, this)\r\n        Session.on(Route[\"logic.protocol.getrefreshdailytasktimes\"], this.onGetrefreshdailytasktimes, this)\r\n    }\r\n\r\n\r\n    private onTaskChange(data: any) {\r\n        let task_data = Ret.PlayerTasksChangedPush.decode(data);\r\n        // console.log(\"任务推送\", task_data)\r\n        for (const iterator of task_data.list) {\r\n            if(iterator.mode && iterator.mode == TaskChangeType.TaskDel){\r\n                delete PlayerData.player.tasks[iterator.data.id]\r\n            }else{\r\n                // console.log(\"任务变更\", iterator)\r\n                PlayerData.player.tasks[iterator.data.id] = iterator.data;\r\n                let task_state = PlayerData.GetTaskState(iterator.data)\r\n                let task_cfg = CfgMgr.GetTaskByData(iterator.data);\r\n                if(task_state == 3 && task_cfg.isMainShow == 1){\r\n                    PlayerData.change_task_list.push(iterator)\r\n                }\r\n            }\r\n        }\r\n        EventMgr.emit(Evt_MainTaskChange)\r\n        EventMgr.emit(Evt_TaskChange);\r\n    }\r\n    private onCompleteTask(data: any):void{\r\n        let task_data = Ret[\"player.protocol.completetask\"].decode(data);\r\n        // console.log(\"完成任务\", task_data)\r\n        if(task_data.res.code != 200){\r\n            MsgPanel.Show(\"任务领取失败\")\r\n            return;\r\n        }\r\n        PlayerData.player.tasks[task_data.Data.id] = task_data.Data; \r\n        PlayerData.player.tasks[task_data.Data.id] = task_data.Data; \r\n        let datas = PlayerData.getTaskRewardThings(task_data.Data.end);\r\n        RewardTips.Show(datas);\r\n        EventMgr.emit(Evt_TaskChange);\r\n    }\r\n\r\n    private onRefreshDailyTask(data:any){\r\n        let task_data = Ret[\"logic.protocol.refreshdailytask\"].decode(data);\r\n        // console.log(task_data)\r\n        if(task_data.res.code != 200){\r\n            MsgPanel.Show(\"刷新失败\")\r\n        }\r\n    }\r\n\r\n    private onRefreshDailyTaskPush(data:any){\r\n        let task_data = Ret.PlayerDailyTaskRefreshTimesChangePush.decode(data);\r\n        // console.log(\"手动刷新推送\",task_data)\r\n        let change = task_data.change ? task_data.change : 0;\r\n        let changeBefore = task_data.changeBefore ? task_data.changeBefore : 0;\r\n        PlayerData.taskRefreshCount = change + changeBefore;\r\n        EventMgr.emit(Evt_RefreshTaskChange);\r\n    }\r\n\r\n    \r\n    private onGetrefreshdailytasktimes(data:any){\r\n        let task_data = Ret[\"logic.protocol.getrefreshdailytasktimes\"].decode(data);\r\n        // console.log(\"次数\",task_data)\r\n        if(task_data.res.code == 200){\r\n            PlayerData.taskRefreshCount = task_data.times;\r\n            EventMgr.emit(Evt_RefreshTaskChange);\r\n        }\r\n    }\r\n}"]}