{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/player/PlayerData.ts"],"names":["PlayerData","js","ThingTypeName","CfgMgr","ItemType","StdProcessBoxType","ThingType","STaskType","DateUtils","proto","items","player","itemCounts","SetUserInfo","info","_userInfo","UserInfo","Setplayer","battleCards","benefitCard","itemProductions","tasks","GetCardDataById","id","card","cards","CreateCardData","cardCfgId","quality","cardId","cardData","base","BattleCard","create","level","exp","GetCardDataByCfgId","datas","length","GetCardDataByItemId","cardDatas","getCardData","stdItem","Getitem","Itemtpye","piece","ItemEffect1","map","GetCardMap","checkCard","key","stdCard","Classid","ID","UpdateCardData","isChange","index","AddCardData","isAdd","DelCardData","delIdx","splice","checkHeadIsUseById","is_use","iterator","cardNameList","avatarId","checkCardBackIsUseById","cardBackId","getCardGroupDataById","CurFightCardGroup","data","isDefault","GetItem","Object","hasOwnProperty","call","toString","GetItemCount","GetitemBySubType","subType","element","_id","parseInt","std","SubType","item","type","Items","count","push","InitBoxProcessList","_boxProcessDatas","UpdateBoxProcessData","boxData","boxId","GetBoxProcessData","GetBoxProcessDatas","GetNextLimitBoxProcess","cfgLimitList","GetBoxTypeList","LimitBox","stdLimitBox","endTime","DateStringToTime","EndTime","ServerTime","GetCurStdBoxProcess","stdBox","stdNextLimitBox","startTime","isGetLimitBox","stdNewbieBox","getNum","cfgList","NewbieBox","RewardTypes","rewardData","rewards","rewardIndex","InitUpgradeAward","_upgradeAward","AddUpgradeAward","GetUpgradeAward","qual","CheckCardIsCanUpgrade","upgradeList","GetCardUpgradeList","nextUpgrade","CostItemIds","itemId","itemNum","CostItemNums","haveNum","SetSeasonData","_seasonData","CurSeasonData","SetSectionAwardData","_sectionAward","GetSectionAwardData","ChangeSectionAwardData","rankLevelId","GetCurSeasonOpenTime","currentSeasonId","stdPVPSnatch","GetStdPVPSnatch","MatchStartTime","GetCurSeasonEndTime","MatchEddTime","GetCurSeasonPastTTime","openTime","SetSatrElementData","_satrElementData","SatrElementData","GetCurSatrElementEndTime","GetStdPVPBattle","resetMail","mails","mailmap","getMailReward","GetCanSenditem","item_list","Get","cfg","GetShopIndexs","shopIndexDatas","GetShopByID","shopIndexId","GetShopByIndexType","indexType","shopIndexType","GetShopByShopType","shopType","SetShopData","shopMap","createMap","shopData","UpdateShopData","content","findIndex","value","GetShopData","shopId","GetCommShopData","shop","GetShopLuckyData","lucky","GetResBySubType","Item","GetCard","GetCardByCfg","max","card_id_list","select_card_cfg","card_group","limit","indexOf","i","card_cfg","GetCardListByClassID","card_element","IsOpen","GetGenerateCardGroup","card_id","cfg_list","GetLogic","GenerateID","CardNumber","Classid1","CardNumber1","Classid2","CardNumber2","Classid3","CardNumber3","Classid4","CardNumber4","Classid5","CardNumber5","Classid6","GetCardVariantCfg","list","card_data","createdAt","nftLockExpires","ownershipType","tradeCd","updateId","CardList","GetShowMianTask","task_list","tyroTaskList","filtrTyroTask","dayTaskList","filtrDayTask","seasonTaskList","filtrSeasonTask","season_num","task_cfg","GetTaskByData","task_state","GetTaskState","seasontime","open_time","ConditionId","ConditionValue","is_lock","TaskType","seasonChapter","isMainShow","tyro_num","tyro_add","unshift","day_num","cfg_tyro","GetTaskByShowType","TopTask","start","end","_iterator","taskData","dataSort","deleTask","stdTask","dayTask","cfg_season","sort","a","b","a_state","b_state","is_last","GetTaskGroupLast","state","is_end","CompletionNum","GetSeasonTaskAllChapter","chapterList","season","TaskTypeData","taskSeason","GetTaskChapterCfg","SeasonID","getTaskRewardThings","GetTaskById","things","RewardType","thing","ThingItem","RewardID","RewardNumber","battlecard","stdCardDeliver","GetBattleCardDeliver","CardID","CardQuality","getPlayerHasEuqityList","equity_cfg","open_lsit","equities","EquityCardID","user","server","cardHeadList","cardBackList","cur_id","mails_log","mail_start_id","tradeViewData","tradeCardViewData","tradeMyOrderData","total","startId","tradeAllBalances","jy","hc","score","serverid","unionid","change_task_list","taskRefreshCount","benefit_cards"],"mappings":"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","sourcesContent":["import { js } from 'cc';\r\nimport {StdBattleCardDelivery, StdCard, StdCommonType, StdEquityCard, StdItem, StdPVPBattle, StdPVPSnatch, StdTask, StdTaskSeason, ThingTypeName } from '../../manager/CfgMgr';\r\nimport { CfgMgr, ItemGive, ItemType, StdCardUpgrade, StdGenerateCardGroup, StdProcessBox, StdProcessBoxType, ThingName, ThingType } from '../../manager/CfgMgr';\r\nimport { SPlayerMailData, SShopContent, STaskType } from './PlayerStruct';\r\nimport { DateUtils } from '../../utils/DateUtils';\r\nimport proto from '../../net/Protocol';\r\nexport class PlayerData {\r\n    static user: proto.pb.IGetUserInfoRes;\r\n    static server: proto.pb.IServer;\r\n    static player: proto.base.IPlayerData;\r\n\r\n    // 道具列表\r\n    public static get items() { return this.player.itemCounts; }\r\n    // 卡片列表\r\n    // public static get cards() { return this.player.battleCards;}\r\n\r\n    static cards: proto.base.IBattleCard[] = [];\r\n    /**卡组列表 */\r\n    static cardNameList: proto.base.IDeckAttrs[] = []\r\n    /**头像列表 */\r\n    static cardHeadList: {[k: string]: proto.base.IAvatarInfo} = {}\r\n    /**卡背列表 */\r\n    static cardBackList: {[k: string]: proto.base.ICardBackInfo} = {}\r\n    /**当前卡组id */\r\n    static cur_id: string;\r\n    private static _userInfo: proto.base.IPlayerShowInfo;\r\n    public static SetUserInfo(info: proto.base.IPlayerShowInfo): void {\r\n        this._userInfo = info;\r\n    }\r\n    public static get UserInfo(): proto.base.IPlayerShowInfo {\r\n       return this._userInfo;\r\n    }\r\n    /**\r\n     * 初始玩家数据\r\n     * @param player \r\n     */\r\n    public static Setplayer(player: proto.base.IPlayerData) {\r\n        player.battleCards = player.battleCards || [];\r\n        player.benefitCard = player.benefitCard || {};\r\n        player.itemProductions = player.itemProductions || [];\r\n        player.tasks = player.tasks || {};\r\n        player.itemCounts = player.itemCounts || {};\r\n        this.player = player;\r\n    }\r\n\r\n    /**\r\n     * 获取卡牌数据\r\n     * @param id 卡牌唯一id\r\n     * @returns \r\n     */\r\n    static GetCardDataById(id: string): proto.base.IBattleCard {\r\n        for (let card of this.cards) {\r\n            if (id == card.id) {\r\n                return card;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 创建一个cardData\r\n     * @param cardCfgId \r\n     * @param quality \r\n     * @returns \r\n     */\r\n    static CreateCardData(cardCfgId: number, quality: number = 1, cardId: string = null): proto.base.IBattleCard {\r\n        let cardData: proto.base.IBattleCard = proto.base.BattleCard.create();\r\n        cardData.cardId = cardCfgId;\r\n        cardData.quality = quality;\r\n        cardData.id = cardId;\r\n        cardData.level = 1;\r\n        cardData.exp = 0;\r\n        return cardData;\r\n    }\r\n\r\n    /**\r\n     * 根据卡牌配置id获取卡牌列表数据\r\n     * @param cardId 卡牌配置id\r\n     * @returns \r\n     */\r\n    static GetCardDataByCfgId(cardId: number): proto.base.IBattleCard[] {\r\n        let datas: proto.base.IBattleCard[] = [];\r\n        for (let card of this.cards) {\r\n            if (cardId == card.cardId) {\r\n                datas[datas.length] = card;\r\n            }\r\n        }\r\n        return datas;\r\n    }\r\n    /**\r\n     * 根据卡牌道具id（粉尘）获取一个卡牌数据\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetCardDataByItemId(id: number, cardDatas: proto.base.IBattleCard[]): proto.base.IBattleCard {\r\n        let getCardData: proto.base.IBattleCard;\r\n        let stdItem: StdItem = CfgMgr.Getitem(id);\r\n        if (stdItem && stdItem.Itemtpye == ItemType.piece && stdItem.ItemEffect1) {\r\n            let map: { [key: number]: StdCard } = CfgMgr.GetCardMap();\r\n            let checkCard: StdCard;\r\n            for (let key in map) {\r\n                let stdCard: StdCard = map[key];\r\n                if (stdCard.Classid == stdItem.ItemEffect1) {\r\n                    checkCard = stdCard;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            if (checkCard) {\r\n                for (let cardData of cardDatas) {\r\n                    if (cardData.cardId == checkCard.ID) {\r\n                        getCardData = cardData;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!getCardData) {\r\n                    getCardData = this.CreateCardData(checkCard.ID, 1);\r\n                }\r\n            }\r\n        }\r\n        return getCardData;\r\n    }\r\n\r\n    /**更新卡牌数据 */\r\n    static UpdateCardData(cardData: proto.base.IBattleCard): void {\r\n        let isChange: boolean = false;\r\n        for (let index = 0; index < this.cards.length; index++) {\r\n            if (this.cards[index].id == cardData.id) {\r\n                this.cards[index] = cardData;\r\n                isChange = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!isChange) {\r\n            //console.error(`更新卡牌数据失败不存在卡牌id--->${cardData.id}`);\r\n        }\r\n    }\r\n\r\n    /**增加卡牌*/\r\n    static AddCardData(cardData: proto.base.IBattleCard): void {\r\n        let isAdd: boolean = true;\r\n        for (let index = 0; index < this.cards.length; index++) {\r\n            if (this.cards[index].id == cardData.id) {\r\n                isAdd = false;\r\n                //console.error(`添加卡牌错误已存在卡牌id--->${cardData.id}`);\r\n                break;\r\n            }\r\n        }\r\n        if (isAdd) {\r\n            this.cards[this.cards.length] = cardData;\r\n        }\r\n    }\r\n\r\n    /**删除卡牌 */\r\n    static DelCardData(cardData: proto.base.IBattleCard): void {\r\n        let delIdx: number = -1;\r\n        for (let index = 0; index < this.cards.length; index++) {\r\n            if (this.cards[index].id == cardData.id) {\r\n                delIdx = index;\r\n                break;\r\n            }\r\n        }\r\n        if (delIdx > -1) {\r\n            this.cards.splice(delIdx, 1);\r\n        } else {\r\n            //console.error(`删除卡牌错误不存在卡牌id--->${cardData.id}`);\r\n        }\r\n    }\r\n\r\n    /**通过头像id查询头像是否使用 */\r\n    static checkHeadIsUseById(id){\r\n        let is_use = false;\r\n        for (const iterator of PlayerData.cardNameList) {\r\n            if(iterator.avatarId == id){\r\n                is_use = true;\r\n                break;\r\n            }    \r\n        }\r\n        return is_use;\r\n    }\r\n\r\n    /**通过卡背id查询是否使用 */\r\n    static checkCardBackIsUseById(id){\r\n        let is_use = false;\r\n        for (const iterator of PlayerData.cardNameList) {\r\n            if(iterator.cardBackId == id){\r\n                is_use = true;\r\n                break;\r\n            }    \r\n        }\r\n        return is_use;\r\n    }\r\n\r\n    /**通过卡组id查询卡组数据 */\r\n    static getCardGroupDataById(id){\r\n        for (const iterator of PlayerData.cardNameList) {\r\n            if(iterator.id == id){\r\n                return iterator;\r\n            }    \r\n        }\r\n        return \r\n    }\r\n\r\n    /**档期战斗卡组 */\r\n    static get CurFightCardGroup(): proto.base.IDeckAttrs {\r\n        for (let data of this.cardNameList) {\r\n            if (data.isDefault) {\r\n                return data;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取道具id\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetItem(id: number) {\r\n        let items = this.items;\r\n        for (const key in items) {\r\n            if (Object.hasOwnProperty.call(items, key)) {\r\n                if (key == id.toString()) {\r\n                    return items\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取道具数量\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetItemCount(id: number) {\r\n        let items = this.items;\r\n        for (const key in items) {\r\n            if (Object.hasOwnProperty.call(items, key)) {\r\n                if (key == id.toString()) {\r\n                    return items[key]\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * 根据页签获取道具列表\r\n    * @param subType \r\n    * @returns \r\n    */\r\n    static GetitemBySubType(subType: number) {\r\n        let items: proto.base.IThing[] = [];\r\n        for (const key in this.items) {\r\n            const element = this.items[key];\r\n            const _id: number = parseInt(key)\r\n            if (element > 0) {\r\n                let std = CfgMgr.Getitem(_id);\r\n                if (std && (subType == 0 || std.SubType == subType)) {\r\n                    let item = { type: \"item\", item: { id: std.Items, count: element, std: std } }\r\n                    items.push(item);\r\n                }\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    private static _boxProcessDatas: proto.base.IProcessBoxReward[] = [];\r\n    /**设置宝箱数据 */\r\n    static InitBoxProcessList(datas: proto.base.IProcessBoxReward[]): void {\r\n        this._boxProcessDatas = datas;\r\n    }\r\n    /**更新宝箱数据 */\r\n    static UpdateBoxProcessData(data: proto.base.IProcessBoxReward): void {\r\n        let isAdd: boolean = true;\r\n        for (let index = 0; index < this._boxProcessDatas.length; index++) {\r\n            let boxData = this._boxProcessDatas[index];\r\n            if (boxData.boxId == data.boxId) {\r\n                this._boxProcessDatas[index] = data;\r\n                isAdd = false;\r\n                break;\r\n            }\r\n        }\r\n        if (isAdd) {\r\n            this._boxProcessDatas.push(data);\r\n        }\r\n    }\r\n\r\n    /*** 获取宝箱数据*/\r\n    static GetBoxProcessData(boxId: number): proto.base.IProcessBoxReward {\r\n        for (let data of this._boxProcessDatas) {\r\n            if (data.boxId == boxId) {\r\n                return data;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*** 获取当前宝箱数据列表*/\r\n    static GetBoxProcessDatas(): proto.base.IProcessBoxReward[] {\r\n        return this._boxProcessDatas;\r\n    }\r\n\r\n    /**\r\n     * 获取下一个限时宝箱\r\n     * @returns \r\n     */\r\n    static GetNextLimitBoxProcess(): StdProcessBox {\r\n        let cfgLimitList: StdProcessBox[] = CfgMgr.GetBoxTypeList(StdProcessBoxType.LimitBox);\r\n        let stdLimitBox: StdProcessBox;\r\n        let endTime: number;\r\n        for (let index = 0; index < cfgLimitList.length; index++) {\r\n            stdLimitBox = cfgLimitList[index];\r\n            endTime = DateUtils.DateStringToTime(stdLimitBox.EndTime);\r\n            if (DateUtils.ServerTime < endTime) {\r\n                return stdLimitBox;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /*** 获取当前进行中的宝箱*/\r\n    static GetCurStdBoxProcess(): StdProcessBox {\r\n        let cfgLimitList: StdProcessBox[];\r\n        let stdBox: StdProcessBox;\r\n        let stdLimitBox: StdProcessBox;\r\n        let stdNextLimitBox: StdProcessBox;\r\n        let boxData: proto.base.IProcessBoxReward;\r\n        let startTime: number;\r\n        let endTime: number;\r\n        let isGetLimitBox: boolean = false;//是否领取过限时宝箱了，领取过就不能领取新手宝箱\r\n        cfgLimitList = CfgMgr.GetBoxTypeList(StdProcessBoxType.LimitBox);\r\n        for (let index = 0; index < cfgLimitList.length; index++) {\r\n            stdBox = cfgLimitList[index];\r\n            boxData = this.GetBoxProcessData(stdBox.ID);\r\n            if (boxData && !isGetLimitBox) {\r\n                isGetLimitBox = true;\r\n            }\r\n            startTime = DateUtils.DateStringToTime(stdBox.EndTime);\r\n            endTime = DateUtils.DateStringToTime(stdBox.EndTime);\r\n            if (!stdLimitBox) {\r\n                if (DateUtils.ServerTime >= startTime && DateUtils.ServerTime < endTime) {\r\n                    stdLimitBox = stdBox;\r\n                }\r\n            }\r\n            if (!stdNextLimitBox) {\r\n                if (DateUtils.ServerTime < endTime) {\r\n                    stdNextLimitBox = stdBox;\r\n                }\r\n            }\r\n        }\r\n        let stdNewbieBox: StdProcessBox;\r\n        //没有参加过限时宝箱\r\n        if (!isGetLimitBox) {\r\n            let getNum: number;\r\n            let cfgList: StdProcessBox[] = CfgMgr.GetBoxTypeList(StdProcessBoxType.NewbieBox);\r\n            for (let index = 0; index < cfgList.length; index++) {\r\n                stdBox = cfgList[index];\r\n                boxData = this.GetBoxProcessData(stdBox.ID);\r\n                if (!boxData) {\r\n                    stdNewbieBox = stdBox;\r\n                    break;\r\n                }\r\n                getNum = 0;\r\n                for (let index = 0; index < stdBox.RewardTypes.length; index++) {\r\n                    for (let rewardData of boxData.rewards) {\r\n                        if (rewardData.rewardIndex == index) {\r\n                            getNum++;\r\n                        }\r\n                    }\r\n                }\r\n                if (getNum < stdBox.RewardTypes.length) {\r\n                    stdNewbieBox = stdBox;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return stdNewbieBox || stdLimitBox || stdNextLimitBox || cfgLimitList[cfgLimitList.length - 1];\r\n    }\r\n\r\n    private static _upgradeAward: { [key: string]: proto.base.IPlayerLevelRewardCache };\r\n    /**设置等级奖励领取数据 */\r\n    static InitUpgradeAward(data: { [key: string]: proto.base.IPlayerLevelRewardCache }): void {\r\n        this._upgradeAward = data;\r\n    }\r\n    /**设置等级奖励领取数据 */\r\n    static AddUpgradeAward(data: proto.base.IPlayerLevelRewardCache): void {\r\n        if (!this._upgradeAward) {\r\n            this._upgradeAward = {};\r\n        }\r\n        this._upgradeAward[data.level] = data;\r\n    }\r\n    /**获取等级奖励领取数据 */\r\n    static GetUpgradeAward(qual: number): proto.base.IPlayerLevelRewardCache {\r\n        if (this._upgradeAward) {\r\n            return this._upgradeAward[qual];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 检测卡牌是否可升级\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static CheckCardIsCanUpgrade(id: string): boolean {\r\n        let cardData: proto.base.IBattleCard = this.GetCardDataById(id);\r\n        if (!cardData) return false;\r\n        let upgradeList: StdCardUpgrade[] = CfgMgr.GetCardUpgradeList(cardData.cardId);\r\n        let nextUpgrade: StdCardUpgrade = upgradeList[cardData.quality];\r\n        if (!nextUpgrade) return false;\r\n        for (let index = 0; index < nextUpgrade.CostItemIds.length; index++) {\r\n            let itemId: number = nextUpgrade.CostItemIds[index];\r\n            let itemNum: number = nextUpgrade.CostItemNums[index];\r\n            let haveNum: number = PlayerData.GetItemCount(itemId);\r\n            if (haveNum < itemNum) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private static _seasonData: proto.pb.PlayerPvpInfoPush;\r\n    /**设置赛季数据 */\r\n    static SetSeasonData(data: proto.pb.PlayerPvpInfoPush): void {\r\n        this._seasonData = data;\r\n    }\r\n    /**获取赛季数据 */\r\n    static get CurSeasonData(): proto.pb.PlayerPvpInfoPush {\r\n        return this._seasonData;\r\n    }\r\n\r\n    private static _sectionAward: {[key: string]: proto.base.IPlayerRankLevelReward};\r\n    /**设置段位奖励数据 */\r\n    static SetSectionAwardData(data: {[key: string]: proto.base.IPlayerRankLevelReward}): void {\r\n        this._sectionAward = data;\r\n    }\r\n    static GetSectionAwardData(id: number): proto.base.IPlayerRankLevelReward {\r\n        return this._sectionAward[id];\r\n    }\r\n    static ChangeSectionAwardData(data: proto.base.IPlayerRankLevelReward): void {\r\n        this._sectionAward[data.rankLevelId] = data;\r\n    }\r\n\r\n    /**当前赛季开始时间戳 */\r\n    static GetCurSeasonOpenTime(): number {\r\n        if (!this.CurSeasonData || this.CurSeasonData.currentSeasonId == 0) return 0;\r\n        let stdPVPSnatch: StdPVPSnatch = CfgMgr.GetStdPVPSnatch(this.CurSeasonData.currentSeasonId);\r\n        return DateUtils.DateStringToTime(stdPVPSnatch.MatchStartTime);\r\n    }\r\n\r\n    /**当前赛季结束时间戳 */\r\n    static GetCurSeasonEndTime(): number {\r\n        if (!this.CurSeasonData || this.CurSeasonData.currentSeasonId == 0) return 0;\r\n        let stdPVPSnatch: StdPVPSnatch = CfgMgr.GetStdPVPSnatch(this.CurSeasonData.currentSeasonId);\r\n        return DateUtils.DateStringToTime(stdPVPSnatch.MatchEddTime);\r\n    }\r\n\r\n    /**当前赛季过去时长 */\r\n    static GetCurSeasonPastTTime(): number {\r\n        if (!this.CurSeasonData) return 0;\r\n        let openTime: number = this.GetCurSeasonOpenTime();\r\n        return DateUtils.ServerTime - openTime;\r\n    }\r\n\r\n    /**星元对战数据 */\r\n    private static _satrElementData: proto.pb.PlayerPvpInfoPush;\r\n    static SetSatrElementData(data: proto.pb.PlayerPvpStarInfoPush): void {\r\n        this._satrElementData = data;\r\n    }\r\n    static get SatrElementData(): proto.pb.PlayerPvpStarInfoPush {\r\n        return this._satrElementData;\r\n    }\r\n\r\n    /**当前星元对战结束时间戳 */\r\n    static GetCurSatrElementEndTime(): number {\r\n        if (!this.SatrElementData || this.SatrElementData.currentSeasonId == 0) return 0;\r\n        let stdPVPSnatch: StdPVPBattle = CfgMgr.GetStdPVPBattle(this.SatrElementData.currentSeasonId);\r\n        return DateUtils.DateStringToTime(stdPVPSnatch.MatchEddTime);\r\n    }\r\n\r\n    //******************************************************邮件相关start************************************\r\n    /**当前页邮件列表 */\r\n    static mails: SPlayerMailData[] = [];\r\n    static mailmap: { [id: string]: SPlayerMailData } = {};\r\n    static mails_log: SPlayerMailData[] = [];\r\n    static mail_start_id: string[] = [];\r\n\r\n    static resetMail() {\r\n        this.mails = []\r\n        this.mailmap = {}\r\n    }\r\n\r\n    static getMailReward(data: proto.base.IThing[]): proto.base.IThing[] {\r\n        let datas: proto.base.IThing[] = []\r\n        for (let index = 0; index < data.length; index++) {\r\n            const element = data[index];\r\n            datas.push(element);\r\n        }\r\n        return datas;\r\n    }\r\n\r\n    /**\r\n     * 获取可赠送道具配置\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetCanSenditem(): ItemGive[] {\r\n        let item_list: ItemGive[] = CfgMgr.Get(\"ItemGive\");\r\n        let cfg = []\r\n        for (const iterator of item_list) {\r\n            if (this.GetItemCount(iterator.Items) > 0) {\r\n                cfg.push(iterator);\r\n            }\r\n        }\r\n        return cfg;\r\n    }\r\n    //******************************************************邮件相关end************************************\r\n    //******************************************************商店相关start************************************\r\n    private static shopMap: { [key: string]: proto.base.IShopIndexContent };\r\n    private static shopIndexDatas: proto.base.IShopIndexContent[];\r\n    /**\r\n     * 获取商店数据\r\n     */\r\n    static GetShopIndexs() {\r\n        return this.shopIndexDatas;\r\n    }\r\n    static GetShopByID(ID: number) {\r\n        for (let index of this.shopIndexDatas) {\r\n            if (index.shopIndexId == ID) return index;\r\n        }\r\n    }\r\n    static GetShopByIndexType(indexType: number) {\r\n        for (let index of this.shopIndexDatas) {\r\n            if (index.shopIndexType == indexType) return index;\r\n        }\r\n    }\r\n    static GetShopByShopType(shopType: number) {\r\n        for (let index of this.shopIndexDatas) {\r\n            if (index.shopType == shopType) return index;\r\n        }\r\n    }\r\n    /**\r\n     * 设置商店数据\r\n     * @param datas \r\n     */\r\n    static SetShopData(datas: proto.base.IShopIndexContent[]): void {\r\n        this.shopIndexDatas = datas;\r\n        if (!this.shopMap) this.shopMap = js.createMap();\r\n        for (const shopData of datas) {\r\n            this.shopMap[shopData.shopIndexId] = shopData;\r\n        }\r\n    }\r\n    static UpdateShopData(content: proto.base.IShopIndexContent) {\r\n        let index = this.shopIndexDatas.findIndex(value => value.shopIndexId == content.shopIndexId);\r\n        if (index != -1) {\r\n            this.shopIndexDatas[index] = content;\r\n        } else {\r\n            this.shopIndexDatas.push(content);\r\n        }\r\n    }\r\n    /**\r\n     * 获取商店数据\r\n     * @param shopId 商店id\r\n     * @returns \r\n     */\r\n    static GetShopData(shopId: number): proto.base.IShopIndexContent {\r\n        return this.shopMap ? this.shopMap[shopId] : null;\r\n    }\r\n    /**\r\n     * 获取通用商品数据\r\n     * @param shopId \r\n     * @param shopItemId \r\n     * @returns \r\n     */\r\n    static GetCommShopData(shopId: number): proto.base.IShopContent {\r\n        let shopData = this.GetShopData(shopId);\r\n        return shopData ? shopData.shop : null;\r\n    }\r\n    /**\r\n     * 获取抽奖商店数据\r\n     * @param shopId 商店id\r\n     * @returns \r\n     */\r\n    static GetShopLuckyData(shopId: number): proto.base.ILuckyContent {\r\n        let shopData = this.GetShopData(shopId);\r\n        return shopData?.lucky;\r\n    }\r\n    //***********************************************商店相关end**********************************************\r\n    //**************************************************交易所相关********************************\r\n    /**道具订单数据 */\r\n    static tradeViewData: proto.base.IMarketItemOrder[] = [];\r\n    static tradeCardViewData: proto.base.IMarketCardOrder[] = [];\r\n    static tradeMyOrderData:(proto.base.IMarketItemOrder | proto.base.IMarketCardOrder)[] = []\r\n    /**当前筛选的类型数据总量 */\r\n    static total: number = 0;\r\n    /**订单列表前两页的最后一个订单的id（用于支持后端从哪个id开始查询--即翻页）该数组长度为3\r\n     * eg:[\"2\", \"4\", \"5\"]\"5\"：代表当前页，\"4\": 代表当前页的前一页的最后一个订单id， \"2\"：代表当前页的前两页最后一个订单id\r\n     * 第一页时id默认空字符\"\"；\r\n      */\r\n    static startId: string[] = [];\r\n\r\n    static tradeAllBalances = {\r\n        jy: 0,\r\n        hc: 0,\r\n        score: 0,\r\n        serverid: \"\",\r\n        unionid: \"\",\r\n    }\r\n\r\n    /**交易所根据页签获取资源 */\r\n    static GetResBySubType(subType: number) {\r\n        let datas: proto.base.IThing[] = [];\r\n        if (subType == 0) {\r\n            //道具\r\n            for (const key in this.items) {\r\n                if (Object.hasOwnProperty.call(this.items, key)) {\r\n                    const element = this.items[key];\r\n                    let std = CfgMgr.Getitem(parseInt(key));\r\n                    if (std) {\r\n                        let data: proto.base.IThing = {\r\n                            type: ThingTypeName.Item,\r\n                            item: { id: parseInt(key), count: element }\r\n                        }\r\n                        datas.push(data)\r\n                    }\r\n                }\r\n            }\r\n        } else if (subType == 1) {\r\n            //卡牌\r\n            for (const iterator of this.cards) {\r\n                let card = CfgMgr.GetCard(iterator.cardId);\r\n                if (card) {\r\n                    let data: proto.base.IThing = {\r\n                        type: ThingTypeName.BattleCard,\r\n                        card: iterator\r\n                    }\r\n                    datas.push(data)\r\n                }\r\n            }\r\n        }\r\n        return datas;\r\n    }\r\n\r\n    //**************************************************交易所相关end********************************\r\n    //**********************************************卡牌列表相关start**********************************************\r\n\r\n    private static GetCardByCfg(max: number, card_id_list: number[], select_card_cfg:StdCard) {\r\n        let card_group = [];\r\n        let limit = 0;\r\n        if (select_card_cfg && card_id_list.indexOf(select_card_cfg.Classid) != -1) {\r\n            let index = this.cards.findIndex(card => card.cardId == select_card_cfg.ID)\r\n            if (index != -1) {\r\n                card_group.push(this.cards[index])\r\n                limit += 1;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < card_id_list.length; i++) {\r\n            const element = card_id_list[i];\r\n            //同类型的卡跳过\r\n            if (select_card_cfg && element == select_card_cfg.Classid) {\r\n                continue;\r\n            }\r\n            //是否\r\n            if (limit >= max) {\r\n                break;\r\n            } else {\r\n                //获取该类型的所有卡牌\r\n                let card_cfg = CfgMgr.GetCardListByClassID(element)\r\n                //取出最高等级的卡\r\n                let quality = 0\r\n                let card = null;\r\n                for (let index = 0; index < card_cfg.length; index++) {\r\n                    const card_element = card_cfg[index];\r\n                    //不开放的卡牌跳过\r\n                    if (card_element.IsOpen != 1) {\r\n                        continue;\r\n                    }\r\n\r\n                    for (const iterator of this.cards) {\r\n                        let cfg = CfgMgr.GetCard(iterator.cardId)\r\n                        if(cfg.Classid == element && iterator.quality > quality){                    \r\n                            quality = iterator.quality;\r\n                            card = iterator;\r\n                        }\r\n                    }  \r\n                }\r\n\r\n                if (card) {\r\n                    card_group.push(card)\r\n                    limit += 1;\r\n                }\r\n            }\r\n        }\r\n        // console.log(card_group)\r\n        return card_group\r\n    }\r\n\r\n    /**通过配置生成卡组 */\r\n    static GetGenerateCardGroup(card_id) {\r\n        let card_group = [];\r\n        let card_cfg = null;\r\n        if(card_id){\r\n            card_cfg = CfgMgr.GetCard(card_id)\r\n            if (card_cfg.IsOpen != 1) return card_group;\r\n        }\r\n        let cfg_list: StdGenerateCardGroup[] = CfgMgr.Get(\"Generate_CardGroup\");\r\n        let cfg:StdGenerateCardGroup = null;\r\n        if(card_cfg){\r\n            for (const iterator of cfg_list) {\r\n                if (iterator.Classid.indexOf(card_cfg.Classid) != -1) {    \r\n                    cfg = iterator;\r\n                    break;\r\n                }\r\n            }\r\n        }else{\r\n            let id = CfgMgr.GetLogic(\"CardGroup\").GenerateID\r\n            for (const iterator of cfg_list) {\r\n                if (iterator.GenerateID == id) {    \r\n                    cfg = iterator;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if(cfg){\r\n            card_group.push(...this.GetCardByCfg(cfg.CardNumber, cfg.Classid1, card_cfg))   \r\n            card_group.push(...this.GetCardByCfg(cfg.CardNumber1, cfg.Classid2, card_cfg))\r\n            card_group.push(...this.GetCardByCfg(cfg.CardNumber2, cfg.Classid3, card_cfg))\r\n            card_group.push(...this.GetCardByCfg(cfg.CardNumber3, cfg.Classid4, card_cfg))\r\n            card_group.push(...this.GetCardByCfg(cfg.CardNumber4, cfg.Classid5, card_cfg))\r\n            card_group.push(...this.GetCardByCfg(cfg.CardNumber5, cfg.Classid6, card_cfg))\r\n        }\r\n                \r\n        \r\n        return card_group;\r\n    }\r\n\r\n    /**通过id获取同类型的变体 */\r\n    static GetCardVariantCfg(id: number) {\r\n        let cfg = CfgMgr.GetCard(id);\r\n        let list = [];\r\n        for (const iterator of CfgMgr.CardList) {\r\n            let index = this.cards.findIndex(item => item.cardId == iterator.ID);\r\n            if (iterator.Classid == cfg.Classid) {\r\n                if (index != -1) {\r\n                    list.push(this.cards[index])\r\n                } else {\r\n                    let card_data: proto.base.IBattleCard = new proto.base.BattleCard();\r\n                    card_data.cardId = iterator.ID;\r\n                    card_data.createdAt = \"\";\r\n                    card_data.id = \"\";\r\n                    card_data.exp = 0;\r\n                    card_data.level = 1;\r\n                    card_data.nftLockExpires = false;\r\n                    card_data.ownershipType = 0;\r\n                    card_data.quality = 1;\r\n                    card_data.tradeCd = 0;\r\n                    card_data.updateId = 0;\r\n                    list.push(card_data);\r\n                }\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    //------------------------------------------------任务相关-----------------------------------\r\n    static change_task_list = [];\r\n    static taskRefreshCount = 0;//手动刷新的次数\r\n    /**获取主界面展示的任务列表 */\r\n    static GetShowMianTask(){\r\n        let task_list:proto.base.IPlayerDataTask[] = []\r\n        let tyroTaskList = this.filtrTyroTask();\r\n        let dayTaskList = this.filtrDayTask();\r\n        let seasonTaskList = this.filtrSeasonTask();\r\n        let max = 3\r\n        if(tyroTaskList.length > 0){\r\n            max = max - tyroTaskList.length\r\n        }\r\n        if( max > 0 && dayTaskList.length > 0){\r\n            max = max - tyroTaskList.length\r\n        }\r\n        let season_num = max > 0 ? max : 1;\r\n        \r\n        //加入赛季任务\r\n        for (let index = 0; index < seasonTaskList.length; index++) {\r\n            const element = seasonTaskList[index];\r\n            if(element){\r\n                let task_cfg = CfgMgr.GetTaskByData(element);\r\n                let task_state = this.GetTaskState(element);\r\n                let seasontime = this.GetCurSeasonPastTTime();\r\n                let open_time\r\n                for (let index = 0; index < task_cfg.ConditionId.length; index++) {\r\n                    const element = task_cfg.ConditionId[index];\r\n                    if(element == 2){\r\n                        open_time = task_cfg.ConditionValue[index] - 1;\r\n                    }\r\n                }\r\n                let is_lock = open_time * 86400 - seasontime  <= 0\r\n                if(task_cfg.TaskType != STaskType.seasonChapter && task_state != 1 && is_lock && task_cfg.isMainShow == 1){\r\n                    if(season_num <= task_list.length){\r\n                        break;\r\n                    }\r\n                    task_list.push(element)\r\n                }\r\n            }\r\n        }\r\n\r\n        let tyro_num = 3 - task_list.length;\r\n        //加入新手任务\r\n        let tyro_add = 0;\r\n        for (let index = 0; index < tyroTaskList.length; index++) {\r\n            const element = tyroTaskList[index];\r\n            if(element){\r\n                let task_cfg = CfgMgr.GetTaskByData(element);\r\n                let task_state = this.GetTaskState(element);\r\n                if(task_state != 1 && task_cfg.isMainShow == 1){\r\n                    task_list.unshift(element)\r\n                    tyro_add++\r\n                    if(tyro_add >= tyro_num){\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //加入日常任务\r\n        if(task_list.length < 3){\r\n            let day_num = 3 - task_list.length;\r\n            for (let index = 0; index < day_num; index++) {\r\n                const element = dayTaskList[index];       \r\n                if(element){\r\n                    let task_cfg = CfgMgr.GetTaskByData(element);\r\n                    let task_state = this.GetTaskState(element);\r\n                    if(task_state != 1 && task_cfg.isMainShow == 1){\r\n                        task_list.unshift(element)\r\n                        if(task_list.length >= 3){\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return task_list\r\n    }\r\n    static filtrTyroTask(){\r\n       //获取新手任务\r\n       let tyroTaskList:proto.base.IPlayerDataTask[] = []\r\n       let cfg_tyro = CfgMgr.GetTaskByShowType(2);\r\n       //先遍历出要展示的数据\r\n       for (const iterator of cfg_tyro) {\r\n           //同组只展示一个\r\n           let index = tyroTaskList.findIndex(data=> data && data.id == iterator.TopTask)\r\n           if(index == -1){\r\n               let data:proto.base.IPlayerDataTask = {id:iterator.TopTask, start:null, end:null, value:0}\r\n               tyroTaskList.push(data)\r\n           }\r\n       }\r\n\r\n       //替换数据\r\n       for (let _iterator of tyroTaskList) {\r\n           let taskData = this.player.tasks[_iterator.id];\r\n           if(taskData){\r\n               _iterator.id = taskData.id ? taskData.id : null;\r\n               _iterator.start = taskData.start ? taskData.start : null;\r\n               _iterator.end = taskData.end ? taskData.end : null;\r\n               _iterator.value = taskData.value ? taskData.value : null;\r\n           }\r\n       }\r\n       this.dataSort(tyroTaskList);\r\n       this.deleTask(tyroTaskList);\r\n       return tyroTaskList;\r\n    }\r\n\r\n    //筛选每日任务 \r\n    static filtrDayTask(){\r\n        let taskData:proto.base.IPlayerDataTask;\r\n        let stdTask:StdTask;\r\n        let dayTaskList:proto.base.IPlayerDataTask[] = [];  \r\n        for (let key in PlayerData.player.tasks) {\r\n            taskData = PlayerData.player.tasks[key];\r\n            stdTask = CfgMgr.GetTaskByData(taskData);\r\n            if (stdTask) {\r\n                //只展示多少条任务不做状态处理\r\n                if(stdTask.TaskType == STaskType.dayTask){      \r\n                    dayTaskList.push(taskData);\r\n                }\r\n            }\r\n        }\r\n        this.dataSort(dayTaskList);\r\n        this.deleTask(dayTaskList);\r\n        return dayTaskList;\r\n    }\r\n\r\n    //筛选赛季任务\r\n    static filtrSeasonTask(){\r\n\r\n        let seasonTaskList:proto.base.IPlayerDataTask[] = []\r\n        let cfg_season = CfgMgr.GetTaskByShowType(3);\r\n        //先遍历出要展示的数据\r\n        for (const iterator of cfg_season) {\r\n            //同组只展示一个\r\n            let index = seasonTaskList.findIndex(data=> data && data.id == iterator.TopTask)\r\n            if(index == -1){\r\n                let data:proto.base.IPlayerDataTask = {id:iterator.TopTask, start:null, end:null, value:0}\r\n                seasonTaskList.push(data)\r\n            }\r\n        }\r\n \r\n        //替换数据\r\n        for (let _iterator of seasonTaskList) {\r\n            let taskData = this.player.tasks[_iterator.id];\r\n            if(taskData){\r\n                _iterator.id = taskData.id ? taskData.id : null;\r\n                _iterator.start = taskData.start ? taskData.start : null;\r\n                _iterator.end = taskData.end ? taskData.end : null;\r\n                _iterator.value = taskData.value ? taskData.value : null;\r\n            }\r\n        }\r\n        this.dataSort(seasonTaskList);\r\n        return seasonTaskList;\r\n    }\r\n\r\n    static dataSort(data:proto.base.IPlayerDataTask[]){\r\n        data.sort((a,b)=>{\r\n            let a_state = this.GetTaskState(a);\r\n            let b_state = this.GetTaskState(b);\r\n            return a_state - b_state\r\n        })\r\n    }\r\n\r\n    static deleTask(data:proto.base.IPlayerDataTask[]){\r\n         //数据排序 并 删除已完成的\r\n         for (let index = data.length - 1; index >= 0; index--) {\r\n            const element = data[index];\r\n            if(element.end){\r\n                let is_last = CfgMgr.GetTaskGroupLast(element)\r\n                if(is_last){\r\n                    data.splice(index, 1)\r\n                }\r\n            }  \r\n        }\r\n    }\r\n\r\n    /**获取当前任务的状态 1 已领取 2可领取 3不可领取*/\r\n    static GetTaskState(data:proto.base.IPlayerDataTask){\r\n        let state = 3;\r\n        if(data.end && data.start && data.end == data.start){\r\n            state = 1;\r\n            let is_end = CfgMgr.GetTaskGroupLast(data);\r\n            if(!is_end){\r\n                let cfg = CfgMgr.GetTaskByData(data)    \r\n                state = data.value >= cfg.CompletionNum ? 2 : 3\r\n            }\r\n        }else{\r\n            if((!data.end && !data.start) || (data.end == 0 && data.start == 0) || ((data.start && data.start == 0) && !data.end)){\r\n                state = 3;\r\n            }else if(data.end != data.start){\r\n                state = 2     \r\n            }\r\n        }\r\n        return state;\r\n    }\r\n\r\n    /**获取赛季所有章节 */\r\n    static GetSeasonTaskAllChapter() {\r\n        let stdTask: StdTask[] = CfgMgr.Get(\"task\");\r\n        let chapterList: StdTaskSeason[] = []\r\n        for (const iterator of stdTask) {\r\n            if (iterator.TaskType == STaskType.season) {\r\n                let index = chapterList.findIndex(data => iterator.TaskTypeData && data.ID == iterator.TaskTypeData[0]);\r\n                if (index == -1) {\r\n                    let taskSeason = CfgMgr.GetTaskChapterCfg(iterator.TaskTypeData[0])\r\n                    if(this.CurSeasonData && taskSeason.SeasonID == this.CurSeasonData.currentSeasonId){\r\n                        chapterList.push(CfgMgr.GetTaskChapterCfg(iterator.TaskTypeData[0]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return chapterList\r\n    }\r\n\r\n    /**获取任务奖励 */\r\n    static getTaskRewardThings(id: number): proto.base.IThing[] {\r\n        let stdTask = CfgMgr.GetTaskById(id);\r\n        let things: proto.base.IThing[] = [];\r\n        if (stdTask) {\r\n            for (let index = 0; index < stdTask.RewardType.length; index++) {\r\n                let thing: proto.base.IThing = {};\r\n                thing.type = ThingType[stdTask.RewardType[0]];\r\n                switch (stdTask.RewardType[0]) {\r\n                    case ThingType.item:\r\n                        let item: proto.base.IThingItem = proto.base.ThingItem.create();\r\n                        item.id = stdTask.RewardID[index];\r\n                        item.count = stdTask.RewardNumber[index];\r\n                        thing.item = item;\r\n                        things.push(thing);\r\n                        break;\r\n                    case ThingType.battlecard:\r\n                        let stdCardDeliver: StdBattleCardDelivery = CfgMgr.GetBattleCardDeliver(stdTask.RewardID[index]);\r\n                        if (stdCardDeliver) {\r\n                            let cardData: proto.base.IBattleCard = this.CreateCardData(stdCardDeliver.CardID, stdCardDeliver.CardQuality);\r\n                            thing.card = cardData;\r\n                            things.push(thing);\r\n                        }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return things;\r\n    }\r\n\r\n    //************************************************权益相关****************************************************** */\r\n    static equities:{[k:number]:number} = {};\r\n    static benefit_cards:{[k:number]:number} = {};\r\n\r\n    /**获取玩家拥有的权益卡列表 */\r\n    static getPlayerHasEuqityList(){\r\n        let equity_cfg:StdEquityCard[] = CfgMgr.Get(\"EquityCard\");\r\n        let open_lsit:StdEquityCard[] = [];    \r\n        for (let index = 0; index < equity_cfg.length; index++) {\r\n            const element = equity_cfg[index];\r\n            if(this.equities[element.EquityCardID] && this.equities[element.EquityCardID] > DateUtils.ServerTime){\r\n                open_lsit.push(element)\r\n            }\r\n        }\r\n        return open_lsit;\r\n    }\r\n\r\n\r\n   \r\n}"]}