{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/battle/opOutput/Out_NewRound_2d.ts"],"names":["Out_NewRound_2d","BattleBaseComp","battleDataMgr","battleLogicMgr","start","initRoomData","initPlaterCard","initTerrainData","initPlaterPower","initHandCardData","setTimeout","exit","reset","maxRound","data","gamePlayData","levelData","roundMax","finalValue","roundLab","string","currentRound","playerData","round","curRound","key","players","isPlayerA","energyLabA","roundEnergy","toString","energyLabB","playerMap","terrainArea","terrainAreaList","cardGrild","cardData","terrainData","terraninAreaListA","terraninAreaListB","index","length","terrain","setData","j","gridList","setTerrainInstId","instId","cards","terrainGrildList","playerId","terrainGrild","updatePower","power","terrainDatas","terrains","getPlayerId","handCardList","handGridList","cardGrid","cardGridDatas","handCards"],"mappings":"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","sourcesContent":["import { base } from \"../../../net/proto/proto\";\r\nimport { BattleBaseComp } from \"../BattleBaseComp\";\r\nimport { BattleCardGrid } from \"../BattleCardGrid\";\r\nimport { battleDataMgr } from \"../BattleDataMgr\";\r\nimport { battleLogicMgr } from \"../BattleLogicMgr\";\r\nimport { BattleTerrainArea } from \"../BattleTerrainArea\";\r\nimport { BattleTerrainGrid } from \"../BattleTerrainGrid\";\r\n/**\r\n * 新回合\r\n */\r\nexport class Out_NewRound_2d extends BattleBaseComp<base.BattleRoomOpOutput_NewRound> {\r\n    \r\n    protected start(): void {\r\n        this.initRoomData();\r\n        this.initPlaterCard();\r\n        this.initTerrainData();\r\n        this.initPlaterPower();\r\n        this.initHandCardData();\r\n        setTimeout(()=>{\r\n            this.exit();\r\n        }, 2);\r\n    }\r\n\r\n    protected reset(): void {\r\n       \r\n    }\r\n\r\n    //初始化房间数据\r\n    private initRoomData(): void {\r\n        let maxRound: number = this.data.gamePlayData.levelData.roundMax.finalValue;\r\n        battleLogicMgr.roundLab.string = `${this.data.gamePlayData.currentRound} / ${maxRound}`;\r\n        let playerData: base.IBattleRoomPlayerData;\r\n        let round: number = battleDataMgr.curRound;\r\n        for (let key in this.data.gamePlayData.players) {\r\n            playerData = this.data.gamePlayData.players[key];\r\n            if (battleDataMgr.isPlayerA(key)) {\r\n                battleLogicMgr.energyLabA.string = playerData.roundEnergy[round - 1].finalValue.toString();\r\n            } else {\r\n                battleLogicMgr.energyLabB.string = playerData.roundEnergy[round - 1].finalValue.toString();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 初始化玩家卡牌数据\r\n     */\r\n    private initPlaterCard(): void {\r\n        let playerMap: { [k: string]: base.IBattleRoomPlayerData } = this.data.gamePlayData.players;\r\n        let playerData: base.IBattleRoomPlayerData;\r\n        let terrainArea: BattleTerrainArea;\r\n        let terrainAreaList: BattleTerrainArea[];\r\n        let cardGrild: BattleCardGrid;\r\n        let cardData: base.IBattleRoomCardData;\r\n        let terrainData: base.IBattleRoomTerrainPlayerData;\r\n        for (let key in playerMap) {\r\n            playerData = playerMap[key];\r\n            terrainAreaList = battleDataMgr.isPlayerA(key) ? battleLogicMgr.terraninAreaListA : battleLogicMgr.terraninAreaListB;\r\n            for (let index = 0; index < terrainAreaList.length; index++) {\r\n                terrainArea = terrainAreaList[index];\r\n                terrainData = playerData.terrain[index];\r\n                terrainArea.setData(terrainData);\r\n                for (let j = 0; j < terrainArea.gridList.length; j++) {\r\n                    cardGrild = terrainArea.gridList[j];\r\n                    cardGrild.setTerrainInstId(terrainData.instId);\r\n                    cardData = terrainData && terrainData.cards[j];\r\n                    cardGrild.setData(cardData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private initPlaterPower(): void {\r\n        let playerMap: { [k: string]: base.IBattleRoomPlayerData } = this.data.gamePlayData.players;\r\n        let terrainGrildList: BattleTerrainGrid[] = battleLogicMgr.terrainGrildList;\r\n        let playerData: base.IBattleRoomPlayerData;\r\n        let isPlayerA: boolean;\r\n        for (let key in playerMap) {\r\n            playerData = playerMap[key];\r\n            isPlayerA = battleDataMgr.isPlayerA(playerData.playerId);\r\n            for (let terrainGrild of terrainGrildList) {\r\n                for (let terrainData of playerData.terrain) {\r\n                    if (terrainGrild.terrainData.instId == terrainData.instId) {\r\n                        terrainGrild.updatePower(terrainData.power.finalValue, isPlayerA);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //初始话地形数据\r\n    private initTerrainData(): void {\r\n        let terrainDatas: base.IBattleRoomTerrainData[] = this.data.gamePlayData.terrains;\r\n        let terrainGrildList: BattleTerrainGrid[] = battleLogicMgr.terrainGrildList;\r\n        let terrainGrild: BattleTerrainGrid;\r\n        let terrainData: base.IBattleRoomTerrainData;\r\n        for (let index = 0; index < terrainGrildList.length; index++) {\r\n            terrainGrild = terrainGrildList[index];\r\n            terrainData = terrainDatas && index < terrainDatas.length ? terrainDatas[index] : null;\r\n            terrainGrild.setData(terrainData);\r\n        }\r\n    }\r\n\r\n    //初始化手卡数据\r\n    private initHandCardData(): void {\r\n        let playerId: string = battleDataMgr.getPlayerId();\r\n        let handCardList: BattleCardGrid[] = battleLogicMgr.handGridList;\r\n        let cardGrid: BattleCardGrid;\r\n        let cardGridDatas: base.IBattleRoomCardData[] = this.data.gamePlayData.players[playerId].handCards;\r\n        let cardData: base.IBattleRoomCardData;\r\n        for (let index = 0; index < handCardList.length; index++) {\r\n            cardGrid = handCardList[index];\r\n            cardData = cardGridDatas && index < cardGridDatas.length ? cardGridDatas[index] : null;\r\n            cardGrid.setData(cardData);\r\n        }\r\n    }\r\n\r\n}"]}