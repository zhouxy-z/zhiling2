{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/vs/VSModelPanel.ts"],"names":["VSModelPanel","path","Sprite","SpriteFrame","VList","Panel","PlayerData","MsgPanel","BeforeGameUtils","VSStarElementPage","VSSeasonPage","proto","ResMgr","prefab","vsTabList","tabDatas","type","base","BattleMode","BattleModeStar","name","BattleModeRank","pageMap","onLoad","find","updateCell","updateCellTab","bind","selectCondCheck","selectCondCheckTab","selectCell","selectCellTab","cellCount","length","starElementPage","addComponent","seasonPage","toHashMapObj","CloseBy","flush","selectType","selectIndex","tabData","index","tabCondCheck","onShow","onHide","cell","cellInfo","tabInfo","getChildByPath","active","isSelect","bg","getComponent","selectImg","getChildByName","LoadResAbSub","join","res","spriteFrame","lastCell","lastInfo","selectTab","showTips","result","SatrElementData","currentSeasonId","Show","CurSeasonData","comp","key","Number","Hide"],"mappings":"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","sourcesContent":["import { Label, Node, path, Sprite, SpriteFrame } from \"cc\";\r\nimport { CellInfo, VList } from \"../../component/VList\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { BeforeGameUtils } from \"../../utils/BeforeGameUtils\";\r\nimport { VSStarElementPage } from \"./VSStarElementPage\";\r\nimport { VSSeasonPage } from \"./VSSeasonPage\";\r\nimport proto from \"../../net/Protocol\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\n\r\n\r\ninterface ITabInfo {\r\n    type: proto.base.BattleMode,\r\n    name: string,\r\n}\r\n\r\nexport class VSModelPanel extends Panel {\r\n    protected prefab: string = \"prefabs/vs/VSModelPanel\";\r\n    private vsTabList: VList;\r\n    private tabDatas: ITabInfo[] = [\r\n        {\r\n            type: proto.base.BattleMode.BattleModeStar,\r\n            name: \"星元对战\",\r\n        },\r\n        {\r\n            type: proto.base.BattleMode.BattleModeRank,\r\n            name: \"排位赛\",\r\n        }\r\n    ];\r\n    private pageMap: { [key: number]: any };\r\n    protected onLoad() {\r\n        this.vsTabList = this.find(\"vsTabList\", VList);\r\n        this.vsTabList.updateCell = this.updateCellTab.bind(this);\r\n        this.vsTabList.selectCondCheck = this.selectCondCheckTab.bind(this);\r\n        this.vsTabList.selectCell = this.selectCellTab.bind(this);\r\n        this.vsTabList.cellCount = this.tabDatas.length;\r\n        let starElementPage: VSStarElementPage =  this.find(\"starElementPage\").addComponent(VSStarElementPage);\r\n        let seasonPage: VSSeasonPage = this.find(\"seasonPage\").addComponent(VSSeasonPage);\r\n\r\n        this.pageMap = BeforeGameUtils.toHashMapObj(\r\n            proto.base.BattleMode.BattleModeStar, starElementPage,//星元对战\r\n            proto.base.BattleMode.BattleModeRank, seasonPage,//排位赛\r\n        );\r\n        this.CloseBy(\"closeBtn\");\r\n    }\r\n\r\n    public flush(selectType: proto.base.BattleMode = proto.base.BattleMode.BattleModeStar): void {\r\n        let selectIndex: number = 0;\r\n        let tabData: ITabInfo;\r\n        for (let index = 0; index < this.tabDatas.length; index++) {\r\n            tabData = this.tabDatas[index];\r\n            if (tabData.type == selectType && this.tabCondCheck(index)) {\r\n                selectIndex = index;\r\n                break;\r\n            }\r\n        }\r\n        this.vsTabList.selectIndex(selectIndex);\r\n    }\r\n\r\n    protected onShow(): void {\r\n        \r\n    }\r\n\r\n    protected onHide(): void {\r\n       \r\n    }\r\n\r\n    private updateCellTab(cell: Node, cellInfo: CellInfo): void {\r\n        let tabInfo: ITabInfo = this.tabDatas[cellInfo.index];\r\n        cell.getChildByPath(\"select\").active = cellInfo.isSelect;\r\n        let bg: Sprite = cell.getChildByPath(\"bg\").getComponent(Sprite);\r\n        let selectImg: Sprite = cell.getChildByName(\"select\").getComponent(Sprite);\r\n        ResMgr.LoadResAbSub(path.join(\"sheets/vs\", \"vs_mode_tab_def_\" + tabInfo.type, \"spriteFrame\"), SpriteFrame, res => {\r\n            bg.spriteFrame =  res;\r\n        });\r\n        ResMgr.LoadResAbSub(path.join(\"sheets/vs\", \"vs_mode_tab_select_\" + tabInfo.type, \"spriteFrame\"), SpriteFrame, res => {\r\n            selectImg.spriteFrame =  res;\r\n        });\r\n    }\r\n\r\n    private selectCellTab(cell: Node, cellInfo: CellInfo, lastCell?: Node, lastInfo?: CellInfo): void {\r\n        if (cell) {\r\n            cell.getChildByPath(\"select\").active = cellInfo.isSelect;\r\n        }\r\n        if (lastCell && lastInfo) {\r\n            lastCell.getChildByPath(\"select\").active = lastInfo.isSelect;\r\n        } \r\n        this.selectTab(cellInfo.index);\r\n    }\r\n\r\n    private selectCondCheckTab(cell: Node, cellInfo: CellInfo): boolean {\r\n        return this.tabCondCheck(cellInfo.index, true);\r\n    }\r\n\r\n    private tabCondCheck(index: number, showTips: boolean = false): boolean {\r\n        let tabInfo: ITabInfo = this.tabDatas[index];\r\n        let result: boolean = false;\r\n        switch(tabInfo.type) {\r\n            case proto.base.BattleMode.BattleModeStar:\r\n                result = PlayerData.SatrElementData && PlayerData.SatrElementData.currentSeasonId != 0;\r\n                if (showTips && !result) MsgPanel.Show(\"暂时没有星元对战进行中\");\r\n                break;\r\n            case proto.base.BattleMode.BattleModeRank:\r\n                result = PlayerData.CurSeasonData && PlayerData.CurSeasonData.currentSeasonId != 0;\r\n                if (showTips && !result) MsgPanel.Show(\"暂时没有赛季进行中\");\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private selectTab(index: number): void {\r\n        let tabInfo: ITabInfo = this.tabDatas[index];\r\n        let comp: VSStarElementPage | VSSeasonPage;\r\n        for (let key in this.pageMap) {\r\n            comp = this.pageMap[key];\r\n            if (Number(key) == tabInfo.type) {\r\n                comp.Show();\r\n            } else {\r\n                comp.Hide();\r\n            }\r\n        }\r\n    }\r\n}"]}