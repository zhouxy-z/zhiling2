{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/net/Session.ts"],"names":["Session","Node","Req","Tips","starx","instance","_starx","window","addListener","type","cb","thisObj","objs","listens","obj","off","handle","on","bind","push","removeListener","i","length","splice","route","dispatcher","ioError","hasConnect","emit","onClose","un_receive_msg","msgList","console","warn","Build","host","port","api","device_id","central_code","verification","success","fail","p","Promise","resolve","reject","self","Protocol","Message","init","path","encode","reqId","msg","TYPE_REQUEST","TYPE_NOTIFY","func","log","finish","Uint8Array","strdecode","buffer","Send","data","Show","notify","trace","bytes","hasEventListener","hasListeners","request","sendAsync","error"],"mappings":"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","sourcesContent":["import { Node, game } from 'cc';\r\nimport { Req, Ret } from './Protocol';\r\nimport { Tips } from '../module/common/Tips';\r\nimport { DEV } from 'cc/env';\r\nimport { Utils } from '../utils/Utils';\r\nexport class Session {\r\n    private static instance: any;\r\n    private static hasConnect = false;\r\n    private static get starx() {\r\n        if (!this.instance) {\r\n            let _starx = window['starx'];\r\n            this.instance = _starx;\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private static listens = {};\r\n    protected static addListener(type: string, cb: Function, thisObj?: any) {\r\n        let objs = this.listens[type] || [];\r\n        this.listens[type] = objs;\r\n        for (let obj of objs) {\r\n            if (obj.cb == cb && (!thisObj || obj.thisObj == thisObj)) {\r\n                this.starx.off(type, obj.handle);\r\n                this.starx.on(type, cb.bind(thisObj));\r\n                obj.cb = cb;\r\n                obj.thisObj = thisObj;\r\n                return;\r\n            }\r\n        }\r\n        let obj = { cb: cb, thisObj: thisObj, handle: cb.bind(thisObj) };\r\n        objs.push(obj);\r\n        this.starx.on(type, obj.handle);\r\n    }\r\n    protected static removeListener(type: string, cb: Function, thisObj?: any) {\r\n        let objs: any[] = this.listens[type] || [];\r\n        this.listens[type] = objs;\r\n        for (let i = 0; i < objs.length; i++) {\r\n            let obj = objs[i];\r\n            if (obj.cb == cb && (!thisObj || obj.thisObj == thisObj)) {\r\n                this.starx.off(type, obj.handle);\r\n                objs.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static dispatcher: Node = new Node();\r\n    static on(route: string, cb: Function, thisObj?: any) {\r\n        this.dispatcher.on(route, cb, thisObj);\r\n        this.addListener(route, cb, thisObj);\r\n    }\r\n    static off(route: string, cb: Function, thisObj?: any) {\r\n        this.dispatcher.off(route, cb, thisObj);\r\n        this.removeListener(route, cb, thisObj);\r\n    }\r\n\r\n    private static ioError(cb?: Function) {\r\n        Session.hasConnect = false;\r\n        Session.dispatcher.emit(\"io-error\");\r\n        if (typeof (cb) == \"function\") cb();\r\n    }\r\n    private static onClose(cb?: Function) {\r\n        Session.hasConnect = false;\r\n        Session.dispatcher.emit(\"close\");\r\n        if (typeof (cb) == \"function\") cb();\r\n    }\r\n    private static un_receive_msg(route: string) {\r\n        if (this.listens[route]?.length || this.msgList[route]) {\r\n\r\n        } else {\r\n            console.warn(route + \"消息未处理！\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建会话连接\r\n     * @param host \r\n     * @param port \r\n     * @param api \r\n     * @param central_code \r\n     * @param verification \r\n     * @param protocols \r\n     */\r\n    static async Build(host: string, port: number, api: string, device_id: string, central_code: string, verification: string) {\r\n        let success: Function;\r\n        let fail: Function;\r\n        let p = new Promise((resolve, reject) => {\r\n            success = resolve;\r\n            fail = reject;\r\n        });\r\n        let self = this;\r\n        let Protocol = window['Protocol'];\r\n        let Message = Protocol.Message;\r\n        let starx = this.starx;\r\n        starx.off('io-error', this.ioError);\r\n        starx.on('io-error', this.ioError);\r\n        starx.off('close', this.onClose);\r\n        starx.on('close', this.onClose);\r\n        starx.on('un_receive_msg', this.un_receive_msg.bind(this));\r\n        starx.init({\r\n            host: host, port: port, path: api, 'user': { device_id: device_id, central_code: central_code, verification: verification },\r\n            encode: function (reqId, route, msg) {\r\n                var type = reqId ? Message.TYPE_REQUEST : Message.TYPE_NOTIFY;\r\n                let func = Req[route]?.encode;\r\n                if (route != \"battle.protocol.battleroomping\" && route != \"gate.protocol.servertime\") console.log(\">>>\", route, msg);\r\n                if (typeof (func) == \"function\") {\r\n                    msg = func(msg).finish();\r\n                } else {\r\n                    msg = new Uint8Array(0);\r\n                }\r\n                return Message.encode(reqId, type, 0, route, msg);\r\n            },\r\n            strdecode: function (buffer) {\r\n                return buffer;\r\n            }\r\n        }, function () {\r\n            self.hasConnect = true;\r\n            console.log(\"socket connect success!\");\r\n            success();\r\n        });\r\n        return p;\r\n    }\r\n\r\n    private static msgList: { [route: string]: Function } = {};\r\n\r\n    /**\r\n     * 发送消息 [注:如果带回调函数则在数据返回时只会触发此回调而不会再派发消息事件出去]\r\n     * @param route \r\n     * @param data \r\n     * @param cb \r\n     * @returns \r\n     */\r\n    static Send(route: string, data?: any, cb?: Function) {\r\n        if (!this.hasConnect) {\r\n            // console.error(\"连接已断开！\");\r\n            Tips.Show(\"连接已断开！\", () => {\r\n                //game.restart();\r\n            });\r\n            return;\r\n        }\r\n        let notify = false;\r\n        if (!data) {\r\n            notify = true;\r\n        } else {\r\n            if (typeof data == \"function\") {\r\n                console.trace(\"请给此协议装配数据!\");\r\n                return;\r\n            }\r\n        }\r\n        if (!cb) {\r\n            cb = this.msgList[route];\r\n            if (!cb) {\r\n                let dispatcher = this.dispatcher;\r\n                cb = function (bytes) {\r\n                    if (dispatcher.hasEventListener(route)) {\r\n                        // try {\r\n                            dispatcher.emit(route, bytes);\r\n                        // } catch (e) {\r\n                        //     console.error(e);\r\n                        //     if (DEV) {\r\n                        //         Utils.SaveFile(bytes.toString(), \"bytes.txt\");\r\n                        //         Tips.Show(\"异常：\" + route);\r\n                        //     }\r\n                        // }\r\n                    } else if (!Session.instance.hasListeners(route))\r\n                        console.warn(route + \"消息未处理！\");\r\n                }\r\n                this.msgList[route] = cb;\r\n            }\r\n        }\r\n        if (notify) {\r\n            this.starx.request(route, cb);\r\n        } else {\r\n            this.starx.request(route, data, cb);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 异步发送消息 [注:异步回调会先派发消息事件再触发异步Promise.resolve]\r\n     * @param route \r\n     * @param data \r\n     * @returns \r\n     */\r\n    static async sendAsync(route: string, data?: any) {\r\n        if (!this.hasConnect) {\r\n            console.error(\"连接已断开！\")\r\n            return;\r\n        }\r\n        let notify = false;\r\n        if (!data) {\r\n            notify = true;\r\n        } else {\r\n            if (typeof data == \"function\") {\r\n                console.trace(\"请给此协议装配数据!\");\r\n                return;\r\n            }\r\n        }\r\n        let starx = this.starx;\r\n        let cb = this.msgList[route];\r\n        if (!cb) {\r\n            let dispatcher = this.dispatcher;\r\n            cb = function (bytes) {\r\n                if (dispatcher.hasEventListener(route))\r\n                    dispatcher.emit(route, bytes);\r\n                else if (!Session.instance.hasListeners(route))\r\n                    console.warn(route + \"消息未处理！\");\r\n\r\n            }\r\n            this.msgList[route] = cb;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (notify) {\r\n                starx.request(route, bytes => {\r\n                    cb(bytes);\r\n                    resolve(bytes);\r\n                });\r\n            } else {\r\n                starx.request(route, data, bytes => {\r\n                    cb(bytes);\r\n                    resolve(bytes);\r\n                });\r\n            }\r\n        });\r\n    }\r\n}"]}