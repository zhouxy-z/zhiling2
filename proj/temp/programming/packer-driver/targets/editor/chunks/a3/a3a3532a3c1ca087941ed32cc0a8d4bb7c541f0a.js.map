{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/bag/OpenBoxPage.ts"],"names":["OpenBoxPage","Component","Label","Layout","Sprite","SpriteFrame","Toggle","UIOpacity","instantiate","path","CardQuality","CfgMgr","ItemType","ResMgr","folder_quality","Second","Tips","item","isSelect","maxCount","limit","callBack","befor_selects","page_num","$loadSub","complete","hasLoad","onLoad","node","getChildByName","getComponent","getChildByPath","loadSub","thisObj","Promise","resolve","reject","SetData","data","count","is_select","callback","is_card","select_num","removeAllChildren","updateItem","updateCard","index","length","bg","icon","num","mask","maskBg","max_num","id","toggle","on","onSelect","isChecked","std","Getitem","Itemtpye","shard","active","spriteFrame","LoadResAbSub","join","ItemEffect2","string","opacity","interactable","addChild","pos","indexOf","CardID","GetCard","CardName","selects","chidlren","children","console","log","push","getSiblingIndex","splice","Show","setSelectNum","child"],"mappings":"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","sourcesContent":["import { Component, Label, Layout, Node, Sprite, SpriteFrame, Toggle, UIOpacity, instantiate, path } from \"cc\";\r\nimport { CardQuality, CfgMgr, ItemType, StdBattleCardDelivery, StdItem } from \"../../manager/CfgMgr\";\r\nimport { ResMgr, folder_icon, folder_item, folder_quality } from \"../../manager/ResMgr\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport { Tips } from \"../common/Tips\";\r\nimport proto from \"../../net/Protocol\";\r\n\r\n\r\nexport class OpenBoxPage extends Component {\r\n    private Layout: Layout;\r\n    private item: Node\r\n\r\n    private isSelect: boolean;\r\n    private maxCount: number\r\n    private limit: number;\r\n    private callBack: Function;\r\n    private befor_selects = [];\r\n\r\n\r\n    private page_num:number = 0\r\n    protected $loadSub: Promise<any>;\r\n    protected complete: Function;\r\n    protected hasLoad = false;\r\n\r\n    protected onLoad(): void {\r\n        this.Layout = this.node.getChildByName(\"Layout\").getComponent(Layout);\r\n        this.item = this.node.getChildByPath(\"Layout/item\")\r\n        this.hasLoad = true;\r\n        this.complete?.();\r\n    }\r\n\r\n    protected get loadSub() {\r\n        if (this.$loadSub) return this.$loadSub;\r\n        let thisObj = this;\r\n        this.$loadSub = new Promise((resolve, reject) => {\r\n            thisObj.complete = resolve;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 刷新道具数据\r\n     * @param data \r\n     */\r\n    async SetData(data, count: number, limit, is_select: boolean, callback: Function, is_card: boolean, page_num:number, select_num) {\r\n        if (!this.hasLoad) await this.loadSub;\r\n        this.callBack = callback;\r\n        this.page_num = page_num;\r\n        this.Layout.node.removeAllChildren();\r\n        if(is_card){\r\n            this.updateItem(data);\r\n        }else{\r\n            this.updateCard(data);\r\n        }\r\n        this.befor_selects = select_num;\r\n        this.maxCount = count;\r\n        this.limit = limit;\r\n        this.isSelect = is_select;\r\n    }\r\n\r\n    private async updateItem(data: proto.base.IThing[]) {\r\n        for (let index = 0; index < data.length; index++) {\r\n            let item = instantiate(this.item)\r\n            let bg = item.getChildByName(\"bg\").getComponent(Sprite);\r\n            let icon = item.getChildByPath(\"bg/icon\").getComponent(Sprite);\r\n            let num = item.getChildByPath(\"bg/num\").getComponent(Label);\r\n            let mask = item.getChildByPath(\"mask\").getComponent(UIOpacity);\r\n            let maskBg = item.getChildByPath(\"bg/maskBg\").getComponent(Sprite);\r\n            let max_num = item.getChildByPath(\"mask/max_num\").getComponent(Label);\r\n            let id = item.getChildByName(\"id\").getComponent(Label);\r\n            let toggle = item.getComponent(Toggle);\r\n            toggle.node.on(\"toggle\", this.onSelect, this)\r\n            toggle.isChecked = false;\r\n            // bg.spriteFrame = await ResMgr.LoadResAbSub(data[index].resData.iconBgUrl, SpriteFrame);\r\n            // icon.spriteFrame = await ResMgr.LoadResAbSub(data[index].resData.iconUrl, SpriteFrame);\r\n            if(data[index].item){\r\n                let std: StdItem = CfgMgr.Getitem(data[index].item.id);\r\n                if (std.Itemtpye == ItemType.shard) {\r\n                    maskBg.node.active = true;\r\n                    maskBg.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_quality, CardQuality[std.ItemEffect2] + \"_bag_mask\", \"spriteFrame\"), SpriteFrame);\r\n                }else{\r\n                    maskBg.node.active = false;\r\n                }\r\n                id.string = data[index].item.id + \"\"\r\n                num.string = (data[index].item.count ? data[index].item.count : \"\") + \"\";\r\n            }else{\r\n                num.string = \"1\";\r\n            }\r\n            id.node.active = false;\r\n            max_num.string = this.maxCount + \"\";\r\n            mask.opacity = this.isSelect ? 0 : 255;\r\n            toggle.interactable = this.isSelect;\r\n            this.Layout.node.addChild(item)\r\n        }\r\n    }\r\n\r\n    private async updateCard(data: StdBattleCardDelivery[]) {\r\n        for (let index = 0; index < data.length; index++) {\r\n            let item = instantiate(this.item)\r\n            let bg = item.getChildByName(\"bg\").getComponent(Sprite);\r\n            let icon = item.getChildByPath(\"bg/icon\").getComponent(Sprite);\r\n            let num = item.getChildByPath(\"bg/num\").getComponent(Label);\r\n            let mask = item.getChildByPath(\"mask\").getComponent(UIOpacity);\r\n            let maskBg = item.getChildByPath(\"bg/maskBg\").getComponent(Sprite);\r\n            let max_num = item.getChildByPath(\"mask/max_num\").getComponent(Label);\r\n            let id = item.getChildByName(\"id\").getComponent(Label);\r\n            let toggle = item.getComponent(Toggle);\r\n           \r\n            toggle.isChecked = false;\r\n            let pos = index + this.page_num * 8\r\n            if(this.befor_selects.indexOf(pos) != -1){\r\n                toggle.isChecked = true;\r\n            }\r\n            toggle.node.on(\"toggle\", this.onSelect, this)\r\n            bg.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_quality, CardQuality[data[index].CardQuality] + \"_bag_bg\", \"spriteFrame\"), SpriteFrame);\r\n            num.string = \"1\";\r\n            id.string = data[index].CardID + \"_\" + CfgMgr.GetCard(data[index].CardID).CardName\r\n            icon.node.active = false;\r\n            id.node.active = true;\r\n            max_num.string = this.maxCount + \"\";\r\n            mask.opacity = this.isSelect ? 0 : 255;\r\n            toggle.interactable = this.isSelect;\r\n            this.Layout.node.addChild(item)\r\n        }\r\n    }\r\n\r\n    protected async onSelect(toggle: Toggle) {\r\n        if (!this.limit || !this.isSelect) return;\r\n        await Second(0);\r\n        let selects = [];\r\n        let chidlren = this.Layout.node.children;\r\n        let num = 0 + this.befor_selects.length ;  \r\n        console.log(this.befor_selects)\r\n        // for (let child of chidlren) {\r\n            let isSelect = toggle.isChecked;\r\n            if (isSelect) {\r\n                num++;\r\n                if (isSelect){\r\n                    toggle.node.getChildByName(\"mask\").getComponent(UIOpacity).opacity = 255;\r\n                }\r\n                selects.push(toggle.node.getSiblingIndex() + this.page_num * 8);\r\n            }else{\r\n                toggle.node.getChildByName(\"mask\").getComponent(UIOpacity).opacity = 0;\r\n            }\r\n        // }\r\n        if (num > this.limit) {\r\n            toggle.isChecked = false;\r\n            toggle.node.getChildByName(\"mask\").getComponent(UIOpacity).opacity = 0;\r\n            let index = selects.indexOf(toggle.node.getSiblingIndex() + this.page_num * 8);\r\n            if (index != -1) {\r\n                selects.splice(index, 1);\r\n            }\r\n            Tips.Show(\"只能选择\" + this.limit + \"个\");\r\n        }\r\n        this.callBack(selects);\r\n    }\r\n\r\n    public setSelectNum(count, is_select) {\r\n        let chidlren = this.Layout.node.children;\r\n        for (let child of chidlren) {\r\n            let isSelect = child.getComponent(Toggle).isChecked;\r\n            if (isSelect && is_select) { \r\n                child.getChildByName(\"mask\").getComponent(UIOpacity).opacity = 255;       \r\n            }  \r\n            child.getChildByPath(\"mask/max_num\").getComponent(Label).string = count + \"\"\r\n        }\r\n    }\r\n}"]}