{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/friend/FriendInviteListPanel.ts"],"names":["FriendInviteListPanel","Button","Label","Panel","AutoScroller","prefab","filtrateBtn","ScrollView","incomeNum","onLoad","CloseBy","find","getComponent","node","on","onFiltrate","SetHandle","updateItem","bind","onShow","flush","args","onGetReward","id","item","data","index","onHide"],"mappings":";;;mHAOaA,qB;;;;;;;;;;;;;;;;;;;;;;;AAPJC,MAAAA,M,OAAAA,M;AAAkCC,MAAAA,K,OAAAA,K;;AAClCC,MAAAA,K,iBAAAA,K;;AAEAC,MAAAA,Y,iBAAAA,Y;;;;;;;;;uCAIIJ,qB,GAAN,MAAMA,qBAAN;AAAA;AAAA,0BAA0C;AAAA;AAAA;AAAA,eACnCK,MADmC,GAClB,sCADkB;AAAA,eAGrCC,WAHqC;AAAA,eAIrCC,UAJqC;AAAA,eAKrCC,SALqC;AAAA;;AAMnCC,QAAAA,MAAM,GAAS;AACrB,eAAKC,OAAL,CAAa,MAAb;AACA,eAAKA,OAAL,CAAa,gBAAb;AACA,eAAKF,SAAL,GAAiB,KAAKG,IAAL,CAAU,qBAAV,EAAiCC,YAAjC,CAA8CV,KAA9C,CAAjB;AACA,eAAKI,WAAL,GAAmB,KAAKK,IAAL,CAAU,mBAAV,EAA+BV,MAA/B,CAAnB;AACA,eAAKK,WAAL,CAAiBO,IAAjB,CAAsBC,EAAtB,CAAyB,OAAzB,EAAkC,KAAKC,UAAvC,EAAmD,IAAnD;AACA,eAAKR,UAAL,GAAkB,KAAKI,IAAL,CAAU,kBAAV,EAA8BC,YAA9B;AAAA;AAAA,2CAAlB;AACA,eAAKL,UAAL,CAAgBS,SAAhB,CAA0B,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAA1B,EAPqB,CAQrB;AACA;AACH;;AAESC,QAAAA,MAAM,GAAS,CACxB;;AAEU,cAALC,KAAK,CAAC,GAAGC,IAAJ,EAAiB,CACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEOC,QAAAA,WAAW,CAACC,EAAD,EAAa,CAC5B;AACA;AACH;;AAEuB,cAAVN,UAAU,CAACO,IAAD,EAAaC,IAAb,EAAoCC,KAApC,EAA2C,CAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEOX,QAAAA,UAAU,GAAG,CACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAESY,QAAAA,MAAM,CAAC,GAAGN,IAAJ,EAAuB,CAEtC;;AA9F4C,O","sourcesContent":["import { Button, Color, EventTouch, Input, Label, Node, Sprite, SpriteFrame, Toggle, UIOpacity, instantiate, path, v3 } from \"cc\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { EventMgr } from \"../../manager/EventMgr\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { SPlayerDataTask } from \"../player/PlayerStruct\";\r\n\r\n\r\nexport class FriendInviteListPanel extends Panel {\r\n    protected prefab: string = \"prefabs/friend/FriendInviteListPanel\";\r\n\r\n    private filtrateBtn: Button;\r\n    private ScrollView: AutoScroller\r\n    private incomeNum: Label;\r\n    protected onLoad(): void {\r\n        this.CloseBy(\"mask\");\r\n        this.CloseBy(\"frame/closeBtn\");\r\n        this.incomeNum = this.find(\"frame/get/incomeNum\").getComponent(Label);\r\n        this.filtrateBtn = this.find(\"frame/filtrateBtn\", Button);\r\n        this.filtrateBtn.node.on(\"click\", this.onFiltrate, this);\r\n        this.ScrollView = this.find(\"frame/ScrollView\").getComponent(AutoScroller);\r\n        this.ScrollView.SetHandle(this.updateItem.bind(this));\r\n        // EventMgr.on(Evt_TaskChange, this.flush, this);\r\n        // EventMgr.on(Evt_GetReward, this.onGetReward, this);\r\n    }\r\n\r\n    protected onShow(): void {\r\n    }\r\n\r\n    async flush(...args: any[]) {\r\n        // let datas: SPlayerDataTask[] = []\r\n        // let task_data = PlayerData.roleInfo.tasks;\r\n        // let allNum = 0;\r\n        // for (const key in task_data) {\r\n        //     if (Object.prototype.hasOwnProperty.call(task_data, key)) {\r\n        //         const element = task_data[key];\r\n        //         let stdTask = CfgMgr.GetTaskById(element.id);\r\n        //         if (stdTask && stdTask.Show == STaskShowType.friend && stdTask.TaskType == STaskType.invite) {\r\n        //             if (element.s == STaskState.Finsh) {\r\n        //                 allNum += stdTask.RewardNumber[0];\r\n        //             }\r\n        //             datas.push(element);\r\n        //         }\r\n        //     }\r\n        // }\r\n        // datas.sort((a, b) => a.s - b.s)\r\n        // this.ScrollView.UpdateDatas(datas);\r\n        // this.incomeNum.string = allNum + \"\";\r\n    }\r\n\r\n    private onGetReward(id: number) {\r\n        // let datas = CfgMgr.getTaskRewardThings(id);\r\n        // RewardTips.Show(datas);\r\n    }\r\n\r\n    private async updateItem(item: Node, data: SPlayerDataTask, index) {\r\n        // let cfg = CfgMgr.GetTaskById(data.id);\r\n        // let tittle = item.getChildByPath(\"frame/tittleNode/tittle\").getComponent(Label);\r\n        // tittle.string = cfg.TaskName;\r\n        // let tittleNum = item.getChildByPath(\"frame/tittleNode/tittleNum\").getComponent(Label);\r\n        // let num = data.v > cfg.CompletionNum ? cfg.CompletionNum : data.v;\r\n        // tittleNum.string = \"(\" + num + \"/\" + cfg.CompletionNum + \")\";\r\n        // let icon = item.getChildByPath(\"frame/income/icon\").getComponent(Sprite);\r\n        // let icon_url = \"yuanshi\";\r\n        // icon.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_item, icon_url + \"\", \"spriteFrame\"), SpriteFrame);\r\n        // let incomeNum = item.getChildByPath(\"frame/income/incomeNum\").getComponent(Label);\r\n        // incomeNum.string = cfg.RewardNumber[0] + \"\";\r\n        // let getBtn = item.getChildByPath(\"frame/getBtn\").getComponent(Button);\r\n        // getBtn.node.off(\"click\");\r\n        // getBtn.node.on(\"click\", () => {\r\n        //     let info = {\r\n        //         type: MsgTypeSend.CompleteTask,\r\n        //         data: {\r\n        //             task_id: data.id\r\n        //         }\r\n        //     }\r\n        //     Session.Send(info, MsgTypeRet.CompleteTaskRet);\r\n        // });\r\n        // let unGet = item.getChildByPath(\"frame/unGet\")\r\n        // getBtn.node.active = data.v >= cfg.CompletionNum && data.s != STaskState.Finsh;\r\n        // unGet.active = data.v < cfg.CompletionNum;\r\n        // tittleNum.color = data.v < cfg.CompletionNum ? new Color().fromHEX('a55615') : new Color().fromHEX('71B12C');\r\n        // let geted = item.getChildByPath(\"frame/geted\").getComponent(Sprite);\r\n        // geted.node.active = data.s == STaskState.Finsh;\r\n    }\r\n\r\n    private onFiltrate() {\r\n        // // let server = GameSet.Server_cfg;\r\n        // // if(server && server.Mark){\r\n        // //     CallApp({api:Api_Share}); \r\n        // // }else{\r\n        // //     MsgPanel.Show(\"功能暂未开启\")\r\n        // //     return;\r\n        // // }\r\n        // // // FriendSharePanel.Show();\r\n        // MsgPanel.Show(\"功能暂未开启\")\r\n        // return;\r\n        // // CallApp({api:Api_Share,appid:GameSet.Server_cfg.AppId});\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n\r\n    }\r\n}"]}