{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/vs/VSStarElementFightLogPanel.ts"],"names":["VSStarElementFightLogPanel","Label","path","Sprite","SpriteFrame","CfgMgr","Panel","VList","PlayerData","folder_icon","ResMgr","CardGroupCoverItem","VSSectionFightLogItem","VSFightLogCardItem","prefab","logList","playerHeadA","playerNameA","playerHeadB","playerNameB","resultImg","pointLab","cardGroupA","cardListA","cardGroupB","cardListB","logDatas","playerDataA","playerDataB","onLoad","find","updateCell","updateCellLog","bind","selectCell","selectCellLog","clickCell","clickCellLog","addComponent","updateCellCardA","clickCellCardA","updateCellCardB","clickCellCardB","CloseBy","update","dt","flush","onShow","onLogUpdate","onHide","cellCount","length","cell","cellInfo","logData","index","getChildByPath","active","isSelect","logItem","getComponent","SetData","lastCell","lastInfo","selectLog","cardData","cards","logCardItem","data","key","battlePlayers","playerData","playerId","UserInfo","string","pointChange","imgStr","result","LoadResAbSub","join","res","spriteFrame","updatePlayerData","nameLab","head","cardGroupItem","cardList","cfg","GetHead","deckAttrs","avatarId","headIconUrl","icon","name"],"mappings":"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","sourcesContent":["import { Node, Label, path, Sprite, SpriteFrame } from \"cc\";\r\nimport { CfgMgr} from \"../../manager/CfgMgr\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { CellInfo, VList } from \"../../component/VList\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { folder_icon, ResMgr } from \"../../manager/ResMgr\";\r\nimport { CardGroupCoverItem } from \"../common/CardGroupCoverItem\";\r\nimport { VSSectionFightLogItem } from \"./VSSectionFightLogItem\";\r\nimport { VSFightLogCardItem } from \"./VSFightLogCardItem\";\r\n\r\nexport class VSStarElementFightLogPanel extends Panel {\r\n    protected prefab: string = \"prefabs/vs/VSStarElementFightLogPanel\";\r\n    private logList: VList;\r\n    private playerHeadA: Sprite;\r\n    private playerNameA: Label;\r\n    private playerHeadB: Sprite;\r\n    private playerNameB: Label;\r\n    private resultImg: Sprite;\r\n    private pointLab: Label;\r\n    private cardGroupA: CardGroupCoverItem;\r\n    private cardListA: VList;\r\n    private cardGroupB: CardGroupCoverItem;\r\n    private cardListB: VList;\r\n    private logDatas: any[];\r\n    private playerDataA: any;\r\n    private playerDataB: any;\r\n    protected onLoad() {\r\n        this.logList = this.find(\"logList\", VList);\r\n        this.logList.updateCell = this.updateCellLog.bind(this);\r\n        this.logList.selectCell = this.selectCellLog.bind(this);\r\n        this.logList.clickCell = this.clickCellLog.bind(this);\r\n        this.playerHeadA = this.find(\"vsCont/topCont/playerContA/head\", Sprite);\r\n        this.playerNameA = this.find(\"vsCont/topCont/playerContA/nameLab\", Label);\r\n        this.playerHeadB = this.find(\"vsCont/topCont/playerContB/head\", Sprite);\r\n        this.playerNameB = this.find(\"vsCont/topCont/playerContB/nameLab\", Label);\r\n        this.resultImg = this.find(\"vsCont/topCont/resultImg\", Sprite);\r\n        this.pointLab = this.find(\"vsCont/topCont/pointLab\", Label);\r\n        this.cardGroupA = this.find(\"vsCont/cardGroupCoverItemA\").addComponent(CardGroupCoverItem);\r\n        this.cardListA = this.find(\"vsCont/cardListA\", VList);\r\n        this.cardListA.updateCell = this.updateCellCardA.bind(this);\r\n        this.cardListA.clickCell = this.clickCellCardA.bind(this);\r\n        this.cardGroupB = this.find(\"vsCont/cardGroupCoverItemB\").addComponent(CardGroupCoverItem);\r\n        this.cardListB = this.find(\"vsCont/cardListB\", VList);\r\n        this.cardListB.updateCell = this.updateCellCardB.bind(this);\r\n        this.cardListB.clickCell = this.clickCellCardB.bind(this);\r\n        this.CloseBy(\"closeBtn\");\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        \r\n    }\r\n\r\n    public flush(): void {\r\n        \r\n    }\r\n\r\n    protected onShow(): void {\r\n        this.onLogUpdate();\r\n        \r\n    }\r\n\r\n    protected onHide(): void {\r\n       \r\n    }\r\n\r\n    private onLogUpdate(logList?: any[]): void {\r\n        this.logDatas = logList || [];\r\n        this.logList.cellCount = this.logDatas.length;\r\n\r\n    }\r\n\r\n    private clickCellLog(cell: Node, cellInfo: CellInfo): void {\r\n        \r\n    }\r\n\r\n    private updateCellLog(cell: Node, cellInfo: CellInfo): void {\r\n        let logData: any = this.logDatas[cellInfo.index];\r\n        cell.getChildByPath(\"select\").active = cellInfo.isSelect;\r\n        let logItem: VSSectionFightLogItem = cell.getComponent(VSSectionFightLogItem) || cell.addComponent(VSSectionFightLogItem);\r\n        logItem.SetData(logData);\r\n    }\r\n\r\n    private selectCellLog(cell: Node, cellInfo: CellInfo, lastCell: Node, lastInfo: CellInfo): void {\r\n        if (cell) {\r\n            cell.getChildByPath(\"select\").active = cellInfo.isSelect;\r\n        }\r\n        if (lastCell && lastInfo) {\r\n            lastCell.getChildByPath(\"select\").active = lastInfo.isSelect;\r\n        } \r\n        this.selectLog(this.logDatas[cellInfo.index]);\r\n    }\r\n\r\n    private updateCellCardA(cell: Node, cellInfo: CellInfo): void {\r\n        let cardData: any = this.playerDataA.cards[cellInfo.index];\r\n        let logCardItem: VSFightLogCardItem = cell.getComponent(VSFightLogCardItem) || cell.addComponent(VSFightLogCardItem);\r\n        logCardItem.SetData(cardData);\r\n    }\r\n\r\n    private clickCellCardA(cell: Node, cellInfo: CellInfo): void {\r\n        \r\n    }\r\n\r\n    private updateCellCardB(cell: Node, cellInfo: CellInfo): void {\r\n        let cardData: any = this.playerDataB.cards[cellInfo.index];\r\n        let logCardItem: VSFightLogCardItem = cell.getComponent(VSFightLogCardItem) || cell.addComponent(VSFightLogCardItem);\r\n        logCardItem.SetData(cardData);\r\n    }\r\n\r\n    private clickCellCardB(cell: Node, cellInfo: CellInfo): void {\r\n        \r\n    }\r\n\r\n    private selectLog(data: any): void {\r\n        for (let key in data.battlePlayers) {\r\n            let playerData: any = data.battlePlayers[key];\r\n            if (playerData.playerId == PlayerData.UserInfo.playerId) {\r\n                this.playerDataA = playerData;\r\n            } else {\r\n                this.playerDataB = playerData;\r\n            }\r\n        }\r\n        \r\n        this.pointLab.string = data.pointChange >= 0 ? `+${data.pointChange}` : `-${data.pointChange}`;\r\n        let imgStr: string;\r\n        if (data.result == \"win\") {\r\n            imgStr = \"win\";\r\n        } else if (data.result == \"lost\") {\r\n            imgStr = \"lost\";\r\n        }else if (data.result == \"draw\") {\r\n            imgStr = \"draw\";\r\n        }\r\n        ResMgr.LoadResAbSub(path.join(\"sheets/vs\", imgStr, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.resultImg.spriteFrame = res;\r\n        });\r\n        this.updatePlayerData(this.playerDataA, this.playerNameA, this.playerHeadA, this.cardGroupA, this.cardListA);\r\n        this.updatePlayerData(this.playerDataB, this.playerNameB, this.playerHeadB, this.cardGroupB, this.cardListB);\r\n    }\r\n\r\n    private updatePlayerData(playerData: any, nameLab: Label, head: Sprite, cardGroupItem: CardGroupCoverItem, cardList: VList): void {\r\n        let cfg = CfgMgr.GetHead(playerData.deckAttrs.avatarId);\r\n        let headIconUrl: string;\r\n        if(cfg){\r\n            headIconUrl = cfg.icon;\r\n            ResMgr.LoadResAbSub(path.join(folder_icon, \"head/\", headIconUrl, \"spriteFrame\"), SpriteFrame, res => {\r\n                head.spriteFrame =  res;\r\n            });\r\n        }\r\n        nameLab.string = playerData.name;\r\n        cardGroupItem.SetData(playerData.deckAttrs, false);\r\n        cardList.cellCount = playerData.cards.length;\r\n    }\r\n}"]}