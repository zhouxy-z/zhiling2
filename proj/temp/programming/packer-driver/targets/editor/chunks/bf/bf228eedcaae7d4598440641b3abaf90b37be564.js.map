{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/fight/display/SceneCard.ts"],"names":["SceneCard","Color","Label","Layers","RenderRoot2D","Sprite","SpriteFrame","Tween","UITransform","Vec3","easing","math","path","randomRange","sp","tween","v2","v3","GameObj","card_quality","ResMgr","GameSet","Second","Utils","CfgMgr","CardLayout","CardMoveTo","CardFlyToHand","CardFlyToArea","CardTurnBack","CardTurnFront","$Back_Quat","$Front_Quat","CardShowBig","SampleEffect","proto","FightData","AnimationUtils","CardState","constructor","$prefab","cardData","instId","frame","cardBack","cost","mask","power","nameframe","nameLab","myBattle","myName","myPower","adBattle","adName","adPower","costEffect","powerEffect","ctrl","ctrlZero","body","body_card","debugNode","descLab","skillDesc","cardIdLab","$state","wide","hide","dragPoint","twHandle","action","infoPage","top","std","skills","locking","isMy","pbV3","pbQt","bodyV3","bodyQt","bodyShakePower","bodyShakeQt","quat","pbShakePower","pbShakeQt","layer","Lay_Scene","state","value","None","console","log","onLoad","rendder","$proxy","getComponent","destroy","addComponent","find","Skeleton","setCompleteListener","getCurrent","animation","name","skeletonData","setAnimation","addChild","node","position","clone","rotation","prefabNode","active","self","findBone","x","y","CardWide","CardHide","Id","Wide","State","isBack","eulerAngles","z","CheckMatrix","p","q","worldPosition","equals","worldRotation","InitData","data","ZERO","undefined","Covering","setInfoVisible","GetCard","configId","ID","toString","uuid","setWorldRotationFromEuler","setScale","area","Fightting","$hasLoad","loadSub","set","stdQuality","GetCardUpgradeShow","quality","color","fromHEX","QualityColor","string","CardName","finalValue","Power","Cost","CardBody","url","SceneBody","Play","spUrl","join","LoadResAbSub","SkeletonData","spriteFrame","skillId","stdSkill","GetCardSkill","debug","Desc","updateCardBack","FlushData","Number","stopAllByTarget","to","scale","cubicOut","delay","start","Showing","cardBackName","playerId","HitTest","Math","abs","Drag","tx","ty","ScreenToPlane","mainCamera","HandPlane","isDragging","StopDrag","update","dt","dx","dy","dz","setWorldPosition","hasLoad","offset","sign","min","BattleRoomOpOutputType","base","Out_WaitPlayerShow","Handing","Energy","states","persistentState","BattleRoomPersistentState","PersistentStatePlace","cardState","onActionEnd","h","setAction","act","merge","run","ViewCard","setPosition","contentSize","height","PixelSize","SkillDesc","EndViewCard","running","end","SendToHand","Sending","LayoutHands","Layout","PlayToMyArea","v","Playing","effect","Create","PlayOnce","PlayToAdArea","setWorldRotation","BackToHand","TurnBack","Open","showAnimation","OpenSync","MoveTo","LayoutArea","createTwSub","Promise","resolve","reject","setPrefabNodeVisible","PlaySkill","CheckAnimation","parent","Shake","qt","randomQt","max","expoOut","expoIn","call","EndShake","bind","setRotation","rx","random","rz","out","getEulerAngles","Quat","fromEuler","receive","MapChildrenFor","Enum"],"mappings":"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","sourcesContent":["import { Color, Component, IVec3Like, Label, Layers, Layout, MeshRenderer, Node, ParticleSystem, RenderRoot2D, Sprite, SpriteFrame, Tween, UITransform, Vec2, Vec3, easing, game, labelAssembler, math, path, random, randomRange, sp, tween, v2, v3 } from \"cc\";\r\nimport { GameObj } from \"../../../manager/GameRoot\";\r\nimport { card_quality, ResMgr } from \"../../../manager/ResMgr\";\r\nimport { GameSet } from \"../../../manager/GameSet\";\r\nimport { Second, Utils } from \"../../../utils/Utils\";\r\nimport { CfgMgr, StdCard } from \"../../../manager/CfgMgr\";\r\nimport { CardLayout, CardMoveTo, CardFlyToHand, CardFlyToArea, CardTurnBack, CardTurnFront, ICardAction, $Back_Quat, $Front_Quat, CardShowBig } from \"./CardAction\";\r\nimport { Effect, SampleEffect } from \"./Effect\";\r\nimport proto from \"../../../net/Protocol\";\r\nimport { FightData } from \"../FightData\";\r\nimport { AnimationUtils } from \"../../../utils/AnimationUtils\";\r\n\r\n/***\r\n * 卡片状态\r\n */\r\nexport enum CardState {\r\n    /**默认状态 */\r\n    None,\r\n    /**发牌中 */\r\n    Sending,\r\n    /**手牌排布中 */\r\n    Layout,\r\n    /**手牌中 */\r\n    Handing,\r\n    /**出牌中 */\r\n    Playing,\r\n    /**盖牌 */\r\n    Covering,\r\n    /**揭示中 */\r\n    Showing,\r\n    /**战斗中 */\r\n    Fightting,\r\n    /**震动 */\r\n    Shaking,\r\n    /**删除 */\r\n    Del,\r\n}\r\n\r\nexport interface ISceneEntry {\r\n    readonly instId: string;\r\n}\r\n\r\n/**\r\n * 场景卡片\r\n */\r\nexport class SceneCard extends GameObj implements ISceneEntry {\r\n    protected $prefab: string = \"prefabs/fight/SceneCard\";\r\n\r\n    cardData: proto.base.IBattleRoomCardData;\r\n    instId: string;                // 卡片id\r\n    frame: sp.Skeleton;            // 外框\r\n    cardBack: Sprite;              //卡背\r\n    cost: Label;\r\n    mask: Node;\r\n    power: Label;\r\n    nameframe: Sprite;\r\n    nameLab: Label;\r\n    myBattle: Node;\r\n    myName: Label;\r\n    myPower: Label;\r\n    adBattle: Node;\r\n    adName: Label;\r\n    adPower: Label;\r\n    costEffect: sp.Skeleton;\r\n    powerEffect: sp.Skeleton\r\n    ctrl: sp.spine.Bone;           // 控制点\r\n    ctrlZero: Vec2;                // 初始位置\r\n    body: sp.Skeleton;             // 卡片动画\r\n    body_card: sp.Skeleton;\r\n    debugNode: Node;\r\n    descLab: Label;\r\n    skillDesc: Label;\r\n    cardIdLab: Label;\r\n    $state: number;                // 当前状态\r\n    wide: number;                  // 卡牌宽度\r\n    hide: number;                  // 卡牌高度\r\n    dragPoint: IVec3Like;          // 拖动点\r\n    twHandle: Function;\r\n    action: ICardAction;\r\n    infoPage: Node;\r\n    top: Sprite;\r\n    std: StdCard;\r\n    skills: proto.base.IBattleRoomSkillData[];\r\n    locking = false;\r\n\r\n    isMy = true;\r\n    pbV3: Vec3;\r\n    pbQt: math.Quat;\r\n    bodyV3: Vec3;\r\n    bodyQt: math.Quat;\r\n\r\n    constructor() {\r\n        super();\r\n        this.layer = GameSet.Lay_Scene;\r\n    }\r\n\r\n    get state() {\r\n        return this.$state;\r\n    }\r\n    set state(value) {\r\n        if (value == CardState.None) {\r\n            console.log(\"sate\", value);\r\n        }\r\n        this.$state = value;\r\n        if (this.cardData) {\r\n            this.cardData['playState'] = value;\r\n        }\r\n    }\r\n\r\n    protected onLoad(): void {\r\n\r\n        let rendder = this.$proxy.getComponent(RenderRoot2D);\r\n        if (rendder) rendder.destroy();\r\n\r\n        this.addComponent(RenderRoot2D);\r\n\r\n        this.infoPage = this.find(\"infoPage\");\r\n        this.frame = this.find(\"infoPage/frame\", sp.Skeleton);\r\n        this.cardBack = this.find(\"infoPage/cardBack\", Sprite);\r\n        this.body = this.find(\"body\", sp.Skeleton);\r\n        let body = this.body;\r\n        this.body.setCompleteListener(() => {\r\n            if (body?.getCurrent(0)?.animation.name != \"idle\" && body?.skeletonData) {\r\n                body.setAnimation(0, \"idle\", true);\r\n            }\r\n        })\r\n        this.addChild(this.body.node);\r\n        this.bodyV3 = this.body.node.position.clone();\r\n        this.bodyQt = this.body.node.rotation.clone();\r\n        this.pbV3 = this.prefabNode.position.clone();\r\n        this.pbQt = this.prefabNode.rotation.clone();\r\n        this.body.node.active = false;\r\n\r\n        this.body_card = this.find(\"infoPage/body_card\", sp.Skeleton);\r\n        this.body_card.node.active = false;\r\n\r\n        this.mask = this.find(\"infoPage/cardmask\");\r\n        this.top = this.find(\"infoPage/top\", Sprite);\r\n        this.cost = this.find(\"infoPage/cost/label\", Label);\r\n        this.costEffect = this.find(\"infoPage/cost/icon_cost\").getComponent(sp.Skeleton);\r\n        this.power = this.find(\"infoPage/power/label\", Label);\r\n        this.powerEffect = this.find(\"infoPage/power/icon_power\").getComponent(sp.Skeleton);\r\n        this.nameframe = this.find(\"infoPage/nameframe\").getComponent(Sprite);\r\n        this.nameLab = this.find(\"infoPage/nameframe/label\").getComponent(Label);\r\n        this.myBattle = this.find(\"infoPage/myBattle\");\r\n        this.myName = this.find(\"infoPage/myBattle/label\", Label);\r\n        this.myPower = this.find(\"infoPage/myBattle/power/label\", Label);\r\n        this.adBattle = this.find(\"infoPage/adBattle\");\r\n        this.adName = this.find(\"infoPage/adBattle/label\", Label);\r\n        this.adPower = this.find(\"infoPage/adBattle/power/label\", Label);\r\n\r\n        this.addChild(this.myBattle);\r\n        this.addChild(this.adBattle);\r\n\r\n        let self = this;\r\n        this.costEffect.setCompleteListener(() => {\r\n            if (self.costEffect.animation != \"idle\") self.costEffect.setAnimation(0, \"idle\", true);\r\n        })\r\n        this.powerEffect.setCompleteListener(() => {\r\n            if (self.powerEffect.animation != \"idle\") self.powerEffect.setAnimation(0, \"idle\", true);\r\n        })\r\n\r\n        this.debugNode = this.find(\"infoPage/debugNode\");\r\n        this.descLab = this.find(\"infoPage/desc\", Label);\r\n        this.skillDesc = this.find(\"infoPage/debugNode/skillDesc\", Label);\r\n        this.cardIdLab = this.find(\"infoPage/debugNode/cardIdLab\", Label);\r\n\r\n        this.ctrl = this.frame.findBone(\"MoveCtrl\");\r\n        this.ctrlZero = v2(this.ctrl.x, this.ctrl.y);\r\n\r\n        this.wide = GameSet.CardWide;\r\n        this.hide = GameSet.CardHide;\r\n    }\r\n\r\n    /**卡牌id */\r\n    get Id() {\r\n        return this.instId;\r\n    }\r\n    /**卡牌宽度 */\r\n    get Wide() {\r\n        return this.wide;\r\n    }\r\n    /**卡牌状态 */\r\n    get State() {\r\n        return this.state;\r\n    }\r\n    /**是否背向 */\r\n    get isBack() {\r\n        return this.eulerAngles.z == 180;\r\n    }\r\n    /**\r\n     * 检测位置变动\r\n     * @param p \r\n     * @param q \r\n     * @returns \r\n     */\r\n    CheckMatrix(p: Vec3, q?: math.Quat) {\r\n        if (!this.worldPosition.equals(p)) return false;\r\n        if (q && !this.worldRotation.equals(q)) return false;\r\n    }\r\n\r\n    /**\r\n     * 新卡牌\r\n     * @param data\r\n     */\r\n    async InitData(isMy: boolean, data: proto.base.IBattleRoomCardData, rotation: Vec3 = Vec3.ZERO) {\r\n        this.cardData = data;\r\n        this.instId = data.instId\r\n        this.locking = false;\r\n        if (!data) {\r\n            this.std = undefined;\r\n            this.state = CardState.Covering;\r\n            this.setInfoVisible();\r\n            return;\r\n        }\r\n        let std = CfgMgr.GetCard(data.configId);\r\n        this.std = std;\r\n        this.skills = data.skills;\r\n        this.name = std?.ID?.toString() || this.uuid;\r\n        rotation && this.setWorldRotationFromEuler(rotation.x, rotation.y, rotation.z);\r\n        this.setScale(1, 1, 1);\r\n        if (this.cardData['playState'] != undefined) {\r\n            this.state = this.cardData['playState'];\r\n        } else {\r\n            if (std && data.area >= 0) {\r\n                this.state = CardState.Fightting;\r\n            } else {\r\n                this.state = CardState.None;\r\n            }\r\n        }\r\n        if (!this.$hasLoad) await this.loadSub;\r\n\r\n        this.isMy = isMy;\r\n        this.pbShakeQt.set(this.pbQt);\r\n        this.bodyShakeQt.set(this.bodyQt);\r\n        this.pbShakePower = this.bodyShakePower = 0;\r\n\r\n        let stdQuality = CfgMgr.GetCardUpgradeShow(this.cardData.quality);\r\n        this.myName.color = (new Color()).fromHEX(stdQuality?.QualityColor || \"#FFFFFF\");\r\n        this.adName.color = (new Color()).fromHEX(stdQuality?.QualityColor || \"#FFFFFF\");\r\n        this.top.color = (new Color()).fromHEX(stdQuality?.QualityColor || \"#FFFFFF\");\r\n        this.adName.string = this.myName.string = this.nameLab.string = std?.CardName || \"未知\";\r\n        this.adPower.string = this.myPower.string = this.power.string = data?.power?.finalValue?.toString() || std?.Power?.toString() || \"\";\r\n        this.cost.string = data?.cost?.finalValue?.toString() || std?.Cost?.toString() || \"\";\r\n\r\n        this.body.node.active = false;\r\n        this.body_card.node.active = false;\r\n        if (std?.CardBody) {\r\n            let url = `spine/${std?.SceneBody}/${std?.SceneBody}`;\r\n            AnimationUtils.Play(url,this.body,\"idle\",true);\r\n            // if (this.body['spUrl'] != url) {\r\n            //     this.body['spUrl'] = url;\r\n            //     this.body.skeletonData = await ResMgr.LoadResAbSub(url, sp.SkeletonData);\r\n            // }\r\n            // console.log(\"url\", url);\r\n            // try {\r\n            //     if (this.body.skeletonData) this.body.setAnimation(0, \"idle\", true);\r\n            // } catch (e) { }\r\n            url = `spine/${std?.CardBody}/${std?.CardBody}`;\r\n            AnimationUtils.Play(url,this.body_card,\"idle\",true);\r\n            // if (this.body_card['spUrl'] != url) {\r\n            //     console.log(\"url\", url);\r\n            //     this.body_card['spUrl'] = url;\r\n            //     this.body_card.skeletonData = await ResMgr.LoadResAbSub(url, sp.SkeletonData);\r\n            // }\r\n            // if (this.body_card.skeletonData) this.body_card.setAnimation(0, \"idle\", true);\r\n\r\n            this.body.node.active = false;\r\n            this.body_card.node.active = true;\r\n        }\r\n        let quality: number = data.quality || 1;\r\n        let spUrl = path.join(\"spine\", \"cardbg_000\" + quality, \"cardbg_000\" + quality);\r\n        this.frame['spUrl'] = spUrl;\r\n        this.frame.skeletonData = await ResMgr.LoadResAbSub(spUrl, sp.SkeletonData);\r\n        this.frame.setAnimation(0, \"idle\", true);\r\n\r\n        this.nameframe.spriteFrame = await ResMgr.LoadResAbSub(path.join(card_quality, \"nameframe_\" + quality, \"spriteFrame\"), SpriteFrame);\r\n\r\n        this.skillDesc.string = \"\";\r\n        this.descLab.string = \"\";\r\n        let skillId = this?.cardData?.skills[0]?.skillId;\r\n        if (skillId != undefined) {\r\n            let stdSkill = CfgMgr.GetCardSkill(skillId);\r\n            if (stdSkill) {\r\n                this.debugNode.active = GameSet.debug;\r\n                this.skillDesc.string = skillId + \":\" + stdSkill.Desc;\r\n            }\r\n        } else this.debugNode.active = false;\r\n        this.cardIdLab.string = this.instId;\r\n        this.updateCardBack();\r\n        this.setInfoVisible();\r\n    }\r\n\r\n    /**\r\n     * 更新手卡\r\n     * @param data \r\n     */\r\n    async FlushData(isMy: boolean, data: proto.base.IBattleRoomCardData) {\r\n        this.isMy = isMy;\r\n        if (!this.$hasLoad) await this.loadSub;\r\n        this.cardData = data;\r\n        let std = CfgMgr.GetCard(data.configId);\r\n        this.std = std;\r\n        if (this.state != CardState.Covering && Number(this.power.string) < data?.power?.finalValue) {\r\n            this.powerEffect.setAnimation(0, \"change\", false);\r\n            Tween.stopAllByTarget(this.power.node);\r\n            tween(this.power.node).to(0.25, { scale: v3(4, 4, 4) }, { easing: easing.cubicOut }).delay(0.2).to(0.25, { scale: v3(1, 1, 1) }).start();\r\n        }\r\n        this.adPower.string = this.myPower.string = this.power.string = data?.power?.finalValue?.toString() || \"\";\r\n        if (this.state != CardState.Covering && Number(this.cost.string) < data?.cost?.finalValue) {\r\n            this.costEffect.setAnimation(0, \"change\", false);\r\n            Tween.stopAllByTarget(this.cost.node);\r\n            tween(this.cost.node).to(0.25, { scale: v3(4, 4, 4) }, { easing: easing.cubicOut }).delay(0.2).to(0.25, { scale: v3(1, 1, 1) }).start();\r\n        }\r\n        this.cost.string = data?.cost?.finalValue?.toString() || \"\";\r\n        this.skills = data.skills;\r\n\r\n        let stdQuality = CfgMgr.GetCardUpgradeShow(this.cardData.quality);\r\n        this.myName.color = (new Color()).fromHEX(stdQuality?.QualityColor || \"#FFFFFF\");\r\n        this.adName.color = (new Color()).fromHEX(stdQuality?.QualityColor || \"#FFFFFF\");\r\n        this.top.color = (new Color()).fromHEX(stdQuality?.QualityColor || \"#FFFFFF\");\r\n        this.adName.string = this.myName.string = this.nameLab.string = std?.CardName || \"未知\";\r\n        if (std?.CardBody) {\r\n            let url = `spine/${std?.SceneBody}/${std?.SceneBody}`;\r\n            AnimationUtils.Play(url, this.body, \"idle\", true);\r\n            // if (this.body['spUrl'] != url) {\r\n            //     this.body['spUrl'] = url;\r\n            //     this.body.skeletonData = await ResMgr.LoadResAbSub(url, sp.SkeletonData);\r\n            //     console.log(\"skeletonData\", url);\r\n            //     if (this.body.skeletonData) this.body.setAnimation(0, \"idle\", true);\r\n            // }\r\n            url = `spine/${std?.CardBody}/${std?.CardBody}`;\r\n            AnimationUtils.Play(url, this.body_card, \"idle\", true);\r\n            // if (this.body_card['spUrl'] != url) {\r\n            //     this.body_card['spUrl'] = url;\r\n            //     this.body_card.skeletonData = await ResMgr.LoadResAbSub(url, sp.SkeletonData);\r\n            //     if (this.body_card.skeletonData) this.body_card.setAnimation(0, \"idle\", true);\r\n            //     this.body_card.node.active = true;\r\n            // }\r\n        }\r\n        let quality: number = data.quality || 1;\r\n        let spUrl = path.join(\"spine\", \"cardbg_000\" + quality, \"cardbg_000\" + quality);\r\n        if (this.frame['spUrl'] != spUrl) {\r\n            this.frame.skeletonData = await ResMgr.LoadResAbSub(spUrl, sp.SkeletonData);\r\n            this.frame.setAnimation(0, \"idle\", true);\r\n        }\r\n\r\n        this.nameframe.spriteFrame = await ResMgr.LoadResAbSub(path.join(card_quality, \"nameframe_\" + quality, \"spriteFrame\"), SpriteFrame);\r\n        this.skillDesc.string = \"\";\r\n        this.descLab.string = \"\";\r\n        let skillId = this?.cardData?.skills[0]?.skillId;\r\n        if (skillId != undefined) {\r\n            let stdSkill = CfgMgr.GetCardSkill(skillId);\r\n            if (stdSkill) {\r\n                this.debugNode.active = GameSet.debug;\r\n                this.skillDesc.string = skillId + \":\" + stdSkill.Desc;\r\n            }\r\n        } else this.debugNode.active = false;\r\n        this.cardIdLab.string = this.instId;\r\n        if (this.cardData['playState'] != undefined) {\r\n            this.state = this.cardData['playState'];\r\n        } else if (std && data.area >= 0 && this.state <= CardState.Showing) {\r\n            this.state = CardState.Fightting;\r\n        }\r\n        this.updateCardBack();\r\n        this.setInfoVisible();\r\n    }\r\n\r\n    private async updateCardBack(): Promise<void> {\r\n        let cardBackName: string = this.cardData ? FightData.cardBack[this.cardData.playerId] : \"bg_1\";\r\n        this.cardBack.spriteFrame = await ResMgr.LoadResAbSub(path.join(card_quality, cardBackName, \"spriteFrame\"), SpriteFrame);\r\n    }\r\n\r\n    /**\r\n     * 碰撞检测\r\n     * @param x \r\n     * @param y \r\n     * @param z \r\n     * @returns \r\n     */\r\n    HitTest(x: number, y: number, z: number) {\r\n        if (Math.abs(this.worldPosition.x - x) <= this.wide / 2 && Math.abs(this.worldPosition.z - z) <= this.hide / 2) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 拖动\r\n     * @param tx \r\n     * @param ty \r\n     */\r\n    Drag(tx: number, ty: number) {\r\n        Tween.stopAllByTarget(this);\r\n        let [x, y, z] = Utils.ScreenToPlane(tx, ty, GameSet.mainCamera, GameSet.HandPlane, 20);\r\n        this.dragPoint = { x: x, y: y, z: z };\r\n    }\r\n\r\n    get isDragging() { return this.dragPoint != undefined };\r\n\r\n    /**\r\n     * 停止拖动\r\n     */\r\n    async StopDrag() {\r\n        if (!this.$hasLoad) await this.loadSub;\r\n        this.setInfoVisible();\r\n        this.dragPoint = undefined;\r\n        this.ctrl.x = this.ctrlZero.x;\r\n        this.ctrl.y = this.ctrlZero.y;\r\n    }\r\n\r\n    /**轮训 */\r\n    protected update(dt: number): void {\r\n        if (this.dragPoint) {\r\n            this.mask.active = true;\r\n            let dx = this.dragPoint.x - this.worldPosition.x;\r\n            let dy = this.dragPoint.y - this.worldPosition.y;\r\n            let dz = this.dragPoint.z - this.worldPosition.z;\r\n            this.setWorldPosition(this.worldPosition.x + dx / 6, this.worldPosition.y + dy / 6, this.worldPosition.z + dz / 6);\r\n            // console.log(\"Drag\",dx,dy,dz,this.worldPosition.toString());\r\n            if (!this.hasLoad) return;\r\n            const offset = 200;\r\n            this.ctrl.x = Math.sign(dx) * Math.min(Math.abs(dx) * 100, offset);\r\n            this.ctrl.y = Math.sign(dy) * Math.min(Math.abs(dy) * 100, offset);\r\n        }\r\n\r\n        if (FightData.BattleRoomOpOutputType == proto.base.BattleRoomOpOutputType.Out_WaitPlayerShow) {\r\n            this.mask.active = false;\r\n        } else if (this.state == CardState.Handing) {\r\n            if (FightData.Energy < Number(this.cost.string)) {\r\n                this.mask.active = true;\r\n            } else {\r\n                let states = this.cardData.persistentState || {};\r\n                if (states[proto.base.BattleRoomPersistentState.PersistentStatePlace] || FightData.cardState[this.cardData.instId]) {\r\n                    this.mask.active = true;\r\n                    return;\r\n                }\r\n                this.mask.active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**缓动结束 */\r\n    protected async onActionEnd() {\r\n        if (this.ctrl) {\r\n            this.ctrl.x = this.ctrlZero.x;\r\n            this.ctrl.y = this.ctrlZero.y;\r\n        }\r\n        let h = this.twHandle;\r\n        this.twHandle = undefined;\r\n        h && h();\r\n        this.action = undefined;\r\n    }\r\n    protected setAction(act: ICardAction) {\r\n        if (this.action) {\r\n            this.action = this.action.merge(act);\r\n        } else {\r\n            this.action = act;\r\n        }\r\n        return this.action.run();\r\n    }\r\n\r\n    /**展示卡片 */\r\n    async ViewCard() {\r\n        if (!this.$hasLoad) await this.loadSub;\r\n        this.active = true;\r\n        this.state = CardState.None;\r\n        this.setInfoVisible();\r\n        this.descLab.string = \"\";\r\n        this.debugNode.active = false;\r\n        this.$proxy.node.setPosition(0, 0, -this.descLab.getComponent(UITransform).contentSize.height * GameSet.PixelSize / 2);\r\n        await this.setAction(new CardShowBig(this));\r\n        if (this?.std?.SkillDesc) {\r\n            this.descLab.string = this.std.SkillDesc;\r\n        } else {\r\n            this.descLab.string = \"\";\r\n        }\r\n        this.onActionEnd();\r\n    }\r\n    async EndViewCard() {\r\n        if (!this.$hasLoad) await this.loadSub;\r\n        if (this.action && this.action.running) this.action.end();\r\n        this.active = false;\r\n        if (this?.std?.SkillDesc) {\r\n            this.debugNode.active = false;\r\n        } else {\r\n            this.debugNode.active = GameSet.debug;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 发牌\r\n     * @param end\r\n     * @param q \r\n     * @returns \r\n     */\r\n    async SendToHand(start: Vec3, end: Vec3, q: math.Quat) {\r\n        this.setInfoVisible();\r\n        this.state = CardState.Sending;\r\n        await this.setAction(new CardFlyToHand(this, start, end, q));\r\n        this.state = CardState.Handing;\r\n        this.onActionEnd();\r\n    }\r\n\r\n    /**\r\n     * 手牌排布\r\n     * @param p\r\n     */\r\n    async LayoutHands(p: Vec3, q: math.Quat) {\r\n        this.setInfoVisible();\r\n        this.state = CardState.Layout;\r\n        await this.setAction(new CardLayout(this, p, q));\r\n        this.state = CardState.Handing;\r\n        this.onActionEnd();\r\n    }\r\n\r\n    /**\r\n     * 出牌动作\r\n     * @param v \r\n     * @param q \r\n     * @returns \r\n     */\r\n    async PlayToMyArea(v: Vec3, q: math.Quat) {\r\n        if (this.state < CardState.Fightting) this.state = CardState.Playing;\r\n        this.setInfoVisible();\r\n        await this.setAction(new CardFlyToArea(this, v, q));\r\n        let effect = SampleEffect.Create(\"prefabs/particle/smoke\");\r\n        effect.PlayOnce(v.x, v.y, v.z);\r\n        this.onActionEnd();\r\n    }\r\n\r\n    /**\r\n     * 对方出牌\r\n     * @param v \r\n     * @param q \r\n     */\r\n    async PlayToAdArea(v: Vec3) {\r\n        this.state = CardState.Covering;\r\n        if (!this.$hasLoad) await this.loadSub;\r\n        this.setInfoVisible();\r\n        this.setWorldRotation($Back_Quat);\r\n        await this.setAction(new CardFlyToArea(this, v, $Back_Quat));\r\n        this.onActionEnd();\r\n    }\r\n\r\n\r\n    /**\r\n     * 回到手牌\r\n     * @param x \r\n     * @param y \r\n     * @param z \r\n     */\r\n    async BackToHand(p: Vec3, q: math.Quat) {\r\n        this.state = CardState.Handing;\r\n        this.setInfoVisible();\r\n        await this.setAction(new CardMoveTo(this, p, q));\r\n        this.onActionEnd();\r\n    }\r\n\r\n    /**\r\n     * 盖牌\r\n     * @returns \r\n     */\r\n    async TurnBack() {\r\n        this.state = CardState.Covering;\r\n        await this.setAction(new CardTurnBack(this));\r\n        this.setInfoVisible();\r\n        this.onActionEnd();\r\n    }\r\n\r\n    /**\r\n     * 转向\r\n     */\r\n    async Open(showAnimation = true) {\r\n        this.state = CardState.Showing;\r\n        this.setInfoVisible();\r\n        let effect: SampleEffect = SampleEffect.Create(\"prefabs/particle/Fx_area_summon\");\r\n        effect.PlayOnce(this.worldPosition.x, this.worldPosition.y, this.worldPosition.z);\r\n        if (showAnimation) {\r\n            await Second(0.6);\r\n            await this.setAction(new CardTurnFront(this));\r\n        }\r\n        this.state = CardState.Fightting;\r\n        await this.setInfoVisible();\r\n    }\r\n\r\n    /**\r\n     * 立即打开\r\n     */\r\n    OpenSync() {\r\n        this.state = CardState.Fightting;\r\n        this.setInfoVisible();\r\n    }\r\n\r\n    /**\r\n     * 普通移动\r\n     * @param v \r\n     * @param q \r\n     */\r\n    async MoveTo(v: Vec3, q?: math.Quat) {\r\n        this.setInfoVisible();\r\n        if (!q) {\r\n            if (this.isMy && this.state != CardState.Covering)\r\n                q = $Front_Quat;\r\n            else\r\n                q = this.state >= CardState.Fightting ? $Front_Quat : $Back_Quat;\r\n        }\r\n        await this.setAction(new CardMoveTo(this, v, q));\r\n        this.onActionEnd();\r\n    }\r\n\r\n    /**\r\n     * 区域布局\r\n     */\r\n    async LayoutArea(v: Vec3, q?: math.Quat) {\r\n        if (this.state < CardState.Playing) this.state = CardState.Playing;\r\n        if (!q) {\r\n            if (this.isMy && this.state != CardState.Covering)\r\n                q = $Front_Quat;\r\n            else\r\n                q = this.state >= CardState.Fightting ? $Front_Quat : $Back_Quat;\r\n        }\r\n        await this.setAction(new CardMoveTo(this, v, q));\r\n        this.onActionEnd();\r\n        this.setInfoVisible();\r\n    }\r\n\r\n    /**异步 */\r\n    protected createTwSub() {\r\n        this.twHandle && this.twHandle();\r\n        let self = this;\r\n        return new Promise((resolve, reject) => {\r\n            self.twHandle = resolve;\r\n        })\r\n    }\r\n\r\n    protected setPrefabNodeVisible(value: boolean) {\r\n        this.infoPage.active = value;\r\n        this.find(\"card\").active = value;\r\n    }\r\n\r\n    async PlaySkill(action: string) {\r\n        if (!this.$hasLoad) await this.loadSub;\r\n        if (Utils.CheckAnimation(this.body, action) && this.body.skeletonData) this.body.setAnimation(0, action, false);\r\n    }\r\n\r\n    protected async setInfoVisible() {\r\n        if (!this.$hasLoad) await this.loadSub;\r\n        this.power.node.parent.active = true;\r\n        this.cost.node.parent.active = true;\r\n        if (this.state == CardState.Covering) {\r\n            this.power.node.parent.active = false;\r\n            this.cost.node.parent.active = false;\r\n            this.setPrefabNodeVisible(true);\r\n            this.body.node.active = false;\r\n            this.myBattle.active = this.adBattle.active = false;\r\n        } else if (this.state == CardState.Showing) {\r\n            this.setPrefabNodeVisible(true);\r\n            this.body.node.active = false;\r\n            this.myBattle.active = this.adBattle.active = false;\r\n        } else if (this.state >= CardState.Fightting) {\r\n            if (!this.body.node.active) {\r\n                this.body.node.active = true;\r\n                if (this.body.skeletonData) this.body.setAnimation(0, \"show\", false);\r\n                await Second(1);\r\n            }\r\n            this.myBattle.active = this.isMy;\r\n            this.adBattle.active = !this.isMy;\r\n\r\n            this.setPrefabNodeVisible(false);\r\n        } else {\r\n            this.body.node.active = false;\r\n            this.myBattle.active = this.adBattle.active = false;\r\n\r\n            this.setPrefabNodeVisible(true);\r\n        }\r\n    }\r\n\r\n    async Shake(power: number, qt?: math.Quat) {\r\n        if (!this.$hasLoad) await this.loadSub;\r\n        if (qt == undefined) {\r\n            this.randomQt(this.bodyShakeQt);\r\n            this.randomQt(this.pbShakeQt);\r\n            this.bodyShakePower = Math.max(this.bodyShakePower, power);\r\n            this.pbShakePower = Math.max(this.pbShakePower, power / 2);\r\n        } else {\r\n\r\n        }\r\n        let bodyV3 = this.bodyV3.clone();\r\n        bodyV3.y += this.bodyShakePower;\r\n        let pbV3 = this.pbV3.clone();\r\n        pbV3.y += this.pbShakePower;\r\n        Tween.stopAllByTarget(this.body.node);\r\n        Tween.stopAllByTarget(this.prefabNode);\r\n        let dt = randomRange(0.15, 0.25);\r\n        tween(this.body.node).to(dt, { position: bodyV3, rotation: this.bodyShakeQt }, { easing: easing.expoOut }).to(\r\n            dt, { position: this.bodyV3, rotation: this.pbShakeQt }, { easing: easing.expoIn }\r\n        ).call(this.EndShake.bind(this)).start();\r\n        tween(this.prefabNode).to(dt * 0.65, { position: pbV3, rotation: this.pbShakeQt }, { easing: easing.expoOut }).to(\r\n            dt * 0.65, { position: this.pbV3, rotation: this.pbQt }, { easing: easing.expoIn }\r\n        ).start();\r\n    }\r\n\r\n    async EndShake() {\r\n        if (!this.$hasLoad) await this.loadSub;\r\n        Tween.stopAllByTarget(this.body.node);\r\n        Tween.stopAllByTarget(this.prefabNode);\r\n        this.bodyShakePower = this.pbShakePower = 0;\r\n        this.bodyShakeQt.set(this.bodyQt);\r\n        this.pbShakeQt.set(this.pbQt);\r\n        this.body.node.setRotation(this.bodyQt);\r\n        this.body.node.setPosition(this.bodyV3);\r\n        this.prefabNode.setRotation(this.pbQt);\r\n        this.prefabNode.setPosition(this.pbV3);\r\n    }\r\n\r\n    protected bodyShakePower: number;\r\n    protected bodyShakeQt: math.Quat = math.quat();\r\n    protected pbShakePower: number;\r\n    protected pbShakeQt: math.Quat = math.quat();\r\n\r\n    protected randomQt(qt: math.Quat) {\r\n        let rx = Math.random() * 30 - 15;\r\n        let rz = Math.random() * 30 - 15;\r\n        let out = v3();\r\n        qt.getEulerAngles(out);\r\n        out.x += rx;\r\n        out.z += rz;\r\n        math.Quat.fromEuler(qt, out.x, out.y, out.z);\r\n    }\r\n\r\n    receive(): void {\r\n        if (this.$hasLoad) {\r\n            this.name = \"\";\r\n            this.body_card.node.active = false;\r\n            this.power.string = \"0\";\r\n            this.cost.string = \"0\";\r\n\r\n            this.body.node.active = false;\r\n            this.myBattle.active = false;\r\n            this.adBattle.active = false;\r\n            Utils.MapChildrenFor(this, value => {\r\n                value.layer = Layers.Enum['SCENE'];\r\n            })\r\n        }\r\n        this.locking = false;\r\n        this.onActionEnd();\r\n        Tween.stopAllByTarget(this);\r\n        Tween.stopAllByTarget(this.prefabNode);\r\n        super.receive();\r\n    }\r\n}\r\n"]}