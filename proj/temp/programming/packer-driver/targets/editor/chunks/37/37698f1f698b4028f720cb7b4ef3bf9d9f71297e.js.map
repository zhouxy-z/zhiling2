{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardsPanel%20copy.ts"],"names":["CardsPanel","Button","EditBox","Input","Label","Layout","ScrollView","Toggle","UITransform","Widget","instantiate","js","size","view","EventMgr","Evt_Card_Check_By_Name","Evt_Card_Group_Update","Evt_Hide_Scene","Evt_Show_Scene","Panel","AutoScroller","PlayerData","Card","Session","Protocol","CfgMgr","ObjectUtils","CardGroupItem","MsgPanel","CardSotrType1","CardSotrType2","MoreType","prefab","scroller","noneListCont","sortNode","closeSortBtn","upOrDownBtn","sortNav","filtrateNode","searchNode","editBox","completeBtn","cancelBtn","filtrateBtn","sortBtn","moreBtn","showNode","cardGroupScrollView","addCardNode","addCardScrollView","back","clone_item","groupNameEditBox","moreNode","moreNav","card_list","max_card_group","max_card","sort_type_1","Up","sort_type_2","Cost","search_card_list","curSearchStr","searchStrList","selects","add_or_change","is_change_name","is_open_add_card_group","onLoad","CloseBy","find","node","on","onSelectCard","children","concat","EventType","CLICK","onClick","EDITING_DID_ENDED","onEditEnd","SetHandle","updateCardGroupItem","bind","onCardGroupSelect","updateCardItem","onGroupNameEditEnd","TOUCH_END","active","length","id_list","iterator","push","id","send_data","setdeckcards","attrs","cur_id","name","string","type","cardIds","deckId","Send","updateCardGroup","forEach","index","getComponent","isChecked","setCardSort","onMoreBtn","updateCardsGroupCardData","onShow","emit","getClassName","flush","data","updateAllCardsShow","setHaveCardGroup","updatePanel","getdeckcards","updateAllCardGroup","size_1","contentSize","size_2","size_3","setContentSize","item","updateAlignment","content","setSelect","height","panel_width","getVisibleSize","width","right_width","max_width","item_width","num","Math","floor","yu","jianju","offset","paddingLeft","spacingX","updateLayout","cards","player","battleCards","setCardsData","deepCopy","cardNameList","unshift","UpdateDatas","data_list","removeAllChildren","card","addChild","layout","enabled","addComponent","SetData","event","getCurrentTarget","getSiblingIndex","console","log","is_select","getSelectState","Show","getData","splice","indexOf","addCardsGroup","setCurCardGroupCardList","card_group_item","count","card_data","add","setdeckattrs","list","key","Object","hasOwnProperty","call","element","sort","a","b","a_cost","GetCard","cardId","b_cost","btn","getChildByName","Down","del_card","delete_data","deletedeck","shard","copy","inquiry","Name","getNameSort","getCostSort","Power","getPowerSort","New","getNewSort","Quality","getQulitySort","UpLevel","getCanUpSort","a_data","b_data","CardName","defaultSort","localeCompare","ID","quality","card_cfg","Get","includes","SkillDesc","onHide","args","getClassByName"],"mappings":"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","sourcesContent":["import { Button, EditBox, EventTouch, Input, Label, Layout, Node, ObjectCurve, ScrollView, Toggle, UITransform, Widget, instantiate, js, size, view } from \"cc\";\r\nimport { EventMgr, Evt_Card_Check_By_Name, Evt_Card_Group_Update, Evt_FlushWorker, Evt_Hide_Scene, Evt_Role_Del, Evt_Role_Update, Evt_Role_Upgrade, Evt_Show_Scene } from \"../../manager/EventMgr\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Card } from \"./Card\";\r\nimport base from \"../../net/proto/BaseUtils\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { Protocol } from \"../../net/Protocol\";\r\nimport { CfgMgr, StdCard } from \"../../manager/CfgMgr\";\r\nimport { ObjectUtils } from \"../../utils/ObjectUtils\";\r\nimport { CardGroupItem } from \"./CardGroupItem\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\n\r\n\r\nenum CardSotrType1 {\r\n    Up,//升序\r\n    Down,//降序\r\n}\r\n\r\nenum CardSotrType2 {\r\n    Name,//名字排序\r\n    Cost,//能量排序\r\n    Power,//战力排序\r\n    New, //最新排序\r\n    Quality,//品质排序\r\n    UpLevel,//可升级排序\r\n}\r\n\r\nenum MoreType {\r\n    del_card,//删除卡组\r\n    shard,//分享\r\n    copy,//粘贴\r\n    add, //自动填充\r\n    inquiry,//询问精灵\r\n}\r\n\r\n\r\n\r\ntype cardPanelState = {\r\n    sort_node: boolean,//排序界面\r\n    sort_type_1: number,\r\n    sort_type_2: number,\r\n    filtrate_node: boolean,//筛选界面\r\n    is_open_add_card_group: boolean,\r\n    search_node: boolean,\r\n\r\n}\r\n\r\nexport class CardsPanel extends Panel {\r\n    protected prefab: string = \"prefabs/cards/CardsPanel\";\r\n\r\n    private scroller: ScrollView;\r\n    private noneListCont: Node;\r\n    private sortNode: Node;\r\n    private closeSortBtn: Button;\r\n    private upOrDownBtn: Button;\r\n    private sortNav: Node[];\r\n    private filtrateNode: Node;\r\n    private searchNode: Node;\r\n    private editBox: EditBox;\r\n    private completeBtn: Button;\r\n    private cancelBtn: Button;\r\n\r\n    private filtrateBtn: Button;\r\n    private sortBtn: Button;\r\n    private moreBtn: Button;\r\n\r\n    private showNode: Node;\r\n    private cardGroupScrollView: AutoScroller;\r\n    private addCardNode: Node;\r\n    private addCardScrollView: AutoScroller;\r\n    private back: Node;\r\n    private clone_item: Node;\r\n    private groupNameEditBox: EditBox;\r\n    private moreNode: Node;\r\n    private moreNav: Node[];\r\n\r\n\r\n    private card_list: base.IBattleCard[] = [];\r\n    private max_card_group: number = 20; //最大卡组数\r\n    private max_card: number = 12; //最大卡牌数\r\n    private sort_type_1: CardSotrType1 = CardSotrType1.Up;\r\n    private sort_type_2: CardSotrType2 = CardSotrType2.Cost;\r\n    private search_card_list: base.IBattleCard[] = [];\r\n\r\n    private curSearchStr: string = \"\";\r\n    private searchStrList: string[] = [];\r\n    private selects: base.IBattleCard[] = [];\r\n    private add_or_change: boolean; //添加卡组true 修改卡组false;\r\n    private is_change_name: boolean = false;//是否修改名字\r\n    private is_open_add_card_group: boolean = false //false未打卡添加卡牌界面\r\n\r\n    protected onLoad() {\r\n        this.CloseBy(\"backBtn\");\r\n\r\n        this.noneListCont = this.find(\"noneListCont\");\r\n        this.sortNode = this.find(\"sortNode\");\r\n        this.scroller = this.find(\"ScrollView\", ScrollView);\r\n        this.scroller.node.on('select', this.onSelectCard, this);\r\n        this.sortNav = this.find(\"sortNode/bg/nav\").children.concat();\r\n        this.upOrDownBtn = this.find(\"sortNode/bg/upOrDown\", Button);\r\n        this.upOrDownBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.closeSortBtn = this.find(\"sortNode/bg/closeSortBtn\", Button);\r\n        this.closeSortBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.filtrateNode = this.find(\"filtrateNode\");\r\n        this.searchNode = this.find(\"filtrateNode/bg/searchNode\");\r\n        this.editBox = this.find(\"filtrateNode/bg/EditBox\", EditBox)\r\n        this.editBox.node.on(EditBox.EventType.EDITING_DID_ENDED, this.onEditEnd, this)\r\n        this.completeBtn = this.find(\"filtrateNode/bg/complete\", Button);\r\n        this.completeBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.cancelBtn = this.find(\"filtrateNode/bg/cancel\", Button);\r\n        this.cancelBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n\r\n        this.filtrateBtn = this.find(\"filtrateBtn\", Button);\r\n        this.filtrateBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n\r\n        this.sortBtn = this.find(\"sortBtn\", Button);\r\n        this.sortBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.showNode = this.find(\"showNode\");\r\n        this.cardGroupScrollView = this.find(\"showNode/cardGroupScrollView\", AutoScroller);\r\n        this.cardGroupScrollView.SetHandle(this.updateCardGroupItem.bind(this));\r\n        this.cardGroupScrollView.node.on('select', this.onCardGroupSelect, this);\r\n\r\n        this.addCardNode = this.find(\"showNode/addCardNode\");\r\n        this.addCardScrollView = this.find(\"showNode/addCardNode/addCardScrollView\", AutoScroller);\r\n        this.addCardScrollView.SetHandle(this.updateCardItem.bind(this));\r\n        // this.addCardScrollView.node.on('select', this.select, this);\r\n        this.back = this.find(\"showNode/addCardNode/back\");\r\n        this.clone_item = this.find(\"ScrollView/view/content/Cards\");\r\n        this.groupNameEditBox = this.find(\"showNode/addCardNode/groupNameEditBox\", EditBox);\r\n        this.groupNameEditBox.node.on(EditBox.EventType.EDITING_DID_ENDED, this.onGroupNameEditEnd, this)\r\n        this.moreBtn = this.find(\"showNode/addCardNode/moreBtn\", Button);\r\n        this.moreBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.moreNode = this.find(\"moreNode\");\r\n        this.moreNode.on(Input.EventType.TOUCH_END, () => {this.moreNode.active = false}, this)\r\n        this.moreNav = this.find(\"moreNode/bg/moreNav\").children.concat();\r\n\r\n        this.back.on(Input.EventType.TOUCH_END, () => {\r\n            if (this.selects.length > 0 || this.is_change_name) {\r\n                let id_list = [];\r\n                for (const iterator of this.selects) {\r\n                    id_list.push(iterator.id);\r\n                }\r\n                let send_data = new Protocol.setdeckcards();\r\n                send_data.attrs = { id: PlayerData.cur_id, name: this.groupNameEditBox.string, type: null };\r\n                send_data.cardIds = id_list;\r\n                send_data.deckId = PlayerData.cur_id;\r\n                Session.Send(send_data);\r\n            }else{\r\n               this.updateCardGroup();\r\n            }\r\n            \r\n        }, this)\r\n\r\n\r\n        this.sortNav.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                node.getComponent(Toggle).isChecked = true;\r\n                this.sort_type_2 = index;\r\n                this.setCardSort();\r\n            })\r\n        })\r\n\r\n        this.moreNav.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                node.getComponent(Toggle).isChecked = true;\r\n                this.onMoreBtn(index);\r\n            })\r\n        })\r\n\r\n        EventMgr.on(Evt_Card_Check_By_Name, this.updateCardsGroupCardData, this);\r\n        EventMgr.on(Evt_Card_Group_Update, this.updateCardGroup, this);\r\n    }\r\n    protected onShow(): void {\r\n        EventMgr.emit(Evt_Hide_Scene, js.getClassName(this));\r\n        // Session.Send(Protocol.getplayerdecks)\r\n    }\r\n    public flush(data:base.IDeckAttrs): void {\r\n        this.updateCardGroup();\r\n        this.updateAllCardsShow();\r\n        if(data){\r\n            this.is_open_add_card_group = true;\r\n            this.setHaveCardGroup(data)\r\n        }\r\n    }\r\n\r\n    private setHaveCardGroup(data:base.IDeckAttrs){\r\n          //已有卡组请求该卡组数据\r\n          this.add_or_change = false;\r\n          this.updatePanel();\r\n          this.groupNameEditBox.string = data.name\r\n          PlayerData.cur_id = data.id;\r\n          let getdeckcards = new Protocol.getdeckcards();\r\n          getdeckcards.deckId = data.id;\r\n          Session.Send(getdeckcards);\r\n    }\r\n\r\n    private updateCardGroup(){\r\n        this.is_open_add_card_group = false;\r\n        this.updatePanel();\r\n        this.updateAllCardGroup();\r\n    }\r\n\r\n    private updatePanel() {\r\n        this.cardGroupScrollView.node.active = !this.is_open_add_card_group\r\n        this.addCardNode.active = this.is_open_add_card_group\r\n        let size_1 = this.cardGroupScrollView.getComponent(UITransform).contentSize;\r\n        let size_2 = this.addCardNode.getComponent(UITransform).contentSize\r\n        let size_3 = this.is_open_add_card_group ? size_2 : size_1\r\n        this.showNode.getComponent(UITransform).setContentSize(size_3)\r\n        this.showNode.children.forEach(item => {\r\n            if (item.getComponent(Widget)) {\r\n                item.getComponent(Widget).updateAlignment();\r\n            }\r\n        })\r\n        this.selects = [];\r\n        this.scroller.content.children.forEach(item => {\r\n            if (item.getComponent(Card)) {\r\n                item.getComponent(Card).setSelect(false);\r\n            }\r\n        })\r\n\r\n        let height = this.scroller.getComponent(UITransform).contentSize.height\r\n        let panel_width = view.getVisibleSize().width;\r\n        let right_width = size_3.width;\r\n        let max_width = panel_width - right_width\r\n        this.scroller.getComponent(UITransform).setContentSize(size(max_width, height))\r\n        this.scroller.node.children[0].getComponent(Widget).updateAlignment();\r\n        this.scroller.content.getComponent(UITransform).setContentSize(size(max_width, 238))\r\n\r\n        let item_width = this.clone_item.getComponent(UITransform).contentSize.width\r\n        //最大放几个卡牌\r\n        let num = Math.floor(max_width / item_width)\r\n        //总剩余的间隙\r\n        let yu = max_width % item_width\r\n        //最大间隙\r\n        let jianju = Math.floor(yu / (num - 1))\r\n        //最右侧剩余间隙\r\n        let offset = yu % (num - 1);\r\n        //最小间隙15\r\n        if (jianju < 15) {\r\n            jianju = Math.floor((yu + item_width) / (num - 2))\r\n            offset = (yu + item_width) % (num - 2)\r\n        }\r\n        this.scroller.content.getComponent(Layout).paddingLeft = offset\r\n        this.scroller.content.getComponent(Layout).spacingX = jianju;\r\n        this.scroller.content.getComponent(Layout).updateLayout();\r\n    }\r\n\r\n    /**展示所有卡牌 */\r\n    private updateAllCardsShow(): void {\r\n        this.noneListCont.active = false;\r\n        this.card_list = []\r\n        for (const iterator of PlayerData.cards) {\r\n            this.card_list.push(iterator)\r\n        }\r\n        this.setCardSort();\r\n        if (PlayerData.player.battleCards.length > 0) {\r\n            this.setCardsData(this.card_list)\r\n        } else {\r\n            this.noneListCont.active = true;\r\n        }\r\n    }\r\n\r\n    /**展示所有卡组 */\r\n    private updateAllCardGroup(){\r\n        let data = [];\r\n        data = ObjectUtils.deepCopy(PlayerData.cardNameList);\r\n        if (PlayerData.cardNameList.length < 20) {\r\n            data.unshift(\"\")\r\n        }\r\n        this.cardGroupScrollView.UpdateDatas(data);\r\n    }\r\n\r\n    /**设置卡牌 */\r\n    private setCardsData(data_list: base.IBattleCard[]) {\r\n        this.scroller.content.removeAllChildren();\r\n        for (const iterator of data_list) {\r\n            let card = instantiate(this.clone_item);\r\n            card.on(Input.EventType.TOUCH_END, this.onSelectCard, this)\r\n            this.updateCardItem(card, iterator);\r\n            this.scroller.content.addChild(card);\r\n        }\r\n        const layout = this.scroller.content.getComponent(Layout);\r\n        layout.enabled = false;\r\n        layout.enabled = true;\r\n        layout.updateLayout();\r\n    }\r\n\r\n    protected updateCardItem(item: Node, data: base.IBattleCard) {\r\n        let card = item.getComponent(Card);\r\n        if (!card) card = item.addComponent(Card);\r\n        card.SetData(data);\r\n    }\r\n\r\n    /**选择卡牌 */\r\n    protected onSelectCard(event: EventTouch,) {\r\n        let item = event.getCurrentTarget();\r\n        let index = item.getSiblingIndex();\r\n        console.log(\"onSelectCard\", index);\r\n        if (this.is_open_add_card_group) {\r\n            //卡组打开卡牌加入或删除卡组\r\n            let cards = item.getComponent(Card);\r\n            let is_select = cards.getSelectState();\r\n            if(this.selects.length >= 12 && !is_select){\r\n                MsgPanel.Show(\"超出上限\")\r\n                return;\r\n            }\r\n            cards.setSelect(!is_select)\r\n            if (!is_select) {\r\n                this.selects.push(cards.getData())\r\n            } else {\r\n                this.selects.splice(this.selects.indexOf(cards.getData()), 1)\r\n            }\r\n            this.addCardsGroup();\r\n        } else {\r\n            console.log(\"打开展示界面\");\r\n        }\r\n    }\r\n\r\n    private addCardsGroup() {\r\n        let data = this.setCurCardGroupCardList(this.selects);;\r\n        this.addCardScrollView.UpdateDatas(data);\r\n    }\r\n\r\n    /**设置卡组 */\r\n    protected updateCardGroupItem(item: Node, data: base.IDeckAttrs) {\r\n        let card_group_item = item.getComponent(CardGroupItem);\r\n        if (!card_group_item) card_group_item = item.addComponent(CardGroupItem);\r\n        card_group_item.SetData(data);\r\n    }\r\n\r\n    /**选择卡组 */\r\n    protected onCardGroupSelect(index: number, item: Node) {\r\n        let data = item.getComponent(CardGroupItem).getData()\r\n        console.log(\"onCardGroupSelect\", data, typeof data);\r\n        /**添加卡组 */\r\n        this.is_open_add_card_group = true;\r\n        this.is_change_name = false;\r\n        if (typeof data == \"string\") {\r\n            this.updatePanel();\r\n            let count = PlayerData.cardNameList.length + 1\r\n            this.groupNameEditBox.string = \"自动-卡组\" + count;\r\n            let card_data = this.setCurCardGroupCardList([]);\r\n            this.addCardScrollView.UpdateDatas(card_data);\r\n            this.add_or_change = true;\r\n            if (this.add_or_change) {\r\n                let add = new Protocol.setdeckattrs();\r\n                add.attrs = { id: null, name: this.groupNameEditBox.string, type: null };\r\n                Session.Send(add)\r\n            }\r\n\r\n        } else {\r\n            //已有卡组请求该卡组数据\r\n            // this.add_or_change = false;\r\n            // this.updatePanel();\r\n            // this.groupNameEditBox.string = data.name\r\n            // PlayerData.cur_id = data.id;\r\n            // let getdeckcards = new Protocol.getdeckcards();\r\n            // getdeckcards.deckId = data.id;\r\n            // Session.Send(getdeckcards);\r\n\r\n            this.setHaveCardGroup(data)\r\n        }\r\n    }\r\n\r\n    /**展示卡组中卡牌 */\r\n    private updateCardsGroupCardData(data) {\r\n        console.log(\"data\", data)\r\n\r\n        let list: base.IBattleCard[] = [];\r\n        for (const key in data) {\r\n            if (Object.hasOwnProperty.call(data, key)) {\r\n                const element = data[key];\r\n                list.push(element);\r\n            }\r\n        }\r\n        list.sort((a: base.IBattleCard, b: base.IBattleCard) => {\r\n            let a_cost = CfgMgr.GetCard(a.cardId).Cost;\r\n            let b_cost = CfgMgr.GetCard(b.cardId).Cost;\r\n            return a_cost - b_cost;\r\n        })\r\n\r\n        let data_list = this.setCurCardGroupCardList(list);\r\n        this.addCardScrollView.UpdateDatas(data_list);\r\n    }\r\n\r\n    /**设置当前选中卡组的卡牌 */\r\n    private setCurCardGroupCardList(list){\r\n        let data_list = [];\r\n        for (let index = 0; index < 12; index++) {\r\n            let element = list[index] ? list[index] : null;\r\n            data_list.push(element);\r\n        }\r\n        return data_list\r\n    }\r\n\r\n    private onClick(btn: Button) {\r\n        let name = btn.node.name\r\n        console.log(name)\r\n        switch (name) {\r\n            case \"filtrateBtn\":\r\n                this.filtrateNode.active = true;\r\n                this.filtrateBtn.node.getChildByName(\"close\").active = false;\r\n                this.filtrateBtn.node.getChildByName(\"open\").active = true;\r\n                break;\r\n            case \"sortBtn\":\r\n                this.sortNode.active = true;\r\n                this.sortBtn.node.getChildByName(\"close\").active = false;\r\n                this.sortBtn.node.getChildByName(\"open\").active = true;\r\n                break;\r\n            case \"closeSortBtn\":\r\n                this.sortNode.active = false;\r\n                this.sortBtn.node.getChildByName(\"close\").active = true;\r\n                this.sortBtn.node.getChildByName(\"open\").active = false;\r\n                break;\r\n            case \"upOrDown\":\r\n                this.sort_type_1 = this.sort_type_1 == CardSotrType1.Up ? CardSotrType1.Down : CardSotrType1.Up;\r\n                this.setCardSort();\r\n                break;\r\n            case \"complete\":\r\n                this.filtrateNode.active = false;\r\n                this.filtrateBtn.node.getChildByName(\"close\").active = true;\r\n                this.filtrateBtn.node.getChildByName(\"open\").active = false;\r\n                break;\r\n            case \"cancel\":\r\n                this.setCardSort();\r\n                break;\r\n            case \"moreBtn\":\r\n                this.moreNode.active = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onMoreBtn(index) {\r\n        switch (index) {\r\n            case MoreType.del_card:\r\n                let delete_data = new Protocol.deletedeck();\r\n                delete_data.deckId = PlayerData.cur_id;\r\n                Session.Send(delete_data);\r\n                break;\r\n            case MoreType.shard:\r\n               \r\n                break;\r\n            case MoreType.copy:\r\n               \r\n                break;\r\n            case MoreType.add:\r\n               \r\n                break;\r\n            case MoreType.inquiry:\r\n              \r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setCardsData(this.card_list)\r\n    }\r\n\r\n    private onGroupNameEditEnd() {\r\n        this.is_change_name = true;\r\n    }\r\n    //——————————————————————————————————————————————————————————————————排序相关————————————————————————————————————————\r\n\r\n    private setCardSort() {\r\n        switch (this.sort_type_2) {\r\n            case CardSotrType2.Name:\r\n                this.getNameSort();\r\n                break;\r\n            case CardSotrType2.Cost:\r\n                this.getCostSort();\r\n                break;\r\n            case CardSotrType2.Power:\r\n                this.getPowerSort();\r\n                break;\r\n            case CardSotrType2.New:\r\n                this.getNewSort();\r\n                break;\r\n            case CardSotrType2.Quality:\r\n                this.getQulitySort();\r\n                break;\r\n            case CardSotrType2.UpLevel:\r\n                this.getCanUpSort();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setCardsData(this.card_list)\r\n    }\r\n\r\n    /**名字排序 */\r\n    private getNameSort() {\r\n        this.card_list.sort((a: base.IBattleCard, b: base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (this.sort_type_1 == CardSotrType1.Up) {\r\n                if (a_data.CardName == b_data.CardName) {\r\n                    return this.defaultSort(a_data, b_data)\r\n                }\r\n                return a_data.CardName.localeCompare(b_data.CardName);\r\n            } else {\r\n                if (a_data.CardName == b_data.CardName) {\r\n                    return this.defaultSort(a_data, b_data)\r\n                }\r\n                return b_data.CardName.localeCompare(a_data.CardName);\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    /**能量排序 */\r\n    private getCostSort() {\r\n        this.card_list.sort((a: base.IBattleCard, b: base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            return this.defaultSort(a_data, b_data)\r\n        })\r\n\r\n    }\r\n\r\n    /**战力排序 */\r\n    private getPowerSort() {\r\n        this.card_list.sort((a: base.IBattleCard, b: base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (this.sort_type_1 == CardSotrType1.Up) {\r\n                if (a_data.Power == b_data.Power) {\r\n                    if (a_data.Cost == b_data.Cost) {\r\n                        return a_data.ID - b_data.ID\r\n                    }\r\n                    return a_data.Cost - b_data.Cost;\r\n                }\r\n                return a_data.Power - b_data.Power\r\n            } else {\r\n                if (a_data.Power == b_data.Power) {\r\n                    if (a_data.Cost == b_data.Cost) {\r\n                        return b_data.ID - a_data.ID\r\n                    }\r\n                    return b_data.Cost - a_data.Cost;\r\n                }\r\n                return b_data.Power - a_data.Power\r\n            }\r\n        })\r\n    }\r\n\r\n    /**最新排序 */\r\n    private getNewSort() {\r\n        this.card_list.sort((a: base.IBattleCard, b: base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (this.sort_type_1 == CardSotrType1.Up) {\r\n                if (a_data.CardName == b_data.CardName) {\r\n                    return this.defaultSort(a_data, b_data)\r\n                }\r\n                return a_data.CardName.localeCompare(b_data.CardName);\r\n            } else {\r\n                if (a_data.CardName == b_data.CardName) {\r\n                    return this.defaultSort(a_data, b_data)\r\n                }\r\n                return b_data.CardName.localeCompare(a_data.CardName);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**品质排序 */\r\n    private getQulitySort() {\r\n        this.card_list.sort((a: base.IBattleCard, b: base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (this.sort_type_1 == CardSotrType1.Up) {\r\n                if (a.quality == b.quality) {\r\n                    return this.defaultSort(a_data, b_data)\r\n                }\r\n                return a.quality - b.quality;\r\n            } else {\r\n                if (a.quality == b.quality) {\r\n                    return this.defaultSort(a_data, b_data)\r\n                }\r\n                return b.quality - a.quality;\r\n            }\r\n        })\r\n    }\r\n\r\n    /**可升级排序 */\r\n    private getCanUpSort() {\r\n\r\n    }\r\n\r\n    /**默认规则 */\r\n    private defaultSort(a: StdCard, b: StdCard) {\r\n        if (this.sort_type_1 == CardSotrType1.Up) {\r\n            if (a.Cost == b.Cost) {\r\n                if (a.Power == b.Power) {\r\n                    return a.ID - b.ID\r\n                }\r\n                return a.Power - b.Power\r\n            }\r\n            return a.Cost - b.Cost;\r\n        } else {\r\n            if (a.Cost == b.Cost) {\r\n                if (a.Power == b.Power) {\r\n                    return b.ID - a.ID\r\n                }\r\n                return b.Power - a.Power\r\n            }\r\n            return b.Cost - a.Cost;\r\n        }\r\n    }\r\n\r\n    //——————————————————————————————————————————————————————————————————————筛选相关————————————————————————————————————————————————————————\r\n\r\n    private onEditEnd() {\r\n        if (this.editBox.string) {\r\n            this.curSearchStr = this.editBox.string\r\n            this.searchStrList.unshift(this.editBox.string)\r\n            if (this.searchStrList.length > 4) {\r\n                this.searchStrList.splice(4, 1)\r\n            }\r\n            this.searchNode.children.forEach(item => {\r\n                item.children[0].getComponent(Label).string = this.searchStrList[item.getSiblingIndex()]\r\n            })\r\n\r\n            let card_cfg: StdCard[] = CfgMgr.Get(\"Card\");\r\n            for (const key in card_cfg) {\r\n                if (Object.hasOwnProperty.call(card_cfg, key)) {\r\n                    const iterator = card_cfg[key];\r\n                    if (iterator.CardName.includes(this.editBox.string) || iterator.SkillDesc.includes(this.editBox.string)) {\r\n                        this.card_list.forEach(item => {\r\n                            if (item.cardId == iterator.ID) {\r\n                                this.search_card_list.push(item)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            this.setCardsData(this.search_card_list);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    protected onHide(...args: any[]): void {\r\n        EventMgr.emit(Evt_Show_Scene, js.getClassByName(this));\r\n    }\r\n}"]}