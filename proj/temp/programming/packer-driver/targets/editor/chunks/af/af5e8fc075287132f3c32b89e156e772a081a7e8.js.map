{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/fight/opOutput/Out_WaitPlayerInput.ts"],"names":["Out_WaitPlayerInput","js","Session","BattleBaseComp","DateUtils","OperateFailReason","battleDataMgr","BattleRoundOperationState","Battle_End_Round","EventMgr","Evt_BattlePlayHandTime","proto","Req","Ret","Route","CfgMgr","BeforeGameUtils","FightData","Utils","isSend","editGridList","copyHandCards","copyAreas","playerData","curEnergy","isCanCancel","isCandEdit","isHaveEnergyPlay","curState","areaLimitCardDrop","toHashMapObj","base","BattleRoomPersistentState","PersistentStateForbidCost1","PersistentStateForbidCost2","PersistentStateForbidCost3","areaLimitCardNum","PersistentStateMax1Card","limitPlayHandNum","PersistentStatePlaceCount1","inputTotalTime","start","creatRoomData","isReplay","sendRoundConfirm","scene","isWaitInput","exit","data","timeout","ServerTime","console","log","playerId","getPlayerId","getPlayerData","roundEnergy","round","finalValue","length","CopyProto","getPlayerHandCards","BattleRoomCardData","getPlayerTerrainDatas","BattleRoomTerrainPlayerData","updatePlayState","StartOperate","canMove","bind","canDrop","operateHandle","on","onBtnClick","onBattleroomconfirmopinput","BattleRoomConfirmOpInputPush","onConfirmOpInputPush","onBattleroomcancelopinput","undefined","isInput","oldInputs","newEditData","inputData","opType","BattleRoomOpInputType","In_HandToTerrain","index","handCardData","instId","HandToTerrain","cardInstId","splice","areaIdx","terrainData","terrainInstId","formAreaIdx","formCardIdx","curAreaIdx","curCardIdx","cards","editIdx","cardData","push","cost","In_TerrainToTerrain","cardIndex","TerrainToTerrain","FlushAreaCrads","FlushHandCard","cancelEditor","none","sendCancel","reset","PlaceRound","FlushRoundBtnStrState","FlushRoundTime","EndOperate","updateHandState","off","onUpdate","dt","roomData","roomId","offset","Math","ceil","emit","getCardLocation","cardIdx","card","getPlayerAreaEmptyCardLocation","terrainCardMax","lastOperateId","area","obj","editCardData","getEditCardData","location","BattleRoomCardLocation","Hand","stateList","getPersistentStateListByInstId","PersistentStatePlace","state","Number","source","checkLimitPlayHandNum","Terrain","chekPersistentStateByInstId","PersistentStateActiveMove","getPlayerTerrainFormIdx","selfInstId","PersistentStateMove","PersistentStatePut","areaHaveNoPutBuff","limit","dragLocation","undefine","confirmInput","checkLimitDropCardCost","configId","checkLimitDropCardNum","handToHandArea","terrainToTerrainArea","areaData","terrainIndexData","terrainState","BattleRoomInTerrainState","TerrainStateDestroy","areaDestroy","dropLocation","error","result","FlushEnergy","UnSelect","cardState","delIdx","indexOf","delEditCardData","SendMyCardToArea","pop","flushSelectEffect","areaId","myTeamLayout","i","active","server","pb","Server","create","id","serverId","dir","Send","inputs","input","BattleRoomOpInput","handToTerrainData","BattleRoomOpInput_HandToTerrain","terrainToTerrainData","BattleRoomOpInput_TerrainToTerrain","toTerrainInstId","decode","res","code","playerIdB","playerIdA","isConfirm","updateRoundState","CancelRound","EndRound","num","isCheck","createMap","cardId","stdCard","GetCard","Cost","haceNum","cardNum","curNum","limitNum","key"],"mappings":"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","sourcesContent":["import { Session } from \"../../../net/Session\";\r\nimport { BattleBaseComp } from \"../../battle/BattleBaseComp\";\r\nimport { DateUtils } from \"../../../utils/DateUtils\";\r\nimport { PlayerData } from \"../../player/PlayerData\";\r\nimport { OperateFailReason, battleDataMgr } from \"../../battle/BattleDataMgr\";\r\nimport { BattleRoundOperationState, CardLocation } from \"../../player/PlayerStruct\";\r\nimport { Battle_End_Round, EventMgr, Evt_BattlePlayHandTime } from \"../../../manager/EventMgr\";\r\nimport proto, { Req, Ret, Route } from \"../../../net/Protocol\";\r\nimport { CfgMgr, StdCard } from \"../../../manager/CfgMgr\";\r\nimport { BeforeGameUtils } from \"../../../utils/BeforeGameUtils\";\r\nimport { js } from \"cc\";\r\nimport { FightData } from \"../FightData\";\r\nimport { Utils } from \"../../../utils/Utils\";\r\ninterface IEditCardData {\r\n    formAreaIdx: number; //原区域下标\r\n    formCardIdx: number; //原格子下标\r\n    curAreaIdx: number; //当前区域下标\r\n    curCardIdx: number; //当前格子下标\r\n    editIdx?: number;     //编辑下标\r\n    cardData: proto.base.IBattleRoomCardData;\r\n}\r\n\r\n\r\n/**\r\n * 等待客户端玩家操作\r\n */\r\nexport class Out_WaitPlayerInput extends BattleBaseComp<proto.base.IBattleRoomOpOutput_WaitPlayerInput> {\r\n    private isSend: boolean = false; //是否已发送编辑卡\r\n    private editGridList: IEditCardData[] = [];//编辑中的卡牌列表\r\n    private copyHandCards: proto.base.IBattleRoomCardData[] = [];\r\n    private copyAreas: proto.base.IBattleRoomTerrainPlayerData[] = [];\r\n    private playerData: proto.base.IBattleRoomPlayerData;\r\n    private curEnergy: number;//当前编辑剩余能量\r\n    private isCanCancel: boolean;//是否可取消\r\n    private isCandEdit: boolean;//是否可编辑\r\n    private isHaveEnergyPlay: boolean;//是否还有足够的能量可出牌\r\n    private curState: BattleRoundOperationState;\r\n    //区域限制卡费点放置\r\n    private areaLimitCardDrop: { [key: number]: number } = BeforeGameUtils.toHashMapObj(\r\n        proto.base.BattleRoomPersistentState.PersistentStateForbidCost1, 1,//限制费点1的卡不能放置\r\n        proto.base.BattleRoomPersistentState.PersistentStateForbidCost2, 2,//限制费点2的卡不能放置\r\n        proto.base.BattleRoomPersistentState.PersistentStateForbidCost3, 3,//限制费点3的卡不能放置\r\n    );\r\n\r\n    //区域限制卡数量放置\r\n    private areaLimitCardNum: { [key: number]: number } = BeforeGameUtils.toHashMapObj(\r\n        proto.base.BattleRoomPersistentState.PersistentStateMax1Card, 1,//此区域只能放一张卡\r\n    );\r\n\r\n    //限制出来数量\r\n    private limitPlayHandNum: { [key: number]: number } = BeforeGameUtils.toHashMapObj(\r\n        proto.base.BattleRoomPersistentState.PersistentStatePlaceCount1, 1,//此回合只能出一张卡\r\n    );\r\n\r\n    private inputTotalTime: number;\r\n    protected start(): void {\r\n        //回放模式不可操作\r\n        if (battleDataMgr.creatRoomData.isReplay) {\r\n            this.sendRoundConfirm();\r\n            this.isCandEdit = false;\r\n            this.scene.isWaitInput = false;\r\n            this.exit();\r\n            return;\r\n        }\r\n        \r\n\r\n        this.inputTotalTime = this.data.timeout - DateUtils.ServerTime;\r\n        console.log(`当前回合出牌时长---->${this.inputTotalTime}`)\r\n        this.isCanCancel = false;\r\n        this.isCandEdit = true;\r\n        this.scene.isWaitInput = true;\r\n        let playerId = battleDataMgr.getPlayerId(true);\r\n        this.playerData = battleDataMgr.getPlayerData(playerId);\r\n        this.curEnergy = this.playerData.roundEnergy[this.round - 1].finalValue;\r\n        this.editGridList.length = 0;\r\n        \r\n        this.copyHandCards = Utils.CopyProto(battleDataMgr.getPlayerHandCards(playerId), proto.base.BattleRoomCardData);//structuredClone(battleDataMgr.getPlayerHandCards(playerId));\r\n        this.copyAreas = Utils.CopyProto(battleDataMgr.getPlayerTerrainDatas(playerId), proto.base.BattleRoomTerrainPlayerData);//structuredClone(battleDataMgr.getPlayerTerrainDatas(playerId));\r\n        this.updatePlayState();\r\n        this.scene.StartOperate(this.canMove.bind(this), this.canDrop.bind(this), this.operateHandle.bind(this));\r\n        \r\n        EventMgr.on(Battle_End_Round, this.onBtnClick, this);\r\n        Session.on(Route[\"battle.protocol.battleroomconfirmopinput\"], this.onBattleroomconfirmopinput, this);\r\n        Session.on(Route.BattleRoomConfirmOpInputPush, this.onConfirmOpInputPush, this);\r\n        Session.on(Route[\"battle.protocol.battleroomcancelopinput\"], this.onBattleroomcancelopinput, this);\r\n\r\n        if (this.data[\"isPlayerInput\"] !== undefined) {\r\n            let isInput: boolean = this.data[\"isPlayerInput\"];\r\n            let oldInputs: proto.base.IBattleRoomOpInput[] = this.data[\"inputs\"] || [];\r\n            let newEditData: IEditCardData;\r\n            for (let inputData of oldInputs) {\r\n                if (inputData.opType == proto.base.BattleRoomOpInputType.In_HandToTerrain) {\r\n                    for (let index = 0; index < this.copyHandCards.length; index++) {\r\n                        let handCardData: proto.base.IBattleRoomCardData = this.copyHandCards[index];\r\n                        if (handCardData.instId == inputData.HandToTerrain.cardInstId) {\r\n                            this.copyHandCards.splice(index, 1);\r\n                            for (let areaIdx = 0; areaIdx < this.copyAreas.length; areaIdx++) {\r\n                                let terrainData = this.copyAreas[areaIdx];\r\n                                if (terrainData.instId == inputData.HandToTerrain.terrainInstId) {\r\n                                    newEditData = {\r\n                                        formAreaIdx: undefined,\r\n                                        formCardIdx: index,\r\n                                        curAreaIdx: areaIdx,\r\n                                        curCardIdx: terrainData.cards.length,\r\n                                        editIdx: this.editGridList.length,\r\n                                        cardData: handCardData,\r\n                                    };\r\n                                    terrainData.cards.push(handCardData);\r\n                                    this.editGridList.push(newEditData);\r\n                                    this.curEnergy -= handCardData.cost.finalValue;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        } \r\n                    }\r\n                } else if (inputData.opType == proto.base.BattleRoomOpInputType.In_TerrainToTerrain) {\r\n                    let formAreaIdx: number = -1;\r\n                    let formCardIdx: number = -1;\r\n                    let curAreaIdx: number = -1;\r\n                    let curCardIdx: number = -1;\r\n                    let cardData: proto.base.IBattleRoomCardData;\r\n                    for (let areaIdx = 0; areaIdx < this.copyAreas.length; areaIdx++) {\r\n                        let terrainData = this.copyAreas[areaIdx];\r\n                        for (let cardIndex = 0; cardIndex < terrainData.cards.length; cardIndex++) {\r\n                            if (terrainData.cards[cardIndex].instId == inputData.TerrainToTerrain.cardInstId) {\r\n                                formAreaIdx = areaIdx;\r\n                                formCardIdx = cardIndex;\r\n                                cardData = terrainData.cards[cardIndex];\r\n                                terrainData.cards.splice(cardIndex, 1);\r\n                \r\n                                break;\r\n                            }\r\n                        }\r\n                        if (formAreaIdx > -1) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let areaIdx = 0; areaIdx < this.copyAreas.length; areaIdx++) {\r\n                        let terrainData = this.copyAreas[areaIdx];\r\n                        if (terrainData.instId == inputData.HandToTerrain.terrainInstId) {\r\n                            newEditData = {\r\n                                formAreaIdx: formAreaIdx,\r\n                                formCardIdx: formCardIdx,\r\n                                curAreaIdx: areaIdx,\r\n                                curCardIdx: terrainData.cards.length,\r\n                                editIdx: this.editGridList.length,\r\n                                cardData: cardData,\r\n                            };\r\n                            terrainData.cards.push(cardData);\r\n                            this.editGridList.push(newEditData);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let index = 0; index < this.copyAreas.length; index++) {\r\n                this.scene.FlushAreaCrads(true, index, this.copyAreas[index]);\r\n                \r\n            }\r\n            this.scene.FlushHandCard(this.copyHandCards);\r\n            this.cancelEditor(OperateFailReason.none);\r\n            //已经确认过出牌(以下操作主要是向服务器请求一下双方出手状态)\r\n            if (isInput) {\r\n                //发送重新出牌\r\n                this.sendRoundConfirm();\r\n            } else {\r\n                this.sendCancel();\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    protected reset(): void {\r\n        this.scene.isWaitInput = false;\r\n        this.curState = BattleRoundOperationState.PlaceRound;\r\n        this.scene.FlushRoundBtnStrState(this.curState);\r\n        this.scene.FlushRoundTime(0, this.isHaveEnergyPlay, this.curState, this.inputTotalTime);\r\n        this.scene.EndOperate();\r\n        this.updateHandState(false);\r\n        EventMgr.off(Battle_End_Round, this.onBtnClick, this);\r\n        Session.off(Route[\"battle.protocol.battleroomconfirmopinput\"], this.onBattleroomconfirmopinput, this);\r\n        Session.off(Route.BattleRoomConfirmOpInputPush, this.onConfirmOpInputPush, this);\r\n        Session.off(Route[\"battle.protocol.battleroomcancelopinput\"], this.onBattleroomcancelopinput, this);\r\n        this.isSend = false;\r\n        this.editGridList.length = 0;\r\n    }\r\n\r\n    protected onUpdate(dt: number): void {\r\n        if (!battleDataMgr.roomData || !battleDataMgr.roomData.roomId) {\r\n            this.exit();\r\n            return;\r\n        }\r\n        let offset: number = this.data.timeout - DateUtils.ServerTime;\r\n        if (this.isSend) {\r\n            //超时5秒若服务器没有响应直接结束\r\n            if (offset < 5) {\r\n                this.exit();\r\n            }\r\n            this.scene.FlushRoundTime(0, this.isHaveEnergyPlay, this.curState, this.inputTotalTime);\r\n            return;\r\n        }\r\n        this.scene.FlushRoundTime(Math.ceil(offset), this.isHaveEnergyPlay, this.curState, this.inputTotalTime);\r\n        //倒计时1秒后自动发送\r\n        if (offset <= 2) {\r\n            EventMgr.emit(Evt_BattlePlayHandTime);\r\n            this.sendRoundConfirm();\r\n        } else if (offset <= 0) {\r\n            this.exit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取本阶段的卡牌位置\r\n     * @param instId \r\n     * @returns \r\n     */\r\n    protected getCardLocation(instId: string): CardLocation {\r\n        for (let cardIdx = 0; cardIdx < this.copyHandCards.length; cardIdx++) {\r\n            let cardData = this.copyHandCards[cardIdx];\r\n            if (this.copyHandCards[cardIdx].instId == instId) {\r\n                return { areaIdx: undefined, cardIdx: cardIdx, card: cardData };\r\n            }\r\n        }\r\n        for (let areaIdx = 0; areaIdx < this.copyAreas.length; areaIdx++) {\r\n            let terrainData = this.copyAreas[areaIdx];\r\n            for (let cardIdx = 0; cardIdx < terrainData.cards.length; cardIdx++) {\r\n                let cardData = terrainData.cards[cardIdx];\r\n                if (cardData.instId == instId) {\r\n                    return { areaIdx: areaIdx, cardIdx: cardIdx, card: cardData };\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家区域空位卡牌位置\r\n     * @param playerId 玩家id\r\n     * @param areaIdx 区域下标\r\n     * @returns \r\n     */\r\n    protected getPlayerAreaEmptyCardLocation(areaIdx: number): CardLocation {\r\n        let terrainData = this.copyAreas[areaIdx];\r\n        if (terrainData.cards.length < battleDataMgr.roomData.terrainCardMax) {\r\n            return { areaIdx: areaIdx, cardIdx: terrainData.cards.length };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**最后一个操作 */\r\n    protected get lastOperateId() {\r\n        if (!this.editGridList || !this.editGridList.length) return undefined;\r\n        return this.editGridList[this.editGridList.length - 1].cardData.instId;\r\n    }\r\n\r\n    /**判断卡牌是否可以操作 */\r\n    protected canMove(instId: string, area?: number) {\r\n        let obj = this.getCardLocation(instId);\r\n        if (!obj) return \"目标无效\";\r\n        if (!this.isCandEdit) return \"当前目标不可移动\";\r\n\r\n        let cardData = obj.card;\r\n        let editCardData: IEditCardData = this.getEditCardData(cardData.instId);\r\n        if (editCardData) {\r\n            //拖拽的是编辑列表的卡 如果是最后一个则可以拖拽 否则不可以\r\n            if (editCardData.editIdx == this.editGridList.length - 1) return undefined;\r\n            return \"只能移动上一个卡牌\";\r\n        }\r\n        //无编辑卡\r\n        if (cardData.location == proto.base.BattleRoomCardLocation.Hand) {\r\n            let stateList: proto.base.IBaseAddMul[] = battleDataMgr.getPersistentStateListByInstId(instId, proto.base.BattleRoomPersistentState.PersistentStatePlace);\r\n            if (stateList) {\r\n                for (let state of stateList) {\r\n                    EventMgr.emit(\"buff_event\", Number(state.source));\r\n                }\r\n                \r\n                return \"此手卡已被锁定\";\r\n            }\r\n            if (this.curEnergy < cardData.cost.finalValue) {\r\n                //能量不足\r\n                return \"能量不足\";\r\n            }\r\n\r\n            if (this.checkLimitPlayHandNum()) {\r\n                return \"已超出出牌数量\";\r\n            }\r\n\r\n        } else if (cardData.location == proto.base.BattleRoomCardLocation.Terrain) {\r\n            //拖拽的是地形牌\r\n\r\n            //卡牌没有有可主动移动移动buff\r\n            if (!battleDataMgr.chekPersistentStateByInstId(instId, proto.base.BattleRoomPersistentState.PersistentStateActiveMove)) {\r\n                return \"目标卡牌不可移动\";\r\n            }\r\n            let terrainData: proto.base.IBattleRoomTerrainPlayerData = battleDataMgr.getPlayerTerrainFormIdx(this.playerData.playerId, area);\r\n            //此区域上中了不能移动buff\r\n            if (terrainData && battleDataMgr.chekPersistentStateByInstId(terrainData.selfInstId, proto.base.BattleRoomPersistentState.PersistentStateMove)) {\r\n                return \"此区域已被锁定无法移动\";\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**判断是否可以放置 */\r\n    protected canDrop(instId: string, area: number) {\r\n        if (instId == undefined) {\r\n            //此区域中了不可放置buff\r\n            let terrainData: proto.base.IBattleRoomTerrainPlayerData = battleDataMgr.getPlayerTerrainFormIdx(this.playerData.playerId, area);\r\n            let stateList: proto.base.IBaseAddMul[] = battleDataMgr.getPersistentStateListByInstId(terrainData.selfInstId, proto.base.BattleRoomPersistentState.PersistentStatePut);\r\n            if (stateList) {\r\n                for (let state of stateList) {\r\n                    EventMgr.emit(\"buff_event\", Number(state.source));\r\n                }\r\n                return OperateFailReason.areaHaveNoPutBuff;\r\n            }\r\n            if (!this.getPlayerAreaEmptyCardLocation(area)) return OperateFailReason.limit;\r\n            return OperateFailReason.none;\r\n        }\r\n        let dragLocation = this.getCardLocation(instId);\r\n        if (!dragLocation) return OperateFailReason.undefine;\r\n        if (!this.isCandEdit) return OperateFailReason.confirmInput;\r\n        let cardData = dragLocation.card;\r\n        if (area != undefined) {\r\n            let terrainData: proto.base.IBattleRoomTerrainPlayerData = battleDataMgr.getPlayerTerrainFormIdx(this.playerData.playerId, area);\r\n            let stateList: proto.base.IBaseAddMul[] = battleDataMgr.getPersistentStateListByInstId(terrainData.selfInstId, proto.base.BattleRoomPersistentState.PersistentStatePut);\r\n            //此区域中了不可放置buff\r\n            if (stateList) {\r\n                for (let state of stateList) {\r\n                    EventMgr.emit(\"buff_event\", Number(state.source));\r\n                }\r\n                \r\n                return OperateFailReason.areaHaveNoPutBuff;\r\n            }\r\n            //此区域中了不可放置buff\r\n            if (battleDataMgr.chekPersistentStateByInstId(terrainData.selfInstId, proto.base.BattleRoomPersistentState.PersistentStateForbidCost1)) {\r\n                if (this.checkLimitDropCardCost(cardData.configId, proto.base.BattleRoomPersistentState.PersistentStateForbidCost1)) {\r\n                    return OperateFailReason.areaHaveNoPutBuff;\r\n                }\r\n            }\r\n            if (battleDataMgr.chekPersistentStateByInstId(terrainData.selfInstId, proto.base.BattleRoomPersistentState.PersistentStateForbidCost2)) {\r\n                if (this.checkLimitDropCardCost(cardData.configId, proto.base.BattleRoomPersistentState.PersistentStateForbidCost2)) {\r\n                    return OperateFailReason.areaHaveNoPutBuff;\r\n                }\r\n            }\r\n            if (battleDataMgr.chekPersistentStateByInstId(terrainData.selfInstId, proto.base.BattleRoomPersistentState.PersistentStateForbidCost3)) {\r\n                if (this.checkLimitDropCardCost(cardData.configId, proto.base.BattleRoomPersistentState.PersistentStateForbidCost3)) {\r\n                    return OperateFailReason.areaHaveNoPutBuff;\r\n                }\r\n            }\r\n            if (battleDataMgr.chekPersistentStateByInstId(terrainData.selfInstId, proto.base.BattleRoomPersistentState.PersistentStateMax1Card)) {\r\n                if (this.checkLimitDropCardNum(area, proto.base.BattleRoomPersistentState.PersistentStateMax1Card)) {\r\n                    return OperateFailReason.areaHaveNoPutBuff;\r\n                }\r\n            }\r\n\r\n            //在地形区域放下\r\n            let editCardData: IEditCardData = this.getEditCardData(cardData.instId);\r\n            if (editCardData) {\r\n                //已在编辑卡里\r\n                if (cardData.location == proto.base.BattleRoomCardLocation.Hand) {\r\n                    //编辑的手牌不可以在地形上放下只能放回手牌区\r\n                    return OperateFailReason.handToHandArea;\r\n                } else if (cardData.location == proto.base.BattleRoomCardLocation.Terrain) {\r\n                    if (area != editCardData.formAreaIdx) {\r\n                        //编辑的区域牌只能放回原来区域\r\n                        return OperateFailReason.terrainToTerrainArea;\r\n                    } else {\r\n                        return OperateFailReason.none;\r\n                    }\r\n                }\r\n            }\r\n            let areaData: proto.base.IBattleRoomTerrainData = battleDataMgr.terrainIndexData(area);\r\n            if (areaData.terrainState == proto.base.BattleRoomInTerrainState.TerrainStateDestroy) {\r\n                //区域已销毁\r\n                return OperateFailReason.areaDestroy;\r\n            }\r\n            let dropLocation = this.getPlayerAreaEmptyCardLocation(area);\r\n            //区域已满不可放置\r\n            if (!dropLocation) return OperateFailReason.limit;\r\n            //原来就在此区域\r\n            if (dragLocation.areaIdx == area) return OperateFailReason.error;\r\n\r\n            return OperateFailReason.none;\r\n        } else {\r\n            //在手牌区放下\r\n            if (cardData.location == proto.base.BattleRoomCardLocation.Hand) {\r\n                let editCardData: IEditCardData = this.getEditCardData(cardData.instId);\r\n                if (editCardData && editCardData.editIdx == this.editGridList.length - 1) {\r\n                    return OperateFailReason.none;\r\n                }\r\n            } else {\r\n                //其它位置的卡牌不能放回手牌区\r\n            }\r\n            return OperateFailReason.error;\r\n        }\r\n    }\r\n\r\n    private cancelEditor(result: number = 0) {\r\n        this.scene.FlushEnergy(this.curEnergy);\r\n        this.scene.UnSelect();\r\n        this.updatePlayState();\r\n        this.updateHandState(true);\r\n        return result;\r\n    }\r\n\r\n    /**玩家放置动作回调 */\r\n    protected operateHandle(instId: string, area: number, cardState?: number) {\r\n        let result = this.canDrop(instId, area);\r\n        if (result) return this.cancelEditor(result);\r\n        let dragLocation = this.getCardLocation(instId);\r\n        if (cardState) dragLocation.card['playState'] = cardState;\r\n\r\n        if (area != undefined) {\r\n            let dropLocation = this.getPlayerAreaEmptyCardLocation(area);\r\n            //在地形区域放下\r\n            let editCardData: IEditCardData = this.getEditCardData(dragLocation.card.instId);\r\n            if (editCardData) {\r\n                if (dragLocation.card.location == proto.base.BattleRoomCardLocation.Terrain) {\r\n                    //区域上的卡放回原来区域位置\r\n                    let delIdx: number = this.editGridList.indexOf(editCardData);\r\n                    let delEditCardData: IEditCardData = this.editGridList[delIdx];\r\n                    this.editGridList.splice(delIdx, 1);\r\n                    //this.resetEditCardIndx();\r\n                    console.log(\"删除编辑---->\" + delIdx)\r\n                    let terrainData: proto.base.IBattleRoomTerrainPlayerData;\r\n                    terrainData = this.copyAreas[delEditCardData.curAreaIdx];\r\n                    //从当前区域删除\r\n                    terrainData.cards.splice(delEditCardData.curCardIdx, 1);\r\n                    console.log(\"从地形上删除---->\" + delEditCardData.curAreaIdx + \"------>\" + delEditCardData.curCardIdx)\r\n\r\n                    terrainData = this.copyAreas[delEditCardData.formAreaIdx];\r\n                    //插入到原来区域\r\n                    terrainData.cards.splice(delEditCardData.formCardIdx, 0, delEditCardData.cardData);\r\n                    console.log(\"添加到地形---->\" + delEditCardData.formAreaIdx + \"------>\" + delEditCardData.formCardIdx)\r\n                    this.scene.SendMyCardToArea(dragLocation.card, dropLocation.areaIdx, dropLocation.cardIdx);\r\n                    this.scene.FlushAreaCrads(true, dragLocation.areaIdx, this.copyAreas[dragLocation.areaIdx]);\r\n\r\n                    // this.scene.FlushAreaCrads(true, dropLocation.areaIdx, this.copyAreas[dropLocation.areaIdx]);\r\n\r\n                    return this.cancelEditor(OperateFailReason.none);\r\n                }\r\n            }\r\n\r\n            let newEditData: IEditCardData = {\r\n                formAreaIdx: dragLocation.areaIdx,\r\n                formCardIdx: dragLocation.cardIdx,\r\n                curAreaIdx: dropLocation.areaIdx,\r\n                curCardIdx: dropLocation.cardIdx,\r\n                editIdx: this.editGridList.length,\r\n                cardData: dragLocation.card,\r\n            };\r\n\r\n            this.editGridList.push(newEditData);\r\n            console.log(\"添加编辑---->\" + newEditData.curAreaIdx + \"----->\" + newEditData.curCardIdx)\r\n            if (dragLocation.card.location == proto.base.BattleRoomCardLocation.Hand) {\r\n                this.copyHandCards.splice(dragLocation.cardIdx, 1);\r\n                let terrainData: proto.base.IBattleRoomTerrainPlayerData = this.copyAreas[dropLocation.areaIdx];\r\n                terrainData.cards.push(dragLocation.card);\r\n                this.curEnergy -= dragLocation.card.cost.finalValue;\r\n                this.scene.SendMyCardToArea(dragLocation.card, dropLocation.areaIdx, dropLocation.cardIdx);\r\n                this.scene.FlushAreaCrads(true, dropLocation.areaIdx, this.copyAreas[dropLocation.areaIdx]);\r\n                this.scene.FlushHandCard(this.copyHandCards);\r\n\r\n                return this.cancelEditor(OperateFailReason.none);\r\n            } else if (dragLocation.card.location == proto.base.BattleRoomCardLocation.Terrain) {\r\n                let terrainData: proto.base.IBattleRoomTerrainPlayerData = this.copyAreas[dragLocation.areaIdx];\r\n                terrainData.cards.splice(dragLocation.cardIdx, 1);\r\n                this.scene.FlushAreaCrads(true, dragLocation.areaIdx, this.copyAreas[dragLocation.areaIdx]);\r\n\r\n                terrainData = this.copyAreas[dropLocation.areaIdx];\r\n                terrainData.cards.push(dragLocation.card);\r\n                this.scene.SendMyCardToArea(dragLocation.card, dropLocation.areaIdx, dropLocation.cardIdx);\r\n                this.scene.FlushAreaCrads(true, dropLocation.areaIdx, this.copyAreas[dropLocation.areaIdx]);\r\n\r\n                return this.cancelEditor(OperateFailReason.none);\r\n            }\r\n        } else {\r\n            //在手牌区放下\r\n            if (dragLocation.card.location == proto.base.BattleRoomCardLocation.Hand) {\r\n                let editCardData: IEditCardData = this.getEditCardData(dragLocation.card.instId);\r\n                if (editCardData && editCardData.editIdx == this.editGridList.length - 1) {\r\n                    this.editGridList.pop();\r\n                    this.curEnergy += dragLocation.card.cost.finalValue;\r\n                    let terrainData: proto.base.IBattleRoomTerrainPlayerData = this.copyAreas[dragLocation.areaIdx];\r\n                    terrainData.cards.splice(dragLocation.cardIdx, 1);\r\n                    this.scene.FlushAreaCrads(true, dragLocation.areaIdx, this.copyAreas[dragLocation.areaIdx]);\r\n\r\n                    this.copyHandCards.splice(editCardData.formCardIdx, 0, dragLocation.card);\r\n                    this.scene.FlushHandCard(this.copyHandCards);\r\n                    return this.cancelEditor(OperateFailReason.none);\r\n                }\r\n            } else {\r\n                //其它位置的卡牌不能放回手牌区\r\n            }\r\n            this.updatePlayState();\r\n            return OperateFailReason.error;\r\n        }\r\n        this.updatePlayState();\r\n        return OperateFailReason.error;\r\n    }\r\n\r\n    /**区域选中效果 */\r\n    protected flushSelectEffect(area?: number, index?: number) {\r\n        for (let areaId = 0; areaId < this.scene.myTeamLayout.length; areaId++) {\r\n            let cards = this.scene.myTeamLayout[areaId];\r\n            for (let i = 0; i < cards.length; i++) {\r\n                if (area == undefined || area != areaId) {\r\n                    cards[i].active = false;\r\n                } else if (index == undefined || index != i) {\r\n                    cards[i].active = false;\r\n                } else {\r\n                    cards[i].active = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onBtnClick(): void {\r\n        if (this.isCanCancel) {\r\n            this.sendCancel();\r\n            return;\r\n        }\r\n        this.sendRoundConfirm();\r\n    }\r\n    private sendCancel(): void {\r\n        let server: proto.pb.IServer = proto.pb.Server.create();\r\n        server.id = battleDataMgr.creatRoomData.serverId;\r\n        let data = new Req[\"battle.protocol.battleroomcancelopinput\"]();\r\n        data.server = server;\r\n        data.roomId = battleDataMgr.roomData.roomId;\r\n        console.log(\"发送取消回合结束---->\");\r\n        console.dir(data)\r\n        Session.Send(Route[\"battle.protocol.battleroomcancelopinput\"], data);\r\n    }\r\n\r\n    private sendRoundConfirm(): void {\r\n        if (this.isSend) return;\r\n        let inputs: proto.base.BattleRoomOpInput[] = [];\r\n        let input: proto.base.BattleRoomOpInput;\r\n        let editCardData: IEditCardData;\r\n        let terrainData: proto.base.IBattleRoomTerrainPlayerData;\r\n        for (let index = 0; index < this.editGridList.length; index++) {\r\n            editCardData = this.editGridList[index];\r\n            terrainData = this.copyAreas[editCardData.curAreaIdx];\r\n            input = proto.base.BattleRoomOpInput.create();\r\n            if (editCardData.cardData.location == proto.base.BattleRoomCardLocation.Hand) {\r\n                input.opType = proto.base.BattleRoomOpInputType.In_HandToTerrain;\r\n                let handToTerrainData: proto.base.IBattleRoomOpInput_HandToTerrain;\r\n                handToTerrainData = proto.base.BattleRoomOpInput_HandToTerrain.create();\r\n                handToTerrainData.terrainInstId = terrainData.instId;\r\n                handToTerrainData.cardInstId = editCardData.cardData.instId;\r\n                input.HandToTerrain = handToTerrainData;\r\n            } else if (editCardData.cardData.location == proto.base.BattleRoomCardLocation.Terrain) {\r\n                input.opType = proto.base.BattleRoomOpInputType.In_TerrainToTerrain;\r\n                let terrainToTerrainData: proto.base.IBattleRoomOpInput_TerrainToTerrain;\r\n                terrainToTerrainData = proto.base.BattleRoomOpInput_TerrainToTerrain.create();\r\n                terrainToTerrainData.toTerrainInstId = terrainData.instId;\r\n                terrainToTerrainData.cardInstId = editCardData.cardData.instId;\r\n                input.TerrainToTerrain = terrainToTerrainData;\r\n            }\r\n\r\n            inputs.push(input);\r\n        }\r\n        let server: proto.pb.IServer = proto.pb.Server.create();\r\n        server.id = battleDataMgr.creatRoomData.serverId;\r\n        let data = new Req[\"battle.protocol.battleroomconfirmopinput\"]();\r\n        data.server = server;\r\n        data.roomId = battleDataMgr.roomData.roomId;\r\n        data.inputs = inputs;\r\n        console.log(\"发送出牌数据---->\");\r\n        console.dir(data)\r\n        Session.Send(Route[\"battle.protocol.battleroomconfirmopinput\"], data);\r\n        this.isSend = true;\r\n        this.isCandEdit = false;\r\n    }\r\n\r\n    private onBattleroomconfirmopinput(data: any): void {\r\n        let result = Ret[\"battle.protocol.battleroomconfirmopinput\"].decode(data);\r\n        if (this.roomId != result.roomId) return;\r\n        if (result.res.code == 200) {\r\n            //battleDataMgr.setPlayerHandCards(this.playerData.playerId, this.copyHandCards);\r\n            //battleDataMgr.setPlayerTerrainDatas(this.playerData.playerId, this.copyAreas);\r\n        } else {\r\n            //出牌失败\r\n            console.log(\"-------->失败\");\r\n            this.copyHandCards = Utils.CopyProto(battleDataMgr.getPlayerHandCards(this.playerData.playerId), proto.base.BattleRoomCardData);//structuredClone(battleDataMgr.getPlayerHandCards(this.playerData.playerId));\r\n            this.copyAreas = Utils.CopyProto(battleDataMgr.getPlayerTerrainDatas(this.playerData.playerId), proto.base.BattleRoomTerrainPlayerData);//structuredClone(battleDataMgr.getPlayerTerrainDatas(this.playerData.playerId));\r\n            this.curEnergy = this.playerData.roundEnergy[this.round - 1].finalValue;\r\n            for (let index = 0; index < this.copyAreas.length; index++) {\r\n                this.scene.FlushAreaCrads(true, index, this.copyAreas[index]);\r\n            }\r\n\r\n            this.scene.FlushHandCard(this.copyHandCards);\r\n            this.cancelEditor();\r\n        }\r\n        //this.exit();\r\n    }\r\n\r\n    private onConfirmOpInputPush(data: any): void {\r\n        let result = Ret.BattleRoomConfirmOpInputPush.decode(data);\r\n        let playerIdB: string = battleDataMgr.getPlayerId(false);\r\n        let playerIdA: string = battleDataMgr.getPlayerId(true);\r\n        console.dir(result.isConfirm);\r\n        if (result.isConfirm[playerIdB] && result.isConfirm[playerIdA]) {\r\n            //双方已确认\r\n            this.isCanCancel = false;\r\n            this.exit();\r\n        } else if (result.isConfirm[playerIdB]) {\r\n            //对方已确认不能取消\r\n            this.isCanCancel = false;\r\n        } else {\r\n            //对方未确认并且我方已确认则可取消\r\n            if (result.isConfirm[playerIdA]) {\r\n                this.isCanCancel = true;\r\n            } else {\r\n                this.isCanCancel = false;\r\n            }\r\n\r\n        }\r\n        this.updateRoundState();\r\n    }\r\n    private onBattleroomcancelopinput(data: any): void {\r\n        let result = Ret[\"battle.protocol.battleroomcancelopinput\"].decode(data);\r\n        if (this.roomId != result.roomId) return;\r\n        if (result.res.code == 200) {\r\n            //取消成功\r\n            this.isCandEdit = true;\r\n            this.isSend = false;\r\n        } else {\r\n\r\n        }\r\n    }\r\n    private updateRoundState(): void {\r\n        this.curState = this.isCanCancel ? BattleRoundOperationState.CancelRound : BattleRoundOperationState.EndRound;\r\n        this.scene.FlushRoundBtnStrState(this.curState);\r\n    }\r\n\r\n    private getEditCardData(instId: string): IEditCardData {\r\n        for (let data of this.editGridList) {\r\n            if (data.cardData.instId == instId) return data;\r\n        }\r\n    }\r\n\r\n    //更新出牌状态\r\n    private updatePlayState(): void {\r\n        this.isHaveEnergyPlay = true;\r\n        let num: number = 0;\r\n        for (let index = 0; index < this.copyHandCards.length; index++) {\r\n            let cardData = this.copyHandCards[index];\r\n            if (this.curEnergy >= cardData.cost.finalValue) {\r\n                num ++;\r\n                break;\r\n            }\r\n        }\r\n        this.isHaveEnergyPlay = num > 0;\r\n        this.updateRoundState();\r\n    }\r\n\r\n    private updateHandState(isCheck: boolean = false): void {\r\n        let cardState: {[key: number]: number} = js.createMap();\r\n        if (isCheck && this.checkLimitPlayHandNum()) {\r\n            for (let cardData of this.copyHandCards) {\r\n                cardState[cardData.instId] = 1;\r\n            }\r\n        }\r\n        FightData.cardState = cardState;\r\n    }\r\n\r\n    /**\r\n     * 检测限制放置卡牌费点\r\n     * @param cardId \r\n     * @param state \r\n     * @returns \r\n     */\r\n    private checkLimitDropCardCost(cardId: number, state: proto.base.BattleRoomPersistentState): boolean {\r\n        let stdCard: StdCard = CfgMgr.GetCard(cardId);\r\n        let cost: number = this.areaLimitCardDrop[state];\r\n        if (stdCard.Cost == cost) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 检测限制放置卡牌的数量\r\n     * @param areaIdx \r\n     * @param state \r\n     * @returns \r\n     */\r\n    private checkLimitDropCardNum(areaIdx: number, state: proto.base.BattleRoomPersistentState): boolean {\r\n        let terrainData = this.copyAreas[areaIdx];\r\n        let haceNum: number = terrainData.cards.length;\r\n        let cardNum: number = this.areaLimitCardNum[state];\r\n        if (haceNum < cardNum) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 检测限制放置卡牌的数量\r\n     * @param areaIdx \r\n     * @param state \r\n     * @returns \r\n     */\r\n    private checkLimitPlayHandNum(): boolean {\r\n        let curNum: number = 0;\r\n        for (let editCardData of this.editGridList) {\r\n            if (editCardData.cardData.location == proto.base.BattleRoomCardLocation.Hand) {\r\n                curNum++;\r\n            }\r\n        }\r\n        let limitNum: number = 0;\r\n        for (let key in this.limitPlayHandNum) {\r\n            if (battleDataMgr.chekPersistentStateByInstId(this.playerData.instId, Number(key))) {\r\n                limitNum = this.limitPlayHandNum[key];\r\n                //以限制最少的状态为最终限制\r\n                if (limitNum == this.limitPlayHandNum[proto.base.BattleRoomPersistentState.PersistentStatePlaceCount1]) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return limitNum > 0 && curNum >= limitNum;\r\n    }\r\n}"]}