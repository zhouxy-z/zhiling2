{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/shop/ShopModule.ts"],"names":["ShopModule","EventMgr","Evt_ShopLuckyGet","Evt_ShopUpdate","Ret","Route","Session","BeforeGameUtils","MsgPanel","RewardTips","PlayerData","ShopErrorCodeType","constructor","errorStr","toHashMapObj","ErrorShopInvalidShopIndexID","ErrorShopInvalidShopIndexType","ErrorShopInvalidShopNotFindItem","ErrorShopInvalidShopInsufficientBuyCount","ErrorShopShopLuckyFrequencyMax","ErrorShopBuyItemHasExpired","ErrorShopConsumeItemFailed","ErrorShopCanNotManualRefresh","ErrorShopHasExpired","ErrorShopBuyPaymentCallFailed","ErrorShopBuyPaymentFailed","ErrorShopNotOpen","ErrorShopBuyPending","ErrorShopShopLuckyGlobalFrequencyMax","on","onShopGetIndexRet","onShopBuyItemRet","onShopDoLotteryRet","data","shop_data","decode","console","log","SetShopData","shopIndexContent","emit","shop_buy_data","UpdateShopData","newThings","length","Show","onShopRefreshRet","code","showErrorCode","luck_data","res","lucky","luckyId","onShopConvertLotteryItemRet","new_things"],"mappings":"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","sourcesContent":["import { EventMgr, Evt_ShopLuckyGet, Evt_ShopUpdate } from \"../../manager/EventMgr\";\r\nimport { Ret, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { BeforeGameUtils } from \"../../utils/BeforeGameUtils\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { RewardTips } from \"../common/RewardTips\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\n\r\n/**错误码类型*/\r\nexport enum ShopErrorCodeType {\r\n    ErrorShopInvalidShopIndexID = 100, // 无效的商店索引ID\r\n    ErrorShopInvalidShopIndexType = 101, // 无效的商店类型\r\n    ErrorShopInvalidShopNotFindItem = 102, // 无效的商店商品\r\n    ErrorShopInvalidShopInsufficientBuyCount = 103, // 无效的商店购买数量\r\n    ErrorShopShopLuckyFrequencyMax = 104, // 已到达商店抽奖次数上限\r\n    ErrorShopBuyItemHasExpired = 105, // 商品已过期\r\n    ErrorShopConsumeItemFailed = 106, // 消耗道具失败\r\n    ErrorShopCanNotManualRefresh = 107, // 不允许手动刷新的商店\r\n    ErrorShopHasExpired = 108, // 商店已过期\r\n    ErrorShopBuyPaymentCallFailed = 120,//支付调用失败\r\n    ErrorShopBuyPaymentCallSuccess = 121,//\r\n    ErrorShopBuyPaymentFailed = 122,//支付失败\r\n    ErrorShopNotOpen = 123,//商城未开启\r\n    ErrorShopBuyPending = 124,//有支付中的订单\r\n    ErrorShopShopLuckyGlobalFrequencyMax = 126,\r\n}\r\nexport class ShopModule {\r\n    private errorStr: { [key: string]: string } = BeforeGameUtils.toHashMapObj(\r\n        ShopErrorCodeType.ErrorShopInvalidShopIndexID, \"无效的商店索引ID\",\r\n        ShopErrorCodeType.ErrorShopInvalidShopIndexType, \"无效的商店类型\",\r\n        ShopErrorCodeType.ErrorShopInvalidShopNotFindItem, \"无效的商店道具\",\r\n        ShopErrorCodeType.ErrorShopInvalidShopInsufficientBuyCount, \"无效的商店购买数量\",\r\n        ShopErrorCodeType.ErrorShopShopLuckyFrequencyMax, \"已到达商店抽奖次数上限\",\r\n        ShopErrorCodeType.ErrorShopBuyItemHasExpired, \"道具已过期\",\r\n        ShopErrorCodeType.ErrorShopConsumeItemFailed, \"消耗道具失败\",\r\n        ShopErrorCodeType.ErrorShopCanNotManualRefresh, \"不允许手动刷新的商店\",\r\n        ShopErrorCodeType.ErrorShopHasExpired, \"商店已过期\",\r\n        ShopErrorCodeType.ErrorShopBuyPaymentCallFailed, \"支付调用失败\",\r\n        ShopErrorCodeType.ErrorShopBuyPaymentFailed, \"支付失败\",\r\n        ShopErrorCodeType.ErrorShopNotOpen, \"商城未开启\",\r\n        ShopErrorCodeType.ErrorShopBuyPending, \"有支付中的订单\",\r\n        ShopErrorCodeType.ErrorShopShopLuckyGlobalFrequencyMax, \"已到达商店抽奖全局次数上限\",\r\n\r\n    );\r\n\r\n    constructor() {\r\n        Session.on(Route[\"shop.protocol.getindex\"], this.onShopGetIndexRet, this);\r\n        Session.on(Route[\"shop.protocol.buyitem\"], this.onShopBuyItemRet, this);\r\n        // Session.on(MsgTypeRet.ShopManualRefreshRet, this.onShopRefreshRet, this);\r\n        Session.on(Route[\"shop.protocol.dolucky\"], this.onShopDoLotteryRet, this);\r\n        // Session.on(MsgTypeRet.ShopConvertLuckyItemRet, this.onShopConvertLotteryItemRet, this);\r\n        // Session.on(MsgTypeRet.ShopBuyWithPaymentSuccess, this.onShopGetIndexRet, this);\r\n    }\r\n\r\n    onShopGetIndexRet(data: any): void {\r\n        let shop_data = Ret[\"shop.protocol.getindex\"].decode(data);\r\n        console.log(shop_data);\r\n        PlayerData.SetShopData(shop_data.shopIndexContent);\r\n        EventMgr.emit(Evt_ShopUpdate);\r\n    }\r\n    onShopBuyItemRet(data: any): void {\r\n        let shop_buy_data = Ret[\"shop.protocol.buyitem\"].decode(data);\r\n        console.log(shop_buy_data)\r\n        PlayerData.UpdateShopData(shop_buy_data.shopIndexContent);\r\n        EventMgr.emit(Evt_ShopUpdate);\r\n        if (shop_buy_data.newThings && shop_buy_data.newThings.length) {\r\n            RewardTips.Show(shop_buy_data.newThings);\r\n        }\r\n    }\r\n    onShopRefreshRet(data: any): void {\r\n        if (data.code) {\r\n            this.showErrorCode(data.code);\r\n            return;\r\n        }\r\n        // PlayerData.SetShopData([data.shop_index_content]);\r\n        EventMgr.emit(Evt_ShopUpdate);\r\n    }\r\n    onShopDoLotteryRet(data: any): void {\r\n        let luck_data = Ret[\"shop.protocol.dolucky\"].decode(data);\r\n        console.log(luck_data)\r\n        if (luck_data.res.code == 200) {\r\n            PlayerData.UpdateShopData(luck_data.shopIndexContent);\r\n            EventMgr.emit(Evt_ShopUpdate);\r\n            // if (luck_data.newThings && luck_data.newThings.length) {\r\n            //     EventMgr.emit(Evt_ShopLuckyGet, luck_data.newThings, luck_data.shopIndexContent.lucky.luckyId);\r\n            // }\r\n            EventMgr.emit(Evt_ShopLuckyGet, luck_data.newThings, luck_data.shopIndexContent.lucky.luckyId);\r\n        }\r\n\r\n    }\r\n    onShopConvertLotteryItemRet(data: any): void {\r\n        if (data.code) {\r\n            this.showErrorCode(data.code);\r\n            return;\r\n        }\r\n        EventMgr.emit(Evt_ShopUpdate);\r\n        if (data.new_things && data.new_things.data && data.new_things.data.length) {\r\n            RewardTips.Show(data.new_things.data);\r\n        }\r\n    }\r\n\r\n    private showErrorCode(code: number): void {\r\n        let errorStr: string = this.errorStr[code];\r\n        if (errorStr) {\r\n            MsgPanel.Show(errorStr);\r\n        }\r\n    }\r\n}"]}