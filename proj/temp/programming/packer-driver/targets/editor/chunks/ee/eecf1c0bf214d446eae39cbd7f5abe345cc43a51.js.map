{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/season/SeasonPanel.ts"],"names":["SeasonPanel","Button","Label","Sprite","ProgressBar","path","SpriteFrame","v3","EditBox","Panel","CardGroupCoverItem","PlayerData","Req","Route","CfgMgr","MsgPanel","VSPanel","ResMgr","VList","SeasonCardGruopItem","Session","EventMgr","Evt_SectionUpdate","Evt_Set_Battle_Card_Group_Update","SectionAwardPanel","DateUtils","SeasonFightLogPanel","prefab","battleLogBtn","awardBtn","sectionIcon","sectionNameImg","starCont","maxStarCont","maxStarNumLab","expNumCont","expLineBg","curNumLab","maxNumLab","pro","vsBtn","cardGroupBtn","cardGroupCoverItem","cardGroupCont","cardGroupMask","cardGroupCloseBtn","cardGroupList","nameImg","timeLab","curStdPVPSnatch","curStdPvpLv","seasonData","curStar","maxStar","cardGroupData","cardGroupDataList","changeBtn","addBtn","subBtn","onLoad","find","addComponent","updateCell","updateCardGroupCell","bind","clickCell","cardGroupClick","CloseBy","node","on","EventType","CLICK","onBtnClick","update","dt","openTime","GetCurSeasonOpenTime","endTime","GetCurSeasonEndTime","residueTime","ServerTime","day","Math","floor","string","FormatTime","flush","active","updateCardGroup","initShow","onShow","onSetCardGroup","onSectionUpdate","onHide","off","btn","Show","size","CardGuroupComm","DeckFullSize","CurSeasonData","currentSeasonId","showCardGroup","num","Number","isNaN","currentRankInfo","rankPoints","updateSection","num1","num2","cardNameList","CurFightCardGroup","SetData","GetStdPVPSnatch","Hide","LoadResAbSub","join","View","res","spriteFrame","toString","GetStdPvpLvByPoint","RankGroupID","point","max","LevelPoints","StarPoints","Star","position","starNode","getChildByName","bright","index","children","length","LevelIcon","LevelNameImg","curExp","mapExp","progress","cellCount","defSelectIndex","data","id","selectIndex","cell","cellInfo","set","deckId","Send","cellCom","getComponent"],"mappings":"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","sourcesContent":["import { Node, Button, Label, Sprite, ProgressBar, path, SpriteFrame, v3, EditBox } from \"cc\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { CardGroupCoverItem } from \"../common/CardGroupCoverItem\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\nimport { CfgMgr, StdPvpLevel, StdPVPSnatch } from \"../../manager/CfgMgr\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { VSPanel } from \"../vs/VSPanel\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\nimport { CellInfo, VList } from \"../../component/VList\";\r\nimport { SeasonCardGruopItem } from \"./SeasonCardGruopItem\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { EventMgr, Evt_SectionUpdate, Evt_Set_Battle_Card_Group_Update } from \"../../manager/EventMgr\";\r\nimport { SectionAwardPanel } from \"./SectionAwardPanel\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport { TopUI } from \"../main/TopUI\";\r\nimport { SeasonFightLogPanel } from \"./SeasonFightLogPanel\";\r\n\r\nexport class SeasonPanel extends Panel {\r\n    protected prefab: string = \"prefabs/season/SeasonPanel\";\r\n    private battleLogBtn: Button;\r\n    private awardBtn: Button;\r\n    private sectionIcon: Sprite;\r\n    private sectionNameImg: Sprite;\r\n    private starCont: Node;\r\n    private maxStarCont: Node;\r\n    private maxStarNumLab: Label;\r\n    private expNumCont: Node;\r\n    private expLineBg: Node;\r\n    private curNumLab: Label;\r\n    private maxNumLab: Label;\r\n    private pro: ProgressBar;\r\n    private vsBtn: Button;\r\n    private cardGroupBtn: Button;\r\n    private cardGroupCoverItem: CardGroupCoverItem;\r\n    private cardGroupCont: Node;\r\n    private cardGroupMask: Button;\r\n    private cardGroupCloseBtn: Button;\r\n    private cardGroupList: VList;\r\n    private nameImg: Sprite;\r\n    private timeLab: Label;\r\n    private curStdPVPSnatch: StdPVPSnatch;\r\n    private curStdPvpLv: StdPvpLevel;\r\n    private seasonData: proto.pb.PlayerPvpInfoPush;\r\n    private curStar: number;\r\n    private maxStar: number;\r\n    private cardGroupData: proto.base.IDeckAttrs;\r\n    private cardGroupDataList: proto.base.IDeckAttrs[];\r\n    private changeBtn: Button;\r\n    private addBtn: Button;\r\n    private subBtn: Button;\r\n    private EditBox: EditBox;\r\n    protected onLoad() {\r\n        this.battleLogBtn = this.find(\"btnCont/battleLogBtn\", Button);\r\n        this.awardBtn = this.find(\"btnCont/awardBtn\", Button);\r\n        this.sectionIcon = this.find(\"sectionCont/sectionIcon\", Sprite);\r\n        this.sectionNameImg = this.find(\"sectionCont/sectionNameImg\", Sprite);\r\n        this.expNumCont = this.find(\"sectionCont/expCont\");\r\n        this.expLineBg = this.find(\"sectionCont/expCont/expLineBg\");\r\n        this.curNumLab = this.find(\"sectionCont/expCont/numCont/curNumLab\", Label);\r\n        this.maxNumLab = this.find(\"sectionCont/expCont/numCont/maxNumLab\", Label);\r\n        this.starCont = this.find(\"sectionCont/starCont\");\r\n        this.maxStarCont = this.find(\"sectionCont/maxStarCont\");\r\n        this.maxStarNumLab = this.find(\"sectionCont/maxStarCont/maxStarNumLab\", Label);\r\n        this.pro = this.find(\"sectionCont/pro\", ProgressBar);\r\n        this.vsBtn = this.find(\"vsBtn\", Button);\r\n        this.cardGroupBtn = this.find(\"cardGroupBtn\", Button);\r\n        this.cardGroupCoverItem = this.find(\"cardGroupBtn/CardGroupCoverItem\").addComponent(CardGroupCoverItem);\r\n        this.cardGroupCont = this.find(\"cardGroupCont\");\r\n        this.cardGroupMask = this.find(\"cardGroupCont/mask\", Button);\r\n        this.cardGroupCloseBtn = this.find(\"cardGroupCont/cont/closeBtn\", Button);\r\n        this.cardGroupList = this.find(\"cardGroupCont/cont/cardGroupList\", VList);\r\n        this.cardGroupList.updateCell = this.updateCardGroupCell.bind(this);\r\n        this.cardGroupList.clickCell = this.cardGroupClick.bind(this);\r\n        this.changeBtn = this.find(\"changeBtn\", Button);\r\n        this.addBtn = this.find(\"addBtn\", Button);\r\n        this.subBtn = this.find(\"subBtn\", Button);\r\n        this.EditBox = this.find(\"EditBox\", EditBox);\r\n        this.nameImg = this.find(\"topRightCont/nameImg\", Sprite);\r\n        this.timeLab = this.find(\"topRightCont/timeCont/timeLab\", Label);\r\n        //this.cardGroupList.selectCell = this.selectCardGroupCell.bind(this);\r\n        this.CloseBy(\"closeBtn\");\r\n        this.battleLogBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.awardBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.cardGroupBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.vsBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.cardGroupCloseBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.cardGroupMask.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.changeBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.addBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.subBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        if (this.curStdPVPSnatch) {\r\n            let openTime: number = PlayerData.GetCurSeasonOpenTime();\r\n            if (openTime > 0) {\r\n                let endTime: number = PlayerData.GetCurSeasonEndTime();\r\n                if (endTime > 0) {\r\n                    let residueTime: number = endTime - DateUtils.ServerTime;\r\n                    let day: number = Math.floor(residueTime / 86400);\r\n                    if (day >= 1) {\r\n                        this.timeLab.string = `${day}天` + DateUtils.FormatTime(residueTime - day * 86400, \"%{hh}:%{mm}:%{ss}\");\r\n                    } else {\r\n                        if (residueTime > 0) {\r\n                            this.timeLab.string = DateUtils.FormatTime(residueTime, \"%{hh}:%{mm}:%{ss}\");\r\n                        } else {\r\n                            this.timeLab.string = \"赛季已结束\";\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    this.timeLab.string = \"赛季未开启\";\r\n                }\r\n                \r\n            } else {\r\n                this.timeLab.string = \"赛季未开启\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public flush(): void {\r\n        this.cardGroupCont.active = false;\r\n        this.updateCardGroup();\r\n        this.initShow();\r\n    }\r\n\r\n    protected onShow(): void {\r\n        EventMgr.on(Evt_Set_Battle_Card_Group_Update, this.onSetCardGroup, this);\r\n        EventMgr.on(Evt_SectionUpdate, this.onSectionUpdate, this);\r\n    }\r\n\r\n    protected onHide(): void {\r\n        EventMgr.off(Evt_Set_Battle_Card_Group_Update, this.onSetCardGroup, this);\r\n        EventMgr.off(Evt_SectionUpdate, this.onSectionUpdate, this);\r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.battleLogBtn:\r\n                SeasonFightLogPanel.Show();\r\n                break;\r\n            case this.awardBtn:\r\n                SectionAwardPanel.Show();\r\n                break;\r\n            case this.vsBtn:\r\n                if (!this.cardGroupData) {\r\n                    MsgPanel.Show(\"未设置战斗卡组不可对战\")\r\n                    return;\r\n                }\r\n                if (this.cardGroupData.size < CfgMgr.CardGuroupComm.DeckFullSize) {\r\n                    MsgPanel.Show(`卡组卡牌数量不足${CfgMgr.CardGuroupComm.DeckFullSize}张`);\r\n                    return;\r\n                }\r\n                if (!PlayerData.CurSeasonData || PlayerData.CurSeasonData.currentSeasonId == 0) {\r\n                    MsgPanel.Show(\"暂时没有赛季进行中\");\r\n                    return;\r\n                }\r\n                if (DateUtils.ServerTime > PlayerData.GetCurSeasonEndTime()) {\r\n                    MsgPanel.Show(\"暂时没有赛季已结束\");\r\n                    return;\r\n                }\r\n                VSPanel.Show();\r\n                break;\r\n            case this.cardGroupMask:\r\n            case this.cardGroupCloseBtn:\r\n                this.cardGroupCont.active = false;\r\n                break;\r\n            case this.cardGroupBtn:\r\n                this.showCardGroup();\r\n                break;\r\n            case this.changeBtn:\r\n                let num: number = Number(this.EditBox.string);\r\n                if (isNaN(num)) return;\r\n                this.seasonData.currentRankInfo.rankPoints = num;\r\n                this.updateSection();\r\n                break;\r\n            case this.addBtn:\r\n                let num1: number = this.seasonData.currentRankInfo.rankPoints + 1;\r\n                this.seasonData.currentRankInfo.rankPoints = num1;\r\n                this.updateSection();\r\n                break\r\n            case this.subBtn:\r\n                let num2: number = this.seasonData.currentRankInfo.rankPoints - 1;\r\n                this.seasonData.currentRankInfo.rankPoints = num2;\r\n                this.updateSection();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onSetCardGroup(): void {\r\n        this.updateCardGroup();\r\n    }\r\n\r\n    private onSectionUpdate(): void {\r\n        this.initShow();\r\n    }\r\n\r\n    private updateCardGroup(): void {\r\n        this.cardGroupDataList = PlayerData.cardNameList;\r\n        this.cardGroupData = PlayerData.CurFightCardGroup;\r\n        this.cardGroupCoverItem.SetData(this.cardGroupData, false);\r\n        if (this.cardGroupCont.active) {\r\n            this.showCardGroup();\r\n        }\r\n    }\r\n\r\n    private initShow(): void {\r\n        this.seasonData = PlayerData.CurSeasonData;\r\n        if (this.seasonData) {\r\n            this.curStdPVPSnatch = CfgMgr.GetStdPVPSnatch(this.seasonData.currentSeasonId);\r\n            if (!this.curStdPVPSnatch) {\r\n                this.Hide();\r\n                return;\r\n            }\r\n            ResMgr.LoadResAbSub(path.join(\"sheets/season\", `${this.curStdPVPSnatch.View}`, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n                this.nameImg.spriteFrame = res;\r\n            });\r\n        } else {\r\n            this.Hide();\r\n            return;\r\n        }\r\n        this.updateSection();\r\n    }\r\n\r\n    private updateSection(): void {\r\n        this.EditBox.string = this.seasonData.currentRankInfo.rankPoints.toString();\r\n        this.curStdPvpLv = CfgMgr.GetStdPvpLvByPoint(this.curStdPVPSnatch.RankGroupID, this.seasonData.currentRankInfo.rankPoints);\r\n        let point: number = Math.max(this.seasonData.currentRankInfo.rankPoints - this.curStdPvpLv.LevelPoints, 0);\r\n        this.curStar = Math.floor( point / this.curStdPvpLv.StarPoints);\r\n        this.maxStar = this.curStdPvpLv.Star -1;\r\n        if (this.curStdPvpLv.Star == 1) {\r\n            this.starCont.active = false;\r\n            this.expLineBg.active = false;\r\n            this.maxStarCont.active = true;\r\n            this.maxStarNumLab.string = `x ${this.curStar}`;\r\n            this.expNumCont.position = v3(296, -268, 0);\r\n            let starNode: Node = this.maxStarCont.getChildByName(\"star\");\r\n            let bright: Node = starNode.getChildByName(\"bright\");\r\n            bright.active = this.curStar > 0;\r\n        } else {\r\n            this.maxStarCont.active = false;\r\n            this.expLineBg.active = true;\r\n            this.starCont.active = true;\r\n            this.expNumCont.position = v3(0, -194, 0);\r\n            \r\n            for (let index = 0; index < this.starCont.children.length; index++) {\r\n                let starNode: Node = this.starCont.children[index];\r\n                if (index < this.maxStar) {\r\n                    starNode.active = true;\r\n                    let bright: Node = starNode.getChildByName(\"bright\");\r\n                    bright.active = this.curStar > index;\r\n                } else {\r\n                    starNode.active = false;\r\n                }\r\n                \r\n            }\r\n        }\r\n        \r\n        ResMgr.LoadResAbSub(path.join(\"sheets/sectionIcon\", this.curStdPvpLv.LevelIcon, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.sectionIcon.spriteFrame = res;\r\n        });\r\n        ResMgr.LoadResAbSub(path.join(\"sheets/sectionIcon\", this.curStdPvpLv.LevelNameImg, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.sectionNameImg.spriteFrame = res;\r\n        });\r\n        let curExp: number = point % this.curStdPvpLv.StarPoints;\r\n        let mapExp: number = this.curStdPvpLv.StarPoints;\r\n        this.curNumLab.string = curExp.toString();\r\n        this.maxNumLab.string = mapExp.toString();\r\n        this.pro.progress = curExp / mapExp;\r\n    }\r\n\r\n    private showCardGroup(): void {\r\n        this.cardGroupCont.active = true;\r\n        this.cardGroupList.cellCount = this.cardGroupDataList.length;\r\n        let defSelectIndex: number = 0;\r\n        for (let index = 0; index < this.cardGroupDataList.length; index++) {\r\n            let data = this.cardGroupDataList[index];\r\n            if (this.cardGroupData && data.id == this.cardGroupData.id) {\r\n                defSelectIndex = index;\r\n                break;\r\n            }\r\n        }\r\n        this.cardGroupList.selectIndex(defSelectIndex);\r\n    }\r\n\r\n    private cardGroupClick(cell: Node, cellInfo: CellInfo): void {\r\n        let cardGroupData: proto.base.IDeckAttrs = this.cardGroupDataList[cellInfo.index];\r\n        /* if (cardGroupData.size < CfgMgr.CardGuroupComm.DeckFullSize) {\r\n            MsgPanel.Show(`卡组卡牌数量不足${CfgMgr.CardGuroupComm.DeckFullSize}张无法出战`);\r\n            return;\r\n        } */\r\n        let set = new Req[\"logic.protocol.setdeckdefault\"]();\r\n        set.deckId = cardGroupData.id;\r\n        Session.Send(Route[\"logic.protocol.setdeckdefault\"],set);\r\n        this.cardGroupCont.active = false;\r\n    }\r\n\r\n    private updateCardGroupCell(cell: Node, cellInfo: CellInfo): void {\r\n        let cellCom: SeasonCardGruopItem = cell.getComponent(SeasonCardGruopItem) || cell.addComponent(SeasonCardGruopItem);\r\n        cellCom.SetData(this.cardGroupDataList[cellInfo.index]);\r\n    }\r\n}"]}