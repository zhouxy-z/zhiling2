{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/PlayerData.ts"],"names":["PlayerData","CountPower","roleType","level","role","battle_power","power","std","GetRole","type","Attr","GetAttr","Power","GetAttrValue","AttrFight","GetFightAttr","GetFightAttrValue","stdlv","GetRoleLevel","Math","floor","RoleCardPower","roleQual","roleLv","val","countPower","attrList","valList","attrGroup","count","attrType","attrVal","i","length","fightAttrGroup","AttrValue","AttrFightValue","countMainSkill","skillId","skillLv","stdMainSkill","GetActiveSkill","countPassiveSkill","passiveSkill","GetPassiveSkill","stdRole","skillLvIndex","skillData","active_skills","skill_id","passive_skills","n","undefined","passiveSkillIds","PassiveGife","push","PassiveJob","passiveSkillId","stdQuality","GetRoleQuality","CountBuildPower","BuildingId","GetBuildingLv","game","js","CfgMgr","FishBombRoundState","FishRoundState","FishTradeRoundState","GuildPostType","ItemSubType","ItemType","OneOffRedPointId","ResourceType","ShopGroupId","ShopType","StdSysId","ThingItemId","ThingType","maxx","ReplaceStr","BuildingType","DateUtils","EventMgr","Evt_ChannelMsgUpdate","Evt_FishHeroUpdate","Evt_Item_Change","Evt_LoginRedPointUpdate","Evt_Role_Del","BeforeGameUtils","LocalStorage","GameSet","DEV","DL","BuildingState","GuildEventType","RoleStateType","STaskState","constructor","init","SyncServerTime","time","serverTime","CycleTimeMap","GetTodaySecond","localTimestamp","Date","now","server_offset","GetServerTime","GetServerDate","_serverDate","setTime","countDown","timestamp","leftTime","leftH","leftM","leftS","toString","countDown2","leftD","d","h","m","s","WeeHoursTime","timeZone","offsetTime","curTime","SetPlayerInfo","playerInfo","item_productions","soldiers","soldier_productions","roles","defense_lineup","attack_lineup","boss_lineup","config_data","tasks","items","contact_wechat","contact_qq","name_changed_times","GetItem","ItemId_1","id","ItemId_2","ItemId_3","ItemId_6","ItemId_7","ItemId_8","ItemId_9","ItemId_74","ItemId_202","UpdateSpecialItems","eimt","info","item","currency","max","emit","currency2","currency3","resources","wood","rock","water","seed","currency_74","currency_77","roleInfo","pveData","pve_data","playerIdKey","player_id","GetitemByType","itemType","Getitem","Itemtpye","GetitemBySubType","subType","SubType","getActiveTask","stdTasks","GetTaskType","task","ShowTask","TaskId","unFinsh","CompletionNum","v","stdAllTasks","GetTask","Show","GetResBySubType","datas","cost","shard","Items","data","ThingTypeItem","roleData","forEach","stateList","GetRoleStateList","is_assisting","is_in_main_building","ownership_type","role_data","ThingTypeRole","data1","ThingTypeResource","resource","data2","data3","data4","getOrderListData","index","element","things","getCrossOrderListData","bourse_id","getOrderIsLockByViewId","view_id","tradeViewData","order_list","order_state_list","GetRoles","concat","GetRoleNum","GetPlayerByType","result","GetPlayerPower","totalPower","AddRole","DelRole","splice","attackRoles","worldBossAttackRoles","homelands","nowhomeLand","GetHomeLand","RunHomeId","homeId","homeland","GetItemCount","GetItemTypeDatas","stdItem","newItems","Type","GetBuilding","buildingId","homeLand","building","buildings","flushWorkers","state","GetBuildingState","GetBuildings","bulidings","GetBuildingByType","buildType","GetBuildingUnLock","workerIdArr","works","cheng_qiang","building_id","main_building_id","GetWorkerNum","num","CheckRoleFree","battle","role_id","typeList","State_Work","State_Attack","State_Defend","State_Assist","State_NFT","GetRoleState","State_None","roleId","stateType","home","build","nft_lock_expires","console","log","checkBuilding","buildDefaine","HomeId","is_upgrading","Building","upgrade_time","getTime","CanUnLock","Complete","Lock","UnLockBuilding","buliding","OpenBuilding","UpGradeBuilding","UpgradeCompleteTime","BuildingSubType","GetBuildingLevel","stdDef","GetBuildingDefine","AddBuildRoles","is_in_building","RemoveBuildRoles","updateCompoundCount","resource_exchange_uses","GetRoleByPid","GetRoleById","GetRoleByTypeAndLvAndQuality","lv","quality","getMaxQualityByType","max_quality","quality_role","getMaxFightingByType","max_battle_power","CheckCondition","conditionId","conditionValue","objs","ji_di","obj","UpdateItemProduction","ls","isCheck","GetProductionState","GetProductionIds","finsish","ids","GetProduction","finish_time","FinishItemProduction","IndexOfProduction","GetSoldier","soliderId","GetSoldierProduction","AddSoldierProduction","start_time","UpdateSoldier","production","soldier_id","add","GetSoldierProductionByType","soldier","total_count","UpdateSoldierProdTime","AllocateSolider","ship","GetRoleAttr","LeaderShip","updataPveData","progress","updateSoldiers","resetMail","mails","mailmap","getMailReward","thing","SetFishingHeroId","_fishHeroId","GetFishingHeroId","GetHotLake","feedNum","maxId","fishData","lakes","lakeData","lake_id","GetLakeData","CurFishRoundInfo","round_info","FishSessionIsHell","session_info","kill_type","kill_type_end","GetFishRoundState","No","end_time","is_open","NoStart","is_settlement","settlement","player","round_cost","Settle","NoFishing","is_frozen","LiftRod","Select","NoSelect","FishMyLakeIsIced","FishIcedLakeIds","newList","FishRodType","stdRodList","GetFishRodTypeList","MinValue","MaxValue","FishItemAdd","list","fishItems","FishItemRemove","fishItem","findIndex","GetFishItem","GetFishRaceIsOpen","Server_cfg","Mark","openLv","GetFishCommon","OpenLevel","fishingMatch","current_match","next_match","StartTime","CloseTime","GetFishingEquipHero","fishHeros","fishHero","GetFishingEquipData","slotId","parts","equipData","slot_id","GetFishingEquipSkill","effective_skills","CurFishTradeRoundInfo","fishTradeData","GetHotShip","weightNum","shipData","ship_id","GetFishTradShipState","shipId","tempList","sort","a","b","GetShipData","GetFishTradeRoundState","NoFishTrade","is_departure","Departure","GetLootBaseAwardThing","RewardType","RewardID","RewardNumber","ThingTypeCurrency","value","ThingTypeGold","gold","ThingTypeEquipment","experience","soldier_num","skills","is_in_attack_lineup","is_in_defense_lineup","trade_cd","GetLootRankCfg","seasonData","season_id","rank","list_data","getPVPById","list_id","JackpotType","stdRank","Get","top_rank","curData","ListModeID","ListType","Ranking","all_player","SetShopData","shopMap","createMap","shopData","shop_index_id","GetShopData","shopId","GetCommShopData","shop","GetShopLuckyData","lucky","SetNoticeDatas","unLogin","noticeDatas","newData","newKeyVal","oldKeyVal","GetPlayerData","SetPlayerData","GetNoticeDatas","CheckFishTradeEnterRead","CheckFishTradeIsOpen","CheckFishIsOpen","GetOneOffRedPoint","OffRedPoint_FishOpen","redPointVal","fishOpenTimeCfg","Opentime","openTiem","timearr","replace","split","startHour","Number","startMinute","endHour","endMinute","isRedPoint","timeData","startS","weeHoursTime","endS","CheckFishShopIsSell","OffRedPoint_FishSell","OffRedPoint_FishTradeOpen","fishTradeOpenTimeCfg","GetFishTradeCommon","CheckRoleIsCanUp","maxLv","curLv","nextLv","exp","totlaExp","reduce","ItemEffect1","checkRole","GetRoleMaxLevel","GetRoleExpMaxLevel","Level","ConditionId","condData","FormatCondition","ConditionLv","fail","BreakItem","myMoney","Cost","itemId","itemNum","BreakCost","have","CheckProductionRed","item_id","sheng_chan","max_count","MAX_SAFE_INTEGER","stdlst","cfg","GetProductions","ConditionID","ConditionValue","ItemID","CostItemID","Num","costList","nums","has","CheckRoleChip","ItemEffect3","CheckBagBox","box","CheckLoop","GetSysIsOpen","Sys_7","LootPlayerData","match_count","paid_refresh_count","LootSeasonInfo","haveNum","ConsumeItem","ConsumeNumber","ResetChannelMsg","channelMsg","SetAdvisterData","advisterCount","key","GetAdvister","Max_numb","cdEndTime","UpdateAdvisterData","newCount","advisterData","GetAdvisterData","Ad_ID","SetAdvisterCd","adData","totalTime","Ad_CD","AddChannelMsg","arg","msg","GetMessag","formatCont","Content","msdData","title","cont","unshift","AddServerChannelMsg","content","GetChannelMsgList","CheckAddTimeItem","itemDatas","speed","stdSysOpen","GetSysOpenCfg","types","values","Check","ResetOneOffRedPoint","oneOffRedPoint","oneOffRedPointCondIds","SetOneOffRedPoint","redPointValue","ResetMyGuildData","MyGuild","GetMyGuildLimit","memberData","members","GetGuildRole","GetMyGuildApply","PermissionApplication","GetMyGuildChange","PermissioneName","PermissionLogo","PermissionJoin","PermissionEditAnnouncement","GetGuildMeetPost","playerId","postId","GetGuildPostNum","GetGuildIsHaveApply","guildId","applyData","applyTime","GetGuildComm","ApplicationsExpirationTime","guild_id","GetGuildEventCont","guildEventData","stdGuildEvent","GetGuildEvent","event_type","event_args","GetGuildEventStr","ID","eventId","newVal","EventType_4","stdGuildRole","Name","GetGuildPostPrivilegeList","guildType","guildPost","stdGuildType","GetGuildType","idList","stdEquity","GetGuildEquity","GetMyGuildPrivilegeList","myPost","GetMyGuildPrivilegeById","GetMyGuildPrivilegeByIdToValue","myStd","GuildRole","GetMyGuildAuthority","myData","targetData","targetStd","President","VicePresident","Member","Officer","SearchGuildMember","queryStr","regex","RegExp","join","sGuildMember","test","name","GetIsActivateRights","equityId","rightsData","all_equities","getFanyuMainRole","stds","isdefense","defense","isattack","Roleid","RoleQuailty","curRoles","filter","indexOf","getFanyuOrtherRole","mainRole","need_1","OtherRoleid","need_2","getJinHuaRole","is_work","is_can","RoleTypeQual","getXiLianRole","is_has","GetRoleSkillClearCfg","GetShangZhenBattlePower","szRoleData","CorrectionRightsCardTime","benefit_card","cards","newTime","GetEquityCardResidueTime","cardId","endTime","GetEquityCardIsCanGetAward","benefit_card_can_claim","GetEquityByTypeGetCardList","isActivate","cardList","GetEquityCardList","stdCard","typeCardList","Equity_list","getEquityListById","Equity_Type","Equity_CardID","GetEquityByTypeTotalValue","stdEquityCard","j","Value","GetEquityCardByTypeValue","getEquityCardById","GetAllWorkMedal","workerRate_medal","cfg_medal","GetProduceMedal","produce_medal","CheckEquityRead","GetEquityCardTabList","stdCardTab","EquityCardIds","CheckEquityMiniTabRead","CheckEquityMaxTabRead","tabId","stdTab","GetEquityCardTab","SetTodayTips","tipsId","nextDayHoursTime","SetNumber","GetIsShowTodayTips","oleTime","GetNumber","CurFishBombSatgeInfo","fishBombData","stages","stage_index","GetFishBombRoundState","NoOpen","NoRound","RoundSettle","ignite_time","StageSettle","BombBlasts","CanCastBomb","GetFishBombSelfCurRoundCost","GetFishBombCurPondId","pondId","fish_pool_id","GetFishBombJoin","selectId","costNum","FishBombType","TypeId","GetFishBombDieRoundNum","dieRound","stageInfo","fish_pool","is_kill","GetHotPond","pondData","SetWorldBossDataData","base","boss_type","worldBossData","bossIndex","GetWorldBossComm","BossType","endNum","stdLvId","boss_lv","stdRoleType","skillList","attrValueList","maxHp","stdAttrTypeList","stdAttrValueList","bossLvList","GetWorldBossLvList","bossLvInfo","curBossLv","attrTypeName","newAttrValue","attrIndex","HPMax","terminator","settle","start","end","HP","max_Hp","max_HP","reward_status","roundId","r","icon","Icon","model","Prefab","attrTypeList","desc","Synopsis","SetWorldBossRankData","worldBossRankData","tempRankList","rank_data_list","newRankList","rankData","changeIdList","endLen","changeId","GetWorldIsCanChallenge","CheckWorldBossNearOpneTime","worldBossOpenTimeList","InitWorldBossOpenTime","isNear","GetWorldOpenTimeList","isHideUI","rankTime","code","query_type","query_args","page_index","page_size","page_last_index","tradeAllBalances","jy","hc","score","serverid","unionid","fightState","mails_log","fishShop","status","is_settled","rank_list","LootSeasonApplyInfo","LootLastSeasonInfo","seasonId","remaining_defense_count","match_duration","match_cd_end_time","has_shield","shield_end_time","defense_end_time","is_use_item","PvpShopData","LootMatchList","TipsList","ShopGroupInfo","toHashMapObj","BaseShop","LuckyShop","TabSort","ShopName","DayShop","TempShop","WeekShop","GemShop","GemConversion","PvpShop","WorldBossShop","fishTempDate","OffRedPoint_FishShopBuy","OffRedPoint_RolePassiveSkill"],"mappings":"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","sourcesContent":["import { Attr, AttrFight, CfgMgr, ConditionType, FishBombRoundState, FishRoundState, FishTradeRoundState, GuildPostType, ItemSubType, ItemType, MessagId, OneOffRedPointId, ResourceType, ShopGroupId, ShopType, StdActiveSkill, StdAdvister, StdAttr, StdCommonType, StdEquityCard, StdEquityCardTab, StdEquityId, StdEquityList, StdEquityListType, StdFishCommon, StdFishEquipSoltType, StdFishHero, StdFishRod, StdFishShop, StdFishTradeCommon, StdGuildBank, StdGuildEquity, StdGuildEvent, StdGuildRole, StdGuildType, StdItem, StdLootRank, StdMerge, StdMessag, StdPassiveLevel, StdProduction, StdRole, StdRoleLevel, StdShopGroup, StdShopowner, StdSysId, StdSystemOpen, StdTask, StdWorldBossComm, StdWorldBossLv, ThingItemId, ThingType } from \"../../manager/CfgMgr\";\r\nimport { maxx, ReplaceStr } from \"../../utils/Utils\";\r\nimport { AttrSub, ConditionSub } from \"../common/AttrSub\";\r\nimport { BuildingType, SLastSeasonInfo, SPlayerDataFusionStone } from \"../home/HomeStruct\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport { EventMgr, Evt_AdvisterUpdate, Evt_ChannelMsgUpdate, Evt_FishHeroUpdate, Evt_Item_Change, Evt_LoginRedPointUpdate, Evt_Role_Del } from \"../../manager/EventMgr\";\r\nimport { BeforeGameUtils } from \"../../utils/BeforeGameUtils\";\r\nimport { game, js } from \"cc\";\r\nimport LocalStorage from \"../../utils/LocalStorage\";\r\nimport { GameSet } from \"../GameSet\";\r\nimport { DEV } from \"cc/env\";\r\nimport { DL } from \"../../DL\";\r\nimport { BuildingState, FightState, GuildEventType, NoticeData, RoleStateType, SAdvister, SBattleRole, SBenefit, SChannelMsgData, SCrossOrderData, SCurrentSeasonInfo, SFishingBombFishPoolData, SFishingBombRoundInfo, SFishingBombStageInfo, SFishingBombStateData, SFishingHeroData, SFishingHeroPartData, SFishingHeroSkillEffect, SFishingItem, SFishingLakeData, SFishingMatchInfoRet, SFishingRoundInfo, SFishingShopGetContentRet, SFishingShopItem, SFishingStateData, SFishingTradeRoundInfo, SFishingTradeShipData, SFishingTradeStateData, SGuild, SGuildApplication, SGuildEvent, SGuildMember, SLootSeasonApplyInfo, SLuckyContent, SMatchPlayerData, SOneOffRedPoint, SOonViewData, SOrderData, SPlayerData, SPlayerDataBuilding, SPlayerDataItem, SPlayerDataItemProduction, SPlayerDataRole, SPlayerDataSkill, SPlayerDataSoldierProduction, SPlayerMailData, SPvpShopGetContentRet, SShopContent, SShopIndexContent, STaskState, SThing, SWorldBossData, SWorldBossRankData, SWorldBossRankItemData, SWorldBossStateData, TipsType, TodayNoTipsId } from \"./PlayerStruct\";\r\n\r\nclass PlayerData {\r\n    constructor() {\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n\r\n    }\r\n    public static isHideUI: boolean = false;//是否隐藏ui中\r\n    public static serverTime: number = 0;\r\n    private static server_offset: number = 0;\r\n    private static _serverDate: Date = new Date();\r\n\r\n    static RunHomeId: number;\r\n    static rankTime: { [key: number]: number } = {};\r\n\r\n    /**\r\n     * 循环刷新的map\r\n     */\r\n    static CycleTimeMap: { [duration: number]: number } = {};\r\n\r\n    public static SyncServerTime(time: number) {\r\n        if (!this.serverTime) {\r\n            // 暂时以天为循环\r\n            PlayerData.CycleTimeMap[24 * 3600] = DateUtils.GetTodaySecond();\r\n        }\r\n\r\n        this.serverTime = time;\r\n        const localTimestamp = Date.now() / 1000;\r\n        this.server_offset = this.serverTime - localTimestamp;\r\n        // LocalStorage.SetNumber('timeDifference', this.server_offset);\r\n    }\r\n\r\n    /**\r\n     * 获取服务器时间\r\n     * @returns \r\n     */\r\n    public static GetServerTime() {\r\n        // 获取保存的时间偏差\r\n        // const timeDifference = LocalStorage.GetNumber('timeDifference') || 0;\r\n        // 计算当前服务器时间\r\n        const serverTime = Date.now() / 1000 + this.server_offset;\r\n        return serverTime;\r\n    }\r\n    public static GetServerDate(): Date {\r\n        this._serverDate.setTime(this.GetServerTime() * 1000);\r\n        return this._serverDate;\r\n    }\r\n\r\n    /**\r\n     * 倒计时 同步服务器时间\r\n     * @param timestamp 秒时间戳\r\n     */\r\n    static countDown(timestamp: number): string {\r\n        // 计算剩余时间\r\n        let leftTime = timestamp - PlayerData.GetServerTime();\r\n        if (leftTime <= 0) return \"00:00:00\";\r\n        // 计算剩余时间的各个单位\r\n        let leftH = Math.floor(leftTime / 60 / 60);\r\n        let leftM = Math.floor((leftTime / 60) % 60);\r\n        let leftS = Math.floor((leftTime) % 60);\r\n        // 将剩余时间拼接成字符串，如'12:34:56'，并返回\r\n        return `${leftH.toString()['padStart'](2, '0')}:${leftM.toString()['padStart'](2, '0')}:${leftS.toString()['padStart'](2, '0')}`;\r\n    }\r\n\r\n    /**获取当前时间到未来某一时间的倒计时 */\r\n    static countDown2(timestamp: number): { d: number, h: number, m: number, s: number } {\r\n\r\n        let leftTime = timestamp - PlayerData.GetServerTime();\r\n        // 计算剩余时间的各个单位\r\n        let leftD = Math.floor((leftTime) / 60 / 60 / 24);\r\n        let leftH = Math.floor((leftTime / 60 / 60) % 24);\r\n        let leftM = Math.floor((leftTime / 60) % 60);\r\n        let leftS = Math.floor((leftTime) % 60);\r\n        return { d: leftD, h: leftH, m: leftM, s: leftS }\r\n    }\r\n\r\n    /**\r\n     * 获取当天凌晨时间戳(单位秒)\r\n     * @param timeZone 时区 默认北京时间\r\n     * @returns \r\n     */\r\n    public static WeeHoursTime(timeZone:number = 8):number{\r\n        let serverTime:number = PlayerData.GetServerTime();\r\n        let offsetTime:number = serverTime % 86400;// + (timeZone * 3600);\r\n        let curTime:number = serverTime - offsetTime;\r\n        //let dates:string[] = DateUtils.TimestampToDate(curTime * 1000, true);\r\n        //console.log(`凌晨时间戳----------------->${dates[0]}-${dates[1]}-${dates[2]}  ${dates[3]}:${dates[4]}:${dates[5]}`);\r\n        return curTime;\r\n    }\r\n\r\n    /**\r\n     * 初始玩家数据\r\n     * @param playerInfo \r\n     */\r\n    public static SetPlayerInfo(playerInfo: SPlayerData) {\r\n        playerInfo.item_productions = playerInfo.item_productions || [];\r\n        playerInfo.soldiers = playerInfo.soldiers || [];\r\n        playerInfo.soldier_productions = playerInfo.soldier_productions || [];\r\n        playerInfo.roles = playerInfo.roles || [];\r\n        playerInfo.defense_lineup = playerInfo.defense_lineup || [];\r\n        playerInfo.attack_lineup = playerInfo.attack_lineup || [];\r\n        playerInfo.boss_lineup = playerInfo.boss_lineup || [];\r\n        playerInfo.config_data = playerInfo.config_data || {};\r\n        playerInfo.tasks = playerInfo.tasks || {};\r\n        playerInfo.items = playerInfo.items || [];\r\n        playerInfo.contact_wechat = playerInfo.contact_wechat || \"\";\r\n        playerInfo.contact_qq = playerInfo.contact_qq || \"\";\r\n        playerInfo.name_changed_times = playerInfo.name_changed_times || 0;\r\n        /*  if (!this.playerInfo) {\r\n             this.playerInfo = playerInfo;\r\n             \r\n         }  */\r\n        this.playerInfo = playerInfo;\r\n\r\n        if (!this.GetItem(ThingItemId.ItemId_1)) playerInfo.items.push({ id: ThingItemId.ItemId_1, count: 0 });\r\n        if (!this.GetItem(ThingItemId.ItemId_2)) playerInfo.items.push({ id: ThingItemId.ItemId_2, count: 0 });\r\n        if (!this.GetItem(ThingItemId.ItemId_3)) playerInfo.items.push({ id: ThingItemId.ItemId_3, count: 0 });\r\n        if (!this.GetItem(ThingItemId.ItemId_6)) playerInfo.items.push({ id: ThingItemId.ItemId_6, count: 0 });\r\n        if (!this.GetItem(ThingItemId.ItemId_7)) playerInfo.items.push({ id: ThingItemId.ItemId_7, count: 0 });\r\n        if (!this.GetItem(ThingItemId.ItemId_8)) playerInfo.items.push({ id: ThingItemId.ItemId_8, count: 0 });\r\n        if (!this.GetItem(ThingItemId.ItemId_9)) playerInfo.items.push({ id: ThingItemId.ItemId_9, count: 0 });\r\n        if (!this.GetItem(ThingItemId.ItemId_74)) playerInfo.items.push({ id: ThingItemId.ItemId_74, count: 0 });\r\n        if (!this.GetItem(ThingItemId.ItemId_202)) playerInfo.items.push({ id: ThingItemId.ItemId_202, count: 0 });\r\n        \r\n        for (let role of playerInfo.roles) {\r\n            role.battle_power = CountPower(role.type, role.level, role);\r\n        }\r\n        this.UpdateSpecialItems();\r\n    }\r\n\r\n    /**\r\n     * 更新特殊道具\r\n     */\r\n    static UpdateSpecialItems(eimt: boolean = true) {\r\n        let items = PlayerData.items;\r\n        let info = this.playerInfo;\r\n        for (let i = 0; i < PlayerData.items.length; i++) {\r\n            let item = PlayerData.items[i];\r\n            switch (item.id) {\r\n                case ThingItemId.ItemId_1:\r\n                    if (item.count != info.currency) {\r\n                        item.count = Math.max(0, info.currency);\r\n                        if (eimt) EventMgr.emit(Evt_Item_Change);\r\n                    }\r\n                    break;\r\n                case ThingItemId.ItemId_2:\r\n                    if (item.count != info.currency2) {\r\n                        item.count = Math.max(0, info.currency2);\r\n                        if (eimt) EventMgr.emit(Evt_Item_Change);\r\n                    }\r\n                    break;\r\n                case ThingItemId.ItemId_3:\r\n                    if (item.count != info.currency3) {\r\n                        item.count = Math.max(0, info.currency3);\r\n                        if (eimt) EventMgr.emit(Evt_Item_Change);\r\n                    }\r\n                    break;\r\n\r\n                case ThingItemId.ItemId_6:\r\n                    if (item.count != info.resources.wood) {\r\n                        item.count = Math.max(0, info.resources.wood);\r\n                        if (eimt) EventMgr.emit(Evt_Item_Change);\r\n                    }\r\n                    break;\r\n                case ThingItemId.ItemId_7:\r\n                    if (item.count != info.resources.rock) {\r\n                        item.count = Math.max(0, info.resources.rock);\r\n                        if (eimt) EventMgr.emit(Evt_Item_Change);\r\n                    }\r\n                    break;\r\n                case ThingItemId.ItemId_8:\r\n                    if (item.count != info.resources.water) {\r\n                        item.count = Math.max(0, info.resources.water);\r\n                        if (eimt) EventMgr.emit(Evt_Item_Change);\r\n                    }\r\n                    break;\r\n                case ThingItemId.ItemId_9:\r\n                    if (item.count != info.resources.seed) {\r\n                        item.count = Math.max(0, info.resources.seed);\r\n                        if (eimt) EventMgr.emit(Evt_Item_Change);\r\n                    }\r\n                    break;\r\n                case ThingItemId.ItemId_74:\r\n                    if (item.count != info.currency_74) {\r\n                        item.count = Math.max(0, info.currency_74);\r\n                        if (eimt) EventMgr.emit(Evt_Item_Change);\r\n                    }\r\n                    break;\r\n                case ThingItemId.ItemId_202:\r\n                    if (item.count != info.currency_77) {\r\n                        item.count = Math.max(0, info.currency_77);\r\n                        if (eimt) EventMgr.emit(Evt_Item_Change);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // 角色信息\r\n    private static playerInfo: SPlayerData;\r\n    public static get roleInfo() { return this.playerInfo; }\r\n    // 资源数据\r\n    public static get resources() { return this.playerInfo.resources; }\r\n    // 道具列表\r\n    public static get items() { return this.playerInfo.items; }\r\n\r\n    public static get pveData() { return this.playerInfo.pve_data; }\r\n    /**playerIdKey */\r\n    public static get playerIdKey() { return `PlayerId_${this.roleInfo.player_id}`; }\r\n    /**\r\n     * 根据道具类型获取道具列表\r\n     * @param itemType \r\n     * @returns \r\n     */\r\n    static GetitemByType(itemType: number) {\r\n        let items = [];\r\n        for (let item of this.playerInfo.items) {\r\n            let std = CfgMgr.Getitem(item.id);\r\n            if (std && std.Itemtpye == itemType) {\r\n                items.push(item);\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n    /**\r\n     * 根据页签获取道具列表\r\n     * @param subType \r\n     * @returns \r\n     */\r\n    static GetitemBySubType(subType: number) {\r\n        let items: SPlayerDataItem[] = [];\r\n        for (let item of this.playerInfo.items) {\r\n            if (item.count > 0) {\r\n                let std = CfgMgr.Getitem(item.id);\r\n                if (std && std.SubType == subType) {\r\n                    items.push(item);\r\n                }\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    /**获取展示任务 */\r\n    static getActiveTask() {\r\n        let stdTasks: StdTask[] = CfgMgr.GetTaskType(3);\r\n        for (let task of stdTasks) {//已经完成的主线\r\n            if (task.ShowTask == 1) {\r\n                if (PlayerData.roleInfo.tasks[task.TaskId] && PlayerData.roleInfo.tasks[task.TaskId].s == STaskState.unFinsh) {\r\n                    if (task.CompletionNum <= PlayerData.roleInfo.tasks[task.TaskId].v) return task;\r\n                }\r\n            }\r\n        }\r\n        let stdAllTasks: StdTask[] = CfgMgr.GetTask();\r\n        for (let task of stdAllTasks) {//已经完成的任务\r\n\r\n            if (task.Show != 4 && task.Show != 5) {\r\n                if (PlayerData.roleInfo.tasks[task.TaskId] && PlayerData.roleInfo.tasks[task.TaskId].s == STaskState.unFinsh) {\r\n                    if (task.CompletionNum <= PlayerData.roleInfo.tasks[task.TaskId].v) return task;\r\n                }\r\n            }\r\n        }\r\n        for (let task of stdTasks) {//未完成主线\r\n            if (task.ShowTask == 1) {\r\n                if (PlayerData.roleInfo.tasks[task.TaskId] && PlayerData.roleInfo.tasks[task.TaskId].s == STaskState.unFinsh) {\r\n                    return task;\r\n                }\r\n            }\r\n        }\r\n        for (let task of stdAllTasks) {//未完成任务\r\n            if (task.Show != 4 && task.Show != 5) {\r\n                if (PlayerData.roleInfo.tasks[task.TaskId] && PlayerData.roleInfo.tasks[task.TaskId].s == STaskState.unFinsh) {\r\n                    return task;\r\n                }\r\n            }\r\n        }\r\n        return stdTasks[0];\r\n    }\r\n\r\n    static tradeViewData: SOonViewData = {\r\n        code: 0,\r\n        query_type: 0,\r\n        query_args: {},\r\n        page_index: 0,\r\n        page_size: 0,\r\n        page_last_index: 0,\r\n        order_list: [],\r\n        order_state_list: [],\r\n        total_count: 0\r\n    };\r\n\r\n    static tradeAllBalances = {\r\n        jy: 0,\r\n        hc: 0,\r\n        score: 0,\r\n        serverid: \"\",\r\n        unionid: \"\",\r\n    }\r\n\r\n    /**交易所根据页签获取资源 */\r\n    static GetResBySubType(subType: number) {\r\n        let datas: SThing[] = [];\r\n        if (subType == 0) {\r\n            //道具\r\n            for (let item of this.playerInfo.items) {\r\n                let std = CfgMgr.Getitem(item.id);\r\n                if (std && (std.SubType == ItemSubType.cost || std.SubType == ItemSubType.shard || std.Items == 3)) {\r\n                    let data: SThing = {\r\n                        type: ThingType.ThingTypeItem,\r\n                        item: { id: item.id, count: item.count }\r\n                    }\r\n                    datas.push(data)\r\n                }\r\n            }\r\n        } else if (subType == 1) {\r\n            //角色\r\n            let roleData = this.roleInfo.roles;\r\n            roleData.forEach((data) => {\r\n                let stateList: number[] = PlayerData.GetRoleStateList(data)\r\n                if (stateList.length == 0 && !data.is_assisting && !data.is_in_main_building && data.level == 1 && data.ownership_type != 1) {\r\n                    let role_data: SThing = {\r\n                        type: ThingType.ThingTypeRole,\r\n                        role: data,\r\n                    }\r\n                    datas.push(role_data)\r\n                }\r\n            })\r\n        } else if (subType == 2) {\r\n            //资源\r\n            let data1: SThing = {\r\n                type: ThingType.ThingTypeResource,\r\n                resource: { wood: this.roleInfo.resources.wood }\r\n            }\r\n            datas.push(data1)\r\n\r\n            let data2: SThing = {\r\n                type: ThingType.ThingTypeResource,\r\n                resource: { water: this.roleInfo.resources.water }\r\n            }\r\n            datas.push(data2)\r\n\r\n            let data3: SThing = {\r\n                type: ThingType.ThingTypeResource,\r\n                resource: { seed: this.roleInfo.resources.seed }\r\n            }\r\n            datas.push(data3)\r\n\r\n            let data4: SThing = {\r\n                type: ThingType.ThingTypeResource,\r\n                resource: { rock: this.roleInfo.resources.rock }\r\n            }\r\n            datas.push(data4)\r\n\r\n        } else if (subType == 3) {\r\n            //装备\r\n        }\r\n        return datas;\r\n    }\r\n\r\n    /**交易所订单数据排除空数据 */\r\n    static getOrderListData(data: SOrderData[]) {\r\n        let datas: SOrderData[] = []\r\n        if (data) {\r\n            for (let index = 0; index < data.length; index++) {\r\n                const element = data[index];\r\n                if (element && element.player_id && element.things) {\r\n                    datas.push(element)\r\n                }\r\n            }\r\n        }\r\n        return datas;\r\n    }\r\n\r\n    /**世界交易所订单数据排除空数据 */\r\n    static getCrossOrderListData(data: SCrossOrderData[]) {\r\n        let datas: SCrossOrderData[] = []\r\n        if (data) {\r\n            for (let index = 0; index < data.length; index++) {\r\n                const element = data[index];\r\n                if (element && element.player_id && element.bourse_id) {\r\n                    datas.push(element)\r\n                }\r\n            }\r\n        }\r\n        return datas;\r\n    }\r\n\r\n    /**世界交易所订单通过viewid判断是否锁定 true 锁定 false未锁定 */\r\n    static getOrderIsLockByViewId(view_id: string) {\r\n        for (let index = 0; index < this.tradeViewData.order_list.length; index++) {\r\n            const element: SCrossOrderData = this.tradeViewData.order_list[index];\r\n            if (element.view_id == view_id && this.tradeViewData.order_state_list[index] != \"open\") {\r\n                return true\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // 角色列表\r\n    public static GetRoles() {\r\n        return this.playerInfo.roles.concat();\r\n    }\r\n    public static GetRoleNum() {\r\n        return this.playerInfo.roles.length;\r\n    }\r\n\r\n    /**\r\n     * 获取角色\r\n     * @param type\r\n     * @returns \r\n     */\r\n    public static GetPlayerByType(type: number) {\r\n        let result = [];\r\n        for (let role of this.playerInfo.roles) {\r\n            if (role.type == type) result.push(role);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家总战力\r\n     * @returns \r\n     */\r\n    public static GetPlayerPower(): number {\r\n        let totalPower: number = 0;\r\n        for (let role of this.playerInfo.roles) {\r\n            if (!role.battle_power) {\r\n                role.battle_power = CountPower(role.type, role.level, role);\r\n            }\r\n            totalPower += role.battle_power;\r\n        }\r\n        return totalPower;\r\n    }\r\n    /**\r\n     * 增加角色\r\n     * @param data \r\n     * @returns \r\n     */\r\n    static AddRole(data: SPlayerDataRole) {\r\n        data.battle_power = CountPower(data.type, data.level, data);\r\n        for (let i = 0; i < this.playerInfo.roles.length; i++) {\r\n            let role = this.playerInfo.roles[i];\r\n            if (role.id == data.id) {\r\n                this.playerInfo.roles[i] = data;\r\n                return;\r\n            }\r\n        }\r\n        this.playerInfo.roles.push(data);\r\n    }\r\n    /**\r\n     * 删除角色\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static DelRole(id: string) {\r\n        for (let i = 0; i < this.playerInfo.roles.length; i++) {\r\n            let role = this.playerInfo.roles[i];\r\n            if (role.id == id) {\r\n                this.playerInfo.roles.splice(i, 1);\r\n                EventMgr.emit(Evt_Role_Del, role, i);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    // 出战英雄列表\r\n    public static get attackRoles() { return this.roleInfo.attack_lineup || []; }\r\n    // 世界boss出战英雄列表\r\n    public static get worldBossAttackRoles() { return this.roleInfo.boss_lineup || []; }\r\n    //主建筑配置\r\n    public static get homelands() { return this.roleInfo.homelands; }\r\n    public static get nowhomeLand() { return this.GetHomeLand(this.RunHomeId); }\r\n    /**获取指定家园 */\r\n    public static GetHomeLand(homeId: number) {\r\n        if (!this.roleInfo) return undefined;\r\n        for (let homeland of this.roleInfo.homelands) {\r\n            if (homeland.id == homeId) return homeland;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 获取道具id\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetItem(id: number) {\r\n        let items = this.roleInfo.items;\r\n        for (let item of items) {\r\n            if (item.id == id) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取道具数量\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetItemCount(id: number) {\r\n        let item = this.GetItem(id);\r\n        if (!item) return 0;\r\n        return item.count;\r\n    }\r\n    /**\r\n     * 根据物品类型获取物品列表数据\r\n     * @param type \r\n     * @returns \r\n     */\r\n    static GetItemTypeDatas(type: ItemType): SPlayerDataItem[] {\r\n        let stdItem: StdItem;\r\n        let items = this.roleInfo.items;\r\n        let newItems: SPlayerDataItem[] = [];\r\n        for (let item of items) {\r\n            stdItem = CfgMgr.Getitem(item.id);\r\n            if (stdItem && stdItem.Type == ThingType.ThingTypeItem && stdItem.Itemtpye == type) {\r\n                newItems.push(item);\r\n            }\r\n        }\r\n        return newItems;\r\n    }\r\n\r\n    /**获取建筑状态 */\r\n    static GetBuilding(buildingId: number, homeId?: number) {\r\n        if (homeId != undefined) {\r\n            let homeLand = this.GetHomeLand(homeId);\r\n            if (!homeLand) return undefined;\r\n            for (let building of homeLand.buildings) {\r\n                if (building.id == buildingId) {\r\n                    this.flushWorkers(building.id, building);\r\n                    building.state = this.GetBuildingState(building.id);\r\n                    return building;\r\n                }\r\n            }\r\n        } else if (this.roleInfo) {\r\n            for (let homeland of this.roleInfo.homelands) {\r\n                for (let building of homeland.buildings) {\r\n                    if (building.id == buildingId) {\r\n                        this.flushWorkers(building.id, building);\r\n                        building.state = this.GetBuildingState(building.id);\r\n                        return building;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    static GetBuildings(homeId?: number) {\r\n        if (homeId == undefined) homeId = this.RunHomeId;\r\n        let homeLand = this.GetHomeLand(homeId);\r\n        if (!homeLand) return undefined;\r\n        let bulidings: { [id: number]: SPlayerDataBuilding } = {};\r\n        for (let building of homeLand.buildings) {\r\n            this.flushWorkers(building.id, building);\r\n            building.state = this.GetBuildingState(building.id);\r\n            bulidings[building.id] = building;\r\n        }\r\n        return bulidings;\r\n    }\r\n    static GetBuildingByType(buildType: number, homeId: number) {\r\n        let buildings: SPlayerDataBuilding[] = [];\r\n        let homeLand = this.GetHomeLand(homeId);\r\n        if (!homeLand) return undefined;\r\n        for (let building of homeLand.buildings) {\r\n            if (CfgMgr.GetBuildingUnLock(building.id).BuildingType == buildType) {\r\n                this.flushWorkers(building.id, building);\r\n                building.state = this.GetBuildingState(building.id);\r\n                buildings.push(building);\r\n            }\r\n        }\r\n        return buildings;\r\n    }\r\n\r\n    /**\r\n     * 获取指定建筑的工人列表\r\n     * @param buildingId \r\n     * @returns \r\n     */\r\n    private static flushWorkers(buildingId: number, building: SPlayerDataBuilding) {\r\n        if (!this.roleInfo) return [];\r\n        if (!building.workerIdArr) building.workerIdArr = [];\r\n        building.workerIdArr.length = 0;\r\n        let works: SPlayerDataRole[] = building.workerIdArr;\r\n        let roles = this.roleInfo.roles;\r\n        if (buildingId && CfgMgr.GetBuildingUnLock(buildingId).BuildingType == BuildingType.cheng_qiang) {\r\n            // let ls = this.roleInfo.defense_lineup || [];\r\n            // for (let defense of ls) {\r\n            //     if (defense) {\r\n            //         for (let role of roles) {\r\n            //             if (role.id == defense.role_id) {\r\n            //城墙走防御列表\r\n            //works.push(role);\r\n            //             }\r\n            //         }\r\n            //     }\r\n            // }\r\n        } else if (buildingId) {\r\n            for (let role of roles) {\r\n                if (role.building_id == buildingId || (role.is_in_main_building && role.main_building_id == buildingId)) {\r\n                    works.push(role);\r\n                }\r\n            }\r\n        }\r\n        return works;\r\n    }\r\n\r\n    static GetWorkerNum(buildingId: number) {\r\n        if (!this.roleInfo || !buildingId) return 0;\r\n        let num = 0;\r\n        let roles = this.playerInfo.roles;\r\n        for (let role of roles) {\r\n            if (role.building_id == buildingId) {\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n\r\n    /**\r\n     * 检测角色是否空闲\r\n     * @param role \r\n     * @returns \r\n     */\r\n    static CheckRoleFree(role: SPlayerDataRole) {\r\n        if (role.building_id) return false;\r\n        for (let battle of this.roleInfo.defense_lineup) {\r\n            if (battle && battle.role_id == role.id) return false;\r\n        }\r\n        for (let battle of this.roleInfo.attack_lineup) {\r\n            if (battle && battle.role_id == role.id) return false;\r\n        }\r\n    }\r\n    /**获取角色状态列表 */\r\n    static GetRoleStateList(role: SPlayerDataRole): number[] {\r\n        let typeList: number[] = [RoleStateType.State_Work, RoleStateType.State_Attack, RoleStateType.State_Defend, RoleStateType.State_Assist, RoleStateType.State_NFT];\r\n        let stateList: number[] = [];\r\n        for (let index = 0; index < typeList.length; index++) {\r\n            let state = this.GetRoleState(role, typeList[index]);\r\n            if (state > RoleStateType.State_None) {\r\n                stateList.push(state);\r\n            }\r\n        }\r\n        return stateList;\r\n    }\r\n    static GetRoleState(roleId: SPlayerDataRole, stateType: RoleStateType): number {\r\n        if (stateType == RoleStateType.State_Work) {\r\n            for (let home of this.roleInfo.homelands) {\r\n                for (let build of home.buildings) {\r\n                    if (build.workerIdArr && build.workerIdArr.length) {\r\n                        for (let role of build.workerIdArr) {\r\n                            if (role.id == roleId.id) return stateType;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if (stateType == RoleStateType.State_Attack) {\r\n            for (let role of this.attackRoles) {\r\n                if (role && roleId.id == role.role_id) return stateType;\r\n            }\r\n        } else if (stateType == RoleStateType.State_Defend) {\r\n            for (let role of this.roleInfo.defense_lineup) {\r\n                if (roleId.id == role.role_id) return stateType;\r\n            }\r\n        } else if (stateType == RoleStateType.State_Assist) {\r\n            if (roleId.is_assisting) return stateType;\r\n        }else if (stateType == RoleStateType.State_NFT) {\r\n            if(roleId.nft_lock_expires != 0){\r\n                console.log(roleId.nft_lock_expires, PlayerData.GetServerTime())\r\n            }\r\n            if ( roleId.nft_lock_expires != 0 && roleId.nft_lock_expires - PlayerData.GetServerTime() > 0) return stateType;\r\n        }\r\n        return RoleStateType.State_None;\r\n    }\r\n    /**是否拥有该建筑 */\r\n    public static checkBuilding(buildingId: number) {\r\n        let buildDefaine = CfgMgr.GetBuildingUnLock(buildingId);\r\n        let homeLand = this.GetHomeLand(buildDefaine.HomeId);\r\n        for (let building of homeLand.buildings) {\r\n            if (building.id == buildingId) return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 获取建筑状态\r\n     * @param building \r\n     */\r\n    private static GetBuildingState(buildingId: number) {\r\n        let buildDefaine = CfgMgr.GetBuildingUnLock(buildingId);\r\n        let homeLand = this.GetHomeLand(buildDefaine.HomeId);\r\n        for (let building of homeLand.buildings) {\r\n            if (building.id == buildingId) {\r\n                if (building.is_upgrading) {\r\n                    return BuildingState.Building;\r\n                } else if (building.upgrade_time > (new Date()).getTime() / 1000 || building.level == 0) {\r\n                    return BuildingState.CanUnLock;\r\n                } else {\r\n                    return BuildingState.Complete;\r\n                }\r\n            }\r\n        }\r\n        return BuildingState.Lock;\r\n    }\r\n\r\n    /**解锁建筑 */\r\n    public static UnLockBuilding(buildingId: number, upgrade_time: number) {\r\n        let buildDefaine = CfgMgr.GetBuildingUnLock(buildingId);\r\n        let homeLand = this.GetHomeLand(buildDefaine.HomeId);\r\n        for (let building of homeLand.buildings) {\r\n            if (building.id == buildingId) {\r\n                building.is_upgrading = true;\r\n                building.level = 0;\r\n                building.upgrade_time = upgrade_time;\r\n                this.flushWorkers(building.id, building);\r\n                building.state = BuildingState.Building;\r\n                return building;\r\n            }\r\n        }\r\n        let buliding: SPlayerDataBuilding = {\r\n            id: buildingId,\r\n            level: 0,\r\n            is_upgrading: true,\r\n            upgrade_time: upgrade_time,\r\n            state: BuildingState.Building\r\n        };\r\n        homeLand.buildings.push(buliding);\r\n        return buliding;\r\n    }\r\n\r\n    public static OpenBuilding(buildingId:number) {\r\n        let buildDefaine = CfgMgr.GetBuildingUnLock(buildingId);\r\n        let homeLand = this.GetHomeLand(buildDefaine.HomeId);\r\n        for (let building of homeLand.buildings) {\r\n            if (building.id == buildingId) {\r\n                building.is_upgrading = false;\r\n                building.level = 1;\r\n                building.upgrade_time = 0;\r\n                return building;\r\n            }\r\n        }\r\n        let buliding: SPlayerDataBuilding = {\r\n            id: buildingId,\r\n            level: 1,\r\n            is_upgrading: false,\r\n            upgrade_time: 0\r\n        };\r\n        homeLand.buildings.push(buliding);\r\n        return buliding;\r\n    }\r\n    \r\n    /**建筑升级 */\r\n    public static UpGradeBuilding(buildingId: number, UpgradeCompleteTime: number, level?: number) {\r\n        let buildDefaine = CfgMgr.GetBuildingUnLock(buildingId);\r\n        let homeLand = this.GetHomeLand(buildDefaine.HomeId);\r\n        for (let building of homeLand.buildings) {\r\n            if (building.id == buildingId) {\r\n                if (level != undefined) building.level = level;\r\n                building.is_upgrading = UpgradeCompleteTime > PlayerData.GetServerTime();\r\n                building.upgrade_time = UpgradeCompleteTime;\r\n                if (CfgMgr.GetBuildingUnLock(buildingId).BuildingSubType == 1 && level != undefined) {\r\n                    homeLand.level = level;\r\n                }\r\n                if (level != undefined) building.level = level;\r\n                building.state = this.GetBuildingState(buildingId);\r\n                // Logger.log('建筑信息更新-------', building);\r\n                return building;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取建筑等级\r\n     * @param buildingId \r\n     * @returns \r\n     */\r\n    public static GetBuildingLevel(buildingId: number) {\r\n        let buildDefaine = CfgMgr.GetBuildingUnLock(buildingId);\r\n        let homeLand = this.GetHomeLand(buildDefaine.HomeId);\r\n        for (let building of homeLand.buildings) {\r\n            if (building.id == buildingId) return building.level;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 获取建筑等级\r\n     * @param homeId \r\n     * @param type \r\n     * @returns \r\n     */\r\n    public static GetBuildingLv(homeId: number, type: number, index: number = 0) {\r\n        let stdDef = CfgMgr.GetBuildingDefine(homeId, type)[index];\r\n        let homeLand = this.GetHomeLand(homeId);\r\n        for (let building of homeLand.buildings) {\r\n            if (building.id == stdDef.BuildingId) return building.level;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 添加建筑角色\r\n     * @param info \r\n     * @returns \r\n     */\r\n    public static AddBuildRoles(info: any) {\r\n        for (let index = 0; index < this.roleInfo.roles.length; index++) {\r\n            let role = this.roleInfo.roles[index];\r\n            if (role.id == info.role_id) {\r\n                //主建筑的特殊处理\r\n                if (info.building_id != 1) {\r\n                    role.building_id = info.building_id;\r\n                    role.is_in_building = true;\r\n                    role.battle_power = CountPower(role.type, role.level, role);\r\n                    return role.building_id;\r\n                } else {\r\n                    role.main_building_id = 1;\r\n                    role.is_in_main_building = true;\r\n                    return role.main_building_id;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除建筑角色\r\n     * @param info \r\n     * @returns \r\n     */\r\n    public static RemoveBuildRoles(info) {\r\n        for (let index = 0; index < this.roleInfo.roles.length; index++) {\r\n            let role = this.roleInfo.roles[index];\r\n            if (role.id == info.role_id) {\r\n                if (info.building_id == 1) {\r\n                    role.main_building_id = 0;\r\n                    role.is_in_main_building = false\r\n                    return role.main_building_id;\r\n                } else {\r\n                    role.building_id = 0;\r\n                    role.is_in_building = false;\r\n                    return role.building_id;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**更新当前合成次数 */\r\n    public static updateCompoundCount(count: number) {\r\n        this.roleInfo.resource_exchange_uses = count;\r\n    }\r\n\r\n    public static GetRoleByPid(roleId: string): SPlayerDataRole {\r\n        for (let index = 0; index < this.roleInfo.roles.length; index++) {\r\n            let role = this.roleInfo.roles[index];\r\n            if (role.id == roleId) {\r\n                if (!role.battle_power) role.battle_power = CountPower(role.type, role.level);\r\n                return role;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取指定角色\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetRoleById(id: string) {\r\n        for (let role of this.roleInfo.roles) {\r\n            if (role.id == id) {\r\n                if (!role.battle_power) role.battle_power = CountPower(role.type, role.level);\r\n                return role;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**通过type lv quality 获取角色*/\r\n    static GetRoleByTypeAndLvAndQuality(type: number, lv: number, quality: number) {\r\n        for (let role of this.roleInfo.roles) {\r\n            if (role.type == type && role.level == lv && role.quality == quality) {\r\n                return role;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**通过type获取该角色最高品质*/\r\n    static getMaxQualityByType(type: number) {\r\n        let max_quality = 0;\r\n        let quality_role: SPlayerDataRole\r\n        for (let role of this.roleInfo.roles) {\r\n            if (role.type == type && role.quality > max_quality) {\r\n                max_quality = role.quality;\r\n                quality_role = role\r\n            }\r\n        }\r\n        return quality_role;\r\n    }\r\n\r\n    /**通过type获取该角色最高战力*/\r\n    static getMaxFightingByType(type: number) {\r\n        let max_battle_power = 0;\r\n        let quality_role: SPlayerDataRole\r\n        for (let role of this.roleInfo.roles) {\r\n            if (role.type == type && role.battle_power > max_battle_power) {\r\n                max_battle_power = role.quality;\r\n                quality_role = role\r\n            }\r\n        }\r\n        return quality_role;\r\n    }\r\n\r\n    /**\r\n     * 判断生产条件是否符合\r\n     * @param homeId \r\n     * @param conditionId \r\n     * @param conditionValue \r\n     * @returns \r\n     */\r\n    static CheckCondition(homeId: number, conditionId: number[], conditionValue: number[]) {\r\n        for (let i = 0; i < conditionId.length; i++) {\r\n            let id = conditionId[i];\r\n            switch (id) {\r\n                case 1:\r\n                    let objs = this.GetBuildingByType(BuildingType.ji_di, homeId);\r\n                    for (let obj of objs) {\r\n                        if (obj.level < conditionValue[i]) return false;\r\n                    }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 更新生产\r\n     * @param data \r\n     * @returns \r\n     */\r\n    static UpdateItemProduction(data: SPlayerDataItemProduction) {\r\n        let ls = this.roleInfo.item_productions;\r\n        let isCheck: boolean = false;\r\n        for (let i = 0; i < ls.length; i++) {\r\n            let obj = ls[i];\r\n            if (obj.id == data.id) {\r\n                ls[i] = data;\r\n                isCheck = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!isCheck) ls.push(data);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取指定id的生产状态\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetProductionState(id: number) {\r\n        let ls = this.roleInfo.item_productions;\r\n        for (let obj of ls) {\r\n            if (obj.id == id) return obj;\r\n        }\r\n    }\r\n    /**获取指定建筑的生产列表 */\r\n    static GetProductionIds(buildingId?: number, finsish: boolean = true) {\r\n        let ids: number[] = [];\r\n        let ls = this.roleInfo.item_productions;\r\n        for (let obj of ls) {\r\n            if (buildingId == undefined || buildingId == CfgMgr.GetProduction(obj.id).BuildingId) {\r\n                if (!finsish || this.GetServerTime() >= obj.finish_time) ids.push(obj.id);\r\n            }\r\n        }\r\n        return ids;\r\n    }\r\n    /**\r\n     * 生产完成\r\n     * @param index \r\n     * @returns \r\n     */\r\n    static FinishItemProduction(id: number[]) {\r\n        for (let index = 0; index < id.length; index++) {\r\n            const element = id[index];\r\n            for (let i = 0; i < this.roleInfo.item_productions.length; i++) {\r\n                if (this.roleInfo.item_productions[i].id == element) {\r\n                    this.roleInfo.item_productions.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static IndexOfProduction(id: number) {\r\n        let ls = this.roleInfo.item_productions;\r\n        for (let i = 0; i < ls.length; i++) {\r\n            if (ls[i].id == id) return i;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**当前的战斗状态 */\r\n    static fightState: FightState = 0;\r\n\r\n    /**\r\n     * 获取兵种库存\r\n     * @param soliderId \r\n     * @returns \r\n     */\r\n    static GetSoldier(soliderId: number) {\r\n        for (let obj of this.roleInfo.soldiers) {\r\n            if (obj.id == soliderId) {\r\n                return obj;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取招募\r\n     * @param soliderId \r\n     * @param buildingId \r\n     * @returns \r\n     */\r\n    static GetSoldierProduction(soliderId: number, buildingId: number) {\r\n        for (let obj of this.roleInfo.soldier_productions) {\r\n            if (obj.building_id == buildingId && obj.id == soliderId) {\r\n                return obj;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 新增招募\r\n     * @param data \r\n     */\r\n    static AddSoldierProduction(data: SPlayerDataSoldierProduction) {\r\n        let isCheck: boolean = false;\r\n        for (let obj of this.roleInfo.soldier_productions) {\r\n            if (obj.building_id == data.building_id && obj.id == data.id) {\r\n                obj.count = data.count;\r\n                obj.start_time = data.start_time;\r\n                isCheck = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!isCheck) this.roleInfo.soldier_productions.push(data);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * 更新兵营招募进度\r\n     * @param data \r\n     */\r\n    static UpdateSoldier(data: PushStruct) {\r\n        for (let i = 0; i < this.roleInfo.soldier_productions.length; i++) {\r\n            let production = this.roleInfo.soldier_productions[i];\r\n            if (production.id == data.soldier_id && production.building_id == data.building_id) {\r\n                let add = maxx(0, data.count);\r\n                production.count -= data.count;\r\n                let lv = this.GetBuildingLevel(data.building_id);\r\n                let [num, time, cost] = CfgMgr.GetSoldierProductionByType(data.building_id, lv, data.soldier_id);\r\n                // Logger.log(\"UpdateSoldier\", production.start_time, time * add, production.start_time + (num * add));\r\n                production.start_time += (time * add);\r\n                if (production.count <= 0) this.roleInfo.soldier_productions.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        for (let soldier of this.roleInfo.soldiers) {\r\n            if (soldier.id == data.soldier_id) {\r\n                soldier.add = data.total_count - soldier.count;\r\n                soldier.count = data.total_count;\r\n                return;\r\n            }\r\n        }\r\n        this.roleInfo.soldiers.push({\r\n            id: data.soldier_id,\r\n            count: data.total_count,\r\n            building_id: data.building_id,\r\n            add: data.total_count\r\n        })\r\n    }\r\n    /**\r\n     * 更新兵营招募时间\r\n     * @param data \r\n     */\r\n    static UpdateSoldierProdTime(id: number, time: number) {\r\n        for (let i = 0; i < this.roleInfo.soldier_productions.length; i++) {\r\n            let production = this.roleInfo.soldier_productions[i];\r\n            if (production.id == id) {\r\n                production.start_time = time;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static AllocateSolider(data) {\r\n        for (let i = 0; i < data.length; i++) {\r\n            let role = this.GetRoleByPid(data[i].role_id);\r\n            let ship = CfgMgr.GetRoleAttr(role.type, role.level, Attr.LeaderShip);\r\n\r\n        }\r\n    }\r\n\r\n    static updataPveData(pve_data) {\r\n        if (pve_data.progress || pve_data.progress == 0)\r\n            this.playerInfo.pve_data = pve_data;\r\n    }\r\n\r\n    static updateSoldiers(data) {\r\n        if (data)\r\n            this.playerInfo.soldiers = data;\r\n    }\r\n\r\n\r\n    /**当前页邮件列表 */\r\n    static mails: SPlayerMailData[] = [];\r\n    static mailmap: { [id: string]: SPlayerMailData } = {};\r\n    static mails_log: SPlayerMailData[] = [];\r\n\r\n    static resetMail() {\r\n        this.mails = []\r\n        this.mailmap = {}\r\n    }\r\n\r\n    static getMailReward(data: SThing[]): SThing[] {\r\n        let datas: SThing[] = []\r\n        for (let index = 0; index < data.length; index++) {\r\n            const element = data[index];\r\n            if (element.resource) {\r\n                let thing: SThing = { type: ThingType.ThingTypeResource, resource: {} }\r\n                if (element.resource.rock) {\r\n                    thing = { type: ThingType.ThingTypeResource, resource: {} }\r\n                    thing.resource.rock = element.resource.rock;\r\n                    datas.push(thing)\r\n                }\r\n                if (element.resource.wood) {\r\n                    thing = { type: ThingType.ThingTypeResource, resource: {} }\r\n                    thing.resource.wood = element.resource.wood;\r\n                    datas.push(thing)\r\n                }\r\n                if (element.resource.water) {\r\n                    thing = { type: ThingType.ThingTypeResource, resource: {} }\r\n                    thing.resource.water = element.resource.water;\r\n                    datas.push(thing)\r\n                }\r\n                if (element.resource.seed) {\r\n                    thing = { type: ThingType.ThingTypeResource, resource: {} }\r\n                    thing.resource.seed = element.resource.seed;\r\n                    datas.push(thing)\r\n                }\r\n            }\r\n            if (!element.resource) {\r\n                datas.push(element);\r\n            }\r\n\r\n        }\r\n\r\n        return datas;\r\n    }\r\n\r\n    /**钓鱼数据 */\r\n    static fishData: SFishingStateData;\r\n    static fishItems: SFishingItem[];\r\n    static fishHeros: SFishingHeroData[] = [];\r\n    static fishShop: SFishingShopGetContentRet;\r\n    static fishingMatch: SFishingMatchInfoRet;\r\n    static _fishHeroId: number = 0;\r\n    /**设置钓鱼角色id */\r\n    static SetFishingHeroId(id: number): void {\r\n        this._fishHeroId = id;\r\n        EventMgr.emit(Evt_FishHeroUpdate);\r\n    }\r\n    /**获取钓鱼角色id */\r\n    static GetFishingHeroId(): number {\r\n        return this._fishHeroId;\r\n    }\r\n    /**\r\n     * 获取是否热门湖泊\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetHotLake(id: number): boolean {\r\n        let feedNum: number = 0;\r\n        let maxId: number = 0;\r\n        if (this.fishData && this.fishData.lakes && this.fishData.lakes.length) {\r\n            for (let lakeData of this.fishData.lakes) {\r\n                if (feedNum == 0) {\r\n                    if (lakeData.cost > 0) {\r\n                        feedNum = lakeData.cost;\r\n                        maxId = lakeData.lake_id;\r\n                    }\r\n                } else {\r\n                    if (lakeData.cost > feedNum) {\r\n                        feedNum = lakeData.cost;\r\n                        maxId = lakeData.lake_id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return maxId == id;\r\n    }\r\n    /**\r\n     * 获取湖泊数据\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetLakeData(id: number): SFishingLakeData {\r\n        if (this.fishData && this.fishData.lakes && this.fishData.lakes.length) {\r\n            for (const lakeData of this.fishData.lakes) {\r\n                if (id == lakeData.lake_id) return lakeData;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**获取钓鱼当前最新回合数 */\r\n    static get CurFishRoundInfo(): SFishingRoundInfo {\r\n        if (this.fishData && this.fishData.round_info) {\r\n            return this.fishData.round_info;\r\n        }\r\n        return null;\r\n    }\r\n    /**获取当前钓鱼场次是否地狱模式 */\r\n    static get FishSessionIsHell():boolean{\r\n        if(!this.fishData.session_info) return false;\r\n        if(this.fishData.session_info.kill_type != 1 && this.fishData.session_info.kill_type_end != 1) return true;\r\n        return false;\r\n    }\r\n    /**获取当前回合状态 */\r\n    static get GetFishRoundState(): number {\r\n        if (!this.CurFishRoundInfo) return FishRoundState.No;//没有回合\r\n        if (this.CurFishRoundInfo.end_time < this.GetServerTime()) return FishRoundState.No;//回合超时\r\n        if (!this.CurFishRoundInfo.is_open) return FishRoundState.NoStart;//回合未开始\r\n        //已结算\r\n        if (this.CurFishRoundInfo.is_settlement) {\r\n            //已经选择湖并且已投入鱼饵\r\n            if (this.fishData.settlement && this.fishData.player.lake_id > 0 && this.fishData.player.round_cost > 0) {\r\n                return FishRoundState.Settle;//结算时刻 \r\n            }\r\n            return FishRoundState.NoFishing;//本回合未参与垂钓\r\n        }\r\n        //垂钓时刻\r\n        if (this.CurFishRoundInfo.is_frozen) {\r\n            //已经选择湖并且已投入鱼饵\r\n            if (this.fishData.player.lake_id > 0 && this.fishData.player.round_cost > 0) {\r\n                return FishRoundState.LiftRod;//提杆时刻\r\n            }\r\n            return FishRoundState.NoFishing;//本回合未参与垂钓\r\n        }\r\n        if (this.fishData.player.lake_id > 0) {\r\n            return FishRoundState.Select;//已选湖泊\r\n        } else {\r\n            return FishRoundState.NoSelect;//未选湖泊\r\n        }\r\n    }\r\n    /**自己选的湖泊是否被冰封了 */\r\n    static get FishMyLakeIsIced(): boolean {\r\n        if (this.CurFishRoundInfo) {\r\n            if (this.fishData.player.lake_id > 0) {\r\n                let lakeData = this.GetLakeData(this.fishData.player.lake_id);\r\n                if (lakeData && lakeData.is_frozen) return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**冰封湖泊id */\r\n    static get FishIcedLakeIds(): number[] {\r\n        let newList: number[] = [];\r\n        if (this.CurFishRoundInfo) {\r\n            if (this.fishData && this.fishData.lakes && this.fishData.lakes.length) {\r\n                for (const lakeData of this.fishData.lakes) {\r\n                    if (lakeData.is_frozen) {\r\n                        newList.push(lakeData.lake_id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    /**获取当前鱼竿类型*/\r\n    static get FishRodType(): number {\r\n        if (this.fishData) {\r\n            let num: number = this.fishData.player.round_cost;\r\n            let stdRodList:StdFishRod[] = CfgMgr.GetFishRodTypeList(1);\r\n            let std:StdFishRod;\r\n            for (let index = stdRodList.length - 1; index > -1; index--) {\r\n                std = stdRodList[index];\r\n                if(num >= std.MinValue && num <= std.MaxValue){\r\n                    return index;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    static FishItemAdd(list: SFishingItem[]): void {\r\n        if (this.fishItems) {\r\n            this.fishItems = this.fishItems.concat(list);\r\n        }\r\n    }\r\n    static FishItemRemove(list: SFishingItem[]): void {\r\n        if (this.fishItems) {\r\n            let fishItem: SFishingItem;\r\n            for (let index = 0; index < list.length; index++) {\r\n                fishItem = list[index];\r\n                let findIndex: number = this.fishItems.findIndex(item => item.id == fishItem.id);\r\n                if (findIndex > -1) {\r\n                    this.fishItems.splice(findIndex, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static GetFishItem(id: number): SFishingItem {\r\n        if (!this.fishItems) return null;\r\n        let fishItem: SFishingItem;\r\n        for (let index = 0; index < this.fishItems.length; index++) {\r\n            fishItem = this.fishItems[index];\r\n            if (fishItem.id == id) return fishItem;\r\n        }\r\n        return null\r\n    }\r\n    /**获取钓鱼赛季是否开启 */\r\n    static GetFishRaceIsOpen(): boolean {\r\n        //非精英服不开放入口\r\n        if (!DEV && !GameSet.Server_cfg.Mark) return false;\r\n        let openLv: number = CfgMgr.GetFishCommon.OpenLevel;\r\n        let buildings = this.GetBuildingByType(BuildingType.ji_di, 101);\r\n        if (buildings && buildings.length > 0 && buildings[0].level >= openLv) {\r\n            if (this.fishingMatch && (this.fishingMatch.current_match || this.fishingMatch.next_match)) {\r\n                if (this.fishingMatch.current_match && this.GetServerTime() > this.fishingMatch.current_match.StartTime && this.GetServerTime() < this.fishingMatch.current_match.CloseTime) {\r\n                    return true;\r\n                } else if (this.fishingMatch.next_match && this.GetServerTime() > this.fishingMatch.next_match.StartTime && this.GetServerTime() < this.fishingMatch.next_match.CloseTime) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**获取钓鱼角色数据 */\r\n    static GetFishingEquipHero(id: number): SFishingHeroData {\r\n        if (!this.fishHeros) return null;\r\n        let fishHero: SFishingHeroData;\r\n        for (let index = 0; index < this.fishHeros.length; index++) {\r\n            fishHero = this.fishHeros[index];\r\n            if (fishHero.id == id) return fishHero;\r\n        }\r\n        return null;\r\n    }\r\n    /**获取钓鱼角色装备数据 */\r\n    static GetFishingEquipData(id: number, slotId: StdFishEquipSoltType): SFishingHeroPartData {\r\n        let fishHero: SFishingHeroData = this.GetFishingEquipHero(id);\r\n        if (!fishHero || !fishHero.parts) return null;\r\n        let equipData: SFishingHeroPartData;\r\n        for (let index = 0; index < fishHero.parts.length; index++) {\r\n            equipData = fishHero.parts[index];\r\n            if (equipData.slot_id == slotId) return equipData;\r\n        }\r\n        return null;\r\n    }\r\n    /**获取钓鱼角色装备数据 */\r\n    static GetFishingEquipSkill(id: number, slotId: number): SFishingHeroSkillEffect {\r\n        let fishHero: SFishingHeroData = this.GetFishingEquipHero(id);\r\n        if (!fishHero || !fishHero.effective_skills) return null;\r\n        return fishHero.effective_skills[slotId];\r\n    }\r\n    static fishTradeData: SFishingTradeStateData;\r\n    /**获取运鱼当前最新回合数 */\r\n    static get CurFishTradeRoundInfo(): SFishingTradeRoundInfo {\r\n        if (this.fishTradeData && this.fishTradeData.round_info) {\r\n            return this.fishTradeData.round_info;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 获取是否热门渔船\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetHotShip(id: number): boolean {\r\n        let weightNum: number = 0;\r\n        let maxId: number = 0;\r\n        if (this.fishTradeData && this.fishTradeData.ship && this.fishTradeData.ship.length) {\r\n            for (let shipData of this.fishTradeData.ship) {\r\n                if (weightNum == 0) {\r\n                    if (shipData.cost > 0) {\r\n                        weightNum = shipData.cost;\r\n                        maxId = shipData.ship_id;\r\n                    }\r\n                } else {\r\n                    if (shipData.cost > weightNum) {\r\n                        weightNum = shipData.cost;\r\n                        maxId = shipData.ship_id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return maxId == id;\r\n    }\r\n    static GetFishTradShipState(shipId: number): number {\r\n        if (this.fishTradeData && this.fishTradeData.ship && this.fishTradeData.ship.length) {\r\n            let tempList: SFishingTradeShipData[] = this.fishTradeData.ship.concat();\r\n            tempList.sort((a: SFishingTradeShipData, b: SFishingTradeShipData) => {\r\n                return a.cost - b.cost;\r\n            });\r\n            let shipData: SFishingTradeShipData;\r\n            for (let index = 0; index < tempList.length; index++) {\r\n                shipData = tempList[index];\r\n                if (shipData.ship_id == shipId) {\r\n                    if (shipData.cost < 1) return 0;\r\n                    return index + 1;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * 获取运鱼船只数据\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetShipData(id: number): SFishingTradeShipData {\r\n        if (this.fishTradeData && this.fishTradeData.ship && this.fishTradeData.ship.length) {\r\n            for (const shipData of this.fishTradeData.ship) {\r\n                if (id == shipData.ship_id) return shipData;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**获取当前回合状态 */\r\n    static get GetFishTradeRoundState(): number {\r\n        if (!this.CurFishTradeRoundInfo) return FishTradeRoundState.No;//没有回合\r\n        if (!this.CurFishTradeRoundInfo.is_open) return FishTradeRoundState.No;//回合未开始\r\n        if (this.CurFishTradeRoundInfo.end_time < this.GetServerTime()) return FishTradeRoundState.No;//回合超时\r\n        //已结算\r\n        if (this.CurFishTradeRoundInfo.is_settlement) {\r\n            //已经选择气球并且已装鱼\r\n            if (this.fishTradeData.settlement && this.fishTradeData.player.ship_id > 0 && this.fishTradeData.player.round_cost > 0) {\r\n                return FishTradeRoundState.Settle;//结算时刻 \r\n            }\r\n            return FishTradeRoundState.NoFishTrade;//本回合未参与运鱼\r\n        }\r\n        //气球飞阶段\r\n        if (this.CurFishTradeRoundInfo.is_departure) {\r\n            //已经选气球并且已投入鱼饵\r\n            if (this.fishTradeData.player.ship_id > 0 && this.fishTradeData.player.round_cost > 0) {\r\n                return FishTradeRoundState.Departure;//提杆时刻\r\n            }\r\n            return FishTradeRoundState.NoFishTrade;//本回合未参与垂钓\r\n        }\r\n        if (this.fishTradeData.player.ship_id > 0) {\r\n            return FishTradeRoundState.Select;//已选湖泊\r\n        } else {\r\n            return FishTradeRoundState.NoSelect;//未选湖泊\r\n        }\r\n    }\r\n    /**当前赛季掠夺信息 */\r\n    static LootSeasonInfo: SCurrentSeasonInfo = {\r\n        season_id: 0,//玩家ID\r\n        status: ``,//赛季状态\r\n        is_settled: false,//\r\n        currency: 0,//当前\r\n        currency_74: 0,\r\n        wood: 0,//木头\r\n        water: 0,//水\r\n        rock: 0,//石头\r\n        seed: 0,//种子\r\n        start_time: 0,//开始时间\r\n        end_time: 0,//结束时间\r\n        score: 0,//分数\r\n        rank: 0,//排行\r\n        all_player: 0,//总人数\r\n        rank_list:[],//赛季排行信息\r\n    };\r\n    static LootSeasonApplyInfo: SLootSeasonApplyInfo = null;\r\n    /**上一赛季家园掠夺信息 */\r\n    static LootLastSeasonInfo: SLastSeasonInfo = {\r\n        seasonId: 0,//玩家ID\r\n        currency: 0,//当前\r\n        currency_74:0,\r\n        wood: 0,//木头\r\n        water: 0,//水\r\n        rock: 0,//石头\r\n        seed: 0,//种子\r\n        rank: 0,//排行\r\n        all_player: 0,//总人数\r\n        rank_list:[],//赛季排行信息\r\n    };\r\n    static LootPlayerData: SMatchPlayerData = {\r\n        player_id: ``,//玩家ID\r\n        match_count: 0,//匹配次数\r\n        paid_refresh_count: 0,//刷新次数\r\n        remaining_defense_count: 0,//防守次数\r\n        match_duration: [],//匹配次数\r\n        match_cd_end_time: 0,//匹配cd剩余时间\r\n        has_shield: false,//是否有盾\r\n        shield_end_time: 0,//盾结束时间\r\n        score: 0,//分数\r\n        defense_end_time: 0,//分数\r\n        is_use_item: false,//是否使用道具\r\n    };\r\n    static PvpShopData: SPvpShopGetContentRet = null;\r\n    static LootMatchList = []\r\n\r\n    static TipsList: TipsType[] = []\r\n\r\n    /**获取任务奖励 */\r\n    static GetLootBaseAwardThing(data): SThing {\r\n        let thing: SThing = {\r\n            type: data.RewardType\r\n        };\r\n        switch (thing.type) {\r\n            case ThingType.ThingTypeItem:\r\n                thing.item = { id: data.RewardID, count: data.RewardNumber };\r\n                break;\r\n            case ThingType.ThingTypeCurrency:\r\n                thing.currency = { type: 0, value: data.RewardNumber };\r\n                break;\r\n            case ThingType.ThingTypeGold:\r\n                thing.gold = { value: data.RewardNumber };\r\n                break;\r\n            case ThingType.ThingTypeEquipment:\r\n                break;\r\n            case ThingType.ThingTypeRole:\r\n                thing.role = {\r\n                    id: null, type: data.RewardNumber, quality: 1, level: null,\r\n                    experience: null, soldier_num: null, active_skills: null, passive_skills: null,\r\n                    is_in_building: null, building_id: null, battle_power: null, skills: null, is_assisting: false,\r\n                    is_in_attack_lineup: false, is_in_defense_lineup: false, trade_cd: 0\r\n                };\r\n                break;\r\n            case ThingType.ThingTypeResource:\r\n                switch (data.RewardID) {\r\n                    case ResourceType.rock:\r\n                        thing.resource = { rock: data.RewardNumber };\r\n                        break;\r\n                    case ResourceType.seed:\r\n                        thing.resource = { seed: data.RewardNumber };\r\n                        break;\r\n                    case ResourceType.water:\r\n                        thing.resource = { water: data.RewardNumber };\r\n                        break;\r\n                    case ResourceType.wood:\r\n                        thing.resource = { wood: data.RewardNumber };\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n        return thing\r\n    }\r\n\r\n    /**获取玩家赛季排行配置 */\r\n    static GetLootRankCfg(seasonData: any, season_id: number) {\r\n        if (!seasonData.rank) return;\r\n        let list_data = CfgMgr.getPVPById(season_id);\r\n\r\n        if (!list_data) return;\r\n        let list_id = list_data.JackpotType;\r\n        let stdRank: StdLootRank[] = CfgMgr.Get(`RankList`);\r\n        let top_rank = 0\r\n        stdRank.forEach((curData) => {\r\n            if (curData.ListModeID == list_id && curData.ListType == 1) {\r\n                if (curData.Ranking[0] == 1) {\r\n                    top_rank++;\r\n                }\r\n            }\r\n        })\r\n        let data: StdLootRank\r\n        stdRank.forEach((curData) => {\r\n            if (curData.ListModeID == list_id && curData.ListType == 1) {\r\n                if (seasonData.rank == -1) {\r\n                    return;\r\n                }\r\n                if (seasonData.rank <= top_rank) {\r\n                    if (seasonData.rank == curData.Ranking[1]) {\r\n                        data = curData;\r\n                    }\r\n                } else {\r\n                    if (curData.Ranking[0] != 1 && seasonData.rank <= curData.Ranking[1] * seasonData.all_player) {\r\n                        data = curData;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        return data;\r\n    }\r\n\r\n    //商城组信息（包含商城页签）\r\n    public static ShopGroupInfo: { [key: string]: StdShopGroup[] } = BeforeGameUtils.toHashMapObj(\r\n\r\n        //基础商店\r\n        ShopGroupId.BaseShop, [\r\n            { ShopGroupId: ShopGroupId.BaseShop, ShopType: ShopType.LuckyShop, TabSort:0, ShopName: \"抽奖商城\" },\r\n            { ShopGroupId: ShopGroupId.BaseShop, ShopType: ShopType.DayShop, TabSort:0, ShopName: \"每日商城\" },\r\n            { ShopGroupId: ShopGroupId.BaseShop, ShopType: ShopType.TempShop, TabSort:0, ShopName: \"临时商店\" },\r\n            { ShopGroupId: ShopGroupId.BaseShop, ShopType: ShopType.WeekShop, TabSort:0, ShopName: \"特殊商店\" },\r\n        ],\r\n        //pvp商店\r\n        ShopGroupId.GemShop, [\r\n            { ShopGroupId: ShopGroupId.GemShop, ShopType: ShopType.GemConversion, TabSort:0, ShopName: \"宝石积分提取\" },\r\n            { ShopGroupId: ShopGroupId.GemShop, ShopType: ShopType.GemShop, TabSort:0, ShopName: \"宝石商城\" },\r\n        ],\r\n        //pvp商店\r\n        ShopGroupId.PvpShop, [\r\n            { ShopGroupId: ShopGroupId.PvpShop, ShopType: ShopType.PvpShop, TabSort:0, ShopName: \"勋章商城\" },\r\n        ],\r\n        //世界boss商店\r\n        ShopGroupId.WorldBossShop, [\r\n            { ShopGroupId: ShopGroupId.WorldBossShop, ShopType: ShopType.WorldBossShop, TabSort:0, ShopName: \"Boss商城\" },\r\n        ],\r\n    );\r\n    private static shopMap: { [key: string]: SShopIndexContent };\r\n    /**\r\n     * 设置商店数据\r\n     * @param datas \r\n     */\r\n    static SetShopData(datas: SShopIndexContent[]): void {\r\n        if (!this.shopMap) this.shopMap = js.createMap();\r\n        for (const shopData of datas) {\r\n            this.shopMap[shopData.shop_index_id] = shopData;\r\n        }\r\n\r\n    }\r\n    /**\r\n     * 获取商店数据\r\n     * @param shopId 商店id\r\n     * @returns \r\n     */\r\n    static GetShopData(shopId: number): SShopIndexContent {\r\n        return this.shopMap ? this.shopMap[shopId] : null;\r\n    }\r\n    /**\r\n     * 获取通用商品数据\r\n     * @param shopId \r\n     * @param shopItemId \r\n     * @returns \r\n     */\r\n    static GetCommShopData(shopId: number): SShopContent {\r\n        let shopData = this.GetShopData(shopId);\r\n        return shopData ? shopData.shop : null;\r\n    }\r\n    /**\r\n     * 获取抽奖商店数据\r\n     * @param shopId 商店id\r\n     * @returns \r\n     */\r\n    static GetShopLuckyData(shopId: number): SLuckyContent {\r\n        let shopData = this.GetShopData(shopId);\r\n        return shopData?.lucky;\r\n    }\r\n    static noticeDatas: NoticeData[] = [];\r\n    /**\r\n     * 设置公告数据\r\n     * @param list \r\n     * @returns 返回是否有更新\r\n     */\r\n    static SetNoticeDatas(list: NoticeData[], unLogin = false): boolean {\r\n        this.noticeDatas = [];\r\n        let newData: NoticeData;\r\n        let newKeyVal: string = \"\";\r\n\r\n        let oldKeyVal: string = unLogin ? \"undefined\" : LocalStorage.GetPlayerData(PlayerData.playerIdKey, \"NoticeCheckCode\");\r\n        for (let index = 0; index < list.length; index++) {\r\n            newData = list[index];\r\n            newKeyVal += newData.id.toString();\r\n            if (index < list.length - 1) {\r\n                newKeyVal += \"_\";\r\n            }\r\n            this.noticeDatas[index] = newData;\r\n        }\r\n        if (unLogin) return true;\r\n        if (newKeyVal != \"\" && oldKeyVal != newKeyVal) {\r\n            LocalStorage.SetPlayerData(PlayerData.playerIdKey, \"NoticeCheckCode\", newKeyVal);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 获取公告数据\r\n     * @returns \r\n     */\r\n    static GetNoticeDatas(): NoticeData[] {\r\n        return this.noticeDatas;\r\n    }\r\n\r\n    /**运鱼入口红点 */\r\n    static CheckFishTradeEnterRead(): boolean {\r\n        if (this.CheckFishTradeIsOpen()) return true;\r\n        return false;\r\n    }\r\n    private static fishOpenTimeCfg: { startHour: number, startMinute: number, endHour: number, endMinute: number }[];\r\n    private static fishTempDate: Date = new Date();\r\n    /**\r\n     * 检测钓鱼活动是否开启\r\n     */\r\n    static CheckFishIsOpen(): boolean {\r\n        let data: SOneOffRedPoint = this.GetOneOffRedPoint(OneOffRedPointId.OffRedPoint_FishOpen);\r\n        if (data.isCheck) return data.redPointVal;\r\n        if (!this.fishOpenTimeCfg) {\r\n            this.fishOpenTimeCfg = [];\r\n            let std: StdFishCommon = CfgMgr.GetFishCommon;\r\n            for (let index = 0; index < std.Opentime.length; index++) {\r\n                let openTiem: string = std.Opentime[index];\r\n                let timearr = openTiem.replace(\" \", \":\").replace(/\\:/g, \"-\").split(\"-\");\r\n                this.fishOpenTimeCfg[index] = {\r\n                    startHour: Number(timearr[0]),\r\n                    startMinute: Number(timearr[1]),\r\n                    endHour: Number(timearr[2]),\r\n                    endMinute: Number(timearr[3]),\r\n                };\r\n                console.log(timearr);\r\n            }\r\n        }\r\n        let isRedPoint = false;\r\n        let serverTime: number = this.GetServerTime();\r\n        for (let index = 0; index < this.fishOpenTimeCfg.length; index++) {\r\n            let timeData: { startHour: number, startMinute: number, endHour: number, endMinute: number } = this.fishOpenTimeCfg[index];\r\n            let startS: number = DateUtils.weeHoursTime(serverTime) + (timeData.startHour * 60 + timeData.startMinute) * 60;\r\n            let endS: number = DateUtils.weeHoursTime(serverTime) + (timeData.endHour * 60 + timeData.endMinute) * 60;\r\n            if (serverTime >= startS && serverTime < endS) {\r\n                isRedPoint = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        data.isCheck = true;\r\n        data.redPointVal = isRedPoint;\r\n        return isRedPoint;\r\n    }\r\n    /**\r\n     * 检测鱼商店是否可出售鱼\r\n     */\r\n    static CheckFishShopIsSell(): boolean {\r\n        if (!this.fishItems) return false;\r\n        let data: SOneOffRedPoint = this.GetOneOffRedPoint(OneOffRedPointId.OffRedPoint_FishSell);\r\n        if (data.isCheck) return data.redPointVal;\r\n        data.redPointVal = PlayerData.fishItems && PlayerData.fishItems.length > 0;\r\n        data.isCheck = true;\r\n        return data.redPointVal;\r\n    }\r\n    \r\n    private static fishTradeOpenTimeCfg: { startHour: number, startMinute: number, endHour: number, endMinute: number }[];\r\n    /**\r\n     * 检测运鱼活动是否开启\r\n     */\r\n    static CheckFishTradeIsOpen(): boolean {\r\n        let data: SOneOffRedPoint = this.GetOneOffRedPoint(OneOffRedPointId.OffRedPoint_FishTradeOpen);\r\n        if (data.isCheck) return data.redPointVal;\r\n        if (!this.fishTradeOpenTimeCfg) {\r\n            this.fishTradeOpenTimeCfg = [];\r\n            let std: StdFishTradeCommon = CfgMgr.GetFishTradeCommon;\r\n            for (let index = 0; index < std.Opentime.length; index++) {\r\n                let openTiem: string = std.Opentime[index];\r\n                let timearr = openTiem.replace(\" \", \":\").replace(/\\:/g, \"-\").split(\"-\");\r\n                this.fishTradeOpenTimeCfg[index] = {\r\n                    startHour: Number(timearr[0]),\r\n                    startMinute: Number(timearr[1]),\r\n                    endHour: Number(timearr[2]),\r\n                    endMinute: Number(timearr[3]),\r\n                };\r\n                console.log(timearr);\r\n            }\r\n        }\r\n        let isRedPoint = false;\r\n        let serverTime: number = this.GetServerTime();\r\n        for (let index = 0; index < this.fishTradeOpenTimeCfg.length; index++) {\r\n            let timeData: { startHour: number, startMinute: number, endHour: number, endMinute: number } = this.fishTradeOpenTimeCfg[index];\r\n            let startS: number = DateUtils.weeHoursTime(serverTime) + (timeData.startHour * 60 + timeData.startMinute) * 60;\r\n            let endS: number = DateUtils.weeHoursTime(serverTime) + (timeData.endHour * 60 + timeData.endMinute) * 60;\r\n            \r\n            if (serverTime >= startS && serverTime < endS) {\r\n                isRedPoint = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        data.isCheck = true;\r\n        data.redPointVal = isRedPoint;\r\n        return isRedPoint;\r\n    }\r\n    \r\n    /**\r\n     * 检测是否有角色可升级 roleId不为空时检测指定角色 否则检测全部\r\n     */\r\n    static CheckRoleIsCanUp(roleId?: string): boolean {\r\n        let maxLv: number;\r\n        let curLv: number;\r\n        let nextLv: StdRoleLevel;\r\n        let items: SPlayerDataItem[] = PlayerData.GetItemTypeDatas(ItemType.exp);\r\n        let totlaExp: number = items.reduce((count, item) => {\r\n            let stdItem: StdItem = CfgMgr.Getitem(item.id);\r\n            return count + stdItem.ItemEffect1 * item.count;\r\n        }, 0);\r\n\r\n        let checkRole = (role: SPlayerDataRole) => {\r\n            if (!role) return false;\r\n            maxLv = CfgMgr.GetRoleMaxLevel(role.type);\r\n            curLv = role.level;\r\n            if (curLv >= maxLv) return false;\r\n            nextLv = CfgMgr.GetRoleExpMaxLevel(role.type, curLv, role.experience + totlaExp);\r\n            if (nextLv) {\r\n\r\n                if (nextLv.Level > curLv) return true;\r\n                if (nextLv.ConditionId && nextLv.ConditionId) {\r\n                    let condData: ConditionSub = DL.FormatCondition(nextLv.ConditionId[0], nextLv.ConditionLv[0]);\r\n                    if (condData.fail) {\r\n                        return false;\r\n                    }\r\n                }\r\n                //突破\r\n                if (nextLv.BreakItem && nextLv.BreakItem.length > 0) {\r\n                    let myMoney = PlayerData.roleInfo.currency;\r\n                    if (myMoney < nextLv.Cost) {\r\n                        return false;\r\n                    }\r\n                    for (let index = 0; index < nextLv.BreakItem.length; index++) {\r\n                        let itemId = nextLv.BreakItem[index];\r\n                        let itemNum = nextLv.BreakCost[index];\r\n                        let have: number = PlayerData.GetItemCount(itemId);\r\n                        if (have < itemNum) return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        if (roleId != undefined) {\r\n            return checkRole(this.GetRoleById(roleId));\r\n        } else {\r\n            for (let index = 0; index < this.roleInfo.roles.length; index++) {\r\n                if (checkRole(this.roleInfo.roles[index])) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**生产工坊是否可生产,有id时检测单个，没有id时检测所有 */\r\n    static CheckProductionRed(item_id?: number): boolean {\r\n        //可生产的道具\r\n\r\n        let building_id;\r\n        let homeLand = this.GetHomeLand(this.RunHomeId);\r\n        if (!homeLand) return undefined;\r\n        for (let building of homeLand.buildings) {\r\n            if (CfgMgr.GetBuildingUnLock(building.id).BuildingType == BuildingType.sheng_chan) {\r\n                building_id = building.id;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!building_id) return;\r\n        let max_count = Number.MAX_SAFE_INTEGER;\r\n        let stdlst: StdProduction[] = [];\r\n        let cfg = CfgMgr.GetProductions(building_id);\r\n        for (let std of cfg) {\r\n            let homeId = CfgMgr.Get(\"homeland_building\")[std.BuildingId].HomeId;\r\n            if (PlayerData.CheckCondition(homeId, std.ConditionID, std.ConditionValue)) {\r\n                if (item_id) {\r\n                    if (std.ItemID == item_id) {\r\n                        stdlst.push(std);\r\n                        break;\r\n                    }\r\n                } else {\r\n                    stdlst.push(std);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stdlst) {\r\n            for (let index = 0; index < stdlst.length; index++) {\r\n                const element = stdlst[index];\r\n                let ids = element.CostItemID;\r\n                let num = element.Num;\r\n                let costList\r\n                let nums\r\n                if (typeof ids == \"number\") {\r\n                    costList = [ids];\r\n                    nums = [num]\r\n                } else {\r\n                    costList = ids;\r\n                    nums = num\r\n                }\r\n                for (let i = 0; i < costList.length; i++) {\r\n                    if (costList[i]) {\r\n                        let has = PlayerData.GetItemCount(costList[i]);\r\n                        let count = Math.floor(has / nums[i])\r\n                        //能合成的最大数量\r\n                        max_count = (count > max_count) ? max_count : count\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return max_count > 0;\r\n    }\r\n    /**\r\n     * 检测角色合成碎片\r\n     * @returns \r\n     */\r\n    static CheckRoleChip(): boolean {\r\n        let datas = PlayerData.GetitemBySubType(ItemSubType.shard);\r\n        for (let item of datas) {\r\n            let std = CfgMgr.Getitem(item.id);\r\n            if (std.Type == ThingType.ThingTypeItem && std.Itemtpye == ItemType.shard) {\r\n                if (item.count >= std.ItemEffect3) return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 检测角色合成碎片\r\n     * @param itemId \r\n     * @returns \r\n     */\r\n    static CheckBagBox(): boolean {\r\n        let datas = PlayerData.GetitemBySubType(ItemSubType.cost);\r\n        for (let item of datas) {\r\n            let std = CfgMgr.Getitem(item.id);\r\n            if (std.Type == ThingType.ThingTypeItem && std.Itemtpye == ItemType.box) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * 检测掠夺红点\r\n     * @returns \r\n     */\r\n    static CheckLoop(): boolean {\r\n        if (!this.GetSysIsOpen(StdSysId.Sys_7)) return false;\r\n        if (!this.LootPlayerData) return false;\r\n        if (this.LootPlayerData.match_count > 0) return true;\r\n        if (this.LootPlayerData.paid_refresh_count > 0) {\r\n            if (this.LootSeasonInfo) {\r\n                let seasonData = CfgMgr.getPVPById(this.LootSeasonInfo.season_id);\r\n                let haveNum = PlayerData.GetItemCount(seasonData.ConsumeItem);\r\n                if (haveNum > seasonData.ConsumeNumber) return true;\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n    /**频道消息列表 */\r\n    private static channelMsg: SChannelMsgData[] = [];\r\n    /**重置频道消息 */\r\n    static ResetChannelMsg(): void {\r\n        this.channelMsg = [];\r\n        EventMgr.emit(Evt_ChannelMsgUpdate);\r\n    }\r\n    private static advisterCount: { [key: number]: SAdvister } = js.createMap();\r\n    /**设置广告数据*/\r\n    static SetAdvisterData(data: { [key: number]: number }): void {\r\n        this.advisterCount = js.createMap();\r\n        for (let key in data) {\r\n            let id: number = Number(key);\r\n            let val: number = Number(data[key]);\r\n            let std: StdAdvister = CfgMgr.GetAdvister(id);\r\n            this.advisterCount[id] = { id: id, count: Math.max(std.Max_numb - val, 0), cdEndTime: 0 };\r\n        }\r\n    }\r\n    /**更新广告次数 */\r\n    static UpdateAdvisterData(id: number, newCount: number): void {\r\n        let advisterData: SAdvister = this.advisterCount[id];\r\n        let std: StdAdvister = CfgMgr.GetAdvister(id);\r\n        if (std) {\r\n            let count: number = 0;\r\n            if (!advisterData) {\r\n                advisterData = { id: id, count: std.Max_numb, cdEndTime: 0 };\r\n            } else {\r\n                advisterData.count = Math.max(std.Max_numb - newCount, 0);\r\n            }\r\n            this.advisterCount[id] = advisterData;\r\n        }\r\n    }\r\n    /**\r\n     * 获取广告数据\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetAdvisterData(id: number): SAdvister {\r\n        let std: StdAdvister = CfgMgr.GetAdvister(id);\r\n        if (!std) return;\r\n        let advisterData: SAdvister = this.advisterCount[id];\r\n        if (!advisterData) {\r\n            advisterData = { id: std.Ad_ID, count: std.Max_numb, cdEndTime: 0 };\r\n            this.advisterCount[id] = advisterData;\r\n        }\r\n        return advisterData;\r\n    }\r\n    /**设置广告cd */\r\n    static SetAdvisterCd(id: number): void {\r\n        let adData: SAdvister = this.GetAdvisterData(id);\r\n        let std: StdAdvister = CfgMgr.GetAdvister(id);\r\n        adData.cdEndTime = game.totalTime + std.Ad_CD * 1000;\r\n    }\r\n    /**增加频道消息 */\r\n    static AddChannelMsg(id: number, ...arg: any[]): void {\r\n        let msg: StdMessag = CfgMgr.GetMessag(id);\r\n        if (msg) {\r\n            let formatCont = ReplaceStr(msg.Content, ...arg);\r\n            let msdData: SChannelMsgData = {\r\n                title: \"系统\",\r\n                cont: formatCont,\r\n            }\r\n            this.channelMsg.unshift(msdData);\r\n            EventMgr.emit(Evt_ChannelMsgUpdate);\r\n        }\r\n\r\n    }\r\n    /**增加频道消息 */\r\n    static AddServerChannelMsg(data: { type: number, content: string }): void {\r\n        let msdData: SChannelMsgData = {\r\n            title: \"系统\",\r\n            cont: data.content,\r\n        }\r\n        this.channelMsg.unshift(msdData);\r\n        EventMgr.emit(Evt_ChannelMsgUpdate);\r\n\r\n    }\r\n    /**获取频道消息列表 */\r\n    static GetChannelMsgList(): SChannelMsgData[] {\r\n        return this.channelMsg;\r\n    }\r\n    /**检测是否有加速道具 */\r\n    static CheckAddTimeItem(): boolean {\r\n        let itemDatas = this.GetItemTypeDatas(ItemType.speed);\r\n        return itemDatas && itemDatas.length > 0;\r\n    }\r\n    /**\r\n     * 检测系统是否开启\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetSysIsOpen(id: number): boolean {\r\n        let stdSysOpen: StdSystemOpen = CfgMgr.GetSysOpenCfg(id);\r\n        if (stdSysOpen) {\r\n            for (let n = 1; ; n++) {\r\n                let types = stdSysOpen['ConditionId' + n];\r\n                let values = stdSysOpen['ConditionValue' + n];\r\n                if (types == undefined || values == undefined) break;\r\n                for (let i = 0; i < types.length; i++) {\r\n                    let type = types[i];\r\n                    let value = values[i];\r\n                    if (DL.Check(type, value)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    //一次性检测的红点id\r\n    private static oneOffRedPointCondIds: number[] = [\r\n        OneOffRedPointId.OffRedPoint_FishOpen,\r\n        OneOffRedPointId.OffRedPoint_FishShopBuy,\r\n        OneOffRedPointId.OffRedPoint_FishSell,\r\n        OneOffRedPointId.OffRedPoint_RolePassiveSkill,\r\n        OneOffRedPointId.OffRedPoint_FishTradeOpen,\r\n    ];\r\n    //一次性红点记录\r\n    private static oneOffRedPoint: { [key: string]: SOneOffRedPoint } = js.createMap();\r\n    /**\r\n     * 重置一次性红点\r\n     */\r\n    public static ResetOneOffRedPoint(): void {\r\n        if (!this.oneOffRedPoint) {\r\n            this.oneOffRedPoint = js.createMap();\r\n        }\r\n        let id: number;\r\n        let data: SOneOffRedPoint;\r\n        for (let index = 0; index < this.oneOffRedPointCondIds.length; index++) {\r\n            id = this.oneOffRedPointCondIds[index];\r\n            data = this.oneOffRedPoint[id];\r\n            if (!data) {\r\n                data = { id: id, isCheck: false, redPointVal: false };\r\n            } else {\r\n                data.isCheck = false;\r\n                data.redPointVal = false;\r\n            }\r\n            this.oneOffRedPoint[id] = data;\r\n        }\r\n    }\r\n    //设置一次性点击红点点击\r\n    public static SetOneOffRedPoint(id: number, redPointValue: boolean = false): void {\r\n        let data: SOneOffRedPoint = this.oneOffRedPoint[id];\r\n        if (data && data.isCheck) {\r\n            data.redPointVal = redPointValue;\r\n            EventMgr.emit(Evt_LoginRedPointUpdate, id);\r\n        }\r\n    }\r\n    /**获取一次性红点数据 */\r\n    public static GetOneOffRedPoint(id: number): SOneOffRedPoint {\r\n        return this.oneOffRedPoint[id];\r\n    }\r\n\r\n    static MyGuild: SGuild = null;//我的公会数据\r\n    static ResetMyGuildData(): void {\r\n        this.MyGuild = null;\r\n\r\n    }\r\n    //获取我的公会权限\r\n    static GetMyGuildLimit(): StdGuildRole {\r\n        if (!this.MyGuild) return null;\r\n        let memberData: SGuildMember = this.MyGuild.members[this.roleInfo.player_id];\r\n        if (!memberData) return null;\r\n        return CfgMgr.GetGuildRole(memberData.role);\r\n    }\r\n    /**获取我是否有审核权限 */\r\n    static GetMyGuildApply(): boolean {\r\n        let stdRole: StdGuildRole = this.GetMyGuildLimit();\r\n        if (!stdRole) return false;\r\n        return stdRole && stdRole.PermissionApplication > 0;\r\n    }\r\n    /**获取我是否有修改行会信息权限 */\r\n    static GetMyGuildChange(): boolean {\r\n        let stdRole: StdGuildRole = this.GetMyGuildLimit();\r\n        if (!stdRole) return false;\r\n        if (stdRole.PermissioneName > 0) return true;\r\n        if (stdRole.PermissionLogo > 0) return true;\r\n        if (stdRole.PermissionJoin > 0) return true;\r\n        if (stdRole.PermissionEditAnnouncement > 0) return true;\r\n\r\n        return false;\r\n\r\n    }\r\n    /**获取公会成员是否满足莫一项公会职位*/\r\n    static GetGuildMeetPost(playerId: string, postId: number): boolean {\r\n        if (!this.MyGuild) return false;\r\n        let memberData: SGuildMember = this.MyGuild.members[playerId];\r\n        if (!memberData) return false;\r\n        return memberData.role == postId;\r\n    }\r\n    /**获取公会职位人数 */\r\n    static GetGuildPostNum(id: number): number {\r\n        if (!this.MyGuild) return 0;\r\n        let num: number = 0;\r\n        let memberData: SGuildMember;\r\n        for (let key in this.MyGuild.members) {\r\n            memberData = this.MyGuild.members[key];\r\n            if (memberData.role == id) {\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n\r\n    /**获取公会是否已申请过*/\r\n    static GetGuildIsHaveApply(guildId: string, list: SGuildApplication[]): boolean {\r\n        let applyData: SGuildApplication;\r\n        let applyTime: number = CfgMgr.GetGuildComm().ApplicationsExpirationTime;\r\n        for (let index = 0; index < list.length; index++) {\r\n            applyData = list[index];\r\n            if (applyData.guild_id == guildId && this.GetServerTime() < applyData.time + applyTime) return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**获取公会事件内容*/\r\n    static GetGuildEventCont(guildEventData: SGuildEvent): string {\r\n        let stdGuildEvent: StdGuildEvent = CfgMgr.GetGuildEvent(guildEventData.event_type);\r\n        let result = stdGuildEvent.Content;\r\n        if (stdGuildEvent) {\r\n\r\n            if (guildEventData.event_args) {\r\n                for (let index = 0; index < guildEventData.event_args.length; index++) {\r\n                    result = this.GetGuildEventStr(result, stdGuildEvent.ID, index, guildEventData.event_args[index]);\r\n                }\r\n            }\r\n\r\n        }\r\n        return result;\r\n    }\r\n    private static GetGuildEventStr(cont: string, eventId: number, index: number, val: any): string {\r\n        let key: string = `{${index}}`;\r\n        let newVal: any;\r\n        switch (eventId) {\r\n            case GuildEventType.EventType_4:\r\n                if (index == 1) {\r\n                    let stdGuildRole: StdGuildRole = CfgMgr.GetGuildRole(Number(val));\r\n                    if (stdGuildRole) {\r\n                        newVal = stdGuildRole.Name;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        return cont.replace(key, newVal || val);\r\n    }\r\n    /**根据公会类型获取公会权益列表 */\r\n    static GetGuildPostPrivilegeList(guildType: number, guildPost: GuildPostType): StdGuildEquity[] {\r\n        let list: StdGuildEquity[] = [];\r\n        let stdGuildType: StdGuildType = CfgMgr.GetGuildType(guildType);\r\n        let idList = stdGuildType[`Equity_list${guildPost}`];\r\n        if (!idList) return list;\r\n        let stdEquity: StdGuildEquity;\r\n        for (let i = 0; i < idList.length; i++) {\r\n            stdEquity = CfgMgr.GetGuildEquity(idList[i]);\r\n            if (stdEquity) {\r\n                list.push(stdEquity);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    /**获取我的公会权益列表 */\r\n    static GetMyGuildPrivilegeList(): StdGuildEquity[] {\r\n        if (!this.MyGuild) return [];\r\n        let myPost: StdGuildRole = this.GetMyGuildLimit();\r\n        if (!myPost) return [];\r\n        return this.GetGuildPostPrivilegeList(this.MyGuild.type, myPost.ID);\r\n    }\r\n\r\n    /**根据传入id获取我的公会权益 没有此权益则返回null */\r\n    static GetMyGuildPrivilegeById(id: number): StdGuildEquity {\r\n        let list: StdGuildEquity[] = this.GetMyGuildPrivilegeList();\r\n        for (let std of list) {\r\n            if (std.ID == id) return std;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**根据传入id获取我的公会权益值 没有则返回0*/\r\n    static GetMyGuildPrivilegeByIdToValue(id: number): number {\r\n        let myStd: StdGuildRole = PlayerData.GetMyGuildLimit();\r\n        if (!myStd) return 0;\r\n        let std: StdGuildEquity = this.GetMyGuildPrivilegeById(id);\r\n        if (!std) return 0;\r\n        for (let index = 0; index < std.GuildRole.length; index++) {\r\n            if (myStd.ID == std.GuildRole[index]) {\r\n                return std.RewardType[index];\r\n            }\r\n\r\n        }\r\n        return 0;\r\n    }\r\n    /**获取我在公会是否有管理权限 */\r\n    static GetMyGuildAuthority(myData: SGuildMember, targetData: SGuildMember): boolean {\r\n        if (targetData.player_id == PlayerData.roleInfo.player_id) return;\r\n        let myStd: StdGuildRole = CfgMgr.GetGuildRole(myData.role);\r\n        let targetStd: StdGuildRole = CfgMgr.GetGuildRole(targetData.role);\r\n        //return myStd.PermissionRoleAppointment > targetStd.PermissionRoleAppointment || myStd.PermissionKickPlayer > targetStd.PermissionKickPlayer;\r\n        switch (myStd.ID) {\r\n            case GuildPostType.President:\r\n                if (targetStd.ID == GuildPostType.VicePresident || targetStd.ID == GuildPostType.Member) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case GuildPostType.VicePresident:\r\n                if (targetStd.ID == GuildPostType.Officer || targetStd.ID == GuildPostType.Member) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case GuildPostType.Officer:\r\n                if (targetStd.ID == GuildPostType.Member) {\r\n                    return true;\r\n                }\r\n                break;\r\n        }\r\n        return false;\r\n    }\r\n    /**搜素公会成员 */\r\n    static SearchGuildMember(queryStr:string, datas:{[key:string]:SGuildMember}):{[key:string]:SGuildMember}{\r\n        let regex = new RegExp(queryStr.split('').join('.*?'), 'i');\r\n        let list:{[key:string]:SGuildMember} = js.createMap();\r\n        let sGuildMember:SGuildMember;\r\n        for (let key in datas) {\r\n            sGuildMember = datas[key];\r\n            if(regex.test(sGuildMember.name) || regex.test(sGuildMember.player_id)){\r\n                list[key] = sGuildMember;\r\n            }\r\n        }\r\n        \r\n        return list;\r\n    }\r\n\r\n\r\n    /**权益卡数据 */\r\n    static rightsData: SBenefit = null;\r\n\r\n\r\n    /**是否激活权益 */\r\n    static GetIsActivateRights(equityId: StdEquityId):boolean {\r\n        if(!PlayerData.rightsData || !PlayerData.rightsData.all_equities) return false;\r\n        let val:boolean = PlayerData.rightsData.all_equities[equityId] || false;\r\n        return val;\r\n    }\r\n\r\n    /**获取可繁育主卡数据 */\r\n    static getFanyuMainRole() {\r\n        let stds: StdMerge[] = CfgMgr.Get(\"role_quality\");\r\n        let roles = [];\r\n        for (let std of stds) {\r\n            for (let role of this.playerInfo.roles) {\r\n                let isdefense = false;\r\n                if (this.playerInfo.defense_lineup) {\r\n                    for (let defense of this.playerInfo.defense_lineup) {\r\n                        if (defense.role_id == role.id) {\r\n                            isdefense = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                let isattack = false;\r\n                if (this.playerInfo.attack_lineup) {\r\n                    for (let defense of this.playerInfo.attack_lineup) {\r\n                        if (defense && defense.role_id == role.id) {\r\n                            isattack = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (!isattack && !isdefense && role.type == std.Roleid && role.quality + 1 === std.RoleQuailty && role.building_id == 0 && !role.is_assisting && role.passive_skills && !role.is_in_main_building) {\r\n                    // console.log(\"mainCard**********\",role.id,role.building_id);\r\n                    roles.push(role);\r\n                }\r\n            }\r\n        }\r\n        let curRoles = [];\r\n        curRoles = roles.filter((item, index) => roles.indexOf(item) === index);\r\n        curRoles.sort((a: SPlayerDataRole, b: SPlayerDataRole) => {\r\n            if (a.passive_skills.length == b.passive_skills.length) {\r\n                return b.battle_power - a.battle_power;\r\n            } else {\r\n                return b.passive_skills.length - a.passive_skills.length;\r\n            }\r\n        })\r\n        return curRoles;\r\n    }\r\n    /**获取可繁育副卡数据 */\r\n    static getFanyuOrtherRole(mainRole, std) {\r\n        let roles = [];\r\n        for (let role of this.playerInfo.roles) {\r\n            let isdefense = false;\r\n            if (this.playerInfo.defense_lineup) {\r\n                for (let defense of this.playerInfo.defense_lineup) {\r\n                    if (defense.role_id == role.id) {\r\n                        isdefense = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            let isattack = false;\r\n            if (this.playerInfo.attack_lineup) {\r\n                for (let defense of this.playerInfo.attack_lineup) {\r\n                    if (defense && defense.role_id == role.id) {\r\n                        isattack = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            let need_1 = !isattack && !isdefense && std.OtherRoleid.indexOf(role.type) != -1 && mainRole.quality === role.quality;\r\n            let need_2 =  role.building_id == 0 && !role.is_assisting && role.passive_skills && !role.is_in_main_building;\r\n            if (need_1 && need_2 && role.ownership_type == mainRole.ownership_type) {\r\n                roles.push(role);\r\n            }\r\n        }\r\n        let curRoles = [];\r\n        curRoles = roles.filter((item, index) => roles.indexOf(item) === index);\r\n        curRoles.sort((a: SPlayerDataRole, b: SPlayerDataRole) => {\r\n            if (a.passive_skills.length == b.passive_skills.length) {\r\n                return b.battle_power - a.battle_power;\r\n            } else {\r\n                return b.passive_skills.length - a.passive_skills.length;\r\n            }\r\n        })\r\n        return curRoles;\r\n    }\r\n    /**获取可进化的角色 */\r\n    static getJinHuaRole() {\r\n        let stds: StdMerge[] = CfgMgr.Get(\"role_quality\");\r\n        let roles = [];\r\n        for (let std of stds) {\r\n            for (let role of this.playerInfo.roles) {\r\n                let isdefense = false;\r\n                if (this.playerInfo.defense_lineup) {\r\n                    for (let defense of this.playerInfo.defense_lineup) {\r\n                        if (defense.role_id == role.id) {\r\n                            isdefense = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                let isattack = false;\r\n                if (this.playerInfo.attack_lineup) {\r\n                    for (let defense of this.playerInfo.attack_lineup) {\r\n                        if (defense && defense.role_id == role.id) {\r\n                            isattack = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                let is_work = !isattack && !isdefense && role.building_id == 0 && !role.is_in_main_building;\r\n                let is_can = role.type == std.Roleid && !role.is_assisting && role.passive_skills && role.level == 1;\r\n              \r\n            \r\n\r\n                if (is_work && is_can && std.RoleTypeQual != 2 ) {\r\n                    // console.log(\"mainCard**********\",role.id,role.building_id);\r\n                    roles.push(role);\r\n                }\r\n            }\r\n        }\r\n        let curRoles = [];\r\n        curRoles = roles.filter((item, index) => roles.indexOf(item) === index);\r\n        curRoles.sort((a: SPlayerDataRole, b: SPlayerDataRole) => {\r\n            if (a.passive_skills.length == b.passive_skills.length) {\r\n                return b.battle_power - a.battle_power;\r\n            } else {\r\n                return b.passive_skills.length - a.passive_skills.length;\r\n            }\r\n        })\r\n        return curRoles;\r\n    }\r\n    /**获取可洗练的角色 */\r\n     static getXiLianRole() {\r\n        let roles = [];\r\n        for (let role of this.playerInfo.roles) {\r\n            let isdefense = false;\r\n            if (this.playerInfo.defense_lineup) {\r\n                for (let defense of this.playerInfo.defense_lineup) {\r\n                    if (defense.role_id == role.id) {\r\n                        isdefense = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            let isattack = false;\r\n            if (this.playerInfo.attack_lineup) {\r\n                for (let defense of this.playerInfo.attack_lineup) {\r\n                    if (defense && defense.role_id == role.id) {\r\n                        isattack = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            let is_has = CfgMgr.GetRoleSkillClearCfg(role.type, role.quality);\r\n            let is_work = !isattack && !isdefense && role.building_id == 0 && !role.is_in_main_building;\r\n            let is_can = role.quality != 1 && !role.is_assisting && role.passive_skills && is_has;\r\n\r\n            if (is_work && is_can) {\r\n                // console.log(\"mainCard**********\",role.id,role.building_id);\r\n                roles.push(role);\r\n            }\r\n        }\r\n        \r\n        let curRoles = [];\r\n        curRoles = roles.filter((item, index) => roles.indexOf(item) === index);\r\n        curRoles.sort((a: SPlayerDataRole, b: SPlayerDataRole) => {\r\n            if (a.passive_skills.length == b.passive_skills.length) {\r\n                return b.battle_power - a.battle_power;\r\n            } else {\r\n                return b.passive_skills.length - a.passive_skills.length;\r\n            }\r\n        })\r\n        return curRoles;\r\n    }\r\n\r\n    /**获取上阵角色战力 */\r\n    static GetShangZhenBattlePower(): number {\r\n        let val: number = 0;\r\n        let szRoleData: SBattleRole;\r\n        let list: SBattleRole[] = this.attackRoles;\r\n        let roleData: SPlayerDataRole;\r\n        for (let index = 0; index < list.length; index++) {\r\n            szRoleData = list[index];\r\n            if (!szRoleData) continue;\r\n            roleData = this.GetRoleById(szRoleData.role_id);\r\n            if (roleData) {\r\n                val = val.add(roleData.battle_power);\r\n            }\r\n        }\r\n        return val;\r\n    }\r\n    /**修正权益卡时间为凌晨00点 */\r\n    static CorrectionRightsCardTime(data:SBenefit):SBenefit{\r\n        if(data && data.benefit_card && data.benefit_card.cards){\r\n            for (let key in data.benefit_card.cards) {\r\n                let time:number = data.benefit_card.cards[key];\r\n                let newTime:number = DateUtils.weeHoursTime(time);\r\n                console.log(\"权益卡时间修正---->offset \" + (time - newTime));\r\n                data.benefit_card.cards[key] = newTime;\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    /**获取权益卡激活剩余时间 */\r\n    static GetEquityCardResidueTime(cardId: number): number {\r\n        if (!this.rightsData || !this.rightsData.benefit_card || !this.rightsData.benefit_card.cards) return 0;\r\n        let endTime: number = this.rightsData.benefit_card.cards[cardId];\r\n        if (!endTime) return 0;\r\n        return endTime - this.GetServerTime();\r\n    }\r\n    /**获取权益卡是否可领奖*/\r\n    static GetEquityCardIsCanGetAward(cardId: number): boolean {\r\n        if (this.GetEquityCardResidueTime(cardId) < 1) return false;\r\n        if (!this.rightsData.benefit_card_can_claim || !this.rightsData.benefit_card_can_claim[cardId]) return false;\r\n        return true;\r\n    }\r\n    /**通过权益类型获取权益卡列表 */\r\n    static GetEquityByTypeGetCardList(type: StdEquityListType, isActivate: boolean = false): StdEquityCard[] {\r\n        let cardList: StdEquityCard[] = CfgMgr.GetEquityCardList();\r\n        let stdCard:StdEquityCard;\r\n        let stdEquity:StdEquityList;\r\n        let typeCardList:StdEquityCard[] = [];\r\n        for (let index = 0; index < cardList.length; index++) {\r\n            stdCard = cardList[index];\r\n            for (let i = 0; i < stdCard.Equity_list.length; i++) {\r\n                stdEquity = CfgMgr.getEquityListById(stdCard.Equity_list[i]);\r\n                if(!stdEquity) continue;\r\n                if(stdEquity.Equity_Type == type){\r\n                    if(isActivate && this.GetEquityCardResidueTime(stdCard.Equity_CardID) < 1) continue;\r\n                    typeCardList.push(stdCard);\r\n                    \r\n                }\r\n            }\r\n        }\r\n        return typeCardList;\r\n    }\r\n    /**\r\n     * 通过权益类型获取权益总值\r\n     * @param type 权益类型\r\n     * @param isActivate 是否只计算激活的\r\n     * @returns \r\n     */\r\n    static GetEquityByTypeTotalValue(type: StdEquityListType, isActivate: boolean = true): number {\r\n        let cardList: StdEquityCard[] = this.GetEquityByTypeGetCardList(type, isActivate);\r\n        let stdEquity: StdEquityList;\r\n        let stdEquityCard: StdEquityCard;\r\n        let value: number = 0;\r\n        for (let index = 0; index < cardList.length; index++) {\r\n            stdEquityCard = cardList[index];\r\n            //过期未激活不计算\r\n            if (isActivate && this.GetEquityCardResidueTime(stdEquityCard.Equity_CardID) < 1) continue;\r\n            for (let j = 0; j < stdEquityCard.Equity_list.length; j++) {\r\n                stdEquity = CfgMgr.getEquityListById(stdEquityCard.Equity_list[j]);\r\n                if (stdEquity && stdEquity.Equity_Type == type) {\r\n                    value = value.add(stdEquity.Value);\r\n                }\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    /**根据权益卡获取权益值 */\r\n    static GetEquityCardByTypeValue(cardId: number, type: StdEquityListType, isActivate: boolean = true): number {\r\n        let stdEquityCard: StdEquityCard = CfgMgr.getEquityCardById(cardId);\r\n        let stdEquity: StdEquityList;\r\n        let value: number = 0;\r\n        if (stdEquityCard) {\r\n            //过期未激活不计算\r\n            if (isActivate && this.GetEquityCardResidueTime(stdEquityCard.Equity_CardID) > 0) {\r\n                for (let i = 0; i < stdEquityCard.Equity_list.length; i++) {\r\n                    stdEquity = CfgMgr.getEquityListById(stdEquityCard.Equity_list[i]);\r\n                    if (stdEquity && stdEquity.Equity_Type == type) {\r\n                        value = stdEquity.Value;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**根据主基地劳动工人获取所有产出勋章 */\r\n    static GetAllWorkMedal():number{\r\n        let workerRate_medal = 0\r\n        let info = PlayerData.GetBuilding(BuildingType.ji_di);\r\n        if(!info){\r\n            return workerRate_medal;\r\n        } \r\n        for (let index = 0; index < info.workerIdArr.length; index++) {\r\n            let roleData: SPlayerDataRole = info.workerIdArr[index];\r\n            let cfg_medal = CfgMgr.GetProduceMedal(roleData.type, roleData.quality)\r\n            if(!cfg_medal){\r\n                debugger;\r\n            }\r\n            workerRate_medal = workerRate_medal + cfg_medal.produce_medal;\r\n        }\r\n        return workerRate_medal;\r\n    }\r\n    \r\n    /**权益卡入口红点 */\r\n    static CheckEquityRead(): boolean {\r\n        let cardList: StdEquityCardTab[] = CfgMgr.GetEquityCardTabList();\r\n        let stdCardTab: StdEquityCardTab;\r\n        for (let index = 0; index < cardList.length; index++) {\r\n            stdCardTab = cardList[index];\r\n            for (let j = 0; j < stdCardTab.EquityCardIds.length; j++) {\r\n                if (this.CheckEquityMiniTabRead(stdCardTab.EquityCardIds[j])) {\r\n                    return true;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n    static CheckEquityMaxTabRead(tabId: number): boolean {\r\n        let stdTab: StdEquityCardTab = CfgMgr.GetEquityCardTab(tabId);\r\n        for (let j = 0; j < stdTab.EquityCardIds.length; j++) {\r\n            if (this.CheckEquityMiniTabRead(stdTab.EquityCardIds[j])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    static CheckEquityMiniTabRead(cardId: number): boolean {\r\n        if (!PlayerData.GetEquityCardIsCanGetAward(cardId)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    //设置今日不再提示时间\r\n    static SetTodayTips(tipsId:TodayNoTipsId):void{\r\n        let time:number = DateUtils.nextDayHoursTime(this.GetServerTime());\r\n        LocalStorage.SetNumber(`${this.roleInfo.player_id}_TodayNoTips_${tipsId}`, time);\r\n    }\r\n    //是否显示今日不再提示\r\n    static GetIsShowTodayTips(tipsId:TodayNoTipsId):boolean{\r\n        let oleTime:number = LocalStorage.GetNumber(`${this.roleInfo.player_id}_TodayNoTips_${tipsId}`) || 0;\r\n        if(oleTime > 0){\r\n            return this.GetServerTime() > oleTime;\r\n        }\r\n        return true;\r\n    }\r\n    /**炸鱼数据 */\r\n    static fishBombData: SFishingBombStateData;\r\n    /**获取炸鱼当前最新回合数 */\r\n    static get CurFishBombSatgeInfo(): SFishingBombStageInfo {\r\n        if (this.fishBombData && this.fishBombData.round_info) {\r\n            return this.fishBombData.round_info.stages[this.fishBombData.round_info.stage_index];\r\n        }\r\n        return null;\r\n    }\r\n    //获取炸鱼当前回合状态\r\n    static GetFishBombRoundState():FishBombRoundState{\r\n        if(!this.fishBombData || !this.fishBombData.session_info) return FishBombRoundState.NoOpen;//活动未开启\r\n        if(!this.fishBombData.session_info.is_open || this.GetServerTime() >= this.fishBombData.session_info.end_time) return FishBombRoundState.NoOpen;//活动未开启\r\n        if (!this.CurFishBombSatgeInfo) return FishBombRoundState.NoRound;//没有回合进行中\r\n        //已结算\r\n        /* if(this.fishBombData.round_info.stage_index == this.fishBombData.round_info.stage_type){\r\n            if (this.fishBombData.settlement) {\r\n                return FishBombRoundState.RoundSettle;//大回合结算\r\n            }else if(this.GetServerTime() >= this.CurFishBombSatgeInfo.ignite_time + 3){\r\n                return FishBombRoundState.StageSettle;//小回合结算\r\n            }\r\n        }else{\r\n            if (this.GetServerTime() >= this.CurFishBombSatgeInfo.settlement_time) {\r\n                return FishBombRoundState.StageSettle;//小回合结算\r\n            }\r\n        } */\r\n        if (this.fishBombData.settlement) {\r\n            return FishBombRoundState.RoundSettle;//大回合结算\r\n        }else if(this.GetServerTime() >= this.CurFishBombSatgeInfo.ignite_time + 1){\r\n            return FishBombRoundState.StageSettle;//小回合结算\r\n        }\r\n        if(this.GetServerTime() >= this.CurFishBombSatgeInfo.ignite_time){\r\n            return FishBombRoundState.BombBlasts;//炸弹爆炸\r\n        }\r\n        \r\n        return FishBombRoundState.CanCastBomb;\r\n    }\r\n    //获取自己炸鱼当前回合总投入\r\n    static GetFishBombSelfCurRoundCost():number{\r\n        let val:number = 0;\r\n        if(this.fishBombData && this.fishBombData.player){\r\n            for (let key in this.fishBombData.player.round_cost) {\r\n                let cost:number = this.fishBombData.player.round_cost[key];\r\n                val = val.add(cost);\r\n            }\r\n        }\r\n        return val;\r\n    }\r\n    \r\n    //获取炸鱼当前选择池塘id\r\n    static GetFishBombCurPondId():number{\r\n        let pondId:number = 0;\r\n        if(this.fishBombData && this.fishBombData.player && this.fishBombData.round_info){\r\n            if(this.fishBombData.round_info.stage_index > 0){\r\n                pondId = this.fishBombData.player.fish_pool_id[this.fishBombData.round_info.stage_index];\r\n            }\r\n        }\r\n        return pondId;\r\n    }\r\n    \r\n    /**获取炸鱼是否参与炸鱼了 */\r\n    static GetFishBombJoin():boolean{\r\n        if(!this.CurFishRoundInfo) return false;\r\n        //第一个回合未投入视为未参加\r\n        let selectId = this.fishBombData.player.fish_pool_id[1];\r\n        let costNum = this.fishBombData.player.round_cost[1];\r\n        if(selectId > 0 && costNum > 0){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**获取当前炸鱼炸弹类型*/\r\n    static FishBombType(cost:number): number {\r\n        let stdRodList:StdFishRod[] = CfgMgr.GetFishRodTypeList(2);\r\n        let std:StdFishRod;\r\n        for (let index = stdRodList.length - 1; index > -1; index--) {\r\n            std = stdRodList[index];\r\n            if(cost >= std.MinValue && cost <= std.MaxValue){\r\n                return std.TypeId;\r\n            }\r\n        }\r\n        return 1;\r\n    }\r\n    /**获取炸鱼死的回合数 */\r\n    static GetFishBombDieRoundNum():number{\r\n        let dieRound:number = 0;\r\n        let pondId:number;\r\n        if(this.fishBombData.round_info && this.fishBombData.player && this.fishBombData.player.fish_pool_id){\r\n            for (let key in this.fishBombData.player.fish_pool_id) {\r\n                pondId = this.fishBombData.player.fish_pool_id[key];\r\n                if(pondId > 0){\r\n                    let stageInfo:SFishingBombStageInfo = this.fishBombData.round_info.stages[key];\r\n                    if(stageInfo && stageInfo.fish_pool[pondId].is_kill){\r\n                        dieRound = Number(key);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dieRound;\r\n    }\r\n    /**\r\n     * 获取是否热门池塘\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetHotPond(id: number): boolean {\r\n        let costNum: number = 0;\r\n        let maxId: number = 0;\r\n        if (this.CurFishBombSatgeInfo && this.CurFishBombSatgeInfo.fish_pool) {\r\n            let pondData:SFishingBombFishPoolData;\r\n            for (let key in this.CurFishBombSatgeInfo.fish_pool) {\r\n                pondData = this.CurFishBombSatgeInfo.fish_pool[key];\r\n                if (costNum == 0) {\r\n                    if (pondData.cost > 0) {\r\n                        costNum = pondData.cost;\r\n                        maxId = pondData.fish_pool_id;\r\n                    }\r\n                } else {\r\n                    if (pondData.cost > costNum) {\r\n                        costNum = pondData.cost;\r\n                        maxId = pondData.fish_pool_id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return maxId == id;\r\n    }\r\n    //世界boss数据\r\n    static worldBossData:SWorldBossData = null;\r\n    static worldBossRankData:SWorldBossRankData = null;\r\n    static SetWorldBossDataData(data:SWorldBossStateData):void{\r\n        if(data == null || !data.base || data.base.boss_type < 1){\r\n            this.worldBossData = null;\r\n            return;\r\n        }\r\n        let bossIndex:number = CfgMgr.GetWorldBossComm.BossType.indexOf(data.base.boss_type);\r\n        if(bossIndex > -1){\r\n            let endNum:number = data.base.boss_type % 2000 * 1000;\r\n            let stdLvId:number = 2000000 + endNum + data.base.boss_lv;\r\n            let stdRoleType:StdRole = CfgMgr.GetRole()[data.base.boss_type];\r\n            let skillList:number[] = [];\r\n            let attrList:number[] = [];\r\n            let attrValueList:number[] = [];\r\n            let maxHp:number = 0;\r\n            if(stdRoleType){\r\n                for (let id = 1; ; id++) {\r\n                    let skillId = stdRoleType[\"Skill\" + id];\r\n                    if (skillId == undefined) break;\r\n                    skillList.push(skillId);\r\n                }\r\n                \r\n                let stdAttrTypeList:number[] = stdRoleType.AttrFight.concat();\r\n                let stdAttrValueList:number[] = stdRoleType.AttrFightValue.concat();\r\n                let bossLvList:StdWorldBossLv[] = CfgMgr.GetWorldBossLvList();\r\n                let bossLvInfo:StdWorldBossLv;\r\n                let curBossLv:StdWorldBossLv;\r\n                for (let index = 0; index < bossLvList.length; index++) {\r\n                    bossLvInfo = bossLvList[index];\r\n                    if(stdLvId == bossLvInfo.ID){\r\n                        curBossLv = bossLvInfo;\r\n                        break;\r\n                    }\r\n                }\r\n                let attrType:number;\r\n                let attrVal:number;\r\n                let attrTypeName:string;\r\n                let newAttrValue:number;\r\n                \r\n                for (let attrIndex = 0; attrIndex < stdAttrTypeList.length; attrIndex++) {\r\n                    attrType = stdAttrTypeList[attrIndex];\r\n                    attrVal = stdAttrValueList[attrIndex];\r\n                    newAttrValue = attrVal;\r\n                    if(curBossLv){\r\n                        attrTypeName = AttrFight[attrType];\r\n                        if(attrTypeName){\r\n                            newAttrValue = newAttrValue.add(curBossLv[attrTypeName]);\r\n                        }\r\n                    }\r\n                    if(AttrFight.HPMax == attrType){\r\n                        maxHp = maxHp.add(newAttrValue);\r\n                    }\r\n                    attrList.push(attrType);\r\n                    attrValueList.push(newAttrValue);\r\n                }\r\n            }\r\n            \r\n            this.worldBossData = {\r\n                terminator:data.base.terminator,\r\n                settle:data.base.settle,\r\n                start:data.base.start,\r\n                end:data.base.end,\r\n                boss_type:data.base.boss_type,\r\n                boss_lv:data.base.boss_lv,\r\n                HP:data.base.HP,\r\n                max_Hp:data.base.max_HP,\r\n                reward_status:data.reward_status,\r\n                roundId:data.base.r,\r\n                name:stdRoleType.Name,\r\n                icon:stdRoleType.Icon,\r\n                model:stdRoleType.Prefab,\r\n                \r\n                skillList:skillList,\r\n                attrTypeList:attrList,\r\n                attrValueList:attrValueList,\r\n                desc:stdRoleType.Synopsis,\r\n            }\r\n        }\r\n    }\r\n    static SetWorldBossRankData(data:SWorldBossRankData):void{\r\n        if(!data){\r\n            this.worldBossRankData = null;\r\n            return;\r\n        } \r\n        let tempRankList:SWorldBossRankItemData[] = this.worldBossRankData ? this.worldBossRankData.rank_data_list.concat() : [];\r\n        let newRankList:SWorldBossRankItemData[] = data.rank_data_list ? data.rank_data_list : [];\r\n        let rankData:SWorldBossRankItemData;\r\n        let changeIdList:string[] = [];\r\n        for (let index = 0; index < newRankList.length; index++) {\r\n            rankData = newRankList[index];\r\n            changeIdList[index] = rankData.id;\r\n            tempRankList[index] = rankData;\r\n        }\r\n        let endLen:number = changeIdList.length;\r\n        let changeId:string;\r\n        //根据改变的id去重\r\n        for (let j = 0; j < endLen; j++) {\r\n            changeId = changeIdList[j];\r\n            for (let i = endLen; i < tempRankList.length; i++) {\r\n                rankData = tempRankList[i];\r\n                if(rankData.id == changeId){\r\n                    tempRankList.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        data.rank_data_list = tempRankList;\r\n        this.worldBossRankData = data;\r\n    }\r\n    /**获取世界boss是否可挑战 */\r\n    static GetWorldIsCanChallenge():boolean{\r\n        if(!this.worldBossData) return false;\r\n        if(this.worldBossData.terminator != \"\") return false;\r\n        if(this.GetServerTime() >= this.worldBossData.end) return false;\r\n        if(this.worldBossData.HP < 1) return false;\r\n        return true;\r\n    }\r\n    private static worldBossOpenTimeList:{startHour:number, startMinute:number, endHour:number,endMinute:number}[];\r\n    /**检测世界boss是否临近开启 */\r\n    static CheckWorldBossNearOpneTime():boolean{\r\n        if(!this.worldBossOpenTimeList) {\r\n            this.InitWorldBossOpenTime();\r\n        }\r\n        let isNear:boolean = false;\r\n        let serverTime: number = this.GetServerTime();\r\n        for (let index = 0; index < this.worldBossOpenTimeList.length; index++) {\r\n            let timeData: { startHour: number, startMinute: number, endHour: number, endMinute: number } = this.worldBossOpenTimeList[index];\r\n            let time: number = DateUtils.weeHoursTime(serverTime) + (timeData.startHour * 60 + timeData.startMinute) * 60;\r\n            let startS:number = time - 6000;//世界boss开始前十分钟\r\n            let endS:number = time + 1000;//世界boss开始后1分钟\r\n            if (serverTime >= startS && serverTime <= endS) {\r\n                isNear = true;\r\n                break;\r\n            }\r\n        }\r\n        return isNear;\r\n    }\r\n    static GetWorldOpenTimeList():{startHour:number, startMinute:number, endHour:number,endMinute:number}[]{\r\n        if(!this.worldBossOpenTimeList) {\r\n            this.InitWorldBossOpenTime();\r\n        }\r\n        return this.worldBossOpenTimeList;\r\n    }\r\n    private static InitWorldBossOpenTime():void{\r\n        this.worldBossOpenTimeList = [];\r\n        let std: StdWorldBossComm = CfgMgr.GetWorldBossComm;\r\n        for (let index = 0; index < std.Opentime.length; index++) {\r\n            let openTiem: string = std.Opentime[index];\r\n            let timearr = openTiem.replace(\" \", \":\").replace(/\\:/g, \"-\").split(\"-\");\r\n            this.worldBossOpenTimeList[index] = {\r\n                startHour: Number(timearr[0]),\r\n                startMinute: Number(timearr[1]),\r\n                endHour: Number(timearr[2]),\r\n                endMinute: Number(timearr[3]),\r\n            };\r\n        }\r\n    }\r\n}\r\nexport default PlayerData;\r\n\r\n/**\r\n * 计算战力\r\n * @param roleType \r\n * @param level \r\n * @returns \r\n */\r\nexport function CountPower(roleType: number, level: number, role?: SPlayerDataRole) {\r\n    // console.log(\"CountPower*******************************\", roleType, level);\r\n    if (role && role.battle_power) return role.battle_power\r\n    let power = 0;\r\n    let std = CfgMgr.GetRole()[roleType];\r\n    for (let type of std.Attr) {\r\n        power = power + CfgMgr.GetAttr()[type].Power * DL.GetAttrValue(type, std);\r\n    }\r\n    for (let type of std.AttrFight) {\r\n        power = power + CfgMgr.GetFightAttr()[type].Power * DL.GetFightAttrValue(type, std);\r\n    }\r\n    let stdlv = CfgMgr.GetRoleLevel(roleType, level);\r\n    if (stdlv) {\r\n        for (let type of stdlv.Attr) {\r\n            power = power + CfgMgr.GetAttr()[type].Power * DL.GetAttrValue(type, stdlv);\r\n        }\r\n        for (let type of stdlv.AttrFight) {\r\n            power = power + CfgMgr.GetFightAttr()[type].Power * DL.GetFightAttrValue(type, stdlv);\r\n        }\r\n    }\r\n    return Math.floor(power);\r\n}\r\n/**\r\n * 角色计算战力（纯卡计算/计算角色本身）\r\n * @param roleType 角色类型 \r\n * @param roleQual 角色品质\r\n * @param roleLv 角色等级\r\n * @param role 角色数据\r\n * @returns \r\n */\r\nexport function RoleCardPower(roleType: number, roleQual: number = 1, roleLv: number = 1, role: SPlayerDataRole = null) {\r\n    let val: number = 0;\r\n    let countPower = (attrList: number[], valList: number[], attrGroup: { [key: string]: StdAttr }) => {\r\n        let count: number = 0;\r\n        let attrType: number;\r\n        let attrVal: number;\r\n        for (let i = 0; i < attrList.length; i++) {\r\n            attrType = attrList[i];\r\n            attrVal = valList && i < valList.length ? valList[i] : 0;\r\n            count += attrGroup[attrType].Power * attrVal;\r\n        }\r\n        return count;\r\n    }\r\n    let attrGroup: { [key: string]: StdAttr } = CfgMgr.GetAttr();\r\n    let fightAttrGroup: { [key: string]: StdAttr } = CfgMgr.GetFightAttr();\r\n    //角色等级属性\r\n    let stdlv = CfgMgr.GetRoleLevel(roleType, roleLv);\r\n    if (stdlv) {\r\n        if (stdlv.Attr && stdlv.Attr.length) {\r\n            val += countPower(stdlv.Attr, stdlv.AttrValue, attrGroup);\r\n        }\r\n        if (stdlv.AttrFight && stdlv.AttrFight.length) {\r\n            val += countPower(stdlv.AttrFight, stdlv.AttrFightValue, fightAttrGroup);\r\n        }\r\n    }\r\n    //计算主动技能\r\n    let countMainSkill = (skillId: number, skillLv: number) => {\r\n        //主动技能属性计算\r\n        let stdMainSkill = CfgMgr.GetActiveSkill(skillId, skillLv);\r\n        if (stdMainSkill) {\r\n            if (stdMainSkill.Attr && stdMainSkill.Attr.length) {\r\n                val += countPower(stdMainSkill.Attr, stdMainSkill.AttrValue, attrGroup);\r\n            }\r\n            if (stdMainSkill.AttrFight && stdMainSkill.AttrFight.length) {\r\n                val += countPower(stdMainSkill.AttrFight, stdMainSkill.AttrFightValue, fightAttrGroup);\r\n            }\r\n\r\n        }\r\n    }\r\n    //计算被动技能\r\n    let countPassiveSkill = (skillId: number, skillLv: number) => {\r\n        let passiveSkill = CfgMgr.GetPassiveSkill(skillId, skillLv);\r\n        if (passiveSkill) {\r\n            if (passiveSkill.Attr && passiveSkill.Attr.length) {\r\n                val += countPower(passiveSkill.Attr, passiveSkill.AttrValue, attrGroup);\r\n            }\r\n            if (passiveSkill.AttrFight && passiveSkill.AttrFight.length) {\r\n                val += countPower(passiveSkill.AttrFight, passiveSkill.AttrFightValue, fightAttrGroup);\r\n            }\r\n        }\r\n    }\r\n    //角色类型属性\r\n    let stdRole = CfgMgr.GetRole()[roleType];\r\n    if (stdRole) {\r\n        if (stdRole.Attr && stdRole.Attr.length) {\r\n            val += countPower(stdRole.Attr, stdRole.AttrValue, attrGroup);\r\n        }\r\n        if (stdRole.AttrFight && stdRole.AttrFight.length) {\r\n            val += countPower(stdRole.AttrFight, stdRole.AttrFightValue, fightAttrGroup);\r\n        }\r\n\r\n        if (role) {\r\n            let skillLvIndex: number;\r\n            let skillData: SPlayerDataSkill;\r\n            for (skillLvIndex = 0; skillLvIndex < role.active_skills.length; skillLvIndex++) {\r\n                skillData = role.active_skills[skillLvIndex];\r\n                countMainSkill(skillData.skill_id, skillData.level);\r\n            }\r\n            for (skillLvIndex = 0; skillLvIndex < role.passive_skills.length; skillLvIndex++) {\r\n                skillData = role.passive_skills[skillLvIndex];\r\n                countPassiveSkill(skillData.skill_id, skillData.level);\r\n            }\r\n        } else {\r\n            let skillId: number;\r\n            for (let n = 1; ; n++) {\r\n                skillId = stdRole[\"Skill\" + n];\r\n                if (skillId == undefined) break;\r\n                countMainSkill(skillId, 1);\r\n            }\r\n            let passiveSkillIds: number[] = [];\r\n            //被动技能初始天赋1\r\n            if (stdRole.PassiveGife) {\r\n                passiveSkillIds.push(stdRole.PassiveGife);\r\n            }\r\n            //被动技能职业天赋1\r\n            if (stdRole.PassiveJob) {\r\n                passiveSkillIds.push(stdRole.PassiveJob);\r\n            }\r\n            for (let passiveSkillId of passiveSkillIds) {\r\n                countPassiveSkill(passiveSkillId, 1);\r\n            }\r\n        }\r\n    }\r\n    //角色品质属性\r\n    let stdQuality = CfgMgr.GetRoleQuality(roleType, roleQual);\r\n    if (stdQuality) {\r\n        if (stdQuality.Attr && stdQuality.Attr.length) {\r\n            val += countPower(stdQuality.Attr, stdQuality.AttrValue, attrGroup);\r\n        }\r\n        if (stdQuality.AttrFight && stdQuality.AttrFight.length) {\r\n            val += countPower(stdQuality.AttrFight, stdQuality.AttrFightValue, fightAttrGroup);\r\n        }\r\n    }\r\n\r\n    return Math.floor(val);\r\n}\r\n/**\r\n * 计算战力\r\n * @param BuildingId \r\n * @param level \r\n * @returns \r\n */\r\nexport function CountBuildPower(BuildingId: number, level: number) {\r\n    let power = 0;\r\n    let std = CfgMgr.GetBuildingLv(BuildingId, level);\r\n    for (let type of std.Attr) {\r\n        power = power + CfgMgr.GetAttr()[type].Power * DL.GetAttrValue(type, std);\r\n    }\r\n    for (let type of std.AttrFight) {\r\n        power = power + CfgMgr.GetFightAttr()[type].Power * DL.GetFightAttrValue(type, std);\r\n    }\r\n    return power;\r\n}\r\n\r\n/**兵种生产推送 */\r\ntype PushStruct = {\r\n    building_id: number;\r\n    soldier_id: number;\r\n    count: number;       //当前批次正在生产的数量\r\n    total_count: number; //当前兵种总库存量\r\n    start_time: number;\r\n}\r\n"]}