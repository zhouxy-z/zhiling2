{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/shop/ShopPanel.ts"],"names":["ShopPanel","Label","Toggle","instantiate","CfgMgr","Panel","ShopDefinePage","ShopLuckyPage","Req","Route","Session","PlayerData","EventMgr","Evt_ShopLuckyGet","Evt_ShopUpdate","prefab","pageDefine","node","classz","pageMap","Map","currentToggle","onLoad","CloseBy","groups","GetShopsByPanel","nav","find","origin","children","index","pagedefines","shops","std","ids","forEach","value","push","ID","btn","addChild","on","onNav","toggle","getComponent","resetTabName","ShopName","path","ShopType","ui","active","has","cloner","parent","setSiblingIndex","getSiblingIndex","set","page","addComponent","updateData","name","getChildByPath","string","onShow","e","shop_index","shopIndexId","sendAsync","undefined","GetShopIndexs","pageObj","Hide","data","content","indexOf","stdIndex","GetShopIndexById","isChecked","target","get","Show","onHide","args","flush"],"mappings":"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","sourcesContent":["import { Component, Label, Node, Toggle, instantiate } from \"cc\";\r\nimport { CfgMgr, StdShopIndex } from \"../../manager/CfgMgr\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { ShopDefinePage } from \"./ShopDefinePage\";\r\nimport { ShopLuckyPage } from \"./ShopLuckyPage\";\r\nimport { Req, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { IPanelPage } from \"../common/IPanelPage\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { EventMgr, Evt_ShopLuckyGet, Evt_ShopUpdate } from \"../../manager/EventMgr\";\r\n\r\nexport class ShopPanel extends Panel {\r\n    protected prefab: string = \"prefabs/shop/ShopPanel\";\r\n    protected pageDefine: { [tabSort: number]: { node: string, classz: any } } = {\r\n        [1]: { node: \"shopDayPage\", classz: ShopDefinePage },\r\n        [2]: { node: \"shopDayPage\", classz: ShopDefinePage },\r\n        [3]: { node: \"shopLuckyPage\", classz: ShopLuckyPage }\r\n    }\r\n    protected pageMap: Map<Node, { ids: number[], page: IPanelPage }> = new Map();\r\n\r\n    protected onLoad() {\r\n        this.CloseBy(\"backBtn\");\r\n\r\n        // 初始化商城页签\r\n        let groups: StdShopIndex[][] = CfgMgr.GetShopsByPanel(\"ShopPanel\");\r\n        let nav = this.find(\"nav\");\r\n        let origin = instantiate(nav.children[0]);\r\n        let index = 0, pagedefines: Map<Node, { ids: number[], btn: Node, classz: any }> = new Map();\r\n        for (let shops of groups) {\r\n            let std = shops[0];// 默认拿第一个当做标签名\r\n            let ids = [];\r\n            shops.forEach(value => { ids.push(value.ID) });\r\n            let btn = nav.children[index];\r\n            if (!btn) {\r\n                btn = instantiate(origin);\r\n                nav.addChild(btn);\r\n            }\r\n            btn.on('toggle', this.onNav, this);\r\n            let toggle = btn.getComponent(Toggle);\r\n            toggle['shopIndexType'] = ++index;\r\n            this.resetTabName(btn, std.ShopName);\r\n\r\n            let path = this.pageDefine[std.ShopType].node;\r\n            let classz = this.pageDefine[std.ShopType].classz;\r\n            let ui = this.find(path);\r\n            ui.active = true;\r\n            if (pagedefines.has(ui)) {\r\n                let cloner = instantiate(ui);\r\n                ui.parent.addChild(cloner);\r\n                cloner.setSiblingIndex(ui.getSiblingIndex() + 1);\r\n                pagedefines.set(cloner, { ids: ids, btn: btn, classz: classz });\r\n            } else {\r\n                pagedefines.set(ui, { ids: ids, btn: btn, classz: classz });\r\n            }\r\n        }\r\n        pagedefines.forEach((value, node) => {\r\n            let page: IPanelPage = node.addComponent(value.classz);\r\n            this.pageMap.set(value.btn, { ids: value.ids, page: page });\r\n        })\r\n\r\n        EventMgr.on(Evt_ShopUpdate, this.updateData, this);\r\n        EventMgr.on(Evt_ShopLuckyGet, this.updateData, this);\r\n    }\r\n    private resetTabName(btn: Node, name: string) {\r\n        btn.getChildByPath(\"layout/label\").getComponent(Label).string = name;\r\n        btn.getChildByPath(\"select/layout/label\").getComponent(Label).string = name;\r\n    }\r\n    protected async onShow(e?: any) {\r\n        let shop_index = new Req[\"shop.protocol.getindex\"]();\r\n        shop_index.shopIndexId = null\r\n        await Session.sendAsync(Route[\"shop.protocol.getindex\"], shop_index);\r\n        this.currentToggle = undefined;\r\n        this.updateData();\r\n    }\r\n    protected updateData() {\r\n        // 以服务器下发的商城来初始化哪些标签开启\r\n        let shops = PlayerData.GetShopIndexs();\r\n        this.pageMap.forEach((pageObj, btn) => {\r\n            pageObj.page.Hide();\r\n            let data = shops.find(content => pageObj.ids.indexOf(content.shopIndexId) != -1);\r\n            if (data) {\r\n                btn.active = true;\r\n                let stdIndex = CfgMgr.GetShopIndexById(data.shopIndexId);\r\n                if (stdIndex) this.resetTabName(btn, stdIndex.ShopName);\r\n            } else {\r\n                btn.active = false;\r\n            }\r\n        });\r\n        this.onNav(this.currentToggle)\r\n    }\r\n    protected currentToggle: Toggle;\r\n    protected onNav(toggle?: Toggle) {\r\n        if (!toggle) toggle = this.find(\"nav\").children[0].getComponent(Toggle);\r\n        this.currentToggle = toggle;\r\n        if (toggle.isChecked) {\r\n            let target = this.pageMap.get(toggle.node);\r\n            this.pageMap.forEach(value => {\r\n                if (value == target) {\r\n                    value.page.Show(value.ids);\r\n                } else {\r\n                    value.page.Hide();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n\r\n    }\r\n\r\n    async flush() {\r\n\r\n    }\r\n}\r\n"]}