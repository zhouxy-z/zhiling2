{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/vs/VSStarElementPage.ts"],"names":["VSStarElementPage","Button","Component","instantiate","CardGroupCoverItem","proto","EventMgr","Evt_Set_Battle_Card_Group_Update","PlayerData","Goto","MsgPanel","CfgMgr","HaveItem","CostItem","DateUtils","helpBtn","battleLogBtn","shopBtn","costItem","vsBtn","cardGroupBtn","cardGroupCoverItem","haveItemCont","tempHaveItem","cardGroupData","onLoad","node","getChildByPath","getComponent","addComponent","children","shift","on","EventType","CLICK","onBtnClick","onEnable","onSetCardGroup","onDisable","off","Show","active","initHaveItem","updateCardGroup","Hide","btn","size","CardGuroupComm","DeckFullSize","SatrElementData","currentSeasonId","ServerTime","GetCurSatrElementEndTime","base","BattleMode","BattleModeStar","CurFightCardGroup","SetData","itemIds","itemMap","maxLen","Math","max","length","haveItem","index","parent"],"mappings":"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","sourcesContent":["import { Node, Button, Component, instantiate } from \"cc\";\r\nimport { CardGroupCoverItem } from \"../common/CardGroupCoverItem\";\r\nimport proto from \"../../net/Protocol\";\r\nimport { EventMgr, Evt_Set_Battle_Card_Group_Update } from \"../../manager/EventMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Goto } from \"../../DL\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { HaveItem } from \"../common/HaveItem\";\r\nimport { CostItem } from \"../common/CostItem\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\n\r\nexport class VSStarElementPage extends Component {\r\n    private helpBtn: Button;\r\n    private battleLogBtn: Button;\r\n    private shopBtn: Button;\r\n    private costItem: CostItem;\r\n    private vsBtn: Button;\r\n    private cardGroupBtn: Button;\r\n    private cardGroupCoverItem: CardGroupCoverItem;\r\n    private haveItemCont: Node;\r\n    private tempHaveItem: Node;\r\n    private cardGroupData: proto.base.IDeckAttrs;\r\n    protected onLoad() {\r\n        this.helpBtn = this.node.getChildByPath(\"btnCont/helpBtn\").getComponent(Button);\r\n        this.battleLogBtn = this.node.getChildByPath(\"btnCont/battleLogBtn\").getComponent(Button);\r\n        this.shopBtn = this.node.getChildByPath(\"btnCont/shopBtn\").getComponent(Button);\r\n        this.costItem = this.node.getChildByPath(\"costCont/CostItem\").addComponent(CostItem);\r\n        this.vsBtn = this.node.getChildByPath(\"vsBtn\").getComponent(Button);\r\n        this.cardGroupBtn = this.node.getChildByPath(\"cardGroupBtn\").getComponent(Button);\r\n        this.cardGroupCoverItem = this.node.getChildByPath(\"cardGroupBtn/CardGroupCoverItem\").addComponent(CardGroupCoverItem);\r\n        this.haveItemCont = this.node.getChildByPath(\"haveItemCont\");\r\n        this.tempHaveItem = this.haveItemCont.children.shift();\r\n\r\n        this.battleLogBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.shopBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.cardGroupBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.vsBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.helpBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        EventMgr.on(Evt_Set_Battle_Card_Group_Update, this.onSetCardGroup, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        EventMgr.off(Evt_Set_Battle_Card_Group_Update, this.onSetCardGroup, this);\r\n    }\r\n\r\n    public Show(): void {\r\n        this.node.active = true;\r\n        this.initHaveItem();\r\n        this.updateCardGroup();\r\n    }\r\n\r\n    public Hide(): void {\r\n        this.node.active = false;\r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.battleLogBtn:\r\n                Goto(\"VSStarElementFightLogPanel\");\r\n                break;\r\n            case this.shopBtn:\r\n                \r\n                break;\r\n            case this.cardGroupBtn:\r\n                Goto(\"VSCardGroupPanel\");\r\n                break;\r\n            case this.vsBtn:\r\n                if (!this.cardGroupData) {\r\n                    MsgPanel.Show(\"未设置战斗卡组不可对战\")\r\n                    return;\r\n                }\r\n                if (this.cardGroupData.size < CfgMgr.CardGuroupComm.DeckFullSize) {\r\n                    MsgPanel.Show(`卡组卡牌数量不足${CfgMgr.CardGuroupComm.DeckFullSize}张`);\r\n                    return;\r\n                }\r\n                if (!PlayerData.SatrElementData || PlayerData.SatrElementData.currentSeasonId == 0) {\r\n                    MsgPanel.Show(\"暂时没有星元对战进行中\");\r\n                    return;\r\n                }\r\n                if (DateUtils.ServerTime > PlayerData.GetCurSatrElementEndTime()) {\r\n                    MsgPanel.Show(\"星元对战已结束\");\r\n                    return;\r\n                }\r\n                \r\n                Goto(\"VSPanel\", proto.base.BattleMode.BattleModeStar);\r\n                break;\r\n            case this.helpBtn:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onSetCardGroup(): void {\r\n        this.updateCardGroup();\r\n    }\r\n    \r\n    private updateCardGroup(): void {\r\n        this.cardGroupData = PlayerData.CurFightCardGroup;\r\n        this.cardGroupCoverItem.SetData(this.cardGroupData, false);\r\n    }\r\n\r\n    private initHaveItem(): void {\r\n        let itemIds: number[] = [];\r\n        let itemMap: {[key: number]: number} = {};\r\n        /* if (this.upgradeList) {\r\n            for (let std of this.upgradeList) {\r\n                if (std.CostItemIds) {\r\n                    for (let id of std.CostItemIds) {\r\n                        if (!itemMap[id]) {\r\n                            itemIds.push(id);\r\n                            itemMap[id] = id;\r\n                        }\r\n                    } \r\n                }\r\n                \r\n            }\r\n        } */\r\n        let maxLen: number = Math.max(this.haveItemCont.children.length, itemIds.length);\r\n        let node: Node;\r\n        let haveItem: HaveItem;\r\n        for (let index = 0; index < maxLen; index++) {\r\n            node = this.haveItemCont.children[index];\r\n            if (!node) {\r\n                node = instantiate(this.tempHaveItem);\r\n                node.parent = this.haveItemCont;\r\n            }\r\n            if (index < itemIds.length){\r\n                node.active = true;\r\n                haveItem = node.getComponent(HaveItem) || node.addComponent(HaveItem);\r\n                haveItem.SetData(itemIds[index]);\r\n            } else {\r\n                node.active = false;\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n}"]}