{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/bag/BagItem1.ts"],"names":["BagItem1","Component","Input","Label","Sprite","SpriteFrame","Toggle","path","CardQuality","CfgMgr","ItemType","ThingTypeName","ResMgr","folder_icon","folder_item","Utils","ItemTips","bg","maskBg","icon","mask","num","quality","newIcon","itemName","select","redPoint","data","showSelect","isShowTips","showRedPoint","isShowRoleLock","time_lock","complete","hasLoad","$loadSub","UpdateBagItem","item","bagItem","getComponent","addComponent","SetData","onLoad","node","getChildByName","active","on","EventType","TOUCH_END","onClick","loadSub","thisObj","Promise","resolve","reject","setItem","type","Item","std","Getitem","id","enabled","name","Items","spriteFrame","LoadResAbSub","join","Icon","Itemtpye","shard","ItemEffect2","Quality","money","string","ToFixed","count","isHaveRedPoint","ItemName","BattleCard","GetCard","card","cardId","CardName","setIsShowNum","isshow","setIsShowSelect","setIsShowTips","setIsShowRedPoint","val","setIsRoleLockShow","e","Show"],"mappings":"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","sourcesContent":["import { Component, EventTouch, Input, Label, Node, Sprite, SpriteFrame, Toggle, Vec3, input, path } from \"cc\";\r\nimport { CardQuality, CfgMgr, ItemType, StdCard, StdItem, ThingTypeName } from \"../../manager/CfgMgr\";\r\nimport { ResMgr, folder_icon, folder_item } from \"../../manager/ResMgr\";\r\nimport {SThing } from \"../player/PlayerStruct\";\r\nimport { Utils } from \"../../utils/Utils\";\r\nimport { ItemTips } from \"../common/ItemTips\";\r\n\r\nexport class BagItem1 extends Component {\r\n\r\n    /**\r\n     * 更新背包道具item\r\n     * @param item \r\n     * @param data \r\n     */\r\n    static UpdateBagItem(item: Node, data: SThing) {\r\n        let bagItem = item.getComponent(BagItem1);\r\n        if (!bagItem) bagItem = item.addComponent(BagItem1);\r\n        bagItem.SetData(data);\r\n    }\r\n\r\n    private bg: Sprite;\r\n    private maskBg: Sprite;\r\n    private icon: Sprite;\r\n    private mask: Sprite;\r\n    private num: Label;\r\n    private quality: Sprite\r\n    private newIcon: Node;\r\n    private itemName: Label;\r\n    private select: Node;\r\n    private redPoint: Node;\r\n    private data: SThing;\r\n\r\n    private showSelect: boolean = true;\r\n    private isShowTips: boolean = false;\r\n    private showRedPoint: boolean = false;\r\n    private isShowRoleLock: boolean = false;\r\n    private time_lock: number;\r\n    protected onLoad(): void {\r\n        this.bg = this.node.getChildByName(\"bg\").getComponent(Sprite);\r\n        this.maskBg = this.node.getChildByName(\"maskbg\").getComponent(Sprite);\r\n        this.icon = this.node.getChildByName(\"icon\").getComponent(Sprite);\r\n        this.mask = this.node.getChildByName(\"mask\").getComponent(Sprite);\r\n        this.num = this.node.getChildByName(\"num\").getComponent(Label);\r\n        this.quality = this.node.getChildByName(\"quality\").getComponent(Sprite);\r\n        this.newIcon = this.node.getChildByName(\"isNew\");\r\n        this.itemName = this.node.getChildByName(\"name\").getComponent(Label);\r\n        this.redPoint = this.node.getChildByName(\"redPoint\");\r\n        this.redPoint.active = false;\r\n        this.select = this.node.getChildByName(\"select\");\r\n        this.node.on(Input.EventType.TOUCH_END, this.onClick, this);\r\n        this.hasLoad = true;\r\n        this.complete?.();\r\n    }\r\n\r\n    protected complete: Function;\r\n    protected hasLoad = false;\r\n    protected $loadSub: Promise<any>;\r\n    protected get loadSub() {\r\n        if (this.$loadSub) return this.$loadSub;\r\n        let thisObj = this;\r\n        this.$loadSub = new Promise((resolve, reject) => {\r\n            thisObj.complete = resolve;\r\n        });\r\n        return this.$loadSub;\r\n    }\r\n\r\n    /**\r\n     * 刷新道具数据\r\n     * @param data \r\n     */\r\n    async SetData(data: SThing) {\r\n        if (!this.hasLoad) await this.loadSub;\r\n        this.data = data;\r\n        this.setItem(data);\r\n        \r\n    }\r\n    protected async setItem(data: SThing) {\r\n        if(data.type == ThingTypeName.Item){\r\n            let std: StdItem = CfgMgr.Getitem(data.item.id);\r\n            this.newIcon.active = false;\r\n            // data.isNew = false;\r\n            this.node.getComponent(Toggle).enabled = this.showSelect;\r\n            this.node.name = std.Items + \"\";\r\n    \r\n            this.icon.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_item, std.Icon, \"spriteFrame\"), SpriteFrame);\r\n            if (std.Itemtpye == ItemType.shard) {\r\n                this.quality.node.active = true;\r\n                this.quality.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"quality\", CardQuality[std.ItemEffect2], \"spriteFrame\"), SpriteFrame);\r\n                this.bg.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"quality\", CardQuality[std.ItemEffect2] + \"_bag_bg\", \"spriteFrame\"), SpriteFrame);\r\n    \r\n                this.maskBg.node.active = true;\r\n                this.maskBg.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"quality\", CardQuality[std.ItemEffect2] + \"_bag_mask_bg\", \"spriteFrame\"), SpriteFrame);\r\n                this.mask.node.active = true;\r\n                this.mask.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"quality\", CardQuality[std.ItemEffect2] + \"_bag_mask\", \"spriteFrame\"), SpriteFrame);\r\n            } else {\r\n                this.maskBg.node.active = false;\r\n                this.quality.node.active = false;\r\n                this.mask.node.active = false;\r\n                if (std.Quality) {\r\n                    this.bg.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"quality\", CardQuality[std.Quality] + \"_bag_bg\", \"spriteFrame\"), SpriteFrame);\r\n                } else {\r\n                    this.bg.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"quality/defineBg/spriteFrame\"), SpriteFrame);\r\n                }\r\n            }\r\n            if (std.Itemtpye == ItemType.money) {\r\n                this.num.string = Utils.ToFixed(data.item.count / 10000);\r\n            } else {\r\n                this.num.string = data.item.count;\r\n            }\r\n            let isHaveRedPoint: boolean = false;\r\n            // if (this.showRedPoint) {\r\n            //     if (std.Type == ThingType.ThingTypeItem) {\r\n            //         if (std.Itemtpye == ItemType.shard) {\r\n            //             isHaveRedPoint = data.count >= std.ItemEffect3;\r\n            //         } else if (std.Itemtpye == ItemType.box) {\r\n            //             isHaveRedPoint = true;\r\n            //         }\r\n            //     }\r\n            // }\r\n            this.redPoint.active = isHaveRedPoint;\r\n            this.itemName.string = std.ItemName;\r\n        }else if(data.type == ThingTypeName.BattleCard){\r\n            let std: StdCard = CfgMgr.GetCard(data.card.cardId);\r\n            this.newIcon.active = false;\r\n            // data.isNew = false;\r\n            this.node.getComponent(Toggle).enabled = this.showSelect;\r\n            this.node.name = std.CardName + \"\";\r\n    \r\n            // this.icon.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_item, std.Icon, \"spriteFrame\"), SpriteFrame);\r\n                this.maskBg.node.active = false;\r\n                this.quality.node.active = false;\r\n                this.mask.node.active = false;\r\n                if (data.card.quality) {\r\n                    this.bg.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"quality\", CardQuality[data.card.quality] + \"_bag_bg\", \"spriteFrame\"), SpriteFrame);\r\n                } else {\r\n                    this.bg.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"quality/defineBg/spriteFrame\"), SpriteFrame);\r\n                }\r\n            \r\n                this.num.string = '1';\r\n            \r\n            let isHaveRedPoint: boolean = false;\r\n            this.redPoint.active = isHaveRedPoint;\r\n            this.itemName.string = std.CardName;\r\n        }\r\n\r\n    }\r\n\r\n    /**是否展示道具数量 true展示，false不展示 */\r\n    setIsShowNum(isshow: boolean) {\r\n        this.num.node.active = isshow;\r\n    }\r\n\r\n    /**是否展示道具选中状态 true展示，false不展示 */\r\n    setIsShowSelect(isshow: boolean) {\r\n        this.showSelect = isshow;\r\n        this.node.getComponent(Toggle).enabled = this.showSelect;\r\n    }\r\n\r\n    /**是否展示道具tips true展示，false不展示 */\r\n    setIsShowTips(isshow: boolean) {\r\n        this.isShowTips = isshow;\r\n    }\r\n    setIsShowRedPoint(val: boolean) {\r\n        this.showRedPoint = val;\r\n    }\r\n\r\n    /**是否展示角色倒计时 */\r\n    setIsRoleLockShow(isshow: boolean) {\r\n        this.isShowRoleLock = isshow;\r\n    }\r\n\r\n    private onClick(e: EventTouch) {\r\n        if (this.isShowTips) {\r\n            ItemTips.Show(this.data)\r\n        }\r\n    }\r\n}"]}