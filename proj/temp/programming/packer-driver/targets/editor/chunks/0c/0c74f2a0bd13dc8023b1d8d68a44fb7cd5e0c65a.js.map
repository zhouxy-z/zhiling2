{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/utils/DateUtils.ts"],"names":["DateUtils","TimeUnit","GetServerDate","serverDate","setTime","ServerTime","toDate","timestamp","Date","isSameDay","timestamp1","timestamp2","now","date1","date2","toISOString","split","isSameMonth","getFullYear","getMonth","isSameYear","timeElapsedSince","elapsed","days","Math","floor","hours","minutes","seconds","GetTodaySecond","startOfDay","setHours","getHours","getMinutes","getSeconds","FormatTime","sec","format","maxUnit","S","result","test","D","H","M","data","d","hh","h","mm","m","ss","s","key","value","replace","RegExp","TimestampToDate","isZeroFill","date","year","month","day","getDate","hour","formatList","results","index","length","val","toString","getTimeToNextWeek","currentDay","getDay","daysUntilNextMonday","nextMonday","setDate","timeDifference","getTime","getTimeToNextDay","tomorrow","SecondsToDetailedTime","secs","timeStr","trim","SecondsToHourTime","hoursStr","minutesStr","secsStr","weeHoursTime","serverTime","nextDayHoursTime","DateStringToDate","dateString","DateStringToTime","time","scheduleDailyRefresh","refreshHours","candidates","map","nextTime","targetHour","min","server_offset","intervalSync"],"mappings":"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","sourcesContent":["\r\nenum TimeUnit {\r\n    S,//秒\r\n    M,//分\r\n    H,//时\r\n    D//天\r\n}\r\n\r\nexport class DateUtils {\r\n    //服务器时间\r\n    private static server_offset: number = 0;\r\n    private static serverDate: Date = new Date();\r\n    private static serverTime: number = 0;\r\n    private static intervalSync: any;\r\n\r\n    public static GetServerDate(): Date {\r\n        this.serverDate.setTime(this.ServerTime * 1000);\r\n        return this.serverDate;\r\n    }\r\n\r\n    //获取服务器时间\r\n    public static ServerTime:number;\r\n\r\n    /**\r\n     * 将时间戳转换为Date对象\r\n     * @param timestamp 时间戳（毫秒）\r\n     * @returns Date对象\r\n     */\r\n    private static toDate(timestamp: number): Date {\r\n        return new Date(timestamp);\r\n    }\r\n\r\n    /**\r\n     * 判断两个时间戳是否代表同一天（忽略时间）\r\n     * @param timestamp1 第一个时间戳\r\n     * @param timestamp2 第二个时间戳 默认为当前时间\r\n     * @returns 如果是同一天返回true，否则返回false\r\n     */\r\n    static isSameDay(timestamp1: number, timestamp2: number = Date.now()): boolean {\r\n        const date1 = this.toDate(timestamp1);\r\n        const date2 = this.toDate(timestamp2);\r\n        return date1.toISOString().split('T')[0] === date2.toISOString().split('T')[0];\r\n    }\r\n\r\n    /**\r\n     * 判断两个时间戳是否代表同一月（忽略日期和时间）\r\n     * @param timestamp1 第一个时间戳\r\n     * @param timestamp2 第二个时间戳 默认为当前时间\r\n     * @returns 如果是同一月返回true，否则返回false\r\n     */\r\n    static isSameMonth(timestamp1: number, timestamp2: number = Date.now()): boolean {\r\n        const date1 = this.toDate(timestamp1);\r\n        const date2 = this.toDate(timestamp2);\r\n        return (\r\n            date1.getFullYear() === date2.getFullYear() &&\r\n            date1.getMonth() === date2.getMonth()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 判断两个时间戳是否代表同一年（忽略月份和日期）\r\n     * @param timestamp1 第一个时间戳\r\n     * @param timestamp2 第二个时间戳 默认为当前时间\r\n     * @returns 如果是同一年返回true，否则返回false\r\n     */\r\n    static isSameYear(timestamp1: number, timestamp2: number = Date.now()): boolean {\r\n        const date1 = this.toDate(timestamp1);\r\n        const date2 = this.toDate(timestamp2);\r\n        return date1.getFullYear() === date2.getFullYear();\r\n    }\r\n\r\n    /**\r\n    * 计算从过去某个时间戳到现在经过的时间\r\n    * @param timestamp 过去的时间戳（毫秒）\r\n    * @returns 经过的时间对象，包含天、小时、分钟和秒\r\n    */\r\n    static timeElapsedSince(timestamp: number): { days: number; hours: number; minutes: number; seconds: number } {\r\n        const now = Date.now(); // 获取当前时间的时间戳\r\n        const elapsed = now - timestamp; // 经过的毫秒数\r\n\r\n        const days = Math.floor(elapsed / (1000 * 60 * 60 * 24));\r\n        const hours = Math.floor((elapsed % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n        const minutes = Math.floor((elapsed % (1000 * 60 * 60)) / (1000 * 60));\r\n        const seconds = Math.floor((elapsed % (1000 * 60)) / 1000);\r\n\r\n        return { days, hours, minutes, seconds };\r\n    }\r\n\r\n    /**\r\n     * 获取当天秒数\r\n     */\r\n    static GetTodaySecond(timestamp?: number): number {\r\n        const startOfDay = new Date();\r\n        if (timestamp) {\r\n            startOfDay.setTime(timestamp);\r\n        } else {\r\n            startOfDay.setHours(0, 0, 0);\r\n        }\r\n        return startOfDay.getHours() * 3600 + startOfDay.getMinutes() * 60 + startOfDay.getSeconds();\r\n    }\r\n\r\n    /**\r\n     * 对单位为秒的时间生成格式化时间字符串\r\n     * @param sec 时间s\r\n     * @param format 格式化字符串\r\n     * @example\r\n     * // 当format为string时，会以format中的最大时间单位进行格式化\r\n     * FormatTime(3601, \"%{m}:%{s}\"); // 60:1\r\n     * FormatTime(3601, \"%{mm}:%{ss}\"); // 60:01\r\n     * FormatTime(3601, \"%{hh}:%{mm}:%{ss}\"); // 01:00:01\r\n     * \r\n     * // 当format为object时，会以传入的sec计算最大的时间单位，并选择format对应的字符串进行格式化\r\n     * FormatTime(100, {\r\n     *     S: \"%{s}秒\",\r\n     *     M: \"%{m}分%{s}秒\",\r\n     *     H: \"%{h}时%{m}分%{s}秒\",\r\n     *     D: \"%{d}天%{h}时%{m}分%{s}秒\"\r\n     * }); // 1分40秒\r\n     * FormatTime(100000, {\r\n     *     S: \"%{s}秒\",\r\n     *     M: \"%{m}分%{s}秒\",\r\n     *     H: \"%{h}时%{m}分%{s}秒\",\r\n     *     D: \"%{d}天%{h}时%{m}分%{s}秒\"\r\n     * }); // 1天3时46分40秒\r\n    */\r\n    static FormatTime(sec: number, format: string | { \"S\": string; \"M\": string; \"H\": string; \"D\": string } = \"%{hh}:%{mm}:%{ss}\"): string {\r\n        let seconds: number = Math.floor(sec);\r\n        let minutes: number = Math.floor(seconds / 60);\r\n        let hours: number = Math.floor(seconds / 3600);\r\n        let days: number = Math.floor(seconds / 86400);\r\n        let maxUnit: TimeUnit = TimeUnit.S;\r\n        let result: string = \"\";\r\n        if (typeof format === \"string\") {\r\n            result = format;\r\n            if (/d/i.test(format)) {\r\n                maxUnit = TimeUnit.D;\r\n            } else if (/h/i.test(format)) {\r\n                maxUnit = TimeUnit.H;\r\n            } else if (/m/i.test(format)) {\r\n                maxUnit = TimeUnit.M;\r\n            }\r\n        } else {\r\n            if (days > 0) {\r\n                maxUnit = TimeUnit.D;\r\n                result = format.D;\r\n            } else if (hours > 0) {\r\n                maxUnit = TimeUnit.H;\r\n                result = format.H;\r\n            } else if (minutes > 0) {\r\n                maxUnit = TimeUnit.M;\r\n                result = format.M;\r\n            } else {\r\n                maxUnit = TimeUnit.S;\r\n                result = format.S;\r\n            }\r\n        }\r\n        if (maxUnit > TimeUnit.S) {\r\n            seconds %= 60;\r\n        }\r\n        if (maxUnit > TimeUnit.M) {\r\n            minutes %= 60;\r\n        }\r\n        if (maxUnit > TimeUnit.H) {\r\n            hours %= 24;\r\n        }\r\n        let data = {\r\n            d: `${days}`,\r\n            hh: hours < 10 ? `0${hours}` : `${hours}`,\r\n            h: `${hours}`,\r\n            mm: minutes < 10 ? `0${minutes}` : `${minutes}`,\r\n            m: `${minutes}`,\r\n            ss: seconds < 10 ? `0${seconds}` : `${seconds}`,\r\n            s: `${seconds}`\r\n        };\r\n\r\n        for (const key in data) {\r\n            const value = data[key];\r\n            result = result.replace(new RegExp(`%{${key}}`, \"g\"), value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    /**时间戳转日期\r\n     * timestamp(毫秒)\r\n     * 返回 [年，月，日，小时，分钟，秒]\r\n     */\r\n    static TimestampToDate(timestamp: number, isZeroFill: boolean = false) {\r\n        let date = this.toDate(timestamp); // 时间戳转换为Date对象\r\n        let year: number = date.getFullYear();// 获取年份\r\n        let month: number = (date.getMonth() + 1); // 获取月份\r\n        let day: number = date.getDate(); // 获取天\r\n        let hour: number = date.getHours();//小时\r\n        let minutes: number = date.getMinutes();//分钟\r\n        let seconds: number = date.getSeconds();//秒\r\n        let formatList: number[] = [year, month, day, hour, minutes, seconds];\r\n        let results: string[] = [];\r\n        for (let index = 0; index < formatList.length; index++) {\r\n            let val: number = formatList[index];\r\n            results[index] = isZeroFill ? (val < 10 ? `0${val}` : `${val}`) : val.toString();\r\n        }\r\n        return results // 返回格式化日期字符串\r\n    }\r\n\r\n    static getTimeToNextWeek() {\r\n        // 获取当前时间\r\n        const now = DateUtils.GetServerDate();\r\n\r\n        // 获取当前星期几\r\n        const currentDay = now.getDay(); // 0 表示星期天, 1 表示星期一, ..., 6 表示星期六\r\n\r\n        // 计算距离下周一还有几天\r\n        const daysUntilNextMonday = (8 - currentDay) % 7;\r\n\r\n        // 获取下周一的日期\r\n        const nextMonday = new Date(now);\r\n        nextMonday.setDate(now.getDate() + daysUntilNextMonday);\r\n        nextMonday.setHours(0, 0, 0, 0); // 设置为下周一的0点0分0秒\r\n\r\n        // 计算时间差（毫秒）\r\n        let timeDifference = nextMonday.getTime() - now.getTime();\r\n        if (timeDifference <= 0) { timeDifference = 604800000 + timeDifference };\r\n\r\n        // 转换为小时、分钟和秒\r\n        let seconds: any = Math.floor((timeDifference / 1000) % 60);\r\n        let minutes: any = Math.floor((timeDifference / 1000 / 60) % 60);\r\n        let hours: any = Math.floor((timeDifference / 1000 / 60 / 60) % 24);\r\n        let days = Math.floor(timeDifference / 1000 / 60 / 60 / 24);\r\n\r\n        if (hours < 10 && hours != 0) hours = `0${hours}`\r\n        if (minutes < 10 && minutes != 0) minutes = `0${minutes}`\r\n        if (seconds < 10 && seconds != 0) seconds = `0${seconds}`\r\n        return [days,hours,minutes,seconds]\r\n    }\r\n\r\n    static getTimeToNextDay() {\r\n        // 获取当前时间\r\n        const now = new Date();\r\n\r\n        // 获取明天0点的时间\r\n        const tomorrow = new Date(now);\r\n        tomorrow.setDate(now.getDate() + 1);\r\n        tomorrow.setHours(0, 0, 0, 0); // 设置为明天的0点0分0秒\r\n\r\n        // 计算时间差（毫秒）\r\n        let timeDifference = tomorrow.getTime() - now.getTime();\r\n        if (timeDifference <= 0) { timeDifference = 86400000 + timeDifference };\r\n\r\n        // 转换为小时、分钟和秒\r\n        let seconds: any = Math.floor((timeDifference / 1000) % 60);\r\n        let minutes: any = Math.floor((timeDifference / 1000 / 60) % 60);\r\n        let hours: any = Math.floor((timeDifference / 1000 / 60 / 60));\r\n\r\n        if (hours < 10 && hours != 0) hours = `0${hours}`\r\n        if (minutes < 10 && minutes != 0) minutes = `0${minutes}`\r\n        if (seconds < 10 && seconds != 0) seconds = `0${seconds}`\r\n        return `${hours}小时 ${minutes}分钟 ${seconds}秒`\r\n    }\r\n\r\n    static SecondsToDetailedTime(seconds: number): string {\r\n        seconds = Math.floor(seconds);\r\n        const days = Math.floor(seconds / (3600 * 24));\r\n        const hours = Math.floor((seconds % (3600 * 24)) / 3600);\r\n        const minutes = Math.floor((seconds % 3600) / 60);\r\n        const secs = seconds % 60;\r\n    \r\n        // 使用条件运算符简化字符串拼接\r\n        const timeStr = `${days > 0 ? `${days}天` : ''}${hours > 0 ? `${hours}小时` : ''}${minutes > 0 ? `${minutes}分钟` : ''}${secs > 0 ? `${secs}秒` : ''}`.trim();\r\n    \r\n        return timeStr || \"0秒\"; // 如果所有单位都是0，则返回\"0秒\"\r\n    }\r\n\r\n\r\n    static SecondsToHourTime(seconds) {\r\n        if (typeof seconds !== 'number' || seconds < 0) {\r\n            return \"00:00:00\"\r\n        }\r\n     \r\n        seconds = Math.floor(seconds);\r\n        const hours = Math.floor(seconds / 3600);\r\n        const minutes = Math.floor((seconds % 3600) / 60);\r\n        const secs = seconds % 60;\r\n     \r\n        const hoursStr = (hours < 10 ? '0' + hours : hours);\r\n        const minutesStr = (minutes < 10 ? '0' + minutes : minutes);\r\n        const secsStr = (secs < 10 ? '0' + secs : secs);\r\n     \r\n        return `${hoursStr}:${minutesStr}:${secsStr}`;\r\n     }\r\n\r\n    /**获取当天凌晨时间戳 */\r\n    public static weeHoursTime(serverTime:number):number{\r\n        let serverDate:Date = new Date();\r\n        serverDate.setTime(serverTime * 1000);\r\n        let h:number = serverDate.getHours();\r\n        let m:number = serverDate.getMinutes();\r\n        let s:number = serverDate.getSeconds();\r\n        return serverTime - (h * 3600 + m * 60 + s); \r\n    }\r\n\r\n    /**获取下一天凌晨时间戳 */\r\n    public static nextDayHoursTime(serverTime:number):number{\r\n        return this.weeHoursTime(serverTime) + 86400; \r\n    }\r\n\r\n    /**\r\n     * 字符串格式\"年-月-日 时:分:秒\"\r\n     * 将字符串时间戳转为Date对象\r\n     **/\r\n    public static DateStringToDate(dateString: string): Date {\r\n        let date = new Date(`${dateString}+08:00`);\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * 字符串格式\"年-月-日 时:分:秒\"\r\n     * 将字符串时间戳转为时间戳（单位秒）\r\n     **/\r\n    public static DateStringToTime(dateString: string): number {\r\n        let date = this.DateStringToDate(dateString);\r\n        let time: number = date.getTime();\r\n        return time / 1000;\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置每日定点刷新任务\r\n     * @param refreshHours 每日刷新时间点的小时数组（使用 24 小时制，24 表示 0 点）\r\n     * @param callback 到达时间点时触发的回调函数\r\n     */\r\n    static scheduleDailyRefresh(refreshHours: number[]) {\r\n        // 获取下一个最近的刷新时间点\r\n       \r\n            const now = this.GetServerDate();\r\n            // 生成所有可能的未来时间候选（当天或次日）\r\n            const candidates = refreshHours.map(hour => {\r\n                const nextTime = new Date(now);\r\n                // 处理 24 点转为次日 0 点\r\n                const targetHour = hour === 24 ? 0 : hour;\r\n                nextTime.setHours(targetHour, 0, 0, 0);\r\n                \r\n                // 如果时间已过当前时间，则加 1 天\r\n                if (nextTime <= now) {\r\n                nextTime.setDate(nextTime.getDate() + 1);\r\n                }\r\n                return nextTime;\r\n            });\r\n            // 找到最近的未来时间点\r\n            const time = new Date(Math.min(...candidates.map(time => time.getTime())));\r\n            return time.getTime() / 1000;\r\n    }\r\n}"]}