{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardInfoPanel.ts"],"names":["CardInfoPanel","Button","easing","instantiate","js","Label","path","RichText","sp","Sprite","SpriteFrame","tween","UIOpacity","v3","Panel","EventMgr","Evt_Card_Add","Evt_Card_Chage","Evt_Hide_Scene","Evt_Player_Level_Update","Evt_Show_Scene","CardInfoStateType","CfgMgr","PlayerData","VList","CardClassItem","card_quality","ResMgr","roleimage","CostItem","Req","Route","Session","CardAwardItem","ItemUtil","Card","HaveItem","Goto","MsgPanel","prefab","quility","roleImg","creatorBtn","addBtn","delBtn","fillBtn","changeBtn","upLevelBtn","buyBtn","classNameLab","cardClassList","descLab","frameNameLab","frameDescLab","frameIcon","upgradeCont","upgradeHaveItemCont","upgradeTempHaveItem","notLvCont","lvCont","qualLab","addExpLab","lastBtn","nextBtn","costCont","upgradeBtn","upgradeMaksBtn","upgradeCloseBtn","tipsLab","awardCardList","upgradeResultCont","upgradeResultMaskBtn","upgradeResultCard","upgradeResultEffect","stdCard","upgradeList","selectCardData","cardClassDatas","awardCardDatas","targetQual","callback","type","consumeIdList","consumeNumList","curLvResult","onLoad","find","updateCell","updateCardCalssCell","bind","selectCondCheck","selectCell","selectCardCalssCell","children","shift","updateAwardCardCell","clickCell","awardCardClick","addComponent","getComponent","Skeleton","node","on","EventType","CLICK","onBtnClick","CloseBy","active","onShow","emit","getClassName","onUpdateCard","onAddCard","onLevelUpdate","onHide","args","getClassByName","off","flush","data","isShowUp","initCardClass","id","cardId","result","cardData","change","scheduleOnce","showUpgradeResult","isUpdate","initAwardCard","btn","onShowUpgrade","Hide","quality","updateQual","updateShowQual","toUpgrade","closeUpgradeResult","CheckThingConsumes","length","nextLv","targetQuality","Send","console","log","Quality","levelAfter","levelBefore","lvAwardList","GetPlayerLevelArwardList","lvAward","stdPlayerLevel","Level","cards","GetCardClassList","getCards","notCards","std","cardClassCardDatas","GetCardDataByCfgId","ID","isGet","cardClassData","CreateCardData","sort","a","b","concat","selectIndex","classInfo","index","cellCount","cell","cellInfo","cellCom","getChildByPath","isSelect","scale","setScale","SetData","Show","lastCell","lastInfo","selectCard","GetCardUpgradeList","curUpgrade","GetCard","string","SkillDesc","LoadResAbSub","join","CardView","res","spriteFrame","updateBtnState","stdQual","GetCardUpgradeShow","Title","FrameDesc","Picture","Add","Change","Creator","Del","Fill","nextUpgrade","initUpgradeHaveItem","itemIds","itemMap","CostItemIds","push","maxLen","Math","max","haveItem","parent","stdEndUpgrade","awardCardId","RewardTypes","stdCardDeliver","GetBattleCardDeliver","RewardIds","CardID","show","cardDatas","itemIdMap","addExp","curQual","stdUpgrade","j","num","CostItemNums","itemData","exp","costItem","oldCardData","interactable","maskOpacity","opacity","to","start","backOut","call","animNam","clearAnimation","setAnimation","delay"],"mappings":"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","sourcesContent":["import { Button, easing, EventTouch, Input, instantiate, js, Label, Node, path, RichText, sp, Sprite, SpriteFrame, tween, UIOpacity, v3 } from \"cc\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { EventMgr, Evt_Card_Add, Evt_Card_Chage, Evt_Hide_Scene, Evt_Player_Level_Update, Evt_Show_Scene } from \"../../manager/EventMgr\";\r\nimport { CardInfoStateType } from \"../player/PlayerStruct\";\r\nimport { CfgMgr, StdBattleCardDelivery, StdCard, StdCardUpgrade, StdCardUpgradeShow, StdPlayerLevelAward } from \"../../manager/CfgMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { CellInfo, VList } from \"../../component/VList\";\r\nimport { CardClassItem } from \"./CardClassItem\";\r\nimport { card_quality, ResMgr, roleimage } from \"../../manager/ResMgr\";\r\nimport { CostItem } from \"../common/CostItem\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { CardAwardItem } from \"./CardAwardItem\";\r\nimport { ItemUtil } from \"../../utils/ItemUtils\";\r\nimport { Card } from \"./Card\";\r\nimport { HaveItem } from \"../common/HaveItem\";\r\nimport { Goto } from \"../../DL\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\n\r\nexport class CardInfoPanel extends Panel {\r\n    protected prefab: string = \"prefabs/cards/CardInfoPanel\";\r\n    private quility: Sprite;\r\n    private roleImg: Sprite;\r\n    private creatorBtn: Button;\r\n    private addBtn: Button;\r\n    private delBtn: Button;\r\n    private fillBtn: Button;\r\n    private changeBtn: Button;\r\n    private upLevelBtn: Button;\r\n    private buyBtn: Button;\r\n    private classNameLab: Label;\r\n    private cardClassList: VList;\r\n    private descLab: RichText;\r\n    private frameNameLab: Label;\r\n    private frameDescLab: RichText;\r\n    private frameIcon: Sprite;\r\n    private upgradeCont: Node;\r\n    private upgradeHaveItemCont: Node;\r\n    private upgradeTempHaveItem: Node;\r\n    private notLvCont: Node;\r\n    private lvCont: Node;\r\n    private qualLab: Label;\r\n    private addExpLab: Label;\r\n    private lastBtn: Button;\r\n    private nextBtn: Button;\r\n    private costCont: Node;\r\n    private upgradeBtn: Button;\r\n    private upgradeMaksBtn: Button;\r\n    private upgradeCloseBtn: Button;\r\n    private tipsLab: RichText;\r\n    private awardCardList: VList;\r\n    private upgradeResultCont: Node;\r\n    private upgradeResultMaskBtn: Button;\r\n    private upgradeResultCard: Card;\r\n    private upgradeResultEffect: sp.Skeleton;\r\n    private stdCard: StdCard;\r\n    private upgradeList: StdCardUpgrade[];\r\n    private selectCardData: proto.base.IBattleCard;\r\n    private cardClassDatas: proto.base.IBattleCard[];\r\n    private awardCardDatas: proto.base.IBattleCard[];\r\n    private targetQual: number;\r\n    private callback: Function;\r\n    private type: CardInfoStateType;\r\n    private consumeIdList: number[];\r\n    private consumeNumList: number[];\r\n    private curLvResult: proto.pb.PlayerLevelExpChangedPush;\r\n    protected onLoad() {\r\n        this.creatorBtn = this.find(\"bodyCont/creatorBtn\", Button);\r\n        this.addBtn = this.find(\"bodyCont/addBtn\", Button);\r\n        this.delBtn = this.find(\"bodyCont/delBtn\", Button);\r\n        this.fillBtn = this.find(\"bodyCont/fillBtn\", Button);\r\n        this.changeBtn = this.find(\"bodyCont/changeBtn\", Button);\r\n        this.upLevelBtn = this.find(\"bodyCont/upLevelBtn\", Button);\r\n        this.buyBtn = this.find(\"bodyCont/buyBtn\", Button);\r\n        this.quility = this.find(\"bodyCont/quility\", Sprite);\r\n        this.roleImg = this.find(\"bodyCont/roleImg\", Sprite);\r\n        this.classNameLab = this.find(\"infoCont/classNameLab\", Label);\r\n        this.cardClassList = this.find(\"infoCont/cardClassList\", VList);\r\n        this.cardClassList.updateCell = this.updateCardCalssCell.bind(this);\r\n        this.cardClassList.selectCondCheck = this.selectCondCheck.bind(this);\r\n        this.cardClassList.selectCell = this.selectCardCalssCell.bind(this);\r\n        this.descLab = this.find(\"infoCont/cardDescCont/descLab\", RichText);\r\n        this.frameIcon = this.find(\"infoCont/frameCont/frameIcon\", Sprite);\r\n        this.frameNameLab = this.find(\"infoCont/frameCont/frameNameLab\", Label);\r\n        this.frameDescLab = this.find(\"infoCont/frameCont/frameDescLab\", RichText);\r\n        this.upgradeCont = this.find(\"upgradeCont\");\r\n        this.upgradeHaveItemCont = this.find(\"upgradeCont/haveItemCont\");\r\n        this.upgradeTempHaveItem = this.upgradeHaveItemCont.children.shift();\r\n        this.upgradeCloseBtn = this.find(\"upgradeCont/cont/closeBtn\", Button);\r\n        this.upgradeMaksBtn = this.find(\"upgradeCont/mask\", Button);\r\n        this.notLvCont = this.find(\"upgradeCont/cont/notLvCont\");\r\n        this.lvCont = this.find(\"upgradeCont/cont/lvCont\");\r\n        this.qualLab = this.find(\"upgradeCont/cont/lvCont/qualLab\", Label);\r\n        this.addExpLab = this.find(\"upgradeCont/cont/lvCont/expCont/addExpLab\", Label);\r\n        this.lastBtn = this.find(\"upgradeCont/cont/lvCont/lastBtn\", Button);\r\n        this.nextBtn = this.find(\"upgradeCont/cont/lvCont/nextBtn\", Button);\r\n        this.costCont = this.find(\"upgradeCont/cont/lvCont/costCont\");\r\n        this.upgradeBtn = this.find(\"upgradeCont/cont/lvCont/upgradeBtn\", Button);\r\n        this.tipsLab = this.find(\"upgradeCont/cont/awardCont/tipsLab\", RichText);\r\n        this.awardCardList = this.find(\"upgradeCont/cont/awardCont/awardCardList\", VList);\r\n        this.awardCardList.updateCell = this.updateAwardCardCell.bind(this);\r\n        this.awardCardList.clickCell = this.awardCardClick.bind(this);\r\n        this.upgradeResultCont = this.find(\"upgradeResultCont\");\r\n        this.upgradeResultMaskBtn = this.find(\"upgradeResultCont/mask\", Button);\r\n        this.upgradeResultCard = this.find(\"upgradeResultCont/Cards\").addComponent(Card);\r\n        this.upgradeResultEffect = this.find(\"upgradeResultCont/effect\").getComponent(sp.Skeleton);\r\n        this.creatorBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.addBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.delBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.fillBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.changeBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.upLevelBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.buyBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.upgradeMaksBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.upgradeCloseBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.lastBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.nextBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.upgradeBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.upgradeResultMaskBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.CloseBy(\"mask\");\r\n        this.CloseBy(\"closeBtn\");\r\n        this.upgradeCont.active = false;\r\n        this.upgradeResultCont.active = false;\r\n    }\r\n\r\n    protected onShow(): void {\r\n        EventMgr.emit(Evt_Hide_Scene, js.getClassName(this));\r\n        EventMgr.on(Evt_Card_Chage, this.onUpdateCard, this);\r\n        EventMgr.on(Evt_Card_Add, this.onAddCard, this);\r\n        EventMgr.on(Evt_Player_Level_Update, this.onLevelUpdate, this);\r\n        // Session.Send(Protocol.getplayerdecks)\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n        EventMgr.emit(Evt_Show_Scene, js.getClassByName(this));\r\n        EventMgr.off(Evt_Card_Chage, this.onUpdateCard, this);\r\n        EventMgr.off(Evt_Card_Add, this.onAddCard, this);\r\n        EventMgr.off(Evt_Player_Level_Update, this.onLevelUpdate, this);\r\n    }\r\n    \r\n    public flush(data: proto.base.IBattleCard, type: CardInfoStateType, callback: Function, isShowUp: boolean = false): void {\r\n        this.upgradeCont.active = isShowUp;\r\n        this.type = type;\r\n        this.callback = callback;\r\n        this.initCardClass(data.id, data.cardId);\r\n    }\r\n\r\n    private onLevelUpdate(result: proto.pb.PlayerLevelExpChangedPush): void {\r\n        this.curLvResult = result;\r\n    }\r\n\r\n    private onUpdateCard(cardData: proto.base.IBattleCard, change: number): void {\r\n        this.scheduleOnce(()=>{\r\n            if (this.selectCardData.id == cardData.id) {\r\n                this.initCardClass(this.selectCardData.id, this.selectCardData.cardId);\r\n                this.showUpgradeResult(cardData, change);\r\n            }\r\n        }, 0.1)\r\n       \r\n    }\r\n\r\n    private onAddCard(cardData: proto.base.IBattleCard): void {\r\n        if (!this.awardCardDatas) return;\r\n        let isUpdate: boolean = false;\r\n        for (let data of this.awardCardDatas) {\r\n            if (data.cardId == cardData.cardId) {\r\n                isUpdate = true;\r\n                break;\r\n            }\r\n        }\r\n        if (isUpdate) {\r\n            this.initAwardCard();\r\n        }\r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.upLevelBtn:  \r\n                this.onShowUpgrade();\r\n                break;\r\n            case this.buyBtn:\r\n               Goto(\"TradePanel\");\r\n               this.Hide();\r\n                break;\r\n            case this.creatorBtn:\r\n                this.callback(this.selectCardData);\r\n                this.Hide();\r\n                break;\r\n            case this.addBtn:\r\n                this.callback();\r\n                this.Hide();\r\n                break;\r\n            case this.delBtn:\r\n                this.callback();\r\n                this.Hide();\r\n                break;\r\n            case this.fillBtn:\r\n                \r\n                break;\r\n            case this.changeBtn:\r\n    \r\n                break;\r\n            case this.upgradeMaksBtn:\r\n            case this.upgradeCloseBtn:\r\n                this.upgradeCont.active = false;\r\n                this.targetQual = this.selectCardData.quality;\r\n                this.updateQual();\r\n                break;\r\n            case this.lastBtn:\r\n                this.targetQual--;\r\n                this.updateShowQual();\r\n                break;\r\n            case this.nextBtn:\r\n                this.targetQual++;\r\n                this.updateShowQual();\r\n                break;\r\n            case this.upgradeBtn:\r\n                this.toUpgrade();\r\n                break;\r\n            case this.upgradeResultMaskBtn:\r\n                this.closeUpgradeResult();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private toUpgrade(): void {\r\n        if (!ItemUtil.CheckThingConsumes(null, this.consumeIdList, this.consumeNumList, true)) {\r\n            return;\r\n        }\r\n        if (this.selectCardData.quality < this.upgradeList.length) {\r\n            this.curLvResult = null;\r\n            let nextLv: StdCardUpgrade = this.upgradeList[this.selectCardData.quality];\r\n            let data = new Req[\"logic.protocol.battlecardupgrade\"]();\r\n            data.cardId = this.selectCardData.id;\r\n            data.targetQuality = this.targetQual;\r\n            Session.Send(Route[\"logic.protocol.battlecardupgrade\"], data);\r\n            console.log(\"发送卡牌升级----id\" + this.selectCardData.id + \" cardId--->\" + this.selectCardData.cardId + \" quality---->\" + nextLv.Quality);\r\n        }\r\n    }\r\n\r\n    private closeUpgradeResult(): void {\r\n        this.upgradeResultCont.active = false;\r\n        if (this.curLvResult) {\r\n            //有升级\r\n            if (this.curLvResult.levelAfter > this.curLvResult.levelBefore) {\r\n                let lvAwardList: StdPlayerLevelAward[]  = CfgMgr.GetPlayerLevelArwardList();\r\n                for (let lvAward of lvAwardList) {\r\n                    if (lvAward.stdPlayerLevel.Level > this.curLvResult.levelBefore && lvAward.stdPlayerLevel.Level <= this.curLvResult.levelAfter) {\r\n                       Goto(\"CardCollectPanel\", this.curLvResult);\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private initCardClass(id: string, cardId: number): void {\r\n        this.cardClassDatas = [];\r\n        let cards: StdCard[] = CfgMgr.GetCardClassList(cardId);\r\n        let getCards: proto.base.IBattleCard[] = [];\r\n        let notCards: proto.base.IBattleCard[] = [];\r\n        \r\n        for (let std of cards) {\r\n            let cardClassCardDatas: proto.base.IBattleCard[] = PlayerData.GetCardDataByCfgId(std.ID);\r\n            let isGet: boolean = false;\r\n            for (let data of cardClassCardDatas) {\r\n                getCards[getCards.length] = data;\r\n                isGet = true;\r\n            }\r\n            if (!isGet) {\r\n                let cardClassData: proto.base.IBattleCard = PlayerData.CreateCardData(std.ID);\r\n                notCards[notCards.length] = cardClassData;\r\n            }\r\n        }\r\n        getCards.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            return a.cardId - b.cardId;\r\n        });\r\n        notCards.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            return a.cardId - b.cardId;\r\n        });\r\n        this.cardClassDatas = getCards.concat(notCards);\r\n        let selectIndex: number = 0;\r\n        let classInfo: proto.base.IBattleCard;\r\n        for (let index = 0; index < this.cardClassDatas.length; index++) {\r\n            classInfo = this.cardClassDatas[index];\r\n            if (classInfo.id == id && cardId) {\r\n                selectIndex = index;\r\n                break;\r\n            }\r\n        }\r\n        this.cardClassList.cellCount = this.cardClassDatas.length;\r\n        this.cardClassList.selectIndex(selectIndex);\r\n    }\r\n    \r\n    private updateCardCalssCell(cell: Node, cellInfo: CellInfo): void {\r\n        let cellCom: CardClassItem = cell.getComponent(CardClassItem) || cell.addComponent(CardClassItem);\r\n        cell.getChildByPath(\"select\").active = cellInfo.isSelect;\r\n        let scale = cellInfo.isSelect ? 1 : 0.8\r\n        cell.setScale(scale, scale, 1 )\r\n        cellCom.SetData(this.cardClassDatas[cellInfo.index]);\r\n    }\r\n    \r\n    private selectCondCheck(cell: Node, cellInfo: CellInfo): boolean {\r\n        let data: proto.base.IBattleCard = this.cardClassDatas[cellInfo.index];\r\n        if (data.id) return true;\r\n        if (cell)  MsgPanel.Show( \"暂未获得此卡\");\r\n        return false;\r\n    }\r\n\r\n    private selectCardCalssCell(cell: Node, cellInfo: CellInfo, lastCell?: Node, lastInfo?: CellInfo): void {\r\n        if (cell) {\r\n            cell.getChildByPath(\"select\").active = cellInfo.isSelect;\r\n            let scale = cellInfo.isSelect ? 1 : 0.8\r\n            cell.setScale(scale, scale, 1 )\r\n        }\r\n        if (lastCell && lastInfo) {\r\n            lastCell.getChildByPath(\"select\").active = lastInfo.isSelect;\r\n            let scale = lastInfo.isSelect ? 1 : 0.8\r\n            lastCell.setScale(scale, scale, 1 )\r\n        } \r\n        this.selectCard(this.cardClassDatas[cellInfo.index]);\r\n        \r\n    }\r\n\r\n    private selectCard(data: proto.base.IBattleCard): void {\r\n        this.selectCardData = data;\r\n        this.upgradeList = CfgMgr.GetCardUpgradeList(this.selectCardData.cardId);\r\n        let curUpgrade = this.upgradeList[this.selectCardData.quality - 1];\r\n        this.stdCard = CfgMgr.GetCard(this.selectCardData.cardId);\r\n        this.targetQual = curUpgrade ? curUpgrade.Quality : 1;\r\n        this.descLab.string = this.stdCard.SkillDesc || \"\";\r\n        // this.classNameLab.string = this.stdCard.ClassName;\r\n        ResMgr.LoadResAbSub(path.join(roleimage, this.stdCard.CardView, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.roleImg.spriteFrame = res;\r\n        });\r\n        this.updateQual();\r\n        this.updateBtnState();\r\n        if (this.upgradeCont.active) {\r\n            this.onShowUpgrade();\r\n        }\r\n    }   \r\n\r\n    private updateQual(): void {\r\n        let stdQual: StdCardUpgradeShow = CfgMgr.GetCardUpgradeShow(this.targetQual);\r\n        this.frameNameLab.string = stdQual.Title;\r\n        this.frameDescLab.string = stdQual.FrameDesc;\r\n        ResMgr.LoadResAbSub(path.join(card_quality, stdQual.Picture, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.frameIcon.spriteFrame = res;\r\n        });\r\n        ResMgr.LoadResAbSub(path.join(card_quality, \"bodyframe_\" + this.targetQual, \"spriteFrame\"), SpriteFrame, res =>{\r\n            this.quility.spriteFrame = res;\r\n        });\r\n        \r\n        this.qualLab.string = stdQual.Title;\r\n        \r\n        \r\n    }\r\n\r\n    private updateBtnState(): void {\r\n        this.addBtn.node.active = false;\r\n        this.changeBtn.node.active = false; \r\n        this.creatorBtn.node.active = false; \r\n        this.delBtn.node.active = false; \r\n        this.fillBtn.node.active = false; \r\n        this.upLevelBtn.node.active = this.selectCardData.id != \"\";\r\n        this.buyBtn.node.active = this.selectCardData.id != \"\";\r\n        if(this.selectCardData.id != \"\"){\r\n            switch (this.type) {\r\n                case CardInfoStateType.Add:\r\n                    this.addBtn.node.active = true      \r\n                    break;\r\n                case CardInfoStateType.Change:\r\n                    this.changeBtn.node.active = true    \r\n                    break;\r\n                case CardInfoStateType.Creator:\r\n                    this.creatorBtn.node.active = true    \r\n                    break;\r\n                case CardInfoStateType.Del:\r\n                    this.delBtn.node.active = true    \r\n                    break;\r\n                case CardInfoStateType.Fill:\r\n                    this.fillBtn.node.active = true    \r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private onShowUpgrade(): void {\r\n        this.upgradeCont.active = true;\r\n        let nextUpgrade: StdCardUpgrade = this.upgradeList[this.selectCardData.quality];\r\n        //满级\r\n        if (!nextUpgrade) {\r\n            this.lvCont.active = false;\r\n            this.notLvCont.active = true;\r\n        } else {\r\n            this.lvCont.active = true;\r\n            this.notLvCont.active = false;\r\n            this.targetQual += 1;\r\n            this.updateShowQual();\r\n        }\r\n        this.initUpgradeHaveItem();\r\n        this.initAwardCard();\r\n    }\r\n\r\n    private initUpgradeHaveItem(): void {\r\n        let itemIds: number[] = [];\r\n        let itemMap: {[key: number]: number} = {};\r\n        if (this.upgradeList) {\r\n            for (let std of this.upgradeList) {\r\n                if (std.CostItemIds) {\r\n                    for (let id of std.CostItemIds) {\r\n                        if (!itemMap[id]) {\r\n                            itemIds.push(id);\r\n                            itemMap[id] = id;\r\n                        }\r\n                    } \r\n                }\r\n                \r\n            }\r\n        }\r\n        let maxLen: number = Math.max(this.upgradeHaveItemCont.children.length, itemIds.length);\r\n        let node: Node;\r\n        let haveItem: HaveItem;\r\n        for (let index = 0; index < maxLen; index++) {\r\n            node = this.upgradeHaveItemCont.children[index];\r\n            if (!node) {\r\n                node = instantiate(this.upgradeTempHaveItem);\r\n                node.parent = this.upgradeHaveItemCont;\r\n            }\r\n            if (index < itemIds.length){\r\n                node.active = true;\r\n                haveItem = node.getComponent(HaveItem) || node.addComponent(HaveItem);\r\n                haveItem.SetData(itemIds[index]);\r\n            } else {\r\n                node.active = false;\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    private updateAwardCardCell(cell: Node, cellInfo: CellInfo): void {\r\n        let cellCom: CardAwardItem = cell.getComponent(CardAwardItem) || cell.addComponent(CardAwardItem);\r\n        cellCom.SetData(this.awardCardDatas[cellInfo.index]);\r\n    }\r\n\r\n    private awardCardClick(cell: Node, cellInfo: CellInfo): void {\r\n        let data: proto.base.IBattleCard = this.awardCardDatas[cellInfo.index];\r\n        if (data.id) {\r\n            this.initCardClass(data.id, data.cardId);\r\n            this.onShowUpgrade();\r\n        } else {\r\n            MsgPanel.Show(\"暂未获得此卡\");\r\n        }\r\n    }\r\n\r\n    private initAwardCard(): void {\r\n        this.awardCardDatas = [];\r\n        let stdEndUpgrade: StdCardUpgrade = this.upgradeList[this.upgradeList.length - 1];\r\n        \r\n        let awardCardId: number[] = [];\r\n        if (stdEndUpgrade && stdEndUpgrade.RewardTypes){\r\n            for (let index = 0; index < stdEndUpgrade.RewardTypes.length; index++) {\r\n                if (stdEndUpgrade.RewardTypes[index] == 3) {\r\n                    let stdCardDeliver: StdBattleCardDelivery = CfgMgr.GetBattleCardDeliver(stdEndUpgrade.RewardIds[index]);\r\n                    if (stdCardDeliver) awardCardId[awardCardId.length] = stdCardDeliver.CardID;\r\n                }\r\n                \r\n            }\r\n        }\r\n        if (awardCardId.length) {\r\n            this.tipsLab.node.active = true;\r\n            this.tipsLab.string = stdEndUpgrade.show;\r\n        } else {\r\n            this.tipsLab.node.active = false;\r\n        }\r\n        \r\n        for (let index = 0; index < awardCardId.length; index++) {\r\n            let cardId: number = awardCardId[index];\r\n            let cardDatas: proto.base.IBattleCard[] = PlayerData.GetCardDataByCfgId(cardId);\r\n            if (cardDatas.length) {\r\n                for (let data of cardDatas) {\r\n                    this.awardCardDatas[this.awardCardDatas.length] = data;\r\n                }\r\n            } else {\r\n                let cardData: proto.base.IBattleCard = PlayerData.CreateCardData(cardId);\r\n                this.awardCardDatas[this.awardCardDatas.length] = cardData;\r\n            }\r\n            \r\n        }\r\n        \r\n        this.awardCardList.cellCount = this.awardCardDatas.length;\r\n    }\r\n\r\n    private updateShowQual(): void {\r\n        if (this.targetQual <= this.selectCardData.quality + 1) {\r\n            this.targetQual = this.selectCardData.quality + 1;\r\n            this.lastBtn.node.active = false;\r\n        } else {\r\n            this.lastBtn.node.active = true;\r\n        }\r\n\r\n        if (this.targetQual >= this.upgradeList.length) {\r\n            this.targetQual = this.upgradeList.length;\r\n            this.nextBtn.node.active = false;\r\n        } else {\r\n            this.nextBtn.node.active = true;\r\n        }\r\n        \r\n        this.updateQual();\r\n        this.consumeIdList = [];\r\n        this.consumeNumList = [];\r\n        let itemIdMap:{[key: number]: {index: number, num: number}} = {};\r\n        let addExp: number = 0;\r\n        let curQual: number = this.selectCardData.quality;\r\n        let stdUpgrade: StdCardUpgrade;\r\n        for (let index = 0; index < this.upgradeList.length; index++) {\r\n            stdUpgrade = this.upgradeList[index]; \r\n            if (stdUpgrade.Quality > curQual && stdUpgrade.Quality <= this.targetQual) {\r\n                for (let j = 0; j < stdUpgrade.CostItemIds.length; j++) {\r\n                    let id: number = stdUpgrade.CostItemIds[j];\r\n                    let num: number = stdUpgrade.CostItemNums[j];\r\n                    let itemData:{index: number, num: number} = itemIdMap[id];\r\n                    if (itemData) {\r\n                        itemData.num = itemData.num + num;\r\n                    } else {\r\n                        itemData = {index: j, num: num};\r\n                        itemIdMap[id] = itemData;\r\n                    }\r\n                    this.consumeIdList[itemData.index] = id;\r\n                    this.consumeNumList[itemData.index] = itemData.num;\r\n                }\r\n                addExp += stdUpgrade.exp;\r\n            }\r\n        }\r\n        \r\n        this.addExpLab.string = `+${addExp}`;\r\n\r\n        let costItem: CostItem;\r\n        let node: Node;\r\n        for (let index = 0; index < this.costCont.children.length; index++) {\r\n            node = this.costCont.children[index];\r\n            if (index < this.consumeIdList.length) {\r\n                node.active = true;\r\n                costItem = node.getComponent(CostItem) || node.addComponent(CostItem);\r\n                costItem.SetData(this.consumeIdList[index], this.consumeNumList[index], \"#D64532\");\r\n            } else {\r\n                node.active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private showUpgradeResult(cardData: proto.base.IBattleCard, change: number): void {\r\n        let oldCardData: proto.base.IBattleCard = PlayerData.CreateCardData(cardData.cardId, cardData.quality - change, cardData.id);\r\n        this.upgradeResultCont.active = true;\r\n        this.upgradeResultMaskBtn.interactable = false;\r\n        this.upgradeResultEffect.node.active = false;\r\n        this.upgradeResultCard.SetData(oldCardData);\r\n        let maskOpacity: UIOpacity = this.upgradeResultMaskBtn.node.getComponent(UIOpacity);\r\n        maskOpacity.opacity = 0;\r\n        this.upgradeResultCard.node.scale = v3(0.5, 0.5);\r\n        tween(maskOpacity)\r\n        .to(0.33,{opacity:127.5})\r\n        .start();\r\n        tween(this.upgradeResultCard.node)\r\n        .to(0.5,{scale:v3(1.5, 1.5)}, { easing: easing.backOut })\r\n        .call(() => {\r\n            let animNam: string = `LVUP_${cardData.quality}`;\r\n            this.upgradeResultEffect.node.active = true;\r\n            this.upgradeResultEffect.clearAnimation();\r\n            this.upgradeResultEffect.setAnimation(0, animNam, false);\r\n        })\r\n        .start();\r\n\r\n        this.scheduleOnce(() => {\r\n            this.upgradeResultCard.SetData(cardData);   \r\n        }, 2.5);\r\n\r\n        tween(this.upgradeResultCard.node)\r\n        .delay(2.5)\r\n        .to(0.75,{scale:v3(2, 2)}, { easing: easing.backOut })\r\n        .to(0.75,{scale:v3(1.5, 1.5)}, { easing: easing.backOut })\r\n        .call(() => {\r\n            this.upgradeResultMaskBtn.interactable = true;\r\n        })\r\n        .start();\r\n    }\r\n}"]}