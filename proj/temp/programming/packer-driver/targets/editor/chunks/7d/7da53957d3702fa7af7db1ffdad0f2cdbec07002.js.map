{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cardCollect/CardCollectPanel.ts"],"names":["CardCollectPanel","Button","Label","Sprite","UITransform","path","SpriteFrame","ScrollView","sp","Widget","SpriteLabel","RollViewDir","VList","Panel","CfgMgr","StdProcessBoxType","ThingName","CardCollectLvContItem","folder_item","ResMgr","PlayerData","EventMgr","Evt_Box_Update","Evt_Item_Change","Evt_Upgrade_Award_Update","CardCollectBoxCardItem","Req","Route","Session","MsgPanel","DateUtils","ItemUtil","CardCollectQualItem","Goto","prefab","lvLab","helpBtn","lvList","awardIcon","awardLvLab","awardBtn","boxCont","boxIcon","boxNameImg","boxItemIcon","boxItemNumLab","boxBtn","limitTimeCont","limitTimeLab","awardCardList","hlepCont","hlepCloseBtn","hlepMask","qualList","panelMsk","addExpEffect","addExpNumLab","lvAwardList","curLv","curBigPrizePreview","boxData","boxCfg","boxEndTime","awardCardDatas","upgradeShowCfgList","curLvResult","onLoad","find","addComponent","font","initVisible","initVisbleLvList","bind","updateCell","updateLvCell","updateCardCell","clickCell","awardCellClick","awardCardInitView","updateQualCell","active","Skeleton","string","node","on","EventType","CLICK","onBtnClick","CloseBy","GetPlayerLevelArwardList","qualCfgList","GetCardUpgradeShowList","slice","length","cellCount","onShow","onItemChange","onUpdateBox","onUpgradeAwardUpdate","SCROLLING","onLvListScrolling","onHide","off","flush","updateLvCont","levelBefore","levelExpChanged","clearAnimation","setAnimation","setCompleteListener","levelAfter","toString","showUpEffect","defRollIndex","miniLv","maxLv","index","stdPlayerLevelAward","stdMini","stdPlayerLevel","stdMax","sectionList","Level","scrollToIndex","updateBox","update","dt","time","ServerTime","day","Math","floor","FormatTime","GetNextLimitBoxProcess","btn","openBox","changeMap","CostIDs","cell","cellInfo","awardData","cardData","cardId","bg","getChildByName","widget","getComponent","cont","getChildByPath","contTrans","contR","getBoundingBoxToWorld","trans","right","width","xMax","rollDir","isBouncing","console","log","findCentreLvCell","getAward","lv","player","level","getAwardList","Left","cellNameList","cellIinfoList","visibleCellInfoList","stdPlayerAwardLevel","push","cellName","lineNum","targetLv","cellNodeList","visibleCellList","name","lvCom","playUpEffect","scheduleOnce","lvCellClick","GetUpgradeAward","stdCardDeliver","rewardType","battlecard","GetBattleCardDeliver","rewardId","CardID","lvContItem","SetData","None","lvListCenterWorld","worldPosition","centreCell","minDistance","Infinity","cellWorldPos","distance","abs","x","checkIndex","cellIinfo","lvBigPrize","centreCellWorldPos","Right","findRightBigPrize","findLeftBigPrize","bigPrizePreview","Grandprize","iconStr","numNum","RewardPool","join","icon","RewardID","stdItem","Getitem","Icon","RewardNumber","LoadResAbSub","res","spriteFrame","boxCardItem","isGet","GetCurStdBoxProcess","GetBoxProcessData","ID","ShowType","GetItemCount","BoxType","LimitBox","DateStringToTime","EndTime","color","fromHEX","RewardIDs","CreateCardData","CardQuality","rewardData","rewards","rewardIndex","qualItem","getNum","Show","startTime","StartTime","endTime","CheckThingConsumes","CostNums","data","boxId","Send"],"mappings":"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","sourcesContent":["import { Node, Button, Label, Sprite, UITransform, path, SpriteFrame, Rect, v2, Vec3, ScrollView, Vec2, sp, tween, v3, easing, RichText, Widget} from \"cc\";\r\nimport { SpriteLabel } from \"../../component/SpriteLabel\";\r\nimport { CellInfo, RollViewDir, VList } from \"../../component/VList\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { CfgMgr, StdBattleCardDelivery, StdCardUpgradeShow, StdItem, StdPlayerLevel, StdPlayerLevelAward, StdProcessBox, StdProcessBoxType, ThingName } from \"../../manager/CfgMgr\";\r\nimport { CardCollectLvContItem } from \"./CardCollectLvContItem\";\r\nimport { folder_item, ResMgr } from \"../../manager/ResMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { EventMgr, Evt_Box_Update, Evt_Item_Change, Evt_Player_Level_Update, Evt_Upgrade_Award_Update } from \"../../manager/EventMgr\";\r\nimport { CardCollectBoxCardItem } from \"./CardCollectBoxCardItem\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport { ItemUtil } from \"../../utils/ItemUtils\";\r\nimport { CardCollectQualItem } from \"./CardCollectQualItem\";\r\nimport { Goto } from \"../../DL\";\r\n\r\nexport class CardCollectPanel extends Panel {\r\n    protected prefab: string = \"prefabs/cardCollect/CardCollectPanel\";\r\n    private lvLab: SpriteLabel;\r\n    private helpBtn: Button;\r\n    private lvList: VList;\r\n    private awardIcon: Sprite;\r\n    private awardLvLab: Label;\r\n    private awardBtn: Button;\r\n    private boxCont: Node;\r\n    private boxIcon: Sprite;\r\n    private boxNameImg: Sprite;\r\n    private boxItemIcon: Sprite;\r\n    private boxItemNumLab: Label;\r\n    private boxBtn: Button;\r\n    private limitTimeCont: Node;\r\n    private limitTimeLab: Label;\r\n    private awardCardList: VList;\r\n    private hlepCont: Node;\r\n    private hlepCloseBtn: Button;\r\n    private hlepMask: Button;\r\n    private qualList: VList;\r\n    private panelMsk: Node;\r\n    private addExpEffect: sp.Skeleton;\r\n    private addExpNumLab: SpriteLabel;\r\n    private lvAwardList: StdPlayerLevelAward[];\r\n    private curLv: number = 0;\r\n    private curBigPrizePreview: StdPlayerLevel;\r\n    private boxData: proto.base.IProcessBoxReward;\r\n    private boxCfg: StdProcessBox;\r\n    private boxEndTime: number;\r\n    private awardCardDatas: {cardData: proto.base.IBattleCard, isGet: boolean}[];\r\n    private upgradeShowCfgList: StdCardUpgradeShow[];\r\n    private curLvResult: proto.pb.PlayerLevelExpChangedPush;\r\n    protected onLoad() {\r\n        this.lvLab = this.find(\"topLvCont/lvCont/lvLab\").addComponent(SpriteLabel);\r\n        this.lvLab.font = \"sheets/numberImg/num1\";\r\n        this.helpBtn = this.find(\"topLvCont/helpBtn\", Button);\r\n        this.lvList = this.find(\"lvList\", VList);\r\n        this.lvList.initVisible = this.initVisbleLvList.bind(this);\r\n        this.lvList.updateCell = this.updateLvCell.bind(this);\r\n        this.awardIcon = this.find(\"bigPrizeCont/awardIcon\", Sprite);\r\n        this.awardBtn = this.find(\"bigPrizeCont/awardIcon\", Button);\r\n        this.awardLvLab = this.find(\"bigPrizeCont/awardLvLab\", Label);\r\n\r\n        this.boxCont = this.find(\"boxCont\");\r\n        this.boxBtn = this.find(\"boxCont/box/boxBtn\", Button);\r\n        this.boxIcon = this.find(\"boxCont/box/boxBtn/boxIcon\", Sprite);\r\n        this.boxNameImg = this.find(\"boxCont/box/boxBtn/boxNameImg\", Sprite);\r\n        this.boxItemIcon = this.find(\"boxCont/box/boxItemCont/boxItemIcon\", Sprite);\r\n        this.boxItemNumLab = this.find(\"boxCont/box/boxItemCont/boxItemNumLab\", Label);\r\n        this.limitTimeCont = this.find(\"boxCont/box/limitTimeCont\");\r\n        this.limitTimeLab = this.find(\"boxCont/box/limitTimeCont/limitTimeLab\", Label);\r\n        \r\n        this.awardCardList = this.find(\"boxCont/awardCardList\", VList);\r\n        this.awardCardList.updateCell = this.updateCardCell.bind(this);\r\n        this.awardCardList.clickCell = this.awardCellClick.bind(this);\r\n        this.awardCardList.initVisible = this.awardCardInitView.bind(this);\r\n        this.hlepCont = this.find(\"hlepCont\");\r\n        this.hlepCloseBtn = this.find(\"hlepCont/cont/closeBtn\", Button);\r\n        this.hlepMask = this.find(\"hlepCont/mask\", Button);\r\n        this.qualList = this.find(\"hlepCont/cont/qualList\", VList);\r\n        this.qualList.updateCell = this.updateQualCell.bind(this);\r\n        this.panelMsk = this.find(\"panelMsk\");\r\n        this.hlepCont.active = false;\r\n\r\n        this.addExpEffect = this.find(\"addExpEffect\", sp.Skeleton);\r\n        this.addExpNumLab = this.find(\"addExpEffect/addExpNumLab\").addComponent(SpriteLabel);\r\n        this.addExpNumLab.font = \"sheets/numberImg/num2\";\r\n        this.addExpNumLab.string = \"10\";\r\n        this.addExpEffect.node.active = false;\r\n        \r\n        this.boxBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.helpBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.hlepCloseBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.hlepMask.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.CloseBy(\"closeBtn\");\r\n        this.lvAwardList = CfgMgr.GetPlayerLevelArwardList();\r\n        let qualCfgList: StdCardUpgradeShow[] = CfgMgr.GetCardUpgradeShowList();\r\n        this.upgradeShowCfgList = qualCfgList.slice(1, qualCfgList.length);\r\n        this.qualList.cellCount = this.upgradeShowCfgList.length;\r\n    }\r\n\r\n    protected onShow(): void {\r\n       EventMgr.on(Evt_Item_Change, this.onItemChange, this);\r\n       EventMgr.on(Evt_Box_Update, this.onUpdateBox, this);\r\n       EventMgr.on(Evt_Upgrade_Award_Update, this.onUpgradeAwardUpdate, this);\r\n       this.lvList.node.on(ScrollView.EventType.SCROLLING, this.onLvListScrolling, this);\r\n    }\r\n\r\n    protected onHide(): void {\r\n        EventMgr.off(Evt_Item_Change, this.onItemChange, this);\r\n        EventMgr.off(Evt_Box_Update, this.onUpdateBox, this);\r\n        EventMgr.off(Evt_Upgrade_Award_Update, this.onUpgradeAwardUpdate, this);\r\n        this.lvList.node.off(ScrollView.EventType.SCROLLING, this.onLvListScrolling, this);\r\n    }\r\n\r\n    public flush(curLvResult: proto.pb.PlayerLevelExpChangedPush = null): void {\r\n        this.curLvResult = curLvResult;\r\n        this.hlepCont.active = false;\r\n        if (this.curLvResult) {\r\n            //升级结果跳转过来的有动画表现，防止动画进行中操纵滚动条\r\n            this.panelMsk.active = true;\r\n            this.updateLvCont(this.curLvResult.levelBefore);\r\n            this.addExpEffect.node.active = true;\r\n            this.addExpNumLab.string = `+${this.curLvResult.levelExpChanged}`;\r\n            this.addExpEffect.clearAnimation();\r\n            this.addExpEffect.setAnimation(0, \"animation\", false);\r\n            this.addExpEffect.setCompleteListener(() => {\r\n                this.addExpEffect.node.active = false;\r\n                this.lvLab.string = this.curLvResult.levelAfter.toString();\r\n                this.showUpEffect();\r\n            });\r\n        } else {\r\n            this.panelMsk.active = false;\r\n            this.updateLvCont(0);\r\n        }\r\n        let defRollIndex: number = 0;\r\n        let miniLv: number;\r\n        let maxLv: number;\r\n        for (let index = 0; index < this.lvAwardList.length; index++) {\r\n            let stdPlayerLevelAward: StdPlayerLevelAward = this.lvAwardList[index];\r\n            let stdMini: StdPlayerLevel = stdPlayerLevelAward.stdPlayerLevel;\r\n            let stdMax: StdPlayerLevel;\r\n            if (stdPlayerLevelAward.sectionList && stdPlayerLevelAward.sectionList.length) {\r\n                stdMax = stdPlayerLevelAward.sectionList[stdPlayerLevelAward.sectionList.length - 1];\r\n            }\r\n            miniLv = stdMini.Level;\r\n            maxLv = stdMax ? stdMax.Level : stdMini.Level;\r\n            if (this.curLv >= miniLv && this.curLv <= maxLv) {\r\n                defRollIndex = index;\r\n                break;\r\n            }\r\n        }\r\n        this.lvList.scrollToIndex(defRollIndex);\r\n        this.updateBox();\r\n        \r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        if (this.boxEndTime > 0) {\r\n            let time: number = this.boxEndTime - DateUtils.ServerTime;\r\n            if (time > 0) {\r\n                let day: number = Math.floor(time / 86400);\r\n                if (day >= 1) {\r\n                    this.limitTimeLab.string = `${day}天` + DateUtils.FormatTime(time - day * 86400, \"%{hh}:%{mm}:%{ss}\");\r\n                } else {\r\n                    this.limitTimeLab.string = DateUtils.FormatTime(time, \"%{hh}:%{mm}:%{ss}\");\r\n                }\r\n            }else {\r\n                this.limitTimeLab.string = \"活动结束\";\r\n                if (PlayerData.GetNextLimitBoxProcess()) this.updateBox();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch(btn) {\r\n            case this.boxBtn:\r\n                this.openBox();\r\n                break;\r\n            case this.helpBtn:\r\n                this.hlepCont.active = true;\r\n                break;\r\n            case this.hlepCloseBtn:\r\n            case this.hlepMask:\r\n                this.hlepCont.active = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onItemChange(changeMap:{[key: string]: number}): void {\r\n        if (this.boxCfg){\r\n            for (let index = 0; index < this.boxCfg.CostIDs.length; index++) {\r\n                if (changeMap[this.boxCfg.CostIDs[index]]) {\r\n                    this.updateBox();\r\n                    break;\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    private awardCellClick(cell: Node, cellInfo: CellInfo): void {\r\n        let awardData: {cardData: proto.base.IBattleCard, isGet: boolean} = this.awardCardDatas[cellInfo.index];\r\n        Goto(\"CardTipsPanel\", awardData.cardData.cardId);\r\n    }\r\n\r\n    private awardCardInitView(): void {\r\n        let bg: Node = this.awardCardList.node.getChildByName(\"awardCardBg\");\r\n        let widget: Widget = bg.getComponent(Widget);\r\n        let cont: Node = this.awardCardList.node.getChildByPath(\"view/content\");\r\n        let contTrans: UITransform = cont.getComponent(UITransform);\r\n        let contR: Rect = contTrans.getBoundingBoxToWorld();\r\n        let trans: UITransform = this.node.getComponent(UITransform);\r\n        widget.right = trans.width - contR.xMax - 30;\r\n    }\r\n\r\n    private onLvListScrolling(rollDir: RollViewDir, isBouncing: boolean): void {\r\n        \r\n        console.log(\"滚动方向----》\" + RollViewDir[rollDir] + \" 是否回弹\" + isBouncing)\r\n        if (isBouncing) {\r\n            return;\r\n        }\r\n        this.findCentreLvCell(rollDir);\r\n    }\r\n\r\n    private onUpgradeAwardUpdate(getAward: proto.base.IThing): void {\r\n        if (getAward) {\r\n            Goto(\"RewardTips\", [getAward]);\r\n        }\r\n        this.updateLvCont();\r\n    }\r\n\r\n    private updateLvCont(lv: number = 0): void{\r\n        this.curLv = lv || PlayerData.player.level;\r\n        this.lvList.cellCount = this.lvAwardList.length;\r\n        this.lvLab.string = this.curLv.toString();\r\n    }\r\n\r\n    private onUpdateBox(getAwardList: proto.base.IThing[]): void {\r\n        if (getAwardList && getAwardList.length) {\r\n            Goto(\"RewardTips\", getAwardList);\r\n        }\r\n        this.updateBox();\r\n    }\r\n\r\n    private initVisbleLvList(): void {\r\n        this.findCentreLvCell(RollViewDir.Left);\r\n    }\r\n\r\n    private showUpEffect(): void {\r\n        let cellNameList: string[] = []\r\n        let cellIinfoList: CellInfo[] = this.lvList.visibleCellInfoList;\r\n        for (let cellInfo of cellIinfoList) {\r\n            let stdPlayerAwardLevel: StdPlayerLevelAward = this.lvAwardList[cellInfo.index];\r\n            if (stdPlayerAwardLevel.stdPlayerLevel.Level >= this.curLvResult.levelBefore && stdPlayerAwardLevel.stdPlayerLevel.Level <= this.curLvResult.levelAfter) {\r\n                cellNameList.push(cellInfo.cellName);\r\n            } else {\r\n                let lineNum: number = stdPlayerAwardLevel.sectionList ? stdPlayerAwardLevel.sectionList.length + 1 : 0;\r\n                for (let index = 0; index < lineNum; index++) {\r\n                    let targetLv: number = stdPlayerAwardLevel.stdPlayerLevel.Level + (index + 1);\r\n                    if (this.curLvResult.levelBefore == targetLv) {\r\n                        cellNameList.push(cellInfo.cellName);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            \r\n            \r\n        }\r\n        \r\n        \r\n        let cellNodeList: Node[] = this.lvList.visibleCellList;\r\n        let time: number = 0;\r\n        for (let index = 0; index < cellNameList.length; index++) {\r\n            for (let cell of cellNodeList) {\r\n                if (cell.name == cellNameList[index]) {\r\n                    let lvCom: CardCollectLvContItem = cell.getComponent(CardCollectLvContItem);\r\n                    time = lvCom.playUpEffect(time, this.curLvResult.levelAfter);\r\n                    console.log(\"播放升级特效---->\" + cell.name + \"----->\" + time)\r\n                }\r\n            }\r\n            \r\n        }\r\n        this.scheduleOnce(()=>{\r\n            this.panelMsk.active = false;\r\n            this.curLv = this.curLvResult.levelAfter;\r\n            this.curLvResult = null;\r\n            //this.updateLvCont();\r\n        }, time);\r\n        \r\n    }\r\n\r\n    private lvCellClick(cell: Node, cellInfo: CellInfo): void {\r\n        let stdPlayerAwardLevel = this.lvAwardList[cellInfo.index];\r\n        let awardData = PlayerData.GetUpgradeAward(stdPlayerAwardLevel.stdPlayerLevel.Level);\r\n        let stdCardDeliver: StdBattleCardDelivery;\r\n        //点击已获取\r\n        if (awardData) {\r\n            if (awardData.rewardType == ThingName.battlecard) {\r\n                stdCardDeliver = CfgMgr.GetBattleCardDeliver(awardData.rewardId);\r\n                if (stdCardDeliver) {\r\n                    Goto(\"CardTipsPanel\", stdCardDeliver.CardID);\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    private updateLvCell(cell: Node, cellInfo: CellInfo): void {\r\n        let stdPlayerAwardLevel: StdPlayerLevelAward = this.lvAwardList[cellInfo.index];\r\n        let lvContItem: CardCollectLvContItem = cell.getComponent(CardCollectLvContItem) || cell.addComponent(CardCollectLvContItem);\r\n        lvContItem.SetData(stdPlayerAwardLevel, this.curLv, cellInfo.index);\r\n        //this.lvPreview();\r\n    }\r\n\r\n    private findCentreLvCell(rollDir: RollViewDir = RollViewDir.None): void {\r\n        let lvListCenterWorld: Vec3 = this.lvList.node.worldPosition;\r\n        let cellNodeList: Node[] = this.lvList.visibleCellList;\r\n        let centreCell: Node = null;\r\n        let minDistance = Infinity;\r\n        for (let cell of cellNodeList) {\r\n            let cellWorldPos = cell.worldPosition;\r\n            let distance = Math.abs(cellWorldPos.x - lvListCenterWorld.x);\r\n            if (distance < minDistance) {\r\n                minDistance = distance;\r\n                centreCell = cell;\r\n            }\r\n        }\r\n        if (centreCell) {\r\n            let checkIndex: number = -1;\r\n            let cellIinfo: CellInfo[] = this.lvList.visibleCellInfoList;\r\n            for (let index = 0; index < cellIinfo.length; index++) {\r\n                if (cellIinfo[index].cellName == centreCell.name) {\r\n                    checkIndex = cellIinfo[index].index;\r\n                    break;\r\n                }\r\n                \r\n            }\r\n            if (checkIndex > -1) {\r\n                let lvBigPrize: StdPlayerLevel;\r\n                if (rollDir == RollViewDir.None) {\r\n                    let centreCellWorldPos = centreCell.worldPosition;\r\n                    if (centreCellWorldPos.x < lvListCenterWorld.x) {\r\n                        rollDir = RollViewDir.Left;\r\n                    } else {\r\n                        rollDir = RollViewDir.Right;\r\n                    }\r\n                }\r\n                \r\n                if (rollDir == RollViewDir.Left) {\r\n                    lvBigPrize = this.findRightBigPrize(checkIndex);\r\n                    if (!lvBigPrize) {\r\n                        lvBigPrize = this.findLeftBigPrize(checkIndex);\r\n                    }\r\n                } else if (rollDir == RollViewDir.Right) {\r\n                    lvBigPrize = this.findLeftBigPrize(checkIndex);\r\n                    if (!lvBigPrize) {\r\n                        lvBigPrize = this.findRightBigPrize(checkIndex);\r\n                    }\r\n                    \r\n                }\r\n                if (lvBigPrize) this.bigPrizePreview(lvBigPrize);   \r\n            }\r\n        }\r\n    }\r\n\r\n    private findLeftBigPrize(checkIndex: number): StdPlayerLevel {\r\n        let curLv: StdPlayerLevel;\r\n        for (let index = checkIndex; index >= 0; index--) {\r\n            curLv = this.lvAwardList[index].stdPlayerLevel;\r\n            if (curLv.Grandprize == 1) {\r\n                return curLv;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private findRightBigPrize(checkIndex: number): StdPlayerLevel {\r\n        let curLv: StdPlayerLevel;\r\n        for (let index = checkIndex; index < this.lvAwardList.length; index++) {\r\n            curLv = this.lvAwardList[index].stdPlayerLevel;\r\n            if (curLv.Grandprize == 1) {\r\n                return curLv;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //大奖预览\r\n    private bigPrizePreview(stdPlayerLevel: StdPlayerLevel): void {\r\n        if (!this.curBigPrizePreview || this.curBigPrizePreview.Level != stdPlayerLevel.Level) {\r\n            this.curBigPrizePreview = stdPlayerLevel;\r\n            let iconStr: string;\r\n            let numNum: number;\r\n            \r\n            if (this.curBigPrizePreview.RewardPool > 0) {\r\n                iconStr = path.join(\"sheets/cardCollect\", this.curBigPrizePreview.icon, \"spriteFrame\");\r\n            } else {\r\n                if (this.curBigPrizePreview.RewardID > 0) {\r\n                    let stdItem: StdItem = CfgMgr.Getitem(this.curBigPrizePreview.RewardID);\r\n                    if (stdItem) {\r\n                        iconStr = path.join(folder_item, stdItem.Icon, \"spriteFrame\");\r\n                        numNum = this.curBigPrizePreview.RewardNumber[0];\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            this.awardLvLab.string = `${this.curBigPrizePreview.Level}级可获得`;\r\n            if (iconStr) {\r\n                this.awardIcon.node.active = true;\r\n                this.awardLvLab.node.active = true;\r\n                ResMgr.LoadResAbSub(iconStr, SpriteFrame, (res: SpriteFrame) => {\r\n                    this.awardIcon.spriteFrame = res;\r\n                });\r\n                \r\n            } else {\r\n                this.awardIcon.node.active = false;\r\n                \r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private updateCardCell(cell: Node, cellInfo: CellInfo): void {\r\n        let boxCardItem: CardCollectBoxCardItem = cell.getComponent(CardCollectBoxCardItem) || cell.addComponent(CardCollectBoxCardItem);\r\n        boxCardItem.SetData(this.awardCardDatas[cellInfo.index]);\r\n    }\r\n\r\n    private updateBox(isGet: boolean = false): void {\r\n        this.boxCfg = PlayerData.GetCurStdBoxProcess();\r\n        this.boxEndTime = 0;\r\n        if (this.boxCfg) {\r\n            this.boxCont.active = true;\r\n            this.boxData = PlayerData.GetBoxProcessData(this.boxCfg.ID);\r\n            ResMgr.LoadResAbSub(path.join(\"sheets/cardCollect\", `boxIcon${this.boxCfg.ShowType}`, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n                this.boxIcon.spriteFrame = res;\r\n            });\r\n            ResMgr.LoadResAbSub(path.join(\"sheets/cardCollect\", `boxName${this.boxCfg.ShowType}`, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n                this.boxNameImg.spriteFrame = res;\r\n            });\r\n            let stdItem: StdItem = CfgMgr.Getitem(this.boxCfg.CostIDs[0]);\r\n            ResMgr.LoadResAbSub(path.join(folder_item, stdItem.Icon, \"spriteFrame\"), SpriteFrame, (res) => {\r\n                this.boxItemIcon.spriteFrame = res;\r\n            });\r\n            \r\n            this.boxItemNumLab.string = `${PlayerData.GetItemCount(this.boxCfg.CostIDs[0])}`;\r\n            if (this.boxCfg.BoxType == StdProcessBoxType.LimitBox) {\r\n                this.boxEndTime = DateUtils.DateStringToTime(this.boxCfg.EndTime);\r\n                this.limitTimeLab.color.fromHEX(\"#C22424\");\r\n            } else {\r\n                this.limitTimeLab.color.fromHEX(\"#432809\");\r\n                this.limitTimeLab.string = \"不限时\";\r\n            }\r\n            this.awardCardDatas = [];\r\n            for (let index = 0; index < this.boxCfg.RewardIDs.length; index++) {\r\n                let stdCardDeliver: StdBattleCardDelivery = CfgMgr.GetBattleCardDeliver(this.boxCfg.RewardIDs[index]);\r\n                if (stdCardDeliver) {\r\n                    let cardData: proto.base.IBattleCard = PlayerData.CreateCardData(stdCardDeliver.CardID, stdCardDeliver.CardQuality);\r\n                    let isGet: boolean = false;\r\n                    if (this.boxData) {\r\n                        for (let rewardData of this.boxData.rewards) {\r\n                            if (rewardData.rewardIndex == index) {\r\n                                isGet = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.awardCardDatas.push({cardData: cardData, isGet: isGet});\r\n                }\r\n                \r\n            }\r\n            this.awardCardList.cellCount = this.awardCardDatas.length;\r\n            //this.awardCardInitView();\r\n        } else {\r\n            this.boxCfg = null;\r\n            this.boxCont.active = false;\r\n        }\r\n    }\r\n\r\n    private updateQualCell(cell: Node, cellInfo: CellInfo): void {\r\n        let qualItem: CardCollectQualItem = cell.getComponent(CardCollectQualItem) || cell.addComponent(CardCollectQualItem);\r\n        qualItem.SetData(this.upgradeShowCfgList[cellInfo.index]);\r\n    }\r\n\r\n    private openBox(): void {\r\n        if (this.boxData) {\r\n            let getNum: number = 0;\r\n            for (let index = 0; index < this.boxCfg.RewardIDs.length; index++) {\r\n                for (let rewardData of this.boxData.rewards) {\r\n                    if (rewardData.rewardIndex == index) getNum ++;\r\n                }\r\n            }\r\n            if (getNum >= this.boxCfg.RewardIDs.length) {\r\n                MsgPanel.Show(\"已全部领取\");\r\n                return;\r\n            }\r\n        }\r\n        if (this.boxCfg.BoxType == StdProcessBoxType.LimitBox) {\r\n            let startTime: number = DateUtils.DateStringToTime(this.boxCfg.StartTime);\r\n            if (DateUtils.ServerTime < startTime) {\r\n                MsgPanel.Show(\"宝箱开启时间未到\");\r\n                return;\r\n            }\r\n            let endTime = DateUtils.DateStringToTime(this.boxCfg.EndTime);\r\n            if (DateUtils.ServerTime >= endTime) {\r\n                MsgPanel.Show(\"宝箱开启时间已结束\");\r\n                return;\r\n            }\r\n        } \r\n        if(!ItemUtil.CheckThingConsumes(null, this.boxCfg.CostIDs, this.boxCfg.CostNums, true)){\r\n            return;\r\n        }\r\n        let data = new Req['logic.protocol.processboxopen']();\r\n        data.boxId = this.boxCfg.ID;\r\n        Session.Send(Route['logic.protocol.processboxopen'], data);\r\n        console.log(`发送开启箱子---->${data.boxId}`);\r\n    }\r\n}"]}