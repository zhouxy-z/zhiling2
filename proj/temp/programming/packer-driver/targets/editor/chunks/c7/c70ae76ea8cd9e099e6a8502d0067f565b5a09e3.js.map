{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/login/LoginModule.ts"],"names":["LoginModule","Http","Session","Second","LoginPanel","PlayerData","Req","Ret","Route","CfgMgr","ItemType","EventMgr","DateUtils","GameSet","ServerPanel","constructor","intervalSync","loop","on","PlayerLoginPush","onPlayerLoginPush","globalCfg","Show","onLogin","bind","data","info","decode","server","player","key","itemCounts","Object","hasOwnProperty","call","std","Getitem","parseInt","Itemtpye","money","items","console","log","cards","battleCards","Send","player_data","Call","loginHost","post","user","result","Post","code","token","waiting_nums","uuid","Date","getTime","Build","syncServerTime","clearInterval","setInterval","sendServerTimeSync","off","onServertime","ServerTime","res","Math","floor","timestamp"],"mappings":"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","sourcesContent":["import { Http } from \"../../net/Http\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { Second, Utils } from \"../../utils/Utils\";\r\nimport { LoginPanel } from \"./LoginPanel\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Req, Ret, Route } from \"../../net/Protocol\";\r\nimport { CfgMgr, ItemType } from \"../../manager/CfgMgr\";\r\nimport { EventMgr } from \"../../manager/EventMgr\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport { GameSet } from \"../../manager/GameSet\";\r\nimport { ServerPanel } from \"./ServerPanel\";\r\n\r\nexport class LoginModule {\r\n    constructor() {\r\n        Session.on(Route.PlayerLoginPush, this.onPlayerLoginPush, this);\r\n        if (GameSet.globalCfg) {\r\n            ServerPanel.Show(this.onLogin.bind(this));\r\n        } else {\r\n            LoginPanel.Show(this.onLogin.bind(this));\r\n        }\r\n    }\r\n\r\n    protected onPlayerLoginPush(data: any) {\r\n        let info = Ret.PlayerLoginPush.decode(data);\r\n        PlayerData.server = info.server;\r\n        PlayerData.player = info.data;\r\n        for (const key in info.data.itemCounts) {\r\n            if (Object.hasOwnProperty.call(info.data.itemCounts, key)) {\r\n                let std = CfgMgr.Getitem(parseInt(key))\r\n                if (std && std.Itemtpye == ItemType.money) {\r\n                    PlayerData.items[key] = info.data.itemCounts[key] / 10000;\r\n                }\r\n            }\r\n        }\r\n        console.log(\"onPlayerLoginPush\", info);\r\n        PlayerData.cards = info.data.battleCards || [];\r\n        Session.Send(Route[\"user.protocol.getuserinfo\"]);\r\n\r\n        let player_data = new Req[\"player.protocol.getplayerdata\"]();\r\n        player_data.server = PlayerData.server;\r\n        Session.Send(Route[\"player.protocol.getplayerdata\"], player_data);\r\n\r\n        Session.Send(Route[\"logic.protocol.getplayerlevelrewards\"]);\r\n        Session.Send(Route[\"logic.protocol.getprocessboxrewards\"]);\r\n        EventMgr.Call(\"reset_guide\");\r\n    }\r\n\r\n    protected async onLogin(loginHost: string, server: string, post: number, user: string) {\r\n        console.log(\"登录账号\", loginHost, server, post, user);\r\n        let result = await Http.Post(loginHost, { code: user });\r\n        if (result?.code == 200) {\r\n            let data = result.data;\r\n            console.log(\"登录返回\", data.token, data.waiting_nums);\r\n            if (data.waiting_nums) {\r\n                await Second(2);\r\n                this.onLogin(loginHost, server, post, user);\r\n            } else if (data.token) {\r\n                // if (EDITOR) ProtocolInit();\r\n                let uuid = (new Date().getTime()) + \"\";\r\n                console.log(\"连接socket\", uuid);\r\n                await Session.Build(server, post, \"/\", uuid, user, data.token);\r\n                this.syncServerTime();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private intervalSync: any;\r\n    private loop = 0;\r\n    protected syncServerTime() {\r\n        if (this.intervalSync) {\r\n            clearInterval(this.intervalSync);\r\n        }\r\n        this.intervalSync = setInterval(this.sendServerTimeSync.bind(this), 1000);\r\n        Session.off(Route[\"gate.protocol.servertime\"], this.onServertime, this);\r\n        Session.on(Route[\"gate.protocol.servertime\"], this.onServertime, this);\r\n        Session.Send(Route[\"gate.protocol.servertime\"]);\r\n    }\r\n    //发送服务器时间同步\r\n    protected sendServerTimeSync(): void {\r\n        DateUtils.ServerTime++;\r\n        this.loop++;\r\n        if (this.loop >= 10) {\r\n            Session.Send(Route[\"gate.protocol.servertime\"]);\r\n            this.loop = 0;\r\n        }\r\n    }\r\n    //服务器时间同步下发\r\n    protected onServertime(data: any): void {\r\n        let result = Ret[\"gate.protocol.servertime\"].decode(data);\r\n        if (result.res.code != 200) return;\r\n        DateUtils.ServerTime = Math.floor(result.timestamp);\r\n        console.log(\"onServerTime\", DateUtils.ServerTime)\r\n    }\r\n}"]}