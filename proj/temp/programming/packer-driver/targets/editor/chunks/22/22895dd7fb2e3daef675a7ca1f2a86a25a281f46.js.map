{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/SettingCardsGroupPanel%20copy.ts"],"names":["SettingCardsGroupPanel","Button","EditBox","CfgMgr","Session","Panel","AutoScroller","PlayerData","Card","Protocol","MsgPanel","prefab","tile","scroller","noneListCont","okBtn","setName","limit","datas","selects","onLoad","CloseBy","find","SetHandle","updateCardItem","bind","node","on","onSelect","EventType","CLICK","onOk","flush","args","iterator","cards","push","sort","a","b","a_cost","GetCard","cardId","Cost","b_cost","UpdateDatas","onShow","Send","getplayerdecks","item","data","card","getComponent","addComponent","SetData","name","string","cardNameList","indexOf","Show","send_data","setdeckcards","cardIds","deckName","index","is_select","getSelectState","setSelect","id","splice","onHide"],"mappings":";;;4KAcaA,sB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAdJC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,O,OAAAA,O;;AAGRC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,O,iBAAAA,O;;AACAC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,I,iBAAAA,I;;AAEAC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,Q,iBAAAA,Q;;;;;;;;;wCAGIV,sB,GAAN,MAAMA,sBAAN;AAAA;AAAA,0BAA2C;AAAA;AAAA;AAAA,eACpCW,MADoC,GACnB,sCADmB;AAAA,eAGpCC,IAHoC;AAAA,eAIpCC,QAJoC;AAAA,eAKtCC,YALsC;AAAA,eAMtCC,KANsC;AAAA,eAOtCC,OAPsC;AAAA,eAQpCC,KARoC,GAQ5B,CAR4B;AAAA,eASpCC,KAToC,GASR,EATQ;AAAA,eAUtCC,OAVsC,GAU5B,EAV4B;AAAA;;AAapCC,QAAAA,MAAM,GAAG;AACf,eAAKC,OAAL,CAAa,UAAb;AACA,eAAKP,YAAL,GAAoB,KAAKQ,IAAL,CAAU,cAAV,CAApB;AACA,eAAKT,QAAL,GAAgB,KAAKS,IAAL,CAAU,YAAV;AAAA;AAAA,2CAAhB;AACA,eAAKT,QAAL,CAAcU,SAAd,CAAwB,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAxB;AACA,eAAKZ,QAAL,CAAca,IAAd,CAAmBC,EAAnB,CAAsB,QAAtB,EAAgC,KAAKC,QAArC,EAA+C,IAA/C;AACA,eAAKZ,OAAL,GAAe,KAAKM,IAAL,CAAU,SAAV,EAAqBpB,OAArB,CAAf;AACA,eAAKoB,IAAL,CAAU,OAAV,EAAmBrB,MAAnB,EAA2ByB,IAA3B,CAAgCC,EAAhC,CAAmC1B,MAAM,CAAC4B,SAAP,CAAiBC,KAApD,EAA2D,KAAKC,IAAhE,EAAsE,IAAtE;AAEH;;AAEMC,QAAAA,KAAK,CAAC,GAAGC,IAAJ,EAAuB;AAC/B,eAAK,MAAMC,QAAX,IAAuB;AAAA;AAAA,wCAAWC,KAAlC,EAAyC;AACrC,iBAAKjB,KAAL,CAAWkB,IAAX,CAAgBF,QAAhB;AACH;;AACD,eAAKhB,KAAL,CAAWmB,IAAX,CAAgB,CAACC,CAAD,EAAqBC,CAArB,KAA0C;AACtD,gBAAIC,MAAM,GAAG;AAAA;AAAA,kCAAOC,OAAP,CAAeH,CAAC,CAACI,MAAjB,EAAyBC,IAAtC;AACA,gBAAIC,MAAM,GAAG;AAAA;AAAA,kCAAOH,OAAP,CAAeF,CAAC,CAACG,MAAjB,EAAyBC,IAAtC;AACA,mBAAOH,MAAM,GAAGI,MAAhB;AACH,WAJD;AAKA,eAAK/B,QAAL,CAAcgC,WAAd,CAA0B,KAAK3B,KAA/B;AACH;;AAES4B,QAAAA,MAAM,GAAS;AACrB;AAAA;AAAA,kCAAQC,IAAR,CAAa;AAAA;AAAA,oCAASC,cAAtB;AACH;;AAISxB,QAAAA,cAAc,CAACyB,IAAD,EAAaC,IAAb,EAAqC;AACzD,cAAIC,IAAI,GAAGF,IAAI,CAACG,YAAL;AAAA;AAAA,2BAAX;AACA,cAAI,CAACD,IAAL,EAAWA,IAAI,GAAGF,IAAI,CAACI,YAAL;AAAA;AAAA,2BAAP;AACXF,UAAAA,IAAI,CAACG,OAAL,CAAaJ,IAAb;AACH;;AAISnB,QAAAA,IAAI,GAAG;AACb,cAAIwB,IAAI,GAAG,KAAKvC,OAAL,CAAawC,MAAb,GAAsB,KAAKxC,OAAL,CAAawC,MAAnC,GAA4C,GAAvD;;AACA,cAAG;AAAA;AAAA,wCAAWC,YAAX,CAAwBC,OAAxB,CAAgCH,IAAhC,KAAyC,CAAC,CAA7C,EAA+C;AAC3C;AAAA;AAAA,sCAASI,IAAT,CAAc,QAAd;AACA,iBAAK3C,OAAL,CAAawC,MAAb,GAAsB,EAAtB;AACA;AACH;;AACD,cAAII,SAAS,GAAG,IAAI;AAAA;AAAA,oCAASC,YAAb,EAAhB;AACAD,UAAAA,SAAS,CAACE,OAAV,GAAoB,KAAK3C,OAAzB;AACAyC,UAAAA,SAAS,CAACG,QAAV,GAAqBR,IAArB;AACA;AAAA;AAAA,kCAAQR,IAAR,CAAaa,SAAb;AACH;;AAEUhC,QAAAA,QAAQ,CAACoC,KAAD,EAAgBf,IAAhB,EAA4B;AAC3C,cAAId,KAAK,GAAGc,IAAI,CAACG,YAAL;AAAA;AAAA,2BAAZ;AACA,cAAIa,SAAS,GAAG9B,KAAK,CAAC+B,cAAN,EAAhB;AACA/B,UAAAA,KAAK,CAACgC,SAAN,CAAgB,CAACF,SAAjB;;AACA,cAAG,CAACA,SAAJ,EAAc;AACV,iBAAK9C,OAAL,CAAaiB,IAAb,CAAkB,KAAKlB,KAAL,CAAW8C,KAAX,EAAkBI,EAApC;AACH,WAFD,MAEK;AACF,iBAAKjD,OAAL,CAAakD,MAAb,CAAoB,KAAKlD,OAAL,CAAauC,OAAb,CAAqB,KAAKxC,KAAL,CAAW8C,KAAX,EAAkBI,EAAvC,CAApB,EAAgE,CAAhE;AACF;AACJ;;AAGSE,QAAAA,MAAM,CAAC,GAAGrC,IAAJ,EAAuB,CACtC;;AA5E6C,O","sourcesContent":["import { Button, EditBox, Input, Label, Node, Sprite, SpriteFrame, Toggle, UIOpacity } from \"cc\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Card } from \"./Card\";\r\nimport  base  from \"../../net/proto/BaseUtils\";\r\nimport { Protocol } from \"../../net/Protocol\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\n\r\n\r\nexport class SettingCardsGroupPanel extends Panel {\r\n    protected prefab: string = \"prefabs/cards/SettingCardsGroupPanel\";\r\n \r\n    protected tile: Label;\r\n    protected scroller: AutoScroller;\r\n    private noneListCont:Node;\r\n    private okBtn:Button;\r\n    private setName: EditBox;\r\n    protected limit = 0;\r\n    protected datas: base.IBattleCard[] = [];\r\n    private selects = [];\r\n    \r\n\r\n    protected onLoad() {\r\n        this.CloseBy(\"closeBtn\");\r\n        this.noneListCont = this.find(\"noneListCont\");\r\n        this.scroller = this.find(\"ScrollView\", AutoScroller);\r\n        this.scroller.SetHandle(this.updateCardItem.bind(this));\r\n        this.scroller.node.on('select', this.onSelect, this);\r\n        this.setName = this.find(\"setName\", EditBox);\r\n        this.find(\"okBtn\", Button).node.on(Button.EventType.CLICK, this.onOk, this);\r\n       \r\n    }\r\n\r\n    public flush(...args: any[]): void {   \r\n        for (const iterator of PlayerData.cards) {\r\n            this.datas.push(iterator)\r\n        }\r\n        this.datas.sort((a:base.IBattleCard, b:base.IBattleCard)=>{\r\n            let a_cost = CfgMgr.GetCard(a.cardId).Cost;\r\n            let b_cost = CfgMgr.GetCard(b.cardId).Cost;\r\n            return a_cost - b_cost;\r\n        })\r\n        this.scroller.UpdateDatas(this.datas);\r\n    }\r\n\r\n    protected onShow(): void {\r\n        Session.Send(Protocol.getplayerdecks)\r\n    }\r\n   \r\n\r\n\r\n    protected updateCardItem(item: Node, data: base.IBattleCard) {\r\n        let card = item.getComponent(Card);\r\n        if (!card) card = item.addComponent(Card);\r\n        card.SetData(data);\r\n    }\r\n\r\n\r\n\r\n    protected onOk() {\r\n        let name = this.setName.string ? this.setName.string : \"1\";\r\n        if(PlayerData.cardNameList.indexOf(name) != -1){\r\n            MsgPanel.Show(\"该名字已拥有\");\r\n            this.setName.string = \"\";\r\n            return;\r\n        }\r\n        let send_data = new Protocol.setdeckcards();\r\n        send_data.cardIds = this.selects;\r\n        send_data.deckName = name;\r\n        Session.Send(send_data);\r\n    }\r\n\r\n    protected  onSelect(index: number, item: Node) {\r\n        let cards = item.getComponent(Card);\r\n        let is_select = cards.getSelectState();\r\n        cards.setSelect(!is_select)\r\n        if(!is_select){\r\n            this.selects.push(this.datas[index].id)\r\n        }else{\r\n           this.selects.splice(this.selects.indexOf(this.datas[index].id), 1)\r\n        }\r\n    }\r\n\r\n\r\n    protected onHide(...args: any[]): void {\r\n    }\r\n\r\n}\r\n"]}