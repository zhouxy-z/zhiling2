{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardsGroupCheckPanel%20copy.ts"],"names":["CardsGroupCheckPanel","Button","EditBox","CfgMgr","Session","Panel","AutoScroller","PlayerData","Card","Protocol","MsgPanel","EventMgr","Evt_Card_Check_By_Name","prefab","tile","scroller","noneListCont","okBtn","setName","onLoad","CloseBy","find","SetHandle","updateCardItem","bind","node","on","EventType","CLICK","onOk","updateCards","flush","args","onShow","Send","getplayerdecks","data","console","log","list","key","Object","hasOwnProperty","call","element","push","sort","a","b","a_cost","GetCard","cardId","Cost","b_cost","UpdateDatas","item","card","getComponent","addComponent","SetData","name","string","cardNameList","indexOf","Show","getdeckcards","deckName","onHide"],"mappings":"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","sourcesContent":["import { Button, EditBox, Input, Label, Node, Sprite, SpriteFrame, Toggle, UIOpacity } from \"cc\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Card } from \"./Card\";\r\nimport  base  from \"../../net/proto/BaseUtils\";\r\nimport { Protocol } from \"../../net/Protocol\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { EventMgr, Evt_Card_Check_By_Name } from \"../../manager/EventMgr\";\r\n\r\n\r\nexport class CardsGroupCheckPanel extends Panel {\r\n    protected prefab: string = \"prefabs/cards/CardsGroupCheckPanel\";\r\n \r\n    protected tile: Label;\r\n    protected scroller: AutoScroller;\r\n    private noneListCont:Node;\r\n    private okBtn:Button;\r\n    private setName: EditBox;\r\n\r\n    protected onLoad() {\r\n        this.CloseBy(\"closeBtn\");\r\n        this.noneListCont = this.find(\"noneListCont\");\r\n        this.scroller = this.find(\"ScrollView\", AutoScroller);\r\n        this.scroller.SetHandle(this.updateCardItem.bind(this));\r\n        this.setName = this.find(\"setName\", EditBox);\r\n        this.find(\"okBtn\", Button).node.on(Button.EventType.CLICK, this.onOk, this);\r\n        EventMgr.on(Evt_Card_Check_By_Name, this.updateCards, this);\r\n       \r\n    }\r\n\r\n    public flush(...args: any[]): void {   \r\n     \r\n       \r\n    }\r\n\r\n    protected onShow(): void {\r\n        Session.Send(Protocol.getplayerdecks)\r\n    }\r\n\r\n    private updateCards(data){\r\n        console.log(\"data\", data)\r\n        \r\n        let list: base.IBattleCard[] = [];\r\n        for (const key in data) {\r\n            if (Object.hasOwnProperty.call(data, key)) {\r\n                const element = data[key];\r\n                list.push(element);\r\n            }\r\n        }\r\n        list.sort((a:base.IBattleCard, b:base.IBattleCard)=>{\r\n            let a_cost = CfgMgr.GetCard(a.cardId).Cost;\r\n            let b_cost = CfgMgr.GetCard(b.cardId).Cost;\r\n            return a_cost - b_cost;\r\n        })\r\n        this.scroller.UpdateDatas(list);\r\n    }\r\n   \r\n\r\n\r\n    protected updateCardItem(item: Node, data: base.IBattleCard) {\r\n        let card = item.getComponent(Card);\r\n        if (!card) card = item.addComponent(Card);\r\n        card.SetData(data);\r\n    }\r\n\r\n\r\n\r\n    protected onOk() {\r\n        let name = this.setName.string;\r\n        if(PlayerData.cardNameList.indexOf(name) == -1){\r\n            MsgPanel.Show(\"没有该名字\");\r\n            this.setName.string = \"\";\r\n            return;\r\n        }\r\n        let getdeckcards = new Protocol.getdeckcards();\r\n        getdeckcards.deckName = name;\r\n        Session.Send(getdeckcards);\r\n    }\r\n\r\n\r\n\r\n    protected onHide(...args: any[]): void {\r\n    }\r\n\r\n}\r\n"]}