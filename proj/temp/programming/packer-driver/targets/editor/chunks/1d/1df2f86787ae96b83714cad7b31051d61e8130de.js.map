{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/manager/CfgMgr.ts"],"names":["CfgMgr","ThingTypeName","JsonAsset","assetManager","ResMgr","Utils","DateUtils","load","resAb","getBundle","asset","LoadResAbSub","data","json","aryToMap","formatGuide","cfgs","Get","groups","connectAry","ary1","ary2","length","undefined","concat","i","std","GuideGroup","OpenUI","group","Childs","push","ID","Steps","Type","OverTime","Angle","Offset","Tips","TipsAngle","TipsSize","TipsOffset","Auto","Prefabs","EndPanel","Audio","splice","name","key","cfg","IsArray","console","warn","obj","child","k","GetCardSkill","skillId","stds","find","value","SkillId","GetCardMap","GetCard","id","GetCardSkillDesc","skillDesc","index","SkillID","skill","Desc","GetCardClassList","map","list","classId","Classid","calssCard","GetCardListByClassID","class_id","GetCanFightCard","canFightCards","cards","IsOpen","CardList","GetTerrain","Getitem","item","Items","GetHead","GetCardBackCfgById","GetTaskById","stdTask","task","TaskId","GetTaskByShowType","type","task_list","Show","GetTaskByTaskType","task_type","_task","TaskType","sort","a","b","CompletionNum","GetTaskByData","task_group_list","TopTask","end","num","Number","MAX_SAFE_INTEGER","element","GetTaskGroupLast","last","GetTaskChapterCfg","seasonTask","iterator","GetSeasonTaskByChapterID","chapterList","TaskTypeData","GetBoxData","ItemID","GetShopIndex","shopGroupId","shopType","indexList","getShopIndexList","stdShopIndex","Panel","ShopType","GetShopsByPanel","panel","TabSort","shops","GetShopIndexById","GetShop","GetShopList","GetCommShopItem","GetShopLucky","getShopLuckuyList","CardpoolId","GetLuckyDatas","newList","SystemOpen","stdShopLucky","RewardPools","LuckyID","shopId","shopStd","GetShopLuckyPool","log","GetBattleCardDeliver","GetTradeAllCfgData","datas","GetTradeAllCardCfgData","GetTradeAllData","Item","ItemId","count","Equipment","card","cardId","CardID","level","quality","CardQuality","exp","ownershipType","updateId","tradeCd","nftLockExpires","createdAt","GetTradeData","AIGroupList","aiList","getArea","getCanFightArea","canFightArea","areas","AreaList","GetCardCfgByType","card_id_list","indexOf","GetInstructionsById","language","GetCardUpgradeList","cardUpgradeMap","Map","carUpgradeList","get","set","GetCardUpgrade","qual","Quality","GetCardUpgradeShowList","GetCardUpgradeShow","GetPlayerLevelArwardList","playerLevelAwardList","GetPlayerLevelList","awardLv","RewardID","RewardPool","stdPlayerLevel","sectionList","GetMaxPlayerLevel","GetProcessBoxList","GetProcessBox","boxId","GetBoxTypeList","BoxType","GetCommon","stdList","ModuleId","ConfigValues","CardGuroupComm","StdCommonType","CardBase","GetLogic","ModuleKey","GetStdPVPSnatchList","stdPVPSnatchList","GetStdPVPSnatch","MatchID","GetStdPvpLvCfgList","groupId","GroupID","GetStdPvpLv","LevelID","GetStdPvpLvByPoint","point","checkStd","LevelPoints","GetStdPvpLvListByPoint","startPoint","endPoint","unshift","GetErrorCfgByCode","code","alert","getSeaGatepass","seaid","SeaId","getSeaGatepassLv","getSeaGatepassNextExp","lv","lv_cfg","max_lv","next_lv","next_exp","Lv","Exp","getSeaGatepassReward","reward_lsit","SeaGatepassID","getSeaGatepassRewardByLvAndGrate","getEquityOpenCfg","equity_cfg","time","ServerTime","_lsit","open_lsit","open_time","DateStringToTime","ShowStartTime","end_time","ExchangeEndTime","CardType","getEquityShowList","id_list","des_list","reward_list","EquityID","EquityType","describe","RewardType","RewardNumber","GetStdPVPBattleList","GetStdPVPBattle","stdPVPBattleList","ItemSubType","ThingName","BattleCard","ThingType","ItemType","ShopGroupId","skillType","CardSotrType1","CardSotrType2","StdProcessBoxType"],"mappings":"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","sourcesContent":["import { JsonAsset, assetManager } from \"cc\";\r\nimport { ResMgr } from \"./ResMgr\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport proto from \"../net/Protocol\";\r\nimport { DateUtils } from \"../utils/DateUtils\";\r\n\r\nexport class CfgMgr {\r\n    private static data: any;\r\n    static async load() {\r\n        let resAb = assetManager.getBundle(\"res\");\r\n        let asset = await ResMgr.LoadResAbSub(\"config/cfg\", JsonAsset);\r\n        this.data = asset.json;\r\n\r\n        this.aryToMap(\"Card\", \"ID\");\r\n        this.aryToMap(\"ShopCommodity\", \"Id\");\r\n        this.aryToMap(\"ShopLuckyPool\", \"RewardPools\");\r\n        this.aryToMap(\"battle_terrain\", \"ID\");\r\n        this.aryToMap(\"Area\", \"AreaID\");\r\n        this.aryToMap(\"fetch\", \"Shortcut\");\r\n\r\n        this.formatGuide();\r\n    }\r\n\r\n    protected static formatGuide() {\r\n        let cfgs: StdGuide[] = this.Get(\"guide\");\r\n        let groups = {};\r\n        let connectAry = function (ary1, ary2) {\r\n            if (!ary1 || !ary1.length) ary1 = [undefined];\r\n            if (!ary2 || !ary2.length) ary2 = [undefined];\r\n            return ary1.concat(ary2);\r\n        }\r\n        for (let i = 0; i < cfgs.length;) {\r\n            let std = cfgs[i];\r\n            if (!groups[std.GuideGroup]) {\r\n                groups[std.GuideGroup] = std;\r\n                (<unknown>std)['Childs'] = [];\r\n                if (!std.OpenUI) (<unknown>std)['OpenUI'] = [];\r\n                i++;\r\n            } else {\r\n                let group = groups[std?.GuideGroup];\r\n                group.Childs.push(std.ID);\r\n                group.Steps = connectAry(group.Steps, std.Steps);\r\n                group.Type = connectAry(group.Type, std.Type);\r\n                group.OverTime = connectAry(group.OverTime, std.OverTime);\r\n                group.Angle = connectAry(group.Angle, std.Angle);\r\n                group.Offset = connectAry(group.Offset, std.Offset);\r\n                group.Tips = connectAry(group.Tips, std.Tips);\r\n                group.TipsAngle = connectAry(group.TipsAngle, std.TipsAngle);\r\n                group.TipsSize = connectAry(group.TipsSize, std.TipsSize);\r\n                group.TipsOffset = connectAry(group.TipsOffset, std.TipsOffset);\r\n                group.Auto = connectAry(group.Auto, std.Auto);\r\n                group.Prefabs = connectAry(group.Prefabs, std.Prefabs);\r\n                group.EndPanel = connectAry(group.EndPanel, std.OpenUI);\r\n\r\n                if (group?.Audio) group.Audio = connectAry(group.Audio, std.Audio);\r\n                cfgs.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**转map */\r\n    private static aryToMap(name: string, key: string) {\r\n        let cfg = this.data[name];\r\n        if (!Utils.IsArray(cfg)) {\r\n            console.warn(\"目标配置已经是map => \" + name);\r\n        } else {\r\n            let obj = {};\r\n            for (let i = 0; i < cfg.length; i++) {\r\n                let child = cfg[i];\r\n                let k = child[key];\r\n                if (k == undefined) throw \"找不到指定键值 \" + name + \"->\" + key + i;\r\n                if (!k) continue;\r\n                if (obj[k]) console.warn(\"检测到重复键值 \" + name + \"->\" + k);\r\n                obj[k] = child;\r\n            }\r\n            this.data[name] = obj;\r\n        }\r\n    }\r\n\r\n    /**获取指定配置 */\r\n    static Get(name: string): any {\r\n        return this.data[name];\r\n    }\r\n\r\n    /**\r\n     * 获取技能配置\r\n     * @param skillId \r\n     * @returns \r\n     */\r\n    static GetCardSkill(skillId: number) {\r\n        if (skillId == undefined) return undefined;\r\n        let stds: StdSkill[] = this.data[\"battle_card_skill\"];\r\n        return stds.find(value => value.SkillId == skillId);\r\n    }\r\n\r\n    static GetCardMap(): { [key: number]: StdCard } {\r\n        return this.Get(\"Card\");\r\n    }\r\n\r\n    /**获取卡牌 */\r\n    static GetCard(id: number): StdCard {\r\n        return this.GetCardMap()[id];\r\n    }\r\n\r\n    static GetCardSkillDesc(id: number): string {\r\n        let std: StdCard = this.GetCard(id);\r\n        let skillDesc: string = \"\";\r\n        if (std) {\r\n            for (let index = 0; index < std.SkillID.length; index++) {\r\n                let skill = CfgMgr.GetCardSkill(std.SkillID[index]);\r\n                if (skill) {\r\n                    skillDesc += skill.Desc;\r\n                    if (index < std.SkillID.length - 1) {\r\n                        skillDesc += \"、\";\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        return skillDesc;\r\n    }\r\n\r\n    /**获取卡牌变形列表 */\r\n    static GetCardClassList(id: number): StdCard[] {\r\n        let map: { [key: number]: StdCard } = this.GetCardMap();\r\n        let std: StdCard = map[id];\r\n        let list: StdCard[] = [];\r\n        let classId: number = std ? std.Classid : null;\r\n        if (classId != null || classId != undefined) {\r\n            let calssCard: StdCard;\r\n            for (let key in map) {\r\n                calssCard = map[key];\r\n                if (calssCard.Classid == classId) {\r\n                    list[list.length] = calssCard;\r\n                }\r\n            }\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    /**通过classid获取卡牌列表 */\r\n    static GetCardListByClassID(class_id: number): StdCard[] {\r\n        let map: { [key: number]: StdCard } = this.GetCardMap();\r\n        let list: StdCard[] = [];\r\n        let calssCard: StdCard;\r\n        for (let key in map) {\r\n            calssCard = map[key];\r\n            if (calssCard.Classid == class_id) {\r\n                list[list.length] = calssCard;\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n\r\n    private static canFightCards: Object;\r\n    static GetCanFightCard() {\r\n        if (!this.canFightCards) this.canFightCards = {};\r\n        let cards = this.Get(\"Card\");\r\n        for (let k in cards) {\r\n            if (cards[k].IsOpen) this.canFightCards[k] = cards[k];\r\n        }\r\n        return this.canFightCards;\r\n    }\r\n\r\n    /**获取卡牌列表 */\r\n    static get CardList(): StdCard[] {\r\n        let list: StdCard[] = [];\r\n        let map: { [key: string]: StdCard } = this.Get(\"Card\");\r\n        for (let key in map) {\r\n            if (map[key].IsOpen) list.push(map[key]);\r\n        }\r\n        return list\r\n    }\r\n\r\n    static GetTerrain(id: number): StdTerrain {\r\n        return this.Get(\"battle_terrain\")[id];\r\n    }\r\n\r\n    /**\r\n* 获取道具配置\r\n* @param id \r\n* @returns \r\n*/\r\n    static Getitem(id: number): StdItem {\r\n        let cfg = this.Get(\"Item\");\r\n        let item = null;\r\n        for (let index in cfg) {\r\n            if (cfg[index].Items == id) {\r\n                item = cfg[index];\r\n                break;\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    /**获取头像配置 */\r\n    static GetHead(id: number): StdHead {\r\n        if (id == undefined) return undefined;\r\n        let cfg: StdHead[] = CfgMgr.Get(\"head\");\r\n        for (let std of cfg) {\r\n            if (std.ID == id) return std;\r\n        }\r\n        return;\r\n    }\r\n\r\n    /**获取卡背配置 */\r\n    static GetCardBackCfgById(id: number): StdCardBack {\r\n        let cfg: StdCardBack[] = CfgMgr.Get(\"backpacker\");\r\n        for (let std of cfg) {\r\n            if (std.ID == id) return std;\r\n        }\r\n        return;\r\n    }\r\n\r\n    static GetTaskById(id: number): StdTask {\r\n        let stdTask: StdTask[] = this.Get(`task`);\r\n        for (let task of stdTask) {\r\n            if (task.TaskId == id) {\r\n                return task;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**通过展示页面获取该类型的任务 */\r\n    static GetTaskByShowType(type: number): StdTask[] {\r\n        let stdTask: StdTask[] = this.Get(`task`);\r\n        let task_list: StdTask[] = []\r\n        for (let task of stdTask) {\r\n            if (task.Show == type) {\r\n                task_list.push(task)\r\n            }\r\n        }\r\n        return task_list;\r\n    }\r\n\r\n    /**通过任务类型获取任务 */\r\n    static GetTaskByTaskType(task_type: number): StdTask[] {\r\n        let stdTask: StdTask[] = this.Get(`task`);\r\n        let task: StdTask[] = []\r\n        for (let _task of stdTask) {\r\n            if (_task.TaskType == task_type) {\r\n                task.push(_task);\r\n            }\r\n        }\r\n        task.sort((a, b) => {\r\n            return a.CompletionNum - b.CompletionNum\r\n        })\r\n        return task;\r\n    }\r\n\r\n    /**通过任务数据获取配置的唯一id */\r\n    static GetTaskByData(data: proto.base.IPlayerDataTask): StdTask {\r\n\r\n        let task_list: StdTask = null;\r\n\r\n        //是否是每日任务\r\n        if (data) {\r\n            let stdTask: StdTask[] = this.Get(`task`);\r\n            let task_group_list: StdTask[] = [];\r\n            for (let task of stdTask) {\r\n                //同组数据    \r\n                if (data.id == task.TopTask) {\r\n                    task_group_list.push(task);\r\n                }\r\n            }\r\n\r\n            if (task_group_list.length > 1) {\r\n                task_group_list.sort((a, b) => {\r\n                    return a.TaskId - b.TaskId\r\n                })\r\n                let cfg = null\r\n                //没有任何领取拿该组第一个\r\n                if (!data.end) {\r\n                    let num = Number.MAX_SAFE_INTEGER;\r\n                    for (let task of task_group_list) {\r\n                        if (task.CompletionNum < num) {\r\n                            num = task.CompletionNum\r\n                            cfg = task\r\n                        }\r\n                    }\r\n                    task_list = cfg;\r\n                } else {\r\n\r\n                    for (let index = 0; index < task_group_list.length; index++) {\r\n                        const element = task_group_list[index];\r\n                        if (element.TaskId == data.end) {\r\n                            if (index == task_group_list.length - 1) {\r\n                                task_list = element\r\n                            } else {\r\n                                task_list = task_group_list[index + 1]\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                task_list = task_group_list[0]\r\n            }\r\n        }\r\n\r\n        return task_list;\r\n    }\r\n\r\n    /**是否是同组最后一条数据 */\r\n    static GetTaskGroupLast(data: proto.base.IPlayerDataTask) {\r\n        let stdTask: StdTask[] = this.Get(`task`);\r\n        let task_group_list: StdTask[] = [];\r\n        for (let task of stdTask) {\r\n            //同组数据    \r\n            if (data.id == task.TopTask) {\r\n                task_group_list.push(task);\r\n            }\r\n        }\r\n        task_group_list.sort((a, b) => {\r\n            return a.CompletionNum - b.CompletionNum\r\n        })\r\n        let last = task_group_list[task_group_list.length - 1]\r\n        return data.end == last.TaskId\r\n    }\r\n\r\n    /**获取赛季章节任务信息 */\r\n    static GetTaskChapterCfg(id: number) {\r\n        let seasonTask: StdTaskSeason[] = this.Get(`taskSeason`);\r\n        let cfg: StdTaskSeason = null\r\n        for (const iterator of seasonTask) {\r\n            if (iterator.ID == id) {\r\n                cfg = iterator\r\n            }\r\n        }\r\n        return cfg\r\n    }\r\n\r\n    /**通过章节id获取赛季章节任务 */\r\n    static GetSeasonTaskByChapterID(id: number) {\r\n        let stdTask: StdTask[] = this.Get(`task`);\r\n        let chapterList: StdTask[] = []\r\n        for (const iterator of stdTask) {\r\n            if (iterator.TaskTypeData[0] == id) {\r\n                chapterList.push(iterator);\r\n            }\r\n        }\r\n        return chapterList\r\n    }\r\n\r\n    /**获取宝箱数据 */\r\n    static GetBoxData(id: number) {\r\n        let cfg: RewardBox[] = CfgMgr.Get(\"RewardBox\");\r\n        for (let std of cfg) {\r\n            if (std.ItemID == id) {\r\n                return std;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取商城页签配置\r\n     * @param shopGroupId\r\n     * @param shopType\r\n     * @returns \r\n     */\r\n    static GetShopIndex(shopGroupId: string, shopType: number): StdShopIndex {\r\n        let indexList: StdShopIndex[] = this.getShopIndexList();\r\n        for (let stdShopIndex of indexList) {\r\n            if (stdShopIndex.Panel == shopGroupId && stdShopIndex.ShopType == shopType) {\r\n                return stdShopIndex;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取商城配置列表\r\n     * @param panel \r\n     * @returns \r\n     */\r\n    static GetShopsByPanel(panel: string) {\r\n        let map: StdShopIndex[][] = [];\r\n        let indexList: StdShopIndex[] = this.getShopIndexList();\r\n        for (let stdShopIndex of indexList) {\r\n            if (stdShopIndex.Panel == panel) {\r\n                if (!map[stdShopIndex.TabSort]) {\r\n                    map[stdShopIndex.TabSort] = [stdShopIndex];\r\n                } else {\r\n                    map[stdShopIndex.TabSort].push(stdShopIndex);\r\n                }\r\n            }\r\n        }\r\n        // let shops = Array.from(map.values());\r\n        // shops.sort((a, b) => a.TabSort - b.TabSort);\r\n        let shops: StdShopIndex[][] = [];\r\n        for (let group of map) {\r\n            if (group) shops.push(group);\r\n        }\r\n        return shops;\r\n    }\r\n\r\n    static GetShopIndexById(ID: number): StdShopIndex {\r\n        let indexList: StdShopIndex[] = this.getShopIndexList();\r\n        for (let stdShopIndex of indexList) {\r\n            if (stdShopIndex.ID == ID) {\r\n                return stdShopIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取商城配置列表\r\n     * @returns \r\n     */\r\n    private static getShopIndexList(): StdShopIndex[] {\r\n        return this.Get(`ShopIndex`);\r\n    }\r\n\r\n    static GetShop(id: number): StdShop {\r\n        for (let std of this.GetShopList()) {\r\n            if (std.ID == id) return std;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static GetShopList(): StdShop[] {\r\n        return this.Get(\"Shop\");\r\n    }\r\n\r\n    /**\r\n     * 获取通用商品配置\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetCommShopItem(id: number): StdShopCommodity {\r\n        return this.Get(`ShopCommodity`)[id];\r\n    }\r\n\r\n    /**\r\n     * 获取商城抽奖配置\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static GetShopLucky(id: number): StdShopLucky {\r\n        let list: StdShopLucky[] = this.getShopLuckuyList();\r\n        for (const std of list) {\r\n            if (std.CardpoolId == id) return std;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取商城配置列表\r\n     * @returns \r\n     */\r\n    private static getShopLuckuyList(): StdShopLucky[] {\r\n        return this.Get(`ShopLucky`);\r\n    }\r\n\r\n    /**\r\n     * 获取抽奖商店池子配置列表\r\n     * @param shopGroupId\r\n     * @param shopType\r\n     * @returns \r\n     */\r\n    static GetLuckyDatas(shopGroupId: string, shopType: number): StdLuckyShop[] {\r\n        let indexList: StdShopIndex[] = this.getShopIndexList();\r\n        let list: StdShopLucky[] = this.getShopLuckuyList();\r\n        let newList: StdLuckyShop[] = [];\r\n        for (let stdShopIndex of indexList) {\r\n            if (stdShopIndex.SystemOpen > 0 && stdShopIndex.Panel == shopGroupId && stdShopIndex.ShopType == shopType) {\r\n                for (let stdShopLucky of list) {\r\n                    if (stdShopLucky.RewardPools == stdShopIndex.LuckyID) {\r\n                        newList.push({ shopId: stdShopIndex.ID, shopStd: stdShopLucky });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    /**\r\n     * 获取抽奖商城池子\r\n     * @param id \r\n     */\r\n    public static GetShopLuckyPool(id: number): StdShopLuckyPool {\r\n        console.log(this.Get(`ShopLuckyPool`))\r\n        return this.Get(`ShopLuckyPool`)[id];\r\n    }\r\n\r\n    /**获取卡片 */\r\n    static GetBattleCardDeliver(id: number): StdBattleCardDelivery {\r\n        let list = this.Get(\"battle_card_delivery\");\r\n        for (let std of list) {\r\n            if (std.ID == id) return std;\r\n        }\r\n        return null\r\n    }\r\n\r\n    /**获取交易所商品配置 */\r\n    static GetTradeAllCfgData(type: number) {\r\n        if (type == 0) {\r\n            let cfg: StdMarketItem[] = CfgMgr.Get(\"market_item\")\r\n            let datas: StdMarketItem[] = [];\r\n            for (const iterator of cfg) {\r\n                datas.push(iterator)\r\n            }\r\n            return datas;\r\n        } else if (type == 1) {\r\n            let cfg: StdMarketCard[] = CfgMgr.Get(\"market_card\")\r\n            let datas: StdMarketCard[] = [];\r\n            for (const iterator of cfg) {\r\n                datas.push(iterator)\r\n            }\r\n            return datas;\r\n        }\r\n    }\r\n\r\n    /**获取交易所卡牌商品配置 */\r\n    static GetTradeAllCardCfgData(type: number) {\r\n        let cfg: StdMarketCard[] = CfgMgr.Get(\"market_card\")\r\n        let datas: StdMarketCard[] = [];\r\n        for (const iterator of cfg) {\r\n            datas.push(iterator)\r\n        }\r\n        return datas;\r\n    }\r\n\r\n    /**获取所有交易商品 */\r\n    static GetTradeAllData(type: number) {\r\n        if (type == 0) {\r\n            let cfg: StdMarketItem[] = CfgMgr.Get(\"market_item\")\r\n            let datas: proto.base.IThing[] = [];\r\n            for (const iterator of cfg) {\r\n                //道具\r\n                let data: proto.base.IThing = {\r\n                    type: ThingTypeName.Item,\r\n                    item: { id: iterator.ItemId, count: 0 }\r\n                }\r\n                datas.push(data)\r\n            }\r\n            return datas;\r\n        } else if (type == 1) {\r\n            let cfg: StdMarketCard[] = CfgMgr.Get(\"market_card\")\r\n            let datas: proto.base.IThing[] = [];\r\n            for (const iterator of cfg) {\r\n                //卡牌\r\n                let data: proto.base.IThing = {\r\n                    type: ThingTypeName.Equipment,\r\n                    card: {\r\n                        id: \"\", cardId: iterator.CardID, level: 1, quality: iterator.CardQuality,\r\n                        exp: 0, ownershipType: 0, updateId: 0, tradeCd: 0, nftLockExpires: 0, createdAt: 0\r\n                    }\r\n                }\r\n                datas.push(data)\r\n            }\r\n            return datas;\r\n        }\r\n    }\r\n\r\n    /**获取交易商品配置\r\n   * buyOrSell ture代表\r\n   */\r\n    static GetTradeData(data: proto.base.IThing) {\r\n        if (data.item) {\r\n            let cfg: StdMarketItem[] = CfgMgr.Get(\"market_item\")\r\n            for (const iterator of cfg) {\r\n                if (data.item && iterator.ItemId == data.item.id) {\r\n                    return iterator;\r\n                }\r\n            }\r\n        } else if (data.card) {\r\n            let cfg: StdMarketCard[] = CfgMgr.Get(\"market_card\")\r\n            for (const iterator of cfg) {\r\n                if (data.card && iterator.CardID == data.card.cardId) {\r\n                    return iterator;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取ai列表\r\n     * @returns \r\n     */\r\n    static get AIGroupList(): StdAIGroup[] {\r\n        let aiList: StdAIGroup[] = CfgMgr.Get(\"Ai_Group\");\r\n        return aiList;\r\n    }\r\n\r\n    /**\r\n     * 获取地形\r\n     * @param id \r\n     * @returns \r\n     */\r\n    static getArea(id: number): StdArea {\r\n        return CfgMgr.Get(\"Area\")[id];\r\n    }\r\n\r\n    private static canFightArea: Object;\r\n    static getCanFightArea() {\r\n        if (!this.canFightArea) this.canFightArea = {};\r\n        let areas = this.Get(\"Area\");\r\n        for (let k in areas) {\r\n            if (areas[k].IsOpen) this.canFightArea[k] = areas[k];\r\n        }\r\n        return this.canFightArea;\r\n    }\r\n\r\n    /**\r\n     * 获取地形列表\r\n     */\r\n    static get AreaList(): StdArea[] {\r\n        let list: StdArea[] = [];\r\n        let map: { [key: string]: StdArea } = CfgMgr.Get(\"Area\");\r\n        for (let key in map) {\r\n            if (map[key].IsOpen) list.push(map[key]);\r\n        }\r\n        return list;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**通过类型获取该类型的所有卡牌*/\r\n    static GetCardCfgByType(data: proto.base.IBattleCard[], type) {\r\n        let card_id_list = []\r\n        if (type == 0) {\r\n            return data;\r\n        }\r\n        for (const iterator of data) {\r\n            let cfg = this.GetCard(iterator.cardId)\r\n            if (cfg && cfg.Type.indexOf(type) != -1) {\r\n                card_id_list.push(iterator)\r\n            }\r\n        }\r\n        return card_id_list;\r\n    }\r\n\r\n    static GetInstructionsById(id: number): string {\r\n        let language: StdInstructions[] = CfgMgr.Get(\"instructions\");\r\n        for (const iterator of language) {\r\n            if (iterator.ID == id) {\r\n                return iterator.Desc;\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    private static cardUpgradeMap: Map<number, StdCardUpgrade[]>;\r\n    //获取卡牌等级列表\r\n    static GetCardUpgradeList(cardId: number): StdCardUpgrade[] {\r\n        if (!this.cardUpgradeMap) {\r\n            this.cardUpgradeMap = new Map();\r\n            let list: StdCardUpgrade[] = this.Get(\"CardUpgrade\");\r\n            let carUpgradeList: StdCardUpgrade[];\r\n            for (let std of list) {\r\n                carUpgradeList = this.cardUpgradeMap.get(std.CardID);\r\n                if (!carUpgradeList) {\r\n                    carUpgradeList = [];\r\n                    this.cardUpgradeMap.set(std.CardID, carUpgradeList);\r\n                }\r\n                carUpgradeList.push(std);\r\n            }\r\n        }\r\n        return this.cardUpgradeMap.get(cardId) || [];\r\n    }\r\n\r\n    /**获取卡牌等级配置 */\r\n    static GetCardUpgrade(cardId: number, qual: number): StdCardUpgrade {\r\n        let list: StdCardUpgrade[] = this.GetCardUpgradeList(cardId);\r\n        for (let std of list) {\r\n            if (std.Quality == qual) {\r\n                return std;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**获取卡牌等级显示列表 */\r\n    static GetCardUpgradeShowList(): StdCardUpgradeShow[] {\r\n        return CfgMgr.Get(\"CardUpgradeShow\");\r\n    }\r\n\r\n    /**获取卡牌等级显示配置 */\r\n    static GetCardUpgradeShow(qual: number): StdCardUpgradeShow {\r\n        let list: StdCardUpgradeShow[] = this.GetCardUpgradeShowList();\r\n        for (let std of list) {\r\n            if (std.CardQuality == qual) {\r\n                return std;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private static playerLevelAwardList: StdPlayerLevelAward[];\r\n    /**\r\n     * 获取收藏等级奖励列表\r\n     * @returns \r\n     */\r\n    static GetPlayerLevelArwardList(): StdPlayerLevelAward[] {\r\n        if (this.playerLevelAwardList) return this.playerLevelAwardList;\r\n        this.playerLevelAwardList = [];\r\n        let list: StdPlayerLevel[] = this.GetPlayerLevelList();\r\n        let std: StdPlayerLevel;\r\n        let awardLv: StdPlayerLevelAward;\r\n\r\n        for (let index = 0; index < list.length; index++) {\r\n            std = list[index];\r\n            if (std.RewardID > 0 || std.RewardPool > 0) {\r\n                awardLv = {\r\n                    stdPlayerLevel: std,\r\n                    sectionList: index < list.length - 1 ? [] : null\r\n                };\r\n                this.playerLevelAwardList.push(awardLv);\r\n            } else {\r\n                if (awardLv && awardLv.sectionList) {\r\n                    awardLv.sectionList.push(std);\r\n                }\r\n            }\r\n\r\n        }\r\n        return this.playerLevelAwardList;\r\n    }\r\n\r\n    /**\r\n     * 获取收藏等级列表\r\n     * @returns \r\n     */\r\n    static GetPlayerLevelList(): StdPlayerLevel[] {\r\n        return this.Get(\"PlayerLevel\");\r\n    }\r\n\r\n    /**\r\n     * 获取收藏最大等级\r\n     * @returns \r\n     */\r\n    static GetMaxPlayerLevel(): StdPlayerLevel {\r\n        let list: StdPlayerLevel[] = this.GetPlayerLevelList();\r\n        return list[list.length - 1];\r\n    }\r\n\r\n    /**获取宝箱配置列表 */\r\n    static GetProcessBoxList(): StdProcessBox[] {\r\n        return this.Get(\"Processbox\");\r\n    }\r\n\r\n    /**获取宝箱配置 */\r\n    static GetProcessBox(boxId: number): StdProcessBox {\r\n        let list: StdProcessBox[] = this.GetProcessBoxList();\r\n        for (let std of list) {\r\n            if (std.ID == boxId) {\r\n                return std;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**获取新手宝箱类型列表 */\r\n    static GetBoxTypeList(type: StdProcessBoxType): StdProcessBox[] {\r\n        let list: StdProcessBox[] = this.GetProcessBoxList();\r\n        let newList: StdProcessBox[] = [];\r\n        for (let std of list) {\r\n            if (std.BoxType == type) {\r\n                newList.push(std);\r\n            }\r\n        }\r\n        newList.sort((a: StdProcessBox, b: StdProcessBox) => {\r\n            return a.ID - b.ID;\r\n        });\r\n        return newList;\r\n    }\r\n\r\n    /**\r\n     * 通过id获取通用配置\r\n     */\r\n    static GetCommon(id: number) {\r\n        let stdList: StdCommon[] = CfgMgr.Get(\"Common\");\r\n        for (const iterator of stdList) {\r\n            if (iterator.ModuleId == id && iterator.ConfigValues) {\r\n                return iterator.ConfigValues;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**获取卡组通用配置 */\r\n    static get CardGuroupComm(): StdCardGroupBase {\r\n        return this.GetCommon(StdCommonType.CardBase);\r\n    }\r\n\r\n    /**\r\n     * 通过id获取通用配置\r\n     */\r\n    static GetLogic(id: string) {\r\n        let stdList: StdLogic[] = CfgMgr.Get(\"Logic\");\r\n        for (const iterator of stdList) {\r\n            if (iterator.ModuleKey == id && iterator.ConfigValues) {\r\n                return iterator.ConfigValues;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    static GetStdPVPSnatchList(): StdPVPSnatch[] {\r\n        let stdPVPSnatchList: StdPVPSnatch[] = CfgMgr.Get(\"PVPSnatch\");\r\n        return stdPVPSnatchList;\r\n    }\r\n    /**获取赛季配置 */\r\n    static GetStdPVPSnatch(id: number): StdPVPSnatch {\r\n        let stdPVPSnatchList: StdPVPSnatch[] = this.GetStdPVPSnatchList();\r\n        for (let std of stdPVPSnatchList) {\r\n            if (std.MatchID == id) {\r\n                return std;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**获取段位配置列表 */\r\n    static GetStdPvpLvCfgList(groupId: number): StdPvpLevel[] {\r\n        let list: StdPvpLevel[] = CfgMgr.Get(\"pvp_level\");\r\n        let newList: StdPvpLevel[] = [];\r\n        for (let index = 0; index < list.length; index++) {\r\n            let std = list[index];\r\n            if (std.GroupID == groupId) {\r\n                newList.push(std);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    /**获取段位配置 */\r\n    static GetStdPvpLv(groupId: number, id: number): StdPvpLevel {\r\n        let list: StdPvpLevel[] = this.GetStdPvpLvCfgList(groupId);\r\n        id = id || list[0].LevelID;\r\n        for (let std of list) {\r\n            if (std.GroupID == groupId && std.LevelID == id) {\r\n                return std;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**获取段位配置 */\r\n    static GetStdPvpLvByPoint(groupId: number, point: number): StdPvpLevel {\r\n        let list: StdPvpLevel[] = this.GetStdPvpLvCfgList(groupId);\r\n        let checkStd: StdPvpLevel;\r\n        for (let index = list.length - 1; index >= 0; index--) {\r\n            let std: StdPvpLevel = list[index];\r\n            if (point >= std.LevelPoints) {\r\n                checkStd = std;\r\n                break;\r\n            };\r\n        }\r\n        return checkStd || list[0];\r\n    }\r\n\r\n    /**获取段位区间配置 */\r\n    static GetStdPvpLvListByPoint(groupId: number, startPoint: number, endPoint: number): StdPvpLevel[] {\r\n        let list: StdPvpLevel[] = this.GetStdPvpLvCfgList(groupId);\r\n        let newList: StdPvpLevel[] = [];\r\n        for (let index = list.length - 1; index >= 0; index--) {\r\n            let std: StdPvpLevel = list[index];\r\n            if (endPoint >= std.LevelPoints && std.LevelPoints >= startPoint) {\r\n                newList.unshift(std);\r\n            };\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    /**错误码 */\r\n    static GetErrorCfgByCode(code: number) {\r\n        let cfg: StdErrorMessage[] = this.Get(\"ErrorMessage\");\r\n        for (let index = 0; index < cfg.length; index++) {\r\n            const element = cfg[index];\r\n            if (element.code == code) {\r\n                return element.alert;\r\n            }\r\n        }\r\n        return \"code\" + code;\r\n    }\r\n\r\n    /**************************************************权益相关************************************** */\r\n    /**赛季通行证配置 */\r\n    static getSeaGatepass(seaid){\r\n        let cfg:StdSeaGatepass[] = this.Get(\"SeaGatepass\");\r\n        let list = []\r\n        for (let index = 0; index < cfg.length; index++) {\r\n            const element = cfg[index];\r\n            if (element.SeaId == seaid) {\r\n                list.push(element);\r\n            }\r\n        }\r\n        return list\r\n    }\r\n\r\n    /**获取赛季通行证等级配置 */\r\n    static getSeaGatepassLv(){\r\n        let cfg:StdSeaGatepassLv[] = this.Get(\"SeaGatepassLv\");\r\n        return cfg\r\n    }\r\n    /**根据等级获取当前赛季通行证下一级经验 */\r\n    static getSeaGatepassNextExp(lv:number){\r\n        let lv_cfg:StdSeaGatepassLv[] = this.getSeaGatepassLv();\r\n        let max_lv = lv_cfg.length\r\n        let next_lv = max_lv <= lv ? max_lv : lv + 1;\r\n        let next_exp = 0\r\n        for (let index = 0; index < lv_cfg.length; index++) {\r\n            const element = lv_cfg[index];\r\n            if (element.Lv == next_lv) {\r\n                next_exp = element.Exp;\r\n            }\r\n        }\r\n        return next_exp\r\n    }\r\n\r\n    /**获取当前赛季通行证奖励 */\r\n    static getSeaGatepassReward(id:number){     \r\n        let lv_cfg:StdSeaGatepassLvReward[] = this.Get(\"SeaGatepassLvReward\");\r\n        let reward_lsit:StdSeaGatepassLvReward[] = [];\r\n        for (let k = 0; k < lv_cfg.length; k++) {\r\n            const element = lv_cfg[k];\r\n            if (id == element.SeaGatepassID) {\r\n                reward_lsit.push(element)\r\n            }\r\n        }\r\n        return reward_lsit\r\n    }\r\n\r\n    /**获取当前赛季不同等级不同级别的奖励 */\r\n    static getSeaGatepassRewardByLvAndGrate(lv:number, id:number){\r\n        let lv_cfg:StdSeaGatepassLvReward[] = this.Get(\"SeaGatepassLvReward\");    \r\n        let reward_lsit:StdSeaGatepassLvReward;   \r\n        for (let index = 0; index < lv_cfg.length; index++) {\r\n            const element = lv_cfg[index];\r\n            if(element.SeaGatepassID == id && element.Lv == lv){\r\n                reward_lsit = element\r\n            } \r\n        }\r\n        return reward_lsit\r\n    }\r\n\r\n    /**获取权益开放配置 */\r\n    static getEquityOpenCfg(seaid:number){\r\n        let equity_cfg:StdEquityCard[] = this.Get(\"EquityCard\");\r\n        let time = DateUtils.ServerTime;\r\n        let _lsit:number[] = [];\r\n        let open_lsit:StdEquityCard[] = [];\r\n        for (let index = 0; index < equity_cfg.length; index++) {\r\n            const element = equity_cfg[index];\r\n            let open_time = DateUtils.DateStringToTime(element.ShowStartTime)\r\n            let end_time = DateUtils.DateStringToTime(element.ExchangeEndTime)\r\n            if(element.CardType == 1 && typeof element.SeaId != \"string\"){              \r\n                if(element.SeaId == seaid && _lsit.indexOf(element.SeaId) == -1){\r\n                    open_lsit.push(element)\r\n                    _lsit.push(element.SeaId);\r\n                }\r\n            }else{\r\n                if(open_time <= time && end_time > time){\r\n                    open_lsit.push(element) \r\n                } \r\n            }\r\n        }\r\n        return open_lsit\r\n    }\r\n\r\n    /**获取权益展示 */\r\n    static getEquityShowList(id_list:number[]){\r\n        let list:StdEquityList[] = this.Get(\"EquityList\");\r\n        let des_list:string[] = [];\r\n        let reward_list = [];\r\n        for (let index = 0; index < list.length; index++) {\r\n            const element = list[index];\r\n            if( id_list.indexOf(element.EquityID) != -1){\r\n                if(element.EquityType != 2){\r\n                    des_list.push(element.describe)\r\n                }else{\r\n                    reward_list.push(element.RewardType, element.RewardID, element.RewardNumber);\r\n                }\r\n            }\r\n        }\r\n\r\n        return [des_list, reward_list]\r\n    }\r\n    /***********************************************权益相关end********************************************** */\r\n\r\n    static GetStdPVPBattleList(): StdPVPBattle[] {\r\n        let cfg:StdPVPBattle[] = this.Get(\"PVPBattle\");\r\n        return cfg;\r\n    }\r\n    /**获取赛季配置 */\r\n    static GetStdPVPBattle(id: number): StdPVPBattle {\r\n        let stdPVPBattleList: StdPVPBattle[] = this.GetStdPVPBattleList();\r\n        for (let std of stdPVPBattleList) {\r\n            if (std.MatchID == id) {\r\n                return std;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n/**背包页签类型 */\r\nexport enum ItemSubType {\r\n    all,       // 全部\r\n    prop,      // 材料，资源\r\n    factor,    // 经验道具，宝箱道具等可消耗\r\n    currency,  // 碎片，合成\r\n}\r\n\r\nexport enum ThingName {\r\n    item = 1,\r\n    weapon,\r\n    battlecard\r\n}\r\n\r\n/**事物大类枚举 */\r\nexport class ThingTypeName {\r\n    static readonly Item = \"item\";  // 道具\r\n    static readonly Equipment = \"equipment\"; //装备\r\n    static readonly BattleCard = \"battlecard\"; //卡牌\r\n}\r\n\r\nexport enum ThingType {\r\n    item = 1, // 道具\r\n    equipment, // 装备\r\n    battlecard, // 卡牌 \r\n    playerexp, // 玩家经验\r\n}\r\n\r\n/**道具类型枚举 */\r\nexport enum ItemType {\r\n    money = 1, // 货币\r\n    box,       // 宝箱\r\n    item,       // 无特殊类型的道具\r\n    exp,       // 经验道具\r\n    shard,     // 角色碎片\r\n    speed,     // 玩法门票（未生效）旧：加速道具\r\n    rights = 7,     //权益卡\r\n    shield = 8,    // 玩法次数增加类道具 旧：防护罩\r\n    piece,      //英雄粉尘（ItemEffect1填对应classid）\r\n}\r\n\r\n/**卡牌枚举 */\r\nexport enum CardQuality {\r\n    N = 1,\r\n    R,\r\n    sR,\r\n    ssR,\r\n    UR\r\n}\r\n\r\n/**\r\n * 系统开启配置\r\n */\r\nexport type StdUIOpen = {\r\n    readonly ConditionId1: number[];//条件1\r\n    readonly ConditionValue1: number[];//条件1值\r\n    readonly ConditionId2: number[];//条件2\r\n    readonly ConditionValue2: number[];//条件2值\r\n    readonly Panel: string[];//界面组\r\n    readonly UI: string[];//入口1\r\n    readonly HideType: number[];//隐藏类型0(空)消失1锁图标\r\n    readonly Tips: string;\r\n}\r\n\r\n/**道具配置 */\r\nexport type StdItem = {\r\n    readonly Items: number;           // 道具id\r\n    readonly ItemName: string;        // 道具名字\r\n    readonly ItemValue: number;       // 道具价值\r\n    readonly HideBag: number;         // 背包里是否隐藏\r\n    readonly Itemtpye: number;        // 道具类型\r\n    readonly ItemEffect1: number;     // 道具效果1\r\n    readonly ItemEffect2: number;     // 道具效果2\r\n    readonly ItemEffect3: number;     // 道具效果3\r\n    readonly Quality: number;         // 道具品质\r\n    readonly Icon: string;            // 道具图标\r\n    readonly LockTime: number          // 交易冷却时间\r\n    readonly StackLimit: number;      // 堆叠上限\r\n    readonly SubType: number;         // 切页分类\r\n    readonly Remark: string;          // 说明\r\n    readonly SkipGet: any[];          // 获取途径\r\n    readonly Tradetype: number;       // 是否可交易\r\n    readonly Sort: number;            // 排序\r\n    readonly SpecialDisplay: number;  // 特殊展示\r\n    readonly ConditionId: any[];      // 道具使用前置\r\n    readonly ConditionLv: number[];   // 道具使用提交\r\n    readonly Button: any[];           // 道具按钮\r\n}\r\n\r\n/**卡牌配置 */\r\nexport type StdCard = {\r\n    readonly ID: number; // 卡牌ID\r\n    readonly Classid: number;//组详情id\r\n    readonly ClassName: string;//组名称\r\n    readonly CardName: string; // 卡片名\r\n    readonly IsOpen: number;//是否开放\r\n    readonly Type: number[];//卡归属卡组类型\r\n    readonly EthnicType: number; // 种族类型\r\n    readonly ProfessionType: number; // 职业\r\n    readonly Cost: number; // 能量\r\n    readonly Power: number; // 战力\r\n    readonly SkillID: number[]; // 技能id列表\r\n    readonly SkillPrefabs: string[];//特效预制\r\n    readonly PlacementLevel: number; // 放置层级\r\n    readonly CardBody: string;\r\n    readonly CardView: string;//立绘资源\r\n    readonly SceneBody: string;\r\n    readonly Cover: string; // 卡片封面\r\n    readonly SkillAnimation: string; // 卡片特效\r\n    readonly CardRarity: number; // 稀有度\r\n    readonly ProducePeriods: number; //期数\r\n    readonly SkillDesc: string; // 描述\r\n}\r\n\r\nexport type StdTerrain = {\r\n    readonly ID: number;\r\n    readonly AreaSkillID: number[];\r\n    readonly SkillPrefabs: string[];\r\n    readonly Type: number;\r\n    readonly Value: number;\r\n    readonly AreaAffect: number;\r\n    readonly AffectText: string;\r\n    readonly ValueFirst: number;\r\n    readonly ValueSecond: number;\r\n    readonly CardID: number[];\r\n    readonly CardValue: number[];\r\n    readonly Cover: string;\r\n    readonly SkillAnimation: string;\r\n\r\n}\r\n\r\n/**\r\n * 技能配置\r\n */\r\nexport type StdSkill = {\r\n    readonly SkillId: number;\r\n    readonly Desc: string\r\n    readonly SkillPrefabs: string[];\r\n    readonly EffectsLevel: number;\r\n    readonly TimingLocation: number[];\r\n    readonly EffectTake: string[];\r\n    readonly EffectType: string;\r\n    readonly EffectParam: string[];\r\n    readonly EffectParam2: any[];\r\n    readonly TargetType: string;\r\n    readonly TargetParam1: any[];\r\n    readonly TargetParam2: any[];\r\n    readonly ConditionType: string;\r\n    readonly ConditionParam1: string[];\r\n    readonly ConditionParam2: any[];\r\n    readonly ConditionParam4: any[];\r\n    readonly SkillAnimation: string;\r\n}\r\n\r\n/**\r\n * 技能效果枚举\r\n */\r\nexport type StdEffect = {\r\n    readonly CardSkill1: string;\r\n    readonly SkillName1: string;\r\n    readonly Desc1: string;\r\n    readonly PramDesc1: string;\r\n}\r\n\r\n/**头像 配置*/\r\nexport type StdHead = {\r\n    readonly ID: number,\r\n    readonly icon: string,\r\n    readonly name: string,\r\n    readonly headTheme: number,\r\n    readonly headThemeName: string,\r\n    readonly cardView: string,\r\n}\r\n\r\n/**卡背配置*/\r\nexport type StdCardBack = {\r\n    readonly ID: number,\r\n    readonly icon: string,\r\n    readonly icon1: string,\r\n    readonly name: string,\r\n    readonly backpackerTheme: number,\r\n    readonly backpackerThemeName: string,\r\n}\r\n\r\n/**任务配置 */\r\nexport type StdTask = {\r\n    TaskId: number,//任务ID\r\n    TopTask: number,\r\n    isMainShow: number,\r\n    TaskType: number,//任务类型\r\n    TaskTypeData: number[],//任务类型数据\r\n    Show: number,//显示界面\r\n    CompletionConditions: number,//完成条件\r\n    CompletionValue: number[],//完成条件值（英雄ID配0表示不对英雄ID有要求）；用于满足日常任务-升级建筑、升级英雄等泛任务\r\n    CompletionEqual: number[],\r\n    CompletionNum: number,//完成次数\r\n    Extend: number\r\n    TaskName: string,//任务名称\r\n    Description: string,//描述\r\n    ConditionId: number[],//接受条件\r\n    ConditionValue: number[],//接受条件值\r\n    TasksGroup: number,//任务组\r\n    CompletionType: number,//完成方式（1自动，2手动）\r\n    ProgressDisplay: number,//进度显示\r\n    RewardType: number[],//奖励大类\r\n    RewardID: number[],//任务奖励\r\n    RewardNumber: number[],//奖励数量\r\n    RronyRewardNum: number,//贡献奖励详情（原石）\r\n    WeekActiveTaskValue: number,//周活跃度\r\n    ActiveTaskValue: number,//活跃度\r\n    Win: string,//前往id\r\n    Param: any[],//前往id\r\n    DataClean: number\r\n    TaskWeight: number\r\n    ResetType: number,//重置类型 1每日2每周3每月4成就\r\n}\r\n\r\n/**章节任务配置 */\r\nexport type StdTaskSeason = {\r\n    ID: number;\r\n    SeasonChapterName: string;\r\n    SeasonID: number;\r\n    OpenTime: number;\r\n}\r\n\r\n/**宝箱类型 */\r\nexport enum BoxType {\r\n    random = 1,\r\n    select,\r\n    all,\r\n}\r\n\r\n/**宝箱配置 */\r\nexport type RewardBox = {\r\n    readonly ItemID: number;\r\n    readonly Boxtype: number;\r\n    readonly Repeat: number;\r\n    readonly RewardNum: number;\r\n    readonly Types: number[];\r\n    readonly Items: number[];\r\n    readonly ItemsNum: number[];\r\n    readonly Probability: number[];\r\n    readonly Limit: number;\r\n    readonly Text: string;\r\n    readonly SpecialDisplay: number[];\r\n}\r\n\r\n/**道具配置 */\r\nexport type ItemGive = {\r\n    readonly Items: number;             // 道具id\r\n    readonly GiveLimitMin: number;      // 赠送数量限制（最小）\r\n    readonly GiveLimitMax: number;      //赠送数量限制（最大）\r\n    readonly GiveLimitDaily: number;    // 每日赠送数量限制\r\n    readonly FeeItemID: number;           // 扣除物品id\r\n    readonly GiveFeeRate: number;           // 赠送手续费（万分位）\r\n    readonly GiveFeeBase: number;           // 扣除物品id\r\n    readonly GiveFeeMin: number;           //最小赠送手续费（万分位）\r\n\r\n}\r\n\r\n/**\r\n * 系统开启配置\r\n */\r\nexport type StdSystemDoor = {\r\n    readonly ID: number;\r\n    readonly ConditionId1: number[];\r\n    readonly ConditionValue1: number[];\r\n    readonly ConditionId2: number[];\r\n    readonly ConditionValue2: number[];\r\n    readonly Panel: string[];\r\n    readonly UI: string[];\r\n    readonly HideType: number[];\r\n    readonly Tips: string;\r\n}\r\n\r\n/**\r\n * 引导配置\r\n */\r\nexport type StdGuide = {\r\n    readonly ID: number;\r\n    readonly Childs: number[];\r\n    readonly GuideGroup: number;\r\n    readonly ConditionId1: number[];\r\n    readonly ConditionValue1: number[];\r\n    readonly EndConditionId1: number[];\r\n    readonly EndConditionValue1: number[];\r\n    readonly OverTime: number[];\r\n    readonly Steps: string[];\r\n    readonly Type: number[];\r\n    readonly Angle: number[]\r\n    readonly Offset: number[][];\r\n    readonly Tips: string[];\r\n    readonly TipsAngle: number[];\r\n    readonly TipsSize: number[][];\r\n    readonly TipsOffset: number[][];\r\n    readonly Prefabs: string[];\r\n    readonly Auto: number[];\r\n    readonly Audio: string[];\r\n    readonly ClickSize: number[][];\r\n    readonly OpenUI: string[];\r\n\r\n}\r\n\r\n//商城组自定义配置\r\nexport type StdShopGroup = {\r\n    ShopGroupId: string,//商城组id\r\n    ShopType: ShopType,//商城页签类型\r\n    TabSort: number,//页签排序\r\n    ShopName: string,//商城页签名字\r\n}\r\n\r\n/**商店类型*/\r\nexport enum ShopType {\r\n    DayShop = 1,//每日商城\r\n    WeekShop,//每周商城\r\n    LuckyShop,//抽奖商城\r\n    GemShop,//宝石商城\r\n    PvpShop,//pvp商城\r\n    TempShop,//临时商店\r\n    WorldBossShop,//世界boss商店\r\n    GemConversion = 9999,//前端自定义商店类型\r\n}\r\n\r\n/**商店组id*/\r\nexport enum ShopGroupId {\r\n    BaseShop = 1,//基础商城\r\n    festivalShop, //节日商城\r\n    PvpShop, //Pvp商城\r\n    WorldBossShop, //世界boss商城\r\n}\r\n\r\n//商城配置\r\nexport type StdShopIndex = {\r\n    readonly ID: number,//商城id\r\n    readonly Panel: string,//商城组id\r\n    readonly ShopType: number,//商城类型\r\n    readonly TabSort: number,//页签排序权重小->大\r\n    readonly ShopIndexType: number,//商城索引类型\r\n    readonly ShopName: string,//商城页签名称\r\n    readonly ShopID: number,//普通商店ID (Shop表)\r\n    readonly LuckyID: number,//抽奖商店ID （ShopLucky表）\r\n    readonly TitleImgRes: string, //商城标签资源\r\n    readonly MoneyType: number[];//商城所用到的消耗大类\r\n    readonly MoneyID: number[];//商城所用到的消耗小类\r\n    readonly SystemOpen: number;//商城是否开启\r\n}\r\n//通用商城配置\r\nexport type StdShop = {\r\n    readonly ID: number,//商城id\r\n    readonly OpenTime: number,//持续时间\r\n    readonly RefreshCondition: number,//刷新类型 (0=不刷新,1=定时刷新,2=手动刷新)\r\n    readonly RefreshTimeType: number,//刷新基准 (0=日内刷新，1=周内刷新)\r\n    readonly RefreshTimeValue: number,//自动刷新参数 （基于刷新基准的时分）\r\n    readonly IsCanManualRefresh: number,//是否可以手动刷新 \r\n    readonly AdId: number,\r\n    readonly RefreshThingType: number[],//手动刷新物品类型\r\n    readonly RefreshThingId: number[],//手动刷新消耗\r\n    readonly RefreshThingCount: number[],//手动刷新消耗\r\n    readonly GoodsPoolId: number,//商品库id\r\n    readonly GoodsLimit: number,//商品数量上限\r\n}\r\n//抽奖商城配置\r\nexport type StdShopLucky = {\r\n    readonly CardpoolId: number,//奖池id\r\n    readonly OpenTime: number,//持续时间\r\n    readonly Sequence: number,//奖池显示顺序\r\n    readonly CardPoolName: string,//奖池名字\r\n    readonly AdTime: number,//激励广告id\r\n    readonly Banner: string,//奖池banner\r\n    readonly RewardPools: number,//卡池ID\r\n    readonly FreetimesX1: number,//单次抽卡免费次数\r\n    readonly FreetimesX1RefreshTimeType: number,//免费次数(单抽)刷新基准 (0仅初始化，1=日内刷新，2=周内刷新)\r\n    readonly FreetimesX1RefreshTimeValue: string[],//免费次数(单抽)自动刷新参数 （基于刷新基准的时分）\r\n    readonly FreetimesX10: number,//十抽免费次数\r\n    readonly FreetimesX10RefreshTimeType: number,//免费次数(十抽)刷新基准 (0仅初始化，1=日内刷新，2=周内刷新)\r\n    readonly FreetimesX10RefreshTimeValue: string[],//免费次数(十抽)自动刷新参数 （基于刷新基准的时分）\r\n    readonly ADTimes: number,//广告次数\r\n    readonly ADTimesRefreshTimeType: number,//广告次数刷新基准 (0仅初始化，1=日内刷新，2=周内刷新)\r\n    readonly ADTimesRefreshTimeValue: string[],//广告次数刷新基准 （基于刷新基准的时分）\r\n    readonly ConsumeX1ItemId: number[],//单次抽消耗道具id\r\n    readonly ConsumeX1Cost: number[],//单次抽消耗道具数量\r\n    readonly ConvertToConsumeItemId: number[],//转换到抽卡卡池消耗道具id\r\n    readonly ConvertToConsumeCost: number[],//转换到抽卡卡池消耗道具数量\r\n    readonly Frequency: number,//每日抽奖次数\r\n    readonly FrequencyRefreshTimeType: number,//每日抽奖次数刷新基准 (0仅初始化，1=日内刷新，2=周内刷新)\r\n    readonly FrequencyRefreshTimeValue: string[],//每日抽奖次数自动刷新参数 （基于刷新基准的时分）\r\n    readonly GlobalFrequency: number,//全服每日抽奖次数\r\n    readonly GlobalFrequencyRefreshTimeType: number,//全服每日抽奖次数刷新基准 (0仅初始化，1=日内刷新，2=周内刷新)\r\n    readonly GlobalFrequencyRefreshTimeValue: string[],//全服每日抽奖次数自动刷新参数 （基于刷新基准的时分）\r\n    readonly LuckyBgRes: string,//背景资源\r\n    readonly LuckyTitleRes: string,//标题资源\r\n    readonly PoolQual: number,//奖池品质\r\n    readonly ConsumeX100Type: number,//是否可以100抽\r\n}\r\n//抽奖商城奖池配置\r\nexport type StdShopLuckyPool = {\r\n    readonly RewardPools: number,//卡池ID\r\n    readonly RewardType: number[],//奖池奖励类型\r\n    readonly RewardId: number[],//奖池奖励id\r\n    readonly RewardNumber: number[],//奖池奖励数量\r\n    readonly Probability: number[],//奖品概率\r\n    readonly GetNumber: number,//必出次数\r\n    readonly Target: number[],//标记奖品位置(从0开始)\r\n    readonly TargetProbability: number[],//标记奖品概率\r\n    readonly Instructions: number,//说明帮助id\r\n}\r\n//通用商品配置\r\nexport type StdShopCommodity = {\r\n    readonly Id: number;//商品id\r\n    readonly Goodstype: number[],//商品内容类型\r\n    readonly GoodsID: number[],//商品内容id\r\n    readonly GoodsNum: number[],//商品内容数量\r\n    readonly CostType: number[],//商品对应消耗类型\r\n    readonly CostID: number[],//商品对应消耗id\r\n    readonly CostNumber: number[],//商品对应消耗数量\r\n    readonly GoodAmount: number,//商品限购数量\r\n    readonly Order: number,//商品排序\r\n    readonly Discount: number,//商品折扣\r\n    readonly LimitBuyTime: number,//限购时间(秒)\r\n}\r\n\r\n//抽奖商城自定义配置\r\nexport type StdLuckyShop = {\r\n    shopId: number,//商城id\r\n    shopStd: StdShopLucky,//商城配置\r\n}\r\n\r\n//卡片投放表\r\nexport type StdBattleCardDelivery = {\r\n    readonly ID: number;//卡片投放ID\r\n    readonly CardID: number,//卡片ID\r\n    readonly CardQuality: number,//卡片品质\r\n}\r\n\r\n/**交易所道具配置 */\r\nexport type StdMarketItem = {\r\n    readonly Id: number; //商品id\r\n    readonly Name: string;//商品名字\r\n    readonly Group: number;\r\n    readonly GroupName: string\r\n    readonly ShowID: number;//展示筛选条件\r\n    readonly ItemId: number; //道具id\r\n    readonly SellGroupPriceMin: number; //上架最低组单价\r\n    readonly SellGroupPriceMax: number; //上架最高组单价\r\n    readonly BuyGroupPriceMin: number; //求购最低组单价\r\n    readonly BuyGroupPriceMax: number; //求购最高组单价\r\n    readonly GrouplimitMin: number; //上架最少组数量\r\n    readonly GrouplimitMax: number; //上架最大组数量\r\n    readonly GroupSize: number; //每组数量\r\n    readonly Currencies: number[]; //结算道具ID\r\n    readonly Fees: number; //交易手续费比例值（万分比）\r\n    readonly AddFees: number;//交易手续费固定值\r\n}\r\n\r\n/**交易所道具配置 */\r\nexport type StdMarketCard = {\r\n    readonly Id: number; //商品id\r\n    readonly Name: string;//商品名字\r\n    readonly Group: number;\r\n    readonly GroupName: string\r\n    readonly ShowID: number;//展示筛选条件\r\n    readonly CardID: number; //卡id\r\n    readonly CardQuality: number; //卡品质\r\n    readonly SellGroupPriceMin: number; //上架最低组单价\r\n    readonly SellGroupPriceMax: number; //上架最高组单价\r\n    readonly BuyGroupPriceMin: number; //求购最低组单价\r\n    readonly BuyGroupPriceMax: number; //求购最高组单价\r\n    readonly GrouplimitMin: number; //上架最少组数量\r\n    readonly GrouplimitMax: number; //上架最大组数量\r\n    readonly GroupSize: number; //每组数量\r\n    readonly Currencies: number[]; //结算道具ID\r\n    readonly Fees: number; //交易手续费比例值（万分比）\r\n    readonly AddFees: number;//交易手续费固定值\r\n}\r\n\r\n/**ai配置 */\r\nexport type StdAIGroup = {\r\n    readonly AIGroupID: number; //ai组id\r\n    readonly AILevel: string;//ai等级\r\n}\r\n\r\n/**地形配置 */\r\nexport type StdArea = {\r\n    readonly AreaID: number;//地形id\r\n    readonly AreaName: string;//地形名称\r\n    readonly Icon: string;//地形图标\r\n    readonly IsOpen: number;//地形是否开放 \r\n    readonly AreaIcon: string;//地形icon\r\n    readonly Type: number;//地形类型\r\n    readonly Value: number;//场地默认权值\r\n    readonly AreaAffect: number[];//地形场地效果\r\n    readonly AffectText: string;//地形场地效果描述\r\n\r\n}\r\n\r\n/**生成卡组的配置 */\r\nexport type StdGenerateCardGroup = {\r\n    readonly GenerateID: number;\r\n    readonly Classid: number[];\r\n    readonly CardNumber: number;\r\n    readonly Classid1: number[];\r\n    readonly CardNumber1: number;\r\n    readonly Classid2: number[];\r\n    readonly CardNumber2: number;\r\n    readonly Classid3: number[];\r\n    readonly CardNumber3: number;\r\n    readonly Classid4: number[];\r\n    readonly CardNumber4: number;\r\n    readonly Classid5: number[];\r\n    readonly CardNumber5: number;\r\n    readonly Classid6: number[];\r\n}\r\n\r\n/**卡牌等级边框的配置 */\r\nexport type StdCardUpgradeShow = {\r\n    readonly CardQuality: number;\r\n    readonly Picture: string;\r\n    readonly Title: string;\r\n    readonly FrameDesc: string;\r\n    readonly QualityName: string;\r\n    readonly AddExp: number;\r\n    readonly QualityColor: string;\r\n}\r\n\r\n/**变体类型描述配置 */\r\nexport type StdCardVariantType = {\r\n    readonly Image_Type: number;\r\n    readonly Variant_name: string;\r\n}\r\n\r\nexport enum skillType {\r\n    undefined,\r\n    reveal,//揭示\r\n    sustainwu,//持续\r\n    unspecificness,//无特殊效果\r\n    discard, //丢弃\r\n    move,//移动\r\n    delete,//删去\r\n}\r\n\r\nexport enum CardSotrType1 {\r\n    Down,//降序\r\n    Up,//升序\r\n}\r\n\r\nexport enum CardSotrType2 {\r\n    Name,//名字排序\r\n    Cost,//能量排序\r\n    Power,//战力排序\r\n    New, //最新排序\r\n    Quality,//品质排序\r\n    UpLevel,//可升级排序\r\n}\r\n\r\n/**描述配置 */\r\nexport type StdInstructions = {\r\n    readonly ID: number;\r\n    readonly Location: string;\r\n    readonly Desc: string;\r\n}\r\n\r\n/**卡牌升级配置*/\r\nexport type StdCardUpgrade = {\r\n    readonly ID: number;\r\n    readonly CardID: number;//卡牌id\r\n    readonly Quality: number;//卡牌品质\r\n    readonly CostItemIds: number[];//消耗道具id\r\n    readonly CostItemNums: number[];//消耗道具数量\r\n    readonly exp: number;//获取经验值\r\n    readonly RewardTypes: number[];//奖励物品类型\r\n    readonly RewardIds: number[];//奖励物品id\r\n    readonly RewardNums: number[];\r\n    readonly show: string;//奖励说明文本\r\n}\r\n\r\n/**收藏等级配置*/\r\nexport type StdPlayerLevel = {\r\n    readonly Level: number;\r\n    readonly Name: string;\r\n    readonly ExpCondition: number;//卡牌品质\r\n    readonly Grandprize: number;//是否大奖\r\n    readonly CostItemNums: number[];//消耗道具数量\r\n    readonly icon: string;//奖励图标\r\n    readonly randomName: string;\r\n    readonly RewardType: number;//奖励物品类型\r\n    readonly RewardID: number;//奖励物品id\r\n    readonly RewardNumber: number;//奖励物品数量\r\n    readonly RewardPool: number;//奖励池子id\r\n}\r\n\r\n/**收藏等级配置*/\r\nexport type StdPlayerLevelAward = {\r\n    readonly stdPlayerLevel: StdPlayerLevel;\r\n    readonly sectionList?: StdPlayerLevel[];\r\n}\r\n\r\n/**宝箱配置*/\r\nexport type StdProcessBox = {\r\n    readonly ID: number;\r\n    readonly Name: string;\r\n    readonly ShowType: number;//宝箱显示类型\r\n    readonly BoxType: number;//宝箱类型\r\n    readonly StartTime: string;//开启时间\r\n    readonly EndTime: string;//关闭时间\r\n    readonly CostIDs: number[];//开启宝箱消耗物品id\r\n    readonly CostNums: number[];//开启宝箱消耗物品数量\r\n    readonly RewardTypes: number[];//奖励物品id\r\n    readonly RewardIDs: number[];//奖励物品数量\r\n    readonly RewardNums: number;//奖励池子id\r\n}\r\n\r\nexport enum StdProcessBoxType {\r\n    NewbieBox = 1,//新手宝箱\r\n    LimitBox = 2,//限时宝箱\r\n}\r\n\r\n/**交易所卡牌筛选配置 */\r\nexport type StdMarketChoose = {\r\n    Id: number,\r\n    Group: number,\r\n    GroupName: string,\r\n    Type: number,\r\n    TypeName: string,\r\n}\r\n/**通用配置id定义 */\r\nexport enum StdCommonType {\r\n    CardBase = 1,//卡组基础配置\r\n    DailyTask = 20,//日常任务\r\n    CardGroup = 21,//卡组\r\n\r\n}\r\n/**公用配置 */\r\nexport type StdCommon = {\r\n    readonly ModuleId: number;\r\n    readonly ModuleKey: string;\r\n    readonly ModuleName: string;\r\n    readonly ConfigValues: any;\r\n}\r\n\r\n/**公用配置 */\r\nexport type StdLogic = {\r\n    readonly ModuleKey: string;\r\n    readonly ModuleName: string;\r\n    readonly ConfigValues: any;\r\n}\r\n\r\n\r\n/**卡组配置 */\r\nexport type StdCardGroupBase = {\r\n    readonly MinCost: number,//卡牌费点最小值\r\n    readonly MaxCost: number,//卡牌费点最大值\r\n    readonly MaxHandNumber: number,//手牌上限\r\n    readonly DeckFullSize: number,//卡组满卡数量\r\n    readonly DeckNumMax: number,//卡组最大数量\r\n    readonly AreaNum: number,//区域数量\r\n    readonly ReplayVersion: number,//\r\n}\r\n\r\n/**赛季配置 */\r\nexport type StdPVPSnatch = {\r\n    readonly MatchID: number;//赛季模式ID\r\n    readonly View: string;//\r\n    readonly MatchName: string;//赛季名称\r\n    readonly MatchStartTime: string;//赛季开启日期（决定有效赛季）\r\n    readonly MatchEddTime: string;//赛季结束时间/D\r\n    readonly MatchCloseTime: string;//赛季结算时间\r\n    readonly RankGroupID: number;//段位组ID\r\n    readonly MultipleLimit: number;//\r\n}\r\n\r\n/**段位 配置*/\r\nexport type StdPvpLevel = {\r\n    readonly GroupID: number,\r\n    readonly LevelID: number,\r\n    readonly LevelType: number,\r\n    readonly LevelIcon: string,\r\n    readonly LevelNameImg: string,\r\n    readonly MainName: string,\r\n    readonly LevelName: string,\r\n    readonly Star: number,\r\n    readonly StarPoints: number,\r\n    readonly LevelPoints: number,\r\n    readonly VictoryPartReward: number[],\r\n    readonly DefeatPartReward: number[],\r\n    readonly LevelRewardTypes: number[],\r\n    readonly LevelRewardIds: number[],\r\n    readonly LevelRewardNums: number[],\r\n}\r\n\r\n/**错误码 配置*/\r\nexport type StdErrorMessage = {\r\n    readonly code: number,\r\n    readonly msg: string,\r\n    readonly alert: string,\r\n}\r\n\r\nexport type StdNoobCardGroup = {\r\n    readonly GenerateID: number;\r\n    readonly CardNumber: number;\r\n    readonly CardID: number[];\r\n    readonly CardNumber1: number;\r\n    readonly CardID1: number[];\r\n    readonly CardNumber2: number;\r\n    readonly CardID2: number[];\r\n    readonly CardNumber3: number;\r\n    readonly CardID3: number[];\r\n    readonly CardNumber4: number;\r\n    readonly CardID4: number[];\r\n    readonly CardNumber5: number;\r\n    readonly CardID5: number[];\r\n    readonly CardGroupName: string;\r\n    readonly CardGroupHead: number;\r\n    readonly CardGroupBack: number;\r\n    readonly DeliveryItems: number[];\r\n}\r\n\r\n/**通行证 */\r\nexport type StdSeaGatepass = {\r\n    readonly ID: number;//通行证编号\r\n    readonly SeaId: number;//所属赛季\r\n    readonly Grate: number;//通行证级别\r\n    readonly Name: string;//基础通行证名称\r\n    readonly MaxLv: number;//通行证最大等级\r\n    readonly ItemId: number[];//通行证激活消耗道具编号跟数量\r\n    readonly ItemNum: number[];//通行证激活消耗道具编号跟数量\r\n    readonly EquityCardId: number;//获得权益\r\n    readonly BgTexture: string;//通行证主页背景\r\n    readonly BigPrizeIcon: string;//通行证主页大奖图\r\n    readonly TitleIcon: string;//通行证主页赛季标题资源\r\n    readonly Icon: string;//通行证图标（主页）\r\n    readonly Des: string;//大奖文字描述\r\n    readonly BuyDes: string[];//通行证购买描述\r\n}\r\n\r\n/**通行证等级配置 */\r\nexport type StdSeaGatepassLv = {\r\n    readonly Lv: number;//等级\r\n    readonly Exp: number;//升级到该级需要经验\r\n}\r\n\r\n/**通行证等级配置 */\r\nexport type StdSeaGatepassLvReward = {\r\n    readonly Id: number;\r\n    readonly SeaGatepassID: number;//赛季通行证编号\r\n    readonly Lv: number;//等级\r\n    readonly RewardType: number[];//奖励类型\r\n    readonly RewardID: number[];//奖励编号\r\n    readonly RewardNum: number[];//奖励数值\r\n}\r\n\r\n/**权益 */\r\nexport type StdEquityCard = {\r\n    readonly EquityCardID: number;//权益卡编号\r\n    readonly ItemId: number;//权益兑换道具道具\r\n    readonly name: string;//\r\n    readonly EquityList: number[];//权益ID\r\n    readonly ShowStartTime: string;//权益展示开始时间\r\n    readonly ExchangeStartTime: string;//权益可兑换开始时间\r\n    readonly ExchangeEndTime: string;//权益下架时间-0表示永久\r\n    readonly LimitNum: number;//单次可兑换次数\r\n    readonly RepeatExchange: number;\r\n    readonly keepDuration: number;//权益持续时间\r\n    readonly bind_benefit: number;//是否激活上级好友绑定次数\r\n    readonly TabIcon: string;//页签图标\r\n    readonly TabName: string;//权益卡tab按钮名称\r\n    readonly CardType: number;//权益卡类型\r\n    readonly SeaId: number;//赛季通行证所属赛季\r\n    readonly RewardType: number[];//权益开通马上获得奖励类型\r\n    readonly RewardID: number[];//权益开通马上获得奖励编号\r\n    readonly RewardNumber: number[];//权益开通马上获得奖励数量\r\n    readonly BgTxture: string;//权益界面背景图\r\n    readonly GetEquityIcon: string;//权益logo图\r\n    readonly EffectShow: string;//权益展示特效\r\n    readonly NameIcon:string;\r\n}\r\n\r\n/**权益列表 */\r\nexport type StdEquityList = {\r\n    readonly EquityID: number;//权益编号\r\n    readonly EquityType: number;//权益类型\r\n    readonly EquityName: string;//权益类型名称\r\n    readonly Function: string;//关联功能\r\n    readonly Param: string;//关联参数\r\n    readonly ParamValue: number;//参数详情\r\n    readonly Icon: string;//图标\r\n    readonly describe: string;//文本\r\n    readonly RewardType: number[];//奖励类型\r\n    readonly RewardID: number[];//奖励编号\r\n    readonly RewardNumber: number[];//奖励数量\r\n    readonly RronyRewardNum: number;//好友收益\r\n    readonly TImeType: number;//持续时间\r\n    readonly isHeroGallery: number;//\r\n}\r\n\r\n\r\n/**星元对战配置 */\r\nexport type StdPVPBattle = {\r\n    readonly MatchID: number;//对战模式ID\r\n    readonly View: string;//\r\n    readonly MatchName: string;//玩法名称\r\n    readonly MatchStartTime: string;//玩法开启日期\r\n    readonly MatchEddTime: string;//玩法结束时间/D\r\n    readonly expendID: number[];//对战消耗道具Id\r\n    readonly expendNumber: number[];//对战消耗道具数量\r\n    readonly rewardID: number[];//对战获得道具id\r\n    readonly rewardNumber: number[];//对战获得道具数量\r\n\r\n}\r\n\r\n"]}