{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/rights/RightsPanel.ts"],"names":["RightsPanel","Button","Label","Sprite","SpriteFrame","Toggle","Panel","AutoScroller","GatePass","RightsConvert","CfgMgr","PlayerData","ResMgr","prefab","bg","help","scroller","tab_list","onLoad","CloseBy","find","SetHandle","updateItem","bind","node","on","onSelect","addComponent","EventType","CLICK","onHelp","onShow","flush","args","seaid","CurSeasonData","currentSeasonId","_tab_list_1","getPlayerHasEuqityList","_tab_list_2","getEquityOpenCfg","index","length","element","delete_index","findIndex","data","EquityCardID","splice","UpdateDatas","SelectFirst","onPage","page","console","log","active","CardType","Show","item","icon1","getChildByName","getComponent","name1","icon2","getChildByPath","name2","LoadResAbSub","TabIcon","res","spriteFrame","string","TabName","isChecked","onHide"],"mappings":"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","sourcesContent":["import {Button, Input, Label, Node, Sprite, SpriteFrame, Toggle } from \"cc\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { GatePass } from \"./GatePass\";\r\nimport { RightsConvert } from \"./RightsConvert\";\r\nimport { CfgMgr, StdEquityCard } from \"../../manager/CfgMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\n\r\nexport class RightsPanel extends Panel {\r\n    protected prefab: string = \"prefabs/rights/RightsPanel\";\r\n\r\n  \r\n    private bg:Sprite;\r\n    private help:Button;\r\n    protected scroller: AutoScroller;\r\n    private GatePass:GatePass;\r\n    private RightsConvert:RightsConvert\r\n   \r\n\r\n    private tab_list:StdEquityCard[]\r\n    protected async onLoad() {\r\n        this.CloseBy(\"backBtn\");\r\n        this.help = this.find(\"help\", Button);\r\n        this.scroller = this.find(\"ScrollView\", AutoScroller);\r\n        this.scroller.SetHandle(this.updateItem.bind(this));\r\n        this.scroller.node.on('select', this.onSelect, this);\r\n        this.GatePass = this.find(\"content/GatePass\").addComponent(GatePass);\r\n        this.RightsConvert = this.find(\"content/RightsConvert\").addComponent(RightsConvert);\r\n\r\n        this.help.node.on(Button.EventType.CLICK, this.onHelp, this)\r\n    }\r\n\r\n    protected onShow(): void {\r\n     \r\n    }\r\n\r\n    public flush(...args: any[]): void {\r\n        let seaid = PlayerData.CurSeasonData.currentSeasonId\r\n        let _tab_list_1 = PlayerData.getPlayerHasEuqityList();\r\n        let _tab_list_2 =  CfgMgr.getEquityOpenCfg(seaid);\r\n        for (let index = 0; index < _tab_list_2.length; index++) {\r\n            const element = _tab_list_2[index];\r\n            let delete_index = _tab_list_1.findIndex(data=>data.EquityCardID == element.EquityCardID) \r\n            if(delete_index != -1){\r\n                _tab_list_1.splice(delete_index, 1)\r\n            }\r\n        }\r\n        this.tab_list = [..._tab_list_1, ..._tab_list_2]\r\n        this.scroller.UpdateDatas(this.tab_list)\r\n        this.scroller.SelectFirst()\r\n    }\r\n\r\n \r\n\r\n  \r\n    onPage(page: number) {\r\n        console.log(page)\r\n        this.GatePass.node.active = false;\r\n        this.RightsConvert.node.active = false;\r\n        let data = this.tab_list[page]\r\n        switch (data.CardType) {\r\n            case 1:\r\n                this.GatePass.node.active = true;\r\n                this.GatePass.Show(data)\r\n                break;\r\n            case 2:\r\n                this.RightsConvert.node.active = true;\r\n                this.RightsConvert.Show(data)\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n       \r\n    }\r\n    private updateItem(item: Node, data: StdEquityCard, index: number) {\r\n        let icon1 = item.getChildByName(\"icon\").getComponent(Sprite)\r\n        let name1 = item.getChildByName(\"name\").getComponent(Label)\r\n        let icon2 = item.getChildByPath(\"Checkmark/icon\").getComponent(Sprite)\r\n        let name2 = item.getChildByPath(\"Checkmark/name\").getComponent(Label)\r\n        \r\n        ResMgr.LoadResAbSub(\"sheets/rights/icon/\" + data.TabIcon + \"/spriteFrame\", SpriteFrame, res=>{\r\n            icon1.spriteFrame = icon2.spriteFrame = res\r\n        })\r\n\r\n        name1.string = name2.string = data.TabName;\r\n\r\n    }\r\n    private onSelect(index: number, item: Node, data: any) {\r\n        console.log(data)\r\n        item.getComponent(Toggle).isChecked = true;\r\n        this.onPage(index);\r\n    }\r\n\r\n\r\n    private onHelp(){\r\n\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n\r\n    }\r\n\r\n}\r\n"]}