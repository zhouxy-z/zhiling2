{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/task/TaskItem.ts"],"names":["TaskItem","Button","Component","Label","Tween","TweenSystem","UITransform","tween","CfgMgr","ThingTypeName","Session","AutoScroller","STaskType","Req","Route","PlayerData","ItemUtil","BagItem","Goto","Utils","nameLab","proLab","proLab2","progress","awardList","goBtn","getBtn","activeNumLab","getdLab","timelab","isInit","std","data","awList","onLoad","node","getChildByPath","getComponent","addComponent","SetHandle","updateAwardItem","bind","on","onSelect","EventType","CLICK","onBtnClick","updateShow","SetData","btn","Win","fetchs","Get","stdFetch","Param","send_task","taskId","TaskId","server","Send","active","parent","GetTaskByData","string","Description","task_state","GetTaskState","value","CompletionNum","pro","max_width","width","SetNodeGray","TaskType","season","open_time","lv","index","ConditionId","length","element","ConditionValue","day","hour","str","seasontime","GetCurSeasonPastTTime","time","Math","floor","cur_lv","m","s","instance","ActionManager","getNumberOfRunningActionsInTarget","stopAllByTarget","repeatForever","delay","call","start","list","ActiveTaskValue","a","type","Item","item","id","count","push","WeekActiveTaskValue","TaskTypeData","GetSThingList","RewardType","RewardID","RewardNumber","concat","UpdateDatas","awardItem","setThing"],"mappings":"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","sourcesContent":["import { Button, Color, Component, EventKeyboard, Label, Layout, Node, Tween, TweenSystem, UITransform, tween } from \"cc\";\r\nimport { CfgMgr, StdTask, ThingTypeName } from \"../../manager/CfgMgr\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { SPlayerDataTask, STaskType } from \"../player/PlayerStruct\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { ItemUtil } from \"../../utils/ItemUtils\";\r\nimport { BagItem } from \"../bag/BagItem\";\r\nimport { Goto } from \"../../DL\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\nexport class TaskItem extends Component {\r\n    private nameLab: Label;\r\n    private proLab: Label;\r\n    private proLab2: Label;\r\n    private progress: Node;\r\n    private awardList: AutoScroller;\r\n    private goBtn: Button;\r\n    private getBtn: Button;\r\n    private activeNumLab: Label;\r\n    private getdLab: Node;\r\n    private timelab: Label;\r\n    private isInit: boolean = false;\r\n    private std: StdTask;\r\n    private data: SPlayerDataTask;\r\n    private awList: proto.base.IThing[] = [];\r\n    protected onLoad(): void {\r\n        this.nameLab = this.node.getChildByPath(\"unLockNode/nameLab\").getComponent(Label);\r\n        this.proLab = this.node.getChildByPath(\"unLockNode/Node/proLab\").getComponent(Label);\r\n        this.proLab2 = this.node.getChildByPath(\"unLockNode/Node/lab\").getComponent(Label);\r\n        this.awardList = this.node.getChildByPath(\"unLockNode/awardList\").getComponent(AutoScroller);\r\n        this.goBtn = this.node.getChildByPath(\"unLockNode/goBtn\").getComponent(Button);\r\n        this.getBtn = this.node.getChildByPath(\"unLockNode/getBtn\").addComponent(Button);\r\n        this.activeNumLab = this.node.getChildByPath(\"unLockNode/activeNumLab\").getComponent(Label);\r\n        this.getdLab = this.node.getChildByPath(\"unLockNode/getdLab\");\r\n        this.timelab = this.node.getChildByPath(\"lockNode/timelab\").getComponent(Label);\r\n        this.progress = this.node.getChildByPath(\"unLockNode/taskProgress/progress\");\r\n        this.awardList.SetHandle(this.updateAwardItem.bind(this));\r\n        this.awardList.node.on('select', this.onSelect, this);\r\n        this.goBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.getBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.isInit = true;\r\n        this.updateShow();\r\n    }\r\n\r\n    SetData(data: SPlayerDataTask) {\r\n        this.data = data;\r\n        this.updateShow();\r\n\r\n    }\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.goBtn:\r\n                if(this.std.Win){\r\n                    let fetchs = CfgMgr.Get(\"fetch\");\r\n                    let stdFetch = fetchs[this.std.Win];\r\n                    if(stdFetch.Param){\r\n                        Goto(stdFetch.Win, ...stdFetch.Param);\r\n                    }else{\r\n                        Goto(stdFetch.Win); \r\n                    }\r\n                }  \r\n                break;\r\n            case this.getBtn:\r\n                let send_task = new Req[\"player.protocol.completetask\"]();\r\n                send_task.taskId = this.std.TaskId;\r\n                send_task.server = PlayerData.server;\r\n                Session.Send(Route[\"player.protocol.completetask\"], send_task);\r\n                break;\r\n        }\r\n    }\r\n    private updateShow(): void {\r\n        if (!this.isInit || !this.data) return;\r\n        this.goBtn.node.active = false;\r\n        this.getBtn.node.active = false;\r\n        this.activeNumLab.node.active = false;\r\n        this.getdLab.active = false\r\n        this.timelab.node.parent.active = false;\r\n        this.goBtn.node.parent.active = false;\r\n\r\n        this.std = CfgMgr.GetTaskByData(this.data);\r\n        this.nameLab.string = this.std.Description;\r\n\r\n        \r\n        let task_state = PlayerData.GetTaskState(this.data);\r\n        let value = this.data.value ? (this.data.value > this.std.CompletionNum ? this.std.CompletionNum : this.data.value) : 0\r\n        if(task_state == 2 || task_state == 1){\r\n            value = this.std.CompletionNum;\r\n        }\r\n        \r\n        this.proLab.string = `${value}/`;\r\n        this.proLab2.string = `${this.std.CompletionNum}`;\r\n        let pro = value / this.std.CompletionNum\r\n        let max_width = this.progress.parent.getComponent(UITransform).width\r\n        this.progress.getComponent(UITransform).width = max_width * (pro > 1 ? 1 : pro)\r\n        if(task_state == 1){\r\n            this.getdLab.active = true;\r\n        }else if(task_state == 2){\r\n            this.getBtn.node.active = true;\r\n        }else{\r\n            this.goBtn.node.active = true;\r\n            Utils.SetNodeGray(this.goBtn.node, !this.std.Win)\r\n        }\r\n        if(this.std.TaskType == STaskType.season){\r\n            let open_time = 0\r\n            let lv = 0\r\n            for (let index = 0; index < this.std.ConditionId.length; index++) {\r\n                const element = this.std.ConditionId[index];\r\n                if(element == 2){\r\n                    open_time = this.std.ConditionValue[index] - 1;\r\n                }else if(element == 1){\r\n                    lv = this.std.ConditionValue[index]\r\n                }\r\n            }\r\n            let day;\r\n            let hour;\r\n            let str = \"\";\r\n            let seasontime = PlayerData.GetCurSeasonPastTTime();\r\n            let time = open_time * 86400 - seasontime\r\n            if(time > 3600){    \r\n                day = Math.floor(time / (3600 * 24))\r\n                hour = Math.floor((time % (3600 * 24)) / 3600);\r\n                str = \"在\" + day + \"天\" + hour + \"小时\" + \"后解锁\";\r\n            }\r\n\r\n            let cur_lv = 100000\r\n            if(cur_lv < lv){\r\n                if(str.length > 0){\r\n                    str = str + \"并且收藏等级不小于\" + lv;\r\n                }else{\r\n                    str = str + \"收藏等级不小于\" + lv;\r\n                }\r\n            }\r\n\r\n            if(time < 3600 && time > 0){  \r\n                let m = Math.floor(time / 60)\r\n                let s = Math.floor(time % 60);\r\n                str = \"在\" + m + \"分\" + s + \"秒\" + \"后解锁\";\r\n                if (TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.timelab) > 0) {\r\n                    Tween.stopAllByTarget(this.timelab);\r\n                }\r\n                tween(this.timelab).repeatForever(tween().delay(1).call(() => {\r\n                    if(time - 1 <= 0){\r\n                        Tween.stopAllByTarget(this.timelab);\r\n                    }else{\r\n                        time = time - 1\r\n                        let m = Math.floor(time / 60)\r\n                        let s = Math.floor(time % 60);\r\n                        str = \"在\" + m + \"分\" + s + \"秒\" + \"后解锁\";\r\n                        this.timelab.string = str;\r\n                    }\r\n                })).start();\r\n            }\r\n            \r\n            if(str != \"\"){\r\n                //不开放\r\n                this.timelab.node.parent.active = true;\r\n                this.timelab.string = str;\r\n            }else{\r\n                //开放\r\n                this.goBtn.node.parent.active = true;\r\n            }\r\n            \r\n        }else{\r\n            this.goBtn.node.parent.active = true;\r\n        }\r\n\r\n        let list:proto.base.IThing[]  =  [];\r\n        if (typeof  this.std.ActiveTaskValue == \"number\" && this.std.ActiveTaskValue > 0) {\r\n            let a: proto.base.IThing = {type:ThingTypeName.Item, item:{id:202, count:this.std.ActiveTaskValue}}\r\n            list.push(a);\r\n        } \r\n        if (typeof  this.std.WeekActiveTaskValue == \"number\" && this.std.WeekActiveTaskValue > 0) {\r\n            let a: proto.base.IThing = {type:ThingTypeName.Item, item:{id:203, count:this.std.WeekActiveTaskValue}}\r\n            list.push(a);\r\n        }\r\n        if(this.std.TaskTypeData[1]){\r\n            let a: proto.base.IThing = {type:ThingTypeName.Item, item:{id:201, count:this.std.TaskTypeData[1]}}\r\n            list.push(a);\r\n        }\r\n        this.awList = ItemUtil.GetSThingList(this.std.RewardType, this.std.RewardID, this.std.RewardNumber);\r\n        list = list.concat(...this.awList)\r\n        this.awardList.UpdateDatas(list);\r\n    }\r\n\r\n    private updateAwardItem(item: Node, data: proto.base.IThing) {\r\n        let awardItem = item.getComponent(BagItem);\r\n        if (!awardItem) awardItem = item.addComponent(BagItem);\r\n        awardItem.setThing(data);\r\n    }\r\n    protected async onSelect(index: number, item: Node) {\r\n        // let selectData = this.awList[index];\r\n        // if(selectData){\r\n        //     ItemTips.Show(selectData);\r\n        // }\r\n    }\r\n}"]}