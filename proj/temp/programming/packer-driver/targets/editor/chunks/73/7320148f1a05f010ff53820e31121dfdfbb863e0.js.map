{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardTest.ts"],"names":["CardTest","Component","Label","path","sp","Sprite","SpriteFrame","CfgMgr","card_quality","ResMgr","Utils","EventMgr","Evt_Card_Chage","Evt_Item_Change","PlayerData","frame","nameframe","nameLab","costLab","body_card","powerLab","select","doneNode","add","cardMask","cardNode","tradeCd","effectFrame","upEffect","isShowUpEffect","data","addCallBack","$loadSub","complete","hasLoad","onLoad","node","getChildByPath","getComponent","Skeleton","getChildByName","active","loadSub","thisObj","Promise","resolve","reject","onEnable","on","onUpdateCard","onItemChange","onDisable","off","cardData","id","SetData","updateUpgradeState","std","GetCard","cardId","string","Cost","Power","CardName","console","log","quality","clearAnimation","skeletonData","LoadResAbSub","join","SkeletonData","setAnimation","toString","spriteFrame","setIsShowUpEffect","bool","isCanUpgrade","CheckCardIsCanUpgrade","setSelect","is_select","getSelectState","getData","setGray","is_gray","SetNodeGray","setCardMask","setCardTradeCd","setCardEffectState","setShowAdd","callBack"],"mappings":"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","sourcesContent":["import { Component, Input, Label, Node, path, sp, Sprite, SpriteFrame } from \"cc\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { card_quality, ResMgr } from \"../../manager/ResMgr\";\r\nimport { Second, Utils } from \"../../utils/Utils\";\r\nimport proto from \"../../net/Protocol\";\r\nimport { EventMgr, Evt_Card_Chage, Evt_Item_Change } from \"../../manager/EventMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\n\r\nexport class CardTest extends Component {\r\n    private frame: sp.Skeleton;\r\n    private nameframe: Sprite;\r\n    private nameLab: Label;\r\n    private costLab: Label;\r\n    private body_card: sp.Skeleton;\r\n    private powerLab: Label;\r\n    private select: Node;\r\n    private doneNode: Node;\r\n    private add: Node;\r\n    private cardMask: Node;\r\n    private cardNode: Node;\r\n    private tradeCd: Node;\r\n    private effectFrame: sp.Skeleton;\r\n    private upEffect: Node;\r\n\r\n    private isShowUpEffect:boolean = false;\r\n\r\n    private data:proto.base.IBattleCard\r\n    private addCallBack:Function;\r\n    protected $loadSub: Promise<any>;\r\n    protected complete: Function;\r\n    protected hasLoad = false;\r\n\r\n\r\n    protected onLoad(): void {\r\n        this.frame = this.node.getChildByPath(\"cardNode/frame\").getComponent(sp.Skeleton);\r\n        this.costLab = this.node.getChildByPath(\"cardNode/cost/label\").getComponent(Label);\r\n        this.powerLab = this.node.getChildByPath(\"cardNode/power/label\").getComponent(Label);\r\n        this.nameframe = this.node.getChildByPath(\"cardNode/nameframe\").getComponent(Sprite);\r\n        this.nameLab = this.node.getChildByPath(\"cardNode/nameframe/name\").getComponent(Label);\r\n        this.effectFrame = this.node.getChildByPath(\"cardNode/effectFrame\").getComponent(sp.Skeleton);\r\n        this.select = this.node.getChildByPath(\"cardNode/select\");\r\n        this.upEffect = this.node.getChildByName(\"upEffect\");\r\n        this.doneNode = this.node.getChildByName(\"doneNode\");\r\n        this.add = this.node.getChildByName(\"add\");\r\n        this.cardMask = this.node.getChildByName(\"cardMask\");\r\n        this.cardNode = this.node.getChildByName(\"cardNode\");\r\n        this.body_card = this.node.getChildByPath(\"cardNode/body_card\").getComponent(sp.Skeleton);\r\n        this.tradeCd = this.node.getChildByName(\"tradeCd\");\r\n        this.cardMask.active = false;\r\n        this.upEffect.active = false;\r\n        this.tradeCd.active = false;\r\n        this.add.active = false;\r\n        this.hasLoad = true;\r\n        this.complete?.();\r\n    }\r\n\r\n    protected get loadSub() {\r\n        if (this.$loadSub) return this.$loadSub;\r\n        let thisObj = this;\r\n        this.$loadSub = new Promise((resolve, reject) => {\r\n            thisObj.complete = resolve;\r\n        });\r\n        return this.$loadSub;\r\n    }\r\n    protected onEnable(): void {\r\n        EventMgr.on(Evt_Card_Chage, this.onUpdateCard, this);\r\n        EventMgr.on(Evt_Item_Change, this.onItemChange, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        EventMgr.off(Evt_Card_Chage, this.onUpdateCard, this);\r\n        EventMgr.off(Evt_Item_Change, this.onItemChange, this);\r\n    }\r\n\r\n    private onUpdateCard(cardData: proto.base.BattleCard): void {\r\n        if (this.data && this.data.id == cardData.id) {\r\n            this.SetData(cardData);\r\n        }\r\n    }\r\n\r\n    private onItemChange(): void {\r\n        this.updateUpgradeState();\r\n    }\r\n\r\n    /**\r\n     * 设置角色数据\r\n     * @param data \r\n     */\r\n    async SetData(data: proto.base.IBattleCard) {\r\n        if (!this.hasLoad) await this.loadSub;\r\n    \r\n        if(data == null){\r\n            this.doneNode.active = true;\r\n            this.cardNode.active = false;\r\n            this.upEffect.active = false;\r\n            this.data = null;\r\n            return;\r\n        }else{\r\n            this.doneNode.active = false;\r\n            this.cardNode.active = true;\r\n        }\r\n        this.body_card.node.active = true;    \r\n        this.data = data;\r\n        let std = CfgMgr.GetCard(data.cardId)\r\n        this.costLab.string = std.Cost + \"\";\r\n        this.powerLab.string = std.Power + \"\";\r\n        this.nameLab.string = std.CardName;\r\n        console.log(this.data.quality,)\r\n        this.body_card.clearAnimation();\r\n        this.body_card.skeletonData = await ResMgr.LoadResAbSub(path.join(\"spine\",  \"card_0029\", \"card_0029\"), sp.SkeletonData);\r\n        this.body_card.setAnimation(0, \"idle\", true);\r\n        this.frame.clearAnimation();\r\n        this.frame.skeletonData = await ResMgr.LoadResAbSub(path.join(\"spine\",  \"cardbg_000\" + this.data.quality, \"cardbg_000\" + this.data.quality), sp.SkeletonData); \r\n        this.frame.setAnimation(0, \"idle\", true);\r\n\r\n         this.effectFrame.clearAnimation();\r\n        this.effectFrame.setAnimation(0, data.quality.toString(), true);\r\n        this.nameframe.spriteFrame = await ResMgr.LoadResAbSub(path.join(card_quality,  \"nameframe_\" + data.quality, \"spriteFrame\"), SpriteFrame);\r\n\r\n        this.updateUpgradeState();\r\n    }\r\n\r\n    public setIsShowUpEffect(bool: boolean): void {\r\n        this.isShowUpEffect = bool;\r\n    }\r\n\r\n    private updateUpgradeState(): void {\r\n        let isCanUpgrade: boolean = PlayerData.CheckCardIsCanUpgrade(this.data && this.data.id)\r\n        this.upEffect.active = isCanUpgrade && this.isShowUpEffect;\r\n    }\r\n\r\n    async setSelect(is_select: boolean){\r\n        if (!this.hasLoad) await this.loadSub;\r\n        this.select.active = is_select;\r\n    }\r\n\r\n    getSelectState(){\r\n        return this.select.active;\r\n    }\r\n\r\n    getData(){\r\n        return this.data;\r\n    }\r\n\r\n    setGray(is_gray){\r\n        Utils.SetNodeGray(this.node, is_gray)\r\n    }\r\n\r\n    async setCardMask(bool: boolean) {\r\n        if (!this.hasLoad) await this.loadSub;\r\n        this.cardMask.active = bool;\r\n    }\r\n\r\n    async setCardTradeCd(bool: boolean) {\r\n        if (!this.hasLoad) await this.loadSub;\r\n        this.tradeCd.active = bool;\r\n    }\r\n\r\n    setCardEffectState(bool: boolean) {\r\n       this.isShowUpEffect = bool;\r\n    }\r\n\r\n    async setShowAdd(bool: boolean, callBack?:Function){\r\n        if (!this.hasLoad) await this.loadSub;\r\n        this.add.active = bool;\r\n    }\r\n}"]}