{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/bag/BagPanel.ts"],"names":["BagPanel","Input","Label","Sprite","SpriteFrame","Toggle","instantiate","path","Panel","AutoScroller","PlayerData","CfgMgr","BagItem","ResMgr","folder_item","EventMgr","Evt_GetReward","Evt_Item_Change","Tips","Goto","prefab","infoView","itemShow","empty","scroller","navBtns","currentPage","selector","onLoad","CloseBy","find","SetHandle","updateItem","bind","node","on","onSelect","nav","children","forEach","item","index","push","getComponent","EventType","TOUCH_END","e","onPage","onUse","ontrade","onShow","flush","args","SetPage","onHide","page","$hasLoad","initSub","btn","isChecked","reflush","items","GetitemBySubType","i","length","HideBag","splice","UpdateDatas","active","SelectFirst","undefined","data","bagItem","addComponent","setThing","stdItem","Getitem","id","getChildByName","spriteFrame","LoadResAbSub","Quality","join","Icon","fetchs","Get","getChildByPath","string","ItemName","count","Remark","layout","len","Math","max","SkipGet","child","addChild","stdFetch","off","Win","Desc","goto","Button","indexOf","win","Show"],"mappings":"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","sourcesContent":["import { EventTouch, Input, Label, Node, Sprite, SpriteFrame, Toggle, instantiate, path } from \"cc\";\r\n\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { CfgMgr, StdItem } from \"../../manager/CfgMgr\";\r\nimport { BagItem } from \"./BagItem\";\r\nimport { ResMgr, folder_item } from \"../../manager/ResMgr\";\r\nimport { EventMgr, Evt_GetReward, Evt_Item_Change } from \"../../manager/EventMgr\";\r\nimport { Tips } from \"../common/Tips\";\r\nimport { Goto } from \"../../DL\";\r\nimport proto from \"../../net/Protocol\";\r\n\r\nexport class BagPanel extends Panel {\r\n    protected prefab: string = \"prefabs/bag/BagPanel\";\r\n\r\n    protected infoView: Node;\r\n    protected itemShow: Node;\r\n    protected empty: Node;\r\n    protected scroller: AutoScroller;\r\n    protected navBtns: Toggle[] = [];\r\n    protected currentPage: number;\r\n    protected selector: StdItem;\r\n\r\n    protected async onLoad() {\r\n        this.CloseBy(\"backBtn\");\r\n        this.infoView = this.find(\"infoView\");\r\n        this.itemShow = this.find(\"itemShow\");\r\n        this.empty = this.find(\"empty\");\r\n        this.scroller = this.find(\"ScrollView\", AutoScroller);\r\n        this.scroller.SetHandle(this.updateItem.bind(this));\r\n        this.scroller.node.on('select', this.onSelect, this);\r\n\r\n        let nav = this.find(\"nav\");\r\n        nav.children.forEach((item, index) => {\r\n            this.navBtns.push(item.getComponent(Toggle));\r\n            item.on(Input.EventType.TOUCH_END, e => {\r\n                this.onPage(index);\r\n            }, this);\r\n        });\r\n\r\n        this.find(\"infoView/useBtn\").on(Input.EventType.TOUCH_END, this.onUse, this);\r\n        this.find(\"infoView/tradeBtn\").on(Input.EventType.TOUCH_END, this.ontrade, this);\r\n    }\r\n\r\n    protected onShow(): void {\r\n        EventMgr.on(Evt_Item_Change, this.flush, this);\r\n        EventMgr.on(Evt_GetReward, this.flush, this);\r\n    }\r\n\r\n    public flush(...args: any[]): void {\r\n        this.SetPage(this.currentPage || 0);\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n\r\n    }\r\n\r\n    public async SetPage(page: number) {\r\n        if (!this.$hasLoad) await this.initSub;\r\n        let btn = this.navBtns[page];\r\n        if (btn) btn.isChecked = true;\r\n        this.onPage(page);\r\n    }\r\n    onPage(page: number) {\r\n        let reflush = this.currentPage != page;\r\n        this.currentPage = page;\r\n        let items = PlayerData.GetitemBySubType(page);\r\n        for (let i = items.length - 1; i >= 0; i--) {\r\n            if (items[i].item['std'].HideBag) {\r\n                items.splice(i, 1);\r\n            }\r\n        }\r\n        this.scroller.UpdateDatas(items);\r\n        if (items.length <= 0) {\r\n            this.empty.active = true;\r\n            this.infoView.active = this.itemShow.active = false;\r\n        } else {\r\n            this.empty.active = false;\r\n            this.infoView.active = this.itemShow.active = true;\r\n        }\r\n        if (reflush && items?.length) {\r\n            this.scroller.SelectFirst();\r\n            this.onSelect(undefined, undefined, items[0]);\r\n        }\r\n    }\r\n    protected updateItem(item: Node, data: any, index: number) {\r\n        let bagItem = item.getComponent(BagItem) || item.addComponent(BagItem);\r\n        bagItem.setThing(data);\r\n    }\r\n    protected async onSelect(index: number, item: Node, data: proto.base.IThing) {\r\n        this.empty.active = false;\r\n        this.infoView.active = this.itemShow.active = true;\r\n        let stdItem = CfgMgr.Getitem(data.item.id);\r\n        this.selector = stdItem;\r\n        this.itemShow.getChildByName(\"bg\").getComponent(Sprite).spriteFrame = await ResMgr.LoadResAbSub(\"sheets/bag/Quality_\" + stdItem.Quality + \"/spriteFrame\", SpriteFrame);\r\n        this.itemShow.getChildByName(\"icon\").getComponent(Sprite).spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_item, stdItem.Icon, \"spriteFrame\"), SpriteFrame);\r\n\r\n        let fetchs = CfgMgr.Get(\"fetch\");\r\n        this.infoView.getChildByPath(\"nameLab\").getComponent(Label).string = stdItem.ItemName;\r\n        this.infoView.getChildByPath(\"numLab\").getComponent(Label).string = data.item.count;\r\n        this.infoView.getChildByPath(\"descLab\").getComponent(Label).string = stdItem.Remark;\r\n        let layout = this.infoView.getChildByPath(\"layout\");\r\n        for (let i = 0, len = Math.max(stdItem.SkipGet?.length || 0, layout.children.length); i < len; i++) {\r\n            let child = layout.children[i];\r\n            if (!child) {\r\n                child = instantiate(layout.children[0]);\r\n                layout.addChild(child);\r\n            }\r\n            let stdFetch = fetchs[stdItem?.SkipGet?.[i]];\r\n            child.getChildByName(\"goto\").off(Input.EventType.TOUCH_END);\r\n            if (stdFetch) {\r\n                child.active = true;\r\n                child['fetch'] = stdFetch.Win;\r\n                child.getChildByName(\"descLab\").getComponent(Label).string = stdFetch.Desc;\r\n                child.getChildByName(\"goto\").on(Input.EventType.TOUCH_END, this.goto, child);\r\n            } else {\r\n                child.active = false;\r\n            }\r\n        }\r\n        this.find(\"infoView/useBtn\").active = false;\r\n        this.find(\"infoView/tradeBtn\").active = false;\r\n        if (this.selector?.Button?.indexOf(3) != -1) {\r\n            this.find(\"infoView/useBtn\").active = true;\r\n        }\r\n        if (this.selector?.Button?.indexOf(1) != -1) {\r\n            this.find(\"infoView/tradeBtn\").active = true;\r\n        }\r\n    }\r\n    protected goto(e: EventTouch) {\r\n        let win = this['fetch'];\r\n        Goto(win);\r\n    }\r\n\r\n    protected onUse() {\r\n        Goto(\"OpenBoxPanel\", this.selector);\r\n    }\r\n    protected ontrade() {\r\n        Tips.Show(\"暂未开启\");\r\n    }\r\n}\r\n"]}