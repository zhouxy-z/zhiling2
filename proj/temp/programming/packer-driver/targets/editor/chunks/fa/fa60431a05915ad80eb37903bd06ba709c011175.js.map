{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/fight/opOutput/Out_RetransmissionRound.ts"],"names":["Out_RetransmissionRound","Battle_UpdateTerrain","EventMgr","BattleBaseComp","battleDataMgr","FightData","start","setRoomData","isExit","currentRound","curRound","scene","FlushRound","round","roomData","roundMax","finalValue","exit","reset","onUpdate","dt","playerData","isPlayerA","key","data","gamePlayData","players","terrainMax","playerId","FlushPlayerInfo","totalPower","areaIdx","cardData","terrain","FlushAreaCrads","getPlayerTerrainTotalPow","FlushAreaPower","setHandCard","handCards","curEnergy","roundEnergy","FlushEnergy","FlushTerrain","ownerPlayerId","emit","terrains","cards","FlushHandCard"],"mappings":"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","sourcesContent":["import { Battle_End_Round, Battle_PlayNewRoundEffect, Battle_UpdateTerrain, EventMgr } from \"../../../manager/EventMgr\";\r\nimport proto from \"../../../net/Protocol\";\r\nimport { BattleBaseComp } from \"../../battle/BattleBaseComp\";\r\nimport { battleDataMgr } from \"../../battle/BattleDataMgr\";\r\nimport { FightData } from \"../FightData\";\r\n\r\n/**\r\n * 重置战斗房间数据\r\n */\r\nexport class Out_RetransmissionRound extends BattleBaseComp<proto.base.IBattleRoomOpOutput_NewRound> {\r\n    protected async start() {\r\n        await this.setRoomData();\r\n        if (this.isExit) return;\r\n        FightData.currentRound = battleDataMgr.curRound;\r\n        this.scene.FlushRound(this.round, battleDataMgr.roomData.roundMax.finalValue);\r\n        this.exit();\r\n    }\r\n\r\n    protected reset(): void {\r\n        \r\n    }\r\n\r\n    protected onUpdate(dt: number): void {\r\n        \r\n    }\r\n    /**\r\n     * 初始化房间数据\r\n     */\r\n    private async setRoomData() {\r\n\r\n        // 刷新场景手牌和卡牌\r\n        let playerData: proto.base.IBattleRoomPlayerData;\r\n        let isPlayerA: boolean;\r\n        for (let key in this.data.gamePlayData.players) {\r\n            playerData = this.data.gamePlayData.players[key];\r\n\r\n            let terrainMax = battleDataMgr.roomData.terrainMax;\r\n            isPlayerA = battleDataMgr.isPlayerA(playerData.playerId);\r\n            this.scene.FlushPlayerInfo(isPlayerA, playerData);\r\n            let totalPower: number;\r\n            for (let areaIdx = 0; areaIdx < terrainMax; areaIdx++) {\r\n                let cardData: proto.base.IBattleRoomTerrainPlayerData = playerData.terrain[areaIdx]\r\n                await this.scene.FlushAreaCrads(isPlayerA, areaIdx, cardData);\r\n                if (this.isExit) return;\r\n                totalPower = battleDataMgr.getPlayerTerrainTotalPow(playerData.playerId, areaIdx);\r\n                this.scene.FlushAreaPower(isPlayerA, areaIdx, totalPower);\r\n            }\r\n\r\n            if (isPlayerA) {\r\n                await this.setHandCard(playerData.handCards);\r\n                if (this.isExit) return;\r\n                let curEnergy: number = playerData.roundEnergy[this.round - 1]?.finalValue;\r\n                this.scene.FlushEnergy(curEnergy);\r\n            }\r\n        }\r\n\r\n        // 初始场景区域\r\n        await this.scene.FlushTerrain(true, this.data.gamePlayData, this.ownerPlayerId);\r\n        if (this.isExit) return;\r\n        EventMgr.emit(Battle_UpdateTerrain, this.data.gamePlayData.terrains, this.data.gamePlayData);\r\n    }\r\n\r\n    /**\r\n     * 设置手卡数据\r\n     */\r\n    private async setHandCard(cards: proto.base.IBattleRoomCardData[]) {\r\n        await this.scene.FlushHandCard(cards);\r\n        \r\n    }\r\n\r\n}"]}