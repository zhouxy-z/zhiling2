{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/season/SeasonFightLogPanel.ts"],"names":["SeasonFightLogPanel","Label","path","Sprite","SpriteFrame","CfgMgr","Panel","VList","PlayerData","DateUtils","proto","Req","Route","folder_icon","ResMgr","CardGroupCoverItem","Session","EventMgr","Evt_SeasonFightLog","SectionBattleLogItem","SeasonFightLogCardItem","prefab","logList","nameImg","timeLab","curStdPVPSnatch","curStdPvpLv","seasonData","playerHeadA","playerNameA","playerHeadB","playerNameB","resultImg","pointLab","cardGroupA","cardListA","cardGroupB","cardListB","logDatas","playerDataA","playerDataB","onLoad","find","updateCell","updateCellLog","bind","selectCell","selectCellLog","clickCell","clickCellLog","addComponent","updateCellCardA","clickCellCardA","updateCellCardB","clickCellCardB","CloseBy","update","dt","openTime","GetCurSeasonOpenTime","endTime","GetCurSeasonEndTime","residueTime","ServerTime","day","Math","floor","string","FormatTime","flush","updateSection","onShow","onLogUpdate","sendData","start","limit","Send","on","onHide","cellCount","length","CurSeasonData","GetStdPVPSnatch","currentSeasonId","GetStdPvpLvByPoint","RankGroupID","currentRankInfo","rankPoints","LoadResAbSub","join","LevelNameImg","res","spriteFrame","cell","cellInfo","logData","index","getChildByPath","active","isSelect","logItem","getComponent","SetData","lastCell","lastInfo","selectLog","cardData","cards","logCardItem","data","key","battlePlayers","playerData","playerId","UserInfo","pointChange","imgStr","result","base","PvpResult","PvpResultWin","PvpResultLost","PvpResultTie","updatePlayerData","nameLab","head","cardGroupItem","cardList","cfg","GetHead","deckAttrs","avatarId","headIconUrl","icon","name"],"mappings":"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","sourcesContent":["import { Node, Label, path, Sprite, SpriteFrame } from \"cc\";\r\nimport { CfgMgr, StdPvpLevel, StdPVPSnatch } from \"../../manager/CfgMgr\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { CellInfo, VList } from \"../../component/VList\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\nimport { folder_icon, ResMgr } from \"../../manager/ResMgr\";\r\nimport { CardGroupCoverItem } from \"../common/CardGroupCoverItem\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { EventMgr, Evt_SeasonFightLog } from \"../../manager/EventMgr\";\r\nimport { SectionBattleLogItem } from \"./SectionBattleLogItem\";\r\nimport { SeasonFightLogCardItem } from \"./SeasonFightLogCardItem\";\r\n\r\nexport class SeasonFightLogPanel extends Panel {\r\n    protected prefab: string = \"prefabs/season/SeasonFightLogPanel\";\r\n    private logList: VList;\r\n    private nameImg: Sprite;\r\n    private timeLab: Label;\r\n    private curStdPVPSnatch: StdPVPSnatch;\r\n    private curStdPvpLv: StdPvpLevel;\r\n    private seasonData: proto.pb.PlayerPvpInfoPush;\r\n    private playerHeadA: Sprite;\r\n    private playerNameA: Label;\r\n    private playerHeadB: Sprite;\r\n    private playerNameB: Label;\r\n    private resultImg: Sprite;\r\n    private pointLab: Label;\r\n    private cardGroupA: CardGroupCoverItem;\r\n    private cardListA: VList;\r\n    private cardGroupB: CardGroupCoverItem;\r\n    private cardListB: VList;\r\n    private logDatas: proto.base.IPlayerPvpRankRecord[];\r\n    private playerDataA: proto.base.IPlayerBattleContext;\r\n    private playerDataB: proto.base.IPlayerBattleContext;\r\n    protected onLoad() {\r\n        this.logList = this.find(\"logList\", VList);\r\n        this.logList.updateCell = this.updateCellLog.bind(this);\r\n        this.logList.selectCell = this.selectCellLog.bind(this);\r\n        this.logList.clickCell = this.clickCellLog.bind(this);\r\n        this.nameImg = this.find(\"nameImg\", Sprite);\r\n        this.timeLab = this.find(\"timeCont/timeLab\", Label);\r\n        this.playerHeadA = this.find(\"vsCont/topCont/playerContA/head\", Sprite);\r\n        this.playerNameA = this.find(\"vsCont/topCont/playerContA/nameLab\", Label);\r\n        this.playerHeadB = this.find(\"vsCont/topCont/playerContB/head\", Sprite);\r\n        this.playerNameB = this.find(\"vsCont/topCont/playerContB/nameLab\", Label);\r\n        this.resultImg = this.find(\"vsCont/topCont/resultImg\", Sprite);\r\n        this.pointLab = this.find(\"vsCont/topCont/pointLab\", Label);\r\n        this.cardGroupA = this.find(\"vsCont/cardGroupCoverItemA\").addComponent(CardGroupCoverItem);\r\n        this.cardListA = this.find(\"vsCont/cardListA\", VList);\r\n        this.cardListA.updateCell = this.updateCellCardA.bind(this);\r\n        this.cardListA.clickCell = this.clickCellCardA.bind(this);\r\n        this.cardGroupB = this.find(\"vsCont/cardGroupCoverItemB\").addComponent(CardGroupCoverItem);\r\n        this.cardListB = this.find(\"vsCont/cardListB\", VList);\r\n        this.cardListB.updateCell = this.updateCellCardB.bind(this);\r\n        this.cardListB.clickCell = this.clickCellCardB.bind(this);\r\n        this.CloseBy(\"closeBtn\");\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        if (this.curStdPVPSnatch) {\r\n            let openTime: number = PlayerData.GetCurSeasonOpenTime();\r\n            if (openTime > 0) {\r\n                let endTime: number = PlayerData.GetCurSeasonEndTime();\r\n                if (endTime > 0) {\r\n                    let residueTime: number = endTime - DateUtils.ServerTime;\r\n                    let day: number = Math.floor(residueTime / 86400);\r\n                    if (day >= 1) {\r\n                        this.timeLab.string = `${day}天` + DateUtils.FormatTime(residueTime - day * 86400, \"%{hh}:%{mm}:%{ss}\");\r\n                    } else {\r\n                        if (residueTime > 0) {\r\n                            this.timeLab.string = DateUtils.FormatTime(residueTime, \"%{hh}:%{mm}:%{ss}\");\r\n                        } else {\r\n                            this.timeLab.string = \"赛季已结束\";\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    this.timeLab.string = \"赛季未开启\";\r\n                }\r\n                \r\n            } else {\r\n                this.timeLab.string = \"赛季未开启\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public flush(): void {\r\n        this.updateSection();\r\n    }\r\n\r\n    protected onShow(): void {\r\n        this.onLogUpdate();\r\n        let sendData = new Req[\"pvp.protocol.getpvprankbattlerecords\"]();\r\n        sendData.start = 0;\r\n        sendData.limit = 20;\r\n        Session.Send(Route[\"pvp.protocol.getpvprankbattlerecords\"], sendData);\r\n        EventMgr.on(Evt_SeasonFightLog, this.onLogUpdate, this);\r\n    }\r\n\r\n    protected onHide(): void {\r\n        EventMgr.on(Evt_SeasonFightLog, this.onLogUpdate, this);\r\n    }\r\n\r\n    private onLogUpdate(logList?: proto.base.IPlayerPvpRankRecord[]): void {\r\n        this.logDatas = logList || [];\r\n        this.logList.cellCount = this.logDatas.length;\r\n\r\n    }\r\n\r\n    private updateSection(): void {\r\n        this.seasonData = PlayerData.CurSeasonData;\r\n        this.curStdPVPSnatch = CfgMgr.GetStdPVPSnatch(this.seasonData.currentSeasonId);\r\n        this.curStdPvpLv = CfgMgr.GetStdPvpLvByPoint(this.curStdPVPSnatch.RankGroupID, this.seasonData.currentRankInfo.rankPoints);\r\n        \r\n        \r\n        ResMgr.LoadResAbSub(path.join(\"sheets/sectionIcon\", this.curStdPvpLv.LevelNameImg, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.nameImg.spriteFrame = res;\r\n        });\r\n        \r\n    }\r\n\r\n    private clickCellLog(cell: Node, cellInfo: CellInfo): void {\r\n        \r\n    }\r\n\r\n    private updateCellLog(cell: Node, cellInfo: CellInfo): void {\r\n        let logData: proto.base.IPlayerPvpRankRecord = this.logDatas[cellInfo.index];\r\n        cell.getChildByPath(\"select\").active = cellInfo.isSelect;\r\n        let logItem: SectionBattleLogItem = cell.getComponent(SectionBattleLogItem) || cell.addComponent(SectionBattleLogItem);\r\n        logItem.SetData(logData);\r\n    }\r\n\r\n    private selectCellLog(cell: Node, cellInfo: CellInfo, lastCell: Node, lastInfo: CellInfo): void {\r\n        if (cell) {\r\n            cell.getChildByPath(\"select\").active = cellInfo.isSelect;\r\n        }\r\n        if (lastCell && lastInfo) {\r\n            lastCell.getChildByPath(\"select\").active = lastInfo.isSelect;\r\n        } \r\n        this.selectLog(this.logDatas[cellInfo.index]);\r\n    }\r\n\r\n    private updateCellCardA(cell: Node, cellInfo: CellInfo): void {\r\n        let cardData: proto.base.IBattleCard = this.playerDataA.cards[cellInfo.index];\r\n        let logCardItem: SeasonFightLogCardItem = cell.getComponent(SeasonFightLogCardItem) || cell.addComponent(SeasonFightLogCardItem);\r\n        logCardItem.SetData(cardData);\r\n    }\r\n\r\n    private clickCellCardA(cell: Node, cellInfo: CellInfo): void {\r\n        \r\n    }\r\n\r\n    private updateCellCardB(cell: Node, cellInfo: CellInfo): void {\r\n        let cardData: proto.base.IBattleCard = this.playerDataB.cards[cellInfo.index];\r\n        let logCardItem: SeasonFightLogCardItem = cell.getComponent(SeasonFightLogCardItem) || cell.addComponent(SeasonFightLogCardItem);\r\n        logCardItem.SetData(cardData);\r\n    }\r\n\r\n    private clickCellCardB(cell: Node, cellInfo: CellInfo): void {\r\n        \r\n    }\r\n\r\n    private selectLog(data: proto.base.IPlayerPvpRankRecord): void {\r\n        for (let key in data.battlePlayers) {\r\n            let playerData: proto.base.IPlayerBattleContext = data.battlePlayers[key];\r\n            if (playerData.playerId == PlayerData.UserInfo.playerId) {\r\n                this.playerDataA = playerData;\r\n            } else {\r\n                this.playerDataB = playerData;\r\n            }\r\n        }\r\n        \r\n        this.pointLab.string = data.pointChange >= 0 ? `+${data.pointChange}` : `-${data.pointChange}`;\r\n        let imgStr: string;\r\n        if (data.result == proto.base.PvpResult.PvpResultWin) {\r\n            imgStr = \"win\";\r\n        } else if (data.result == proto.base.PvpResult.PvpResultLost) {\r\n            imgStr = \"lost\";\r\n        }else if (data.result == proto.base.PvpResult.PvpResultTie) {\r\n            imgStr = \"draw\";\r\n        }\r\n        ResMgr.LoadResAbSub(path.join(\"sheets/season\", imgStr, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.resultImg.spriteFrame = res;\r\n        });\r\n        this.updatePlayerData(this.playerDataA, this.playerNameA, this.playerHeadA, this.cardGroupA, this.cardListA);\r\n        this.updatePlayerData(this.playerDataB, this.playerNameB, this.playerHeadB, this.cardGroupB, this.cardListB);\r\n    }\r\n\r\n    private updatePlayerData(playerData: proto.base.IPlayerBattleContext, nameLab: Label, head: Sprite, cardGroupItem: CardGroupCoverItem, cardList: VList): void {\r\n        let cfg = CfgMgr.GetHead(playerData.deckAttrs.avatarId);\r\n        let headIconUrl: string;\r\n        if(cfg){\r\n            headIconUrl = cfg.icon;\r\n            ResMgr.LoadResAbSub(path.join(folder_icon, \"head/\", headIconUrl, \"spriteFrame\"), SpriteFrame, res => {\r\n                head.spriteFrame =  res;\r\n            });\r\n        }\r\n        nameLab.string = playerData.name;\r\n        cardGroupItem.SetData(playerData.deckAttrs, false);\r\n        cardList.cellCount = playerData.cards.length;\r\n    }\r\n}"]}