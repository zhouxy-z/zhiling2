{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/resources/prefabs/bag/BagPanel.ts"],"names":["BagPanel","Input","Label","Sprite","SpriteFrame","Toggle","path","Panel","BagItem","PlayerData","AutoScroller","CardQuality","CfgMgr","ConditionType","ItemSubType","ItemType","JobName","StdCommonType","ThingItemId","ThingType","FormatCondition","ResMgr","folder_icon","ComboBox","GetMoreWin","ComposePanel","EventMgr","Evt_Item_Change","Goto","MsgPanel","ToFixed","OpenBoxPanel","Tips","DateUtils","BuildingType","rightsTips","CheckCondition","PANEL_TYPE","prefab","page","page1","scroller1","page2","scroller2","page3","scroller3","combo1","combo2","item","selectName","selectDesc","selectHas","empty","useBtns","navBtns","scroller","selectData","datas","chipJobSort","chipQualSort","_curSelectIndex","onLoad","CloseBy","find","getChildByPath","getComponent","SetHandle","updateBagItem","bind","node","on","SelectItem","Init","updateJobItem","updateHead1","onSelectJob","updatequalityItem","updateHead2","onSelectquality","addComponent","children","concat","EventType","TOUCH_END","openJiaoyi","openHecheng","openUse","openGet","btn","onPage","onItemChange","SetPage","isOperat","$hasLoad","initSub","undefined","isChecked","onShow","flush","args","onHide","HideList","parent","buildings","GetBuildingByType","ji_di","building","open_lv","GetSysOpenCfg","ConditionValue1","level","TradePanel","Show","std","Getitem","id","SubType","shard","showByItemId","Items","condIds","ConditionId","condDatas","length","condVals","condId","condVal","i","data","push","cond","fail","Itemtpye","box","shield","needLv","GetCommon","PVP","PVPOpenLevel","msg","Home_1","shield_date","SecondsToDetailedTime","ItemEffect1","shield_end_time","LootPlayerData","time1","rights","rights_date","ItemEffect2","cards_time","rightsData","benefit_card","cards","rights_tips","get_path","SkipGet","getChildByName","string","job","icon","spriteFrame","LoadResAbSub","join","value","chipSort","updateListData","quality","t","indexOf","active","GetitemBySubType","material","sort","commSort","cost","UpdateDatas","resetSelect","cont","selectIndex","defSelect","index","itemIndex","a","b","stdA","stdB","Sort","chipFilter","tempData","tempList","GetRole","PositionType","Quality","bagItem","setIsShowSelect","setIsShowRedPoint","SetData","console","log","ScrollToHead","interactable","ItemName","Remark","setResCount","count","btnNode","redNode","Button","Type","ThingTypeItem","ItemEffect3","str","toString"],"mappings":";;;weA4BaA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5B2BC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;AAAaC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,I,OAAAA,I;;AAChFC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,O,iBAAAA,O;;AACFC,MAAAA,U;;AAEEC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,W,iBAAAA,W;AAAaC,MAAAA,M,iBAAAA,M;AAAQC,MAAAA,a,iBAAAA,a;AAAeC,MAAAA,W,iBAAAA,W;AAAaC,MAAAA,Q,iBAAAA,Q;AAAeC,MAAAA,O,iBAAAA,O;AAASC,MAAAA,a,iBAAAA,a;AAAwBC,MAAAA,W,iBAAAA,W;AAAaC,MAAAA,S,iBAAAA,S;;AAC9GC,MAAAA,e,iBAAAA,e;;AAEAC,MAAAA,M,iBAAAA,M;AAAQC,MAAAA,W,iBAAAA,W;;AACRC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,U,kBAAAA,U;;AACAC,MAAAA,Y,kBAAAA,Y;;AAEAC,MAAAA,Q,kBAAAA,Q;AAAUC,MAAAA,e,kBAAAA,e;AAAiBC,MAAAA,I,kBAAAA,I;;AAC3BC,MAAAA,Q,kBAAAA,Q;;AACQC,MAAAA,O,kBAAAA,O;;AACRC,MAAAA,Y,kBAAAA,Y;;AAIAC,MAAAA,I,kBAAAA,I;;AACAC,MAAAA,S,kBAAAA,S;;AACAC,MAAAA,Y,kBAAAA,Y;;AACAC,MAAAA,U,kBAAAA,U;;AACAC,MAAAA,c,kBAAAA,c;;AACAC,MAAAA,U,kBAAAA,U;;;;;;;;;0BAEIrC,Q,GAAN,MAAMA,QAAN;AAAA;AAAA,0BAA6B;AAAA;AAAA;AAAA,eACtBsC,MADsB,GACL,4BADK;AAAA,eAGxBC,IAHwB;AAAA,eAIxBC,KAJwB;AAAA,eAKxBC,SALwB;AAAA,eAMxBC,KANwB;AAAA,eAOxBC,SAPwB;AAAA,eAQxBC,KARwB;AAAA,eASxBC,SATwB;AAAA,eAUxBC,MAVwB;AAAA,eAWxBC,MAXwB;AAAA,eAYxBC,IAZwB;AAAA,eAaxBC,UAbwB;AAAA,eAcxBC,UAdwB;AAAA,eAexBC,SAfwB;AAAA,eAgBxBC,KAhBwB;AAAA,eAiBxBC,OAjBwB;AAAA,eAkBxBC,OAlBwB;AAAA,eAmBxBC,QAnBwB;AAAA,eAoBxBC,UApBwB;AAAA,eAqBxBC,KArBwB;AAAA,eAsBxBC,WAtBwB;AAAA,eAuBxBC,YAvBwB;AAAA,eAwBxBC,eAxBwB;AAAA;;AAyBtBC,QAAAA,MAAM,GAAG;AACf,eAAKC,OAAL,CAAa,iBAAb;AACA,eAAKA,OAAL,CAAa,MAAb;AACA,eAAKtB,KAAL,GAAa,KAAKuB,IAAL,CAAU,cAAV,CAAb;AACA,eAAKtB,SAAL,GAAiB,KAAKD,KAAL,CAAWwB,cAAX,CAA0B,YAA1B,EAAwCC,YAAxC;AAAA;AAAA,2CAAjB;AACA,eAAKxB,SAAL,CAAeyB,SAAf,CAAyB,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAzB;AACA,eAAK3B,SAAL,CAAe4B,IAAf,CAAoBC,EAApB,CAAuB,QAAvB,EAAiC,KAAKC,UAAtC,EAAkD,IAAlD;AAEA,eAAK7B,KAAL,GAAa,KAAKqB,IAAL,CAAU,cAAV,CAAb;AACA,eAAKpB,SAAL,GAAiB,KAAKD,KAAL,CAAWsB,cAAX,CAA0B,YAA1B,EAAwCC,YAAxC;AAAA;AAAA,2CAAjB;AACA,eAAKtB,SAAL,CAAeuB,SAAf,CAAyB,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAzB;AACA,eAAKzB,SAAL,CAAe0B,IAAf,CAAoBC,EAApB,CAAuB,QAAvB,EAAiC,KAAKC,UAAtC,EAAkD,IAAlD;AACA,eAAKzB,MAAL,GAAc,KAAKiB,IAAL,CAAU,wBAAV;AAAA;AAAA,mCAAd;AACA,eAAKjB,MAAL,CAAY0B,IAAZ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB,EAA+B,KAAKC,aAAL,CAAmBL,IAAnB,CAAwB,IAAxB,CAA/B,EAA8D,KAAKM,WAAL,CAAiBN,IAAjB,CAAsB,IAAtB,CAA9D;AACA,eAAKtB,MAAL,CAAYuB,IAAZ,CAAiBC,EAAjB,CAAoB,QAApB,EAA8B,KAAKK,WAAnC,EAAgD,IAAhD;AACA,eAAK5B,MAAL,GAAc,KAAKgB,IAAL,CAAU,4BAAV;AAAA;AAAA,mCAAd;AACA,eAAKhB,MAAL,CAAYyB,IAAZ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAjB,EAAkC,KAAKI,iBAAL,CAAuBR,IAAvB,CAA4B,IAA5B,CAAlC,EAAqE,KAAKS,WAAL,CAAiBT,IAAjB,CAAsB,IAAtB,CAArE;AACA,eAAKrB,MAAL,CAAYsB,IAAZ,CAAiBC,EAAjB,CAAoB,QAApB,EAA8B,KAAKQ,eAAnC,EAAoD,IAApD;AAEA,eAAKlC,KAAL,GAAa,KAAKmB,IAAL,CAAU,cAAV,CAAb;AACA,eAAKlB,SAAL,GAAiB,KAAKD,KAAL,CAAWoB,cAAX,CAA0B,YAA1B,EAAwCC,YAAxC;AAAA;AAAA,2CAAjB;AACA,eAAKpB,SAAL,CAAeqB,SAAf,CAAyB,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAzB;AACA,eAAKvB,SAAL,CAAewB,IAAf,CAAoBC,EAApB,CAAuB,QAAvB,EAAiC,KAAKC,UAAtC,EAAkD,IAAlD;AAEA,eAAKvB,IAAL,GAAY,KAAKe,IAAL,CAAU,qBAAV,EAAiCgB,YAAjC;AAAA;AAAA,iCAAZ;AACA,eAAK9B,UAAL,GAAkB,KAAKc,IAAL,CAAU,qBAAV,EAAiC7D,KAAjC,CAAlB;AACA,eAAKgD,UAAL,GAAkB,KAAKa,IAAL,CAAU,qBAAV,EAAiC7D,KAAjC,CAAlB;AACA,eAAKiD,SAAL,GAAiB,KAAKY,IAAL,CAAU,oBAAV,EAAgC7D,KAAhC,CAAjB;AACA,eAAKkD,KAAL,GAAa,KAAKW,IAAL,CAAU,sBAAV,CAAb;AACA,eAAKV,OAAL,GAAe,KAAKU,IAAL,CAAU,uBAAV,EAAmCiB,QAAnC,CAA4CC,MAA5C,EAAf;AAEA,eAAK5B,OAAL,CAAa,CAAb,EAAgBiB,EAAhB,CAAmBrE,KAAK,CAACiF,SAAN,CAAgBC,SAAnC,EAA8C,KAAKC,UAAnD,EAA+D,IAA/D;AACA,eAAK/B,OAAL,CAAa,CAAb,EAAgBiB,EAAhB,CAAmBrE,KAAK,CAACiF,SAAN,CAAgBC,SAAnC,EAA8C,KAAKE,WAAnD,EAAgE,IAAhE;AACA,eAAKhC,OAAL,CAAa,CAAb,EAAgBiB,EAAhB,CAAmBrE,KAAK,CAACiF,SAAN,CAAgBC,SAAnC,EAA8C,KAAKG,OAAnD,EAA4D,IAA5D;AACA,eAAKjC,OAAL,CAAa,CAAb,EAAgBiB,EAAhB,CAAmBrE,KAAK,CAACiF,SAAN,CAAgBC,SAAnC,EAA8C,KAAKI,OAAnD,EAA4D,IAA5D;AAEA,eAAKjC,OAAL,GAAe,KAAKS,IAAL,CAAU,YAAV,EAAwBiB,QAAxB,CAAiCC,MAAjC,EAAf;;AACA,eAAK,IAAIO,GAAT,IAAgB,KAAKlC,OAArB,EAA8B;AAC1BkC,YAAAA,GAAG,CAAClB,EAAJ,CAAO,QAAP,EAAiB,KAAKmB,MAAtB,EAA8B,IAA9B;AACH;;AAED;AAAA;AAAA,oCAASnB,EAAT;AAAA;AAAA,kDAA6B,KAAKoB,YAAlC,EAAgD,IAAhD;AACH;;AACY,cAAPC,OAAO,CAACpD,IAAD,EAAeqD,QAAgB,GAAG,IAAlC,EAAwC;AACjD,cAAI,CAAC,KAAKC,QAAV,EAAoB,MAAM,KAAKC,OAAX;AACpB,cAAI,CAAC,KAAKxC,OAAL,CAAaf,IAAb,CAAL,EAAyB;AACzB,eAAKA,IAAL,GAAYwD,SAAZ;AACA,eAAKzC,OAAL,CAAaf,IAAb,EAAmB0B,YAAnB,CAAgC5D,MAAhC,EAAwC2F,SAAxC,GAAoD,IAApD;AACA,eAAKP,MAAL,CAAY,KAAKnC,OAAL,CAAaf,IAAb,EAAmB0B,YAAnB,CAAgC5D,MAAhC,CAAZ,EAAqDuF,QAArD;AACH;;AACSK,QAAAA,MAAM,GAAS;AACrB,eAAKvC,WAAL,GAAmB,CAAnB;AACA,eAAKC,YAAL,GAAoB,CAApB;AACA,eAAKgC,OAAL,CAAa,CAAb;AACH;;AACMO,QAAAA,KAAK,CAAC,GAAGC,IAAJ,EAAuB,CAElC;;AACqB,cAANC,MAAM,CAAC,GAAGD,IAAJ,EAAiB;AACnC,cAAI,CAAC,KAAKN,QAAV,EAAoB,MAAM,KAAKC,OAAX;AACpB,eAAKhD,MAAL,CAAYuD,QAAZ;AACA,eAAKtD,MAAL,CAAYsD,QAAZ;AACA,eAAK9C,QAAL,GAAgBwC,SAAhB;AACA,eAAKtC,KAAL,GAAasC,SAAb;AACH;;AAESL,QAAAA,YAAY,GAAG;AACrB,cAAI,CAAC,KAAKrB,IAAL,CAAUiC,MAAf,EAAuB;AACvB,eAAKX,OAAL,CAAa,KAAKpD,IAAlB,EAAwB,KAAxB;AACH;;AAES6C,QAAAA,UAAU,GAAG;AACnB,cAAImB,SAAS,GAAG;AAAA;AAAA,wCAAWC,iBAAX,CAA6B;AAAA;AAAA,4CAAaC,KAA1C,EAAiD,GAAjD,CAAhB;AACA,cAAIC,QAAQ,GAAGH,SAAS,GAAGA,SAAS,CAAC,CAAD,CAAZ,GAAkBR,SAA1C;AACA,cAAIY,OAAO,GAAG;AAAA;AAAA,gCAAOC,aAAP,CAAqB,CAArB,EAAwBC,eAAxB,CAAwC,CAAxC,CAAd;;AACA,cAAGH,QAAQ,IAAIA,QAAQ,CAACI,KAAT,IAAkBH,OAAjC,EAAyC;AACrC;AAAA;AAAA,8BAAK;AAAA;AAAA,0CAAWI,UAAhB;AACH,WAFD,MAEK;AACF;AAAA;AAAA,8BAAKC,IAAL,CAAU,SAAV;AACF;AACJ;;AACS3B,QAAAA,WAAW,GAAG;AACpB,cAAI4B,GAAG,GAAG;AAAA;AAAA,gCAAOC,OAAP,CAAe,KAAK1D,UAAL,CAAgB2D,EAA/B,CAAV;;AACA,cAAIF,GAAG,CAACG,OAAJ,IAAe;AAAA;AAAA,0CAAYC,KAA/B,EAAsC;AAClC;AAAA;AAAA,8CAAaC,YAAb,CAA0BL,GAAG,CAACM,KAA9B;AACH;AACJ;;AACSjC,QAAAA,OAAO,GAAG;AAChB,cAAI2B,GAAG,GAAG;AAAA;AAAA,gCAAOC,OAAP,CAAe,KAAK1D,UAAL,CAAgB2D,EAA/B,CAAV;AACA,cAAIK,OAAO,GAAGP,GAAG,CAACQ,WAAlB;AACA,cAAIC,SAAyB,GAAG,EAAhC;;AACA,cAAIF,OAAO,IAAIA,OAAO,CAACG,MAAvB,EAA+B;AAC3B,gBAAIC,QAAQ,GAAGX,GAAG,CAACQ,WAAnB;AACA,gBAAII,MAAJ;AACA,gBAAIC,OAAJ;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAAO,CAACG,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACrCF,cAAAA,MAAM,GAAGL,OAAO,CAACO,CAAD,CAAhB;AACAD,cAAAA,OAAO,GAAGF,QAAQ,CAACG,CAAD,CAAlB;AACA,kBAAIC,IAAI,GAAG;AAAA;AAAA,sDAAgBH,MAAhB,EAAwBC,OAAxB,CAAX;AACA,kBAAIE,IAAJ,EAAUN,SAAS,CAACO,IAAV,CAAeD,IAAf;AACb;;AACD,iBAAK,MAAME,IAAX,IAAmBR,SAAnB,EAA8B;AAC1B,kBAAIQ,IAAI,CAACC,IAAT,EAAe;AACX;AAAA;AAAA,0CAASnB,IAAT,CAAckB,IAAI,CAACC,IAAnB;AACA;AACH;AACJ;AACJ;;AAED,kBAAQlB,GAAG,CAACmB,QAAZ;AACI,iBAAK;AAAA;AAAA,sCAASC,GAAd;AAAkB;AACd;AAAA;AAAA,gDAAarB,IAAb,CAAkBC,GAAlB;AACA;;AACJ,iBAAK;AAAA;AAAA,sCAASqB,MAAd;AACK,kBAAIC,MAAc,GAAG;AAAA;AAAA,oCAAOC,SAAP,CAAiB;AAAA;AAAA,kDAAcC,GAA/B,EAAoCC,YAAzD;AACA,kBAAIC,GAAG,GAAG;AAAA;AAAA,oDAAe;AAAA;AAAA,kDAAcC,MAA7B,EAAqCL,MAArC,CAAV;;AACD,kBAAII,GAAJ,EAAS;AACL;AAAA;AAAA,kCAAK3B,IAAL,CAAU2B,GAAV;AACA;AACH;;AACD,kBAAIE,WAAW,GAAG;AAAA;AAAA,0CAAUC,qBAAV,CAAgC7B,GAAG,CAAC8B,WAApC,CAAlB;AACA,kBAAIC,eAAe,GAAG;AAAA;AAAA,4CAAWC,cAAX,CAA0BD,eAAhD;AACA,kBAAIE,KAAK,GAAG,gBAAgBL,WAA5B;AACA;AAAA;AAAA,4CAAW7B,IAAX,CAAgBC,GAAhB,EAAqB+B,eAArB,EAAsCE,KAAtC;AACA;;AACJ,iBAAK;AAAA;AAAA,sCAASC,MAAd;AACI,kBAAIC,WAAW,GAAG;AAAA;AAAA,0CAAUN,qBAAV,CAAgC7B,GAAG,CAACoC,WAApC,CAAlB;AACA,kBAAIC,UAAU,GAAG;AAAA;AAAA,4CAAWC,UAAX,CAAsBC,YAAtB,CAAmCC,KAAnC,CAAyCxC,GAAG,CAAC8B,WAA7C,CAAjB;AACA,kBAAIW,WAAW,GAAG,cAAcN,WAAhC;AACA;AAAA;AAAA,4CAAWpC,IAAX,CAAgBC,GAAhB,EAAqBqC,UAArB,EAAiCI,WAAjC;AACA;;AACJ;AACI;AAvBR;AA0BH;;AACSnE,QAAAA,OAAO,GAAG;AAEhB,cAAIoE,QAAQ,GAAG;AAAA;AAAA,gCAAOzC,OAAP,CAAe,KAAK1D,UAAL,CAAgB2D,EAA/B,EAAmCyC,OAAlD;AACA;AAAA;AAAA,wCAAW5C,IAAX,CAAgB2C,QAAhB;AAEH;;AAESjF,QAAAA,WAAW,CAAC1B,IAAD,EAAagF,IAAb,EAA2B;AAC5ChF,UAAAA,IAAI,CAAC6G,cAAL,CAAoB,OAApB,EAA6B5F,YAA7B,CAA0C/D,KAA1C,EAAiD4J,MAAjD,GAA0D,KAAKpG,WAAL,IAAoBsE,IAApB,GAA2B,IAA3B,GAAkC;AAAA;AAAA,kCAAQA,IAAR,CAA5F;AACH;;AAC4B,cAAbvD,aAAa,CAACzB,IAAD,EAAa+G,GAAb,EAA0B;AACnD,cAAIC,IAAI,GAAGhH,IAAI,CAAC6G,cAAL,CAAoB,MAApB,EAA4B5F,YAA5B,CAAyC9D,MAAzC,CAAX;AACA6J,UAAAA,IAAI,CAACC,WAAL,GAAmB,MAAM;AAAA;AAAA,gCAAOC,YAAP,CAAoB5J,IAAI,CAAC6J,IAAL;AAAA;AAAA,0CAAuB,SAASJ,GAAhC,EAAqC,aAArC,CAApB,EAAyE3J,WAAzE,CAAzB;AACH;;AACSuE,QAAAA,WAAW,CAACyF,KAAD,EAAgB;AACjC,eAAK1G,WAAL,GAAmB,KAAKA,WAAL,IAAoB0G,KAApB,GAA4B,CAA5B,GAAgCA,KAAnD;AACA,eAAKC,QAAL;AACA,eAAKzG,eAAL,GAAuB,CAAvB;AACA,eAAK0G,cAAL,CAAoB,IAApB;AACH;;AACSzF,QAAAA,WAAW,CAAC7B,IAAD,EAAagF,IAAb,EAA2B;AAC5ChF,UAAAA,IAAI,CAAC6G,cAAL,CAAoB,OAApB,EAA6B5F,YAA7B,CAA0C/D,KAA1C,EAAiD4J,MAAjD,GAA0D,KAAKnG,YAAL,IAAqBqE,IAArB,GAA4B,IAA5B,GAAmC;AAAA;AAAA,0CAAYA,IAAZ,CAA7F;AACH;;AACgC,cAAjBpD,iBAAiB,CAAC5B,IAAD,EAAauH,OAAb,EAA8B;AAC3D,cAAIP,IAAI,GAAGhH,IAAI,CAAC6G,cAAL,CAAoB,MAApB,EAA4B5F,YAA5B,CAAyC9D,MAAzC,CAAX;AACA6J,UAAAA,IAAI,CAACC,WAAL,GAAmB,MAAM;AAAA;AAAA,gCAAOC,YAAP,CAAoB5J,IAAI,CAAC6J,IAAL;AAAA;AAAA,0CAAuB,aAAa;AAAA;AAAA,0CAAYI,OAAZ,CAApC,EAA0D,aAA1D,CAApB,EAA8FnK,WAA9F,CAAzB;AACH;;AACS0E,QAAAA,eAAe,CAACsF,KAAD,EAAgB;AACrC,eAAKzG,YAAL,GAAoB,KAAKA,YAAL,IAAqByG,KAArB,GAA6B,CAA7B,GAAiCA,KAArD;AACA,eAAKC,QAAL;AACA,eAAKzG,eAAL,GAAuB,CAAvB;AACA,eAAK0G,cAAL,CAAoB,IAApB;AACH;;AAGS7E,QAAAA,MAAM,CAAC+E,CAAD,EAAY5E,QAAgB,GAAG,IAA/B,EAAqC;AACjD,cAAI,CAAC4E,CAAC,CAACxE,SAAP,EAAkB;AAClB,cAAGJ,QAAH,EAAa,KAAKhC,eAAL,GAAuB,CAAvB;AACb,cAAIrB,IAAI,GAAG,KAAKe,OAAL,CAAamH,OAAb,CAAqBD,CAAC,CAACnG,IAAvB,CAAX;AACA,cAAK9B,IAAI,GAAG,CAAP,IAAYA,IAAI,IAAI,KAAKA,IAA9B,EAAqC;AAErC,eAAKC,KAAL,CAAWkI,MAAX,GAAoB,KAApB;AACA,eAAKhI,KAAL,CAAWgI,MAAX,GAAoB,KAApB;AACA,eAAK9H,KAAL,CAAW8H,MAAX,GAAoB,KAApB,CARiD,CASjD;;AACA,kBAAQnI,IAAR;AACI,iBAAK,CAAL;AAAQ;AACJ,mBAAKkB,KAAL,GAAa;AAAA;AAAA,4CAAWkH,gBAAX,CAA4B;AAAA;AAAA,8CAAYC,QAAxC,CAAb;AACA,mBAAKnH,KAAL,CAAWoH,IAAX,CAAgB,KAAKC,QAArB;AACA,mBAAKtI,KAAL,CAAWkI,MAAX,GAAoB,IAApB;AACA,mBAAKnH,QAAL,GAAgB,KAAKd,SAArB;AACA;;AAEJ,iBAAK,CAAL;AAAQ;AACJ,mBAAK4H,QAAL;AACA,mBAAK3H,KAAL,CAAWgI,MAAX,GAAoB,IAApB;AACA,mBAAKnH,QAAL,GAAgB,KAAKZ,SAArB;AACA;;AACJ,iBAAK,CAAL;AAAQ;AACJ,mBAAKc,KAAL,GAAa;AAAA;AAAA,4CAAWkH,gBAAX,CAA4B;AAAA;AAAA,8CAAYI,IAAxC,CAAb;AACA,mBAAKtH,KAAL,CAAWoH,IAAX,CAAgB,KAAKC,QAArB;AACA,mBAAKlI,KAAL,CAAW8H,MAAX,GAAoB,IAApB;AACA,mBAAKnH,QAAL,GAAgB,KAAKV,SAArB;AACA;;AACJ,iBAAK,CAAL;AAAQ;AACJ;AAAA;AAAA,wCAASmE,IAAT,CAAc,OAAd;AACA,mBAAKrB,OAAL,CAAa,KAAKpD,IAAlB,EAAwB,KAAxB,EAFJ,CAGI;;AACA;;AACJ;AACI,mBAAKkB,KAAL,CAAWkE,MAAX,GAAoB,CAApB;AAzBR;;AA2BA,eAAKpF,IAAL,GAAYA,IAAZ;AACA,eAAK+H,cAAL,CAAoB1E,QAApB;AACH;;AACO0E,QAAAA,cAAc,CAAC1E,QAAD,EAAuB;AACzC,cAAI,KAAKrC,QAAL,IAAiB,KAAKE,KAA1B,EAAiC;AAC7B,iBAAKF,QAAL,CAAcyH,WAAd,CAA0B,KAAKvH,KAA/B;AACA,iBAAKc,UAAL,CAAgB,KAAKX,eAArB,EAAsCgC,QAAtC;AACH,WAHD,MAGK;AACD,iBAAKhC,eAAL,GAAuB,CAAvB;AACH;AACJ;;AACOqH,QAAAA,WAAW,GAAO;AACtB,cAAIC,IAAS,GAAG,KAAK3H,QAAL,CAAcc,IAAd,CAAmBL,cAAnB,CAAkC,cAAlC,CAAhB;AACA,cAAImH,WAAkB,GAAG,CAAC,CAA1B;AACA,cAAIC,SAAJ;;AACA,eAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,IAAI,CAAClG,QAAL,CAAc2C,MAA1C,EAAkD0D,KAAK,EAAvD,EAA2D;AACvD,gBAAIhH,IAAS,GAAG6G,IAAI,CAAClG,QAAL,CAAcqG,KAAd,CAAhB;AACA,gBAAIC,SAAgB,GAAGjH,IAAI,CAAC,SAAD,CAA3B;AACA,gBAAGiH,SAAS,IAAI,CAAhB,EAAmBF,SAAS,GAAG/G,IAAZ;;AACnB,gBAAGiH,SAAS,IAAI,KAAK1H,eAArB,EAAqC;AACjCuH,cAAAA,WAAW,GAAG,KAAKvH,eAAnB;AACAS,cAAAA,IAAI,CAACwF,cAAL,CAAoB,QAApB,EAA8Ba,MAA9B,GAAuC,IAAvC;AACH,aAHD,MAGK;AACDrG,cAAAA,IAAI,CAACwF,cAAL,CAAoB,QAApB,EAA8Ba,MAA9B,GAAuC,KAAvC;AACH;AACJ;;AACD,cAAGS,WAAW,GAAG,CAAjB,EAAmB;AACfA,YAAAA,WAAW,GAAG,CAAd;;AACA,gBAAGC,SAAH,EAAa;AACTA,cAAAA,SAAS,CAACvB,cAAV,CAAyB,QAAzB,EAAmCa,MAAnC,GAA4C,IAA5C;AACH;AACJ;;AACD,eAAK9G,eAAL,GAAuBuH,WAAvB;AACH;;AACOL,QAAAA,QAAQ,CAACS,CAAD,EAAoBC,CAApB,EAA6C;AACzD,cAAIC,IAAI,GAAG;AAAA;AAAA,gCAAOvE,OAAP,CAAeqE,CAAC,CAACpE,EAAjB,CAAX;AACA,cAAIuE,IAAI,GAAG;AAAA;AAAA,gCAAOxE,OAAP,CAAesE,CAAC,CAACrE,EAAjB,CAAX;AACA,iBAAOuE,IAAI,CAACC,IAAL,GAAYF,IAAI,CAACE,IAAxB;AACH;;AACOtB,QAAAA,QAAQ,GAAO;AACnB,eAAK5G,KAAL,GAAa;AAAA;AAAA,wCAAWkH,gBAAX,CAA4B;AAAA;AAAA,0CAAYtD,KAAxC,CAAb;;AACA,cAAG,KAAK3D,WAAL,GAAmB,CAAnB,IAAwB,KAAKC,YAAL,GAAoB,CAA/C,EAAiD;AAC7C,iBAAKF,KAAL,CAAWoH,IAAX,CAAgB,KAAKC,QAArB;AACH,WAFD,MAEM;AACF,iBAAKc,UAAL;AACH;AACJ;;AACOA,QAAAA,UAAU,GAAO;AACrB,cAAIC,QAAJ;AACA,cAAI5E,GAAJ;AACA,cAAI6E,QAA0B,GAAG,EAAjC;AACA,cAAI/B,GAAJ;;AACA,eAAK,IAAIsB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAK5H,KAAL,CAAWkE,MAAvC,EAA+C0D,KAAK,EAApD,EAAwD;AACpDQ,YAAAA,QAAQ,GAAE,KAAKpI,KAAL,CAAW4H,KAAX,CAAV;AACApE,YAAAA,GAAG,GAAG;AAAA;AAAA,kCAAOC,OAAP,CAAe2E,QAAQ,CAAC1E,EAAxB,CAAN;AACA4C,YAAAA,GAAG,GAAG;AAAA;AAAA,kCAAOgC,OAAP,GAAiB9E,GAAG,CAAC8B,WAArB,EAAkCiD,YAAxC;;AACA,gBAAG,KAAKtI,WAAL,GAAmB,CAAtB,EAAwB;AACpB,kBAAG,KAAKA,WAAL,IAAoBqG,GAAvB,EAA2B;AACvB,oBAAG,KAAKpG,YAAL,GAAoB,CAAvB,EAAyB;AACrB,sBAAG,KAAKA,YAAL,IAAqBsD,GAAG,CAACgF,OAA5B,EAAoC;AAChCH,oBAAAA,QAAQ,CAAC7D,IAAT,CAAc4D,QAAd;AACH;AACJ,iBAJD,MAIK;AACDC,kBAAAA,QAAQ,CAAC7D,IAAT,CAAc4D,QAAd;AACH;AACJ;AACJ,aAVD,MAUK;AACD,kBAAG,KAAKlI,YAAL,GAAoB,CAAvB,EAAyB;AACrB,oBAAG,KAAKA,YAAL,IAAqBsD,GAAG,CAACgF,OAA5B,EAAoC;AAChCH,kBAAAA,QAAQ,CAAC7D,IAAT,CAAc4D,QAAd;AACH;AACJ;AACJ;AACJ;;AACD,eAAKpI,KAAL,GAAaqI,QAAQ,CAACjB,IAAT,CAAc,KAAKC,QAAnB,CAAb;AACH;;AACO3G,QAAAA,aAAa,CAACnB,IAAD,EAAagF,IAAb,EAA6CqD,KAA7C,EAA2D;AAC5E,cAAIa,OAAO,GAAGlJ,IAAI,CAACiB,YAAL;AAAA;AAAA,iCAAd;AACA,cAAI,CAACiI,OAAL,EAAcA,OAAO,GAAGlJ,IAAI,CAAC+B,YAAL;AAAA;AAAA,iCAAV;AACdmH,UAAAA,OAAO,CAACC,eAAR,CAAwB,KAAxB;AACAD,UAAAA,OAAO,CAACE,iBAAR,CAA0B,IAA1B;AACAF,UAAAA,OAAO,CAACG,OAAR,CAAgBrE,IAAhB;AACAhF,UAAAA,IAAI,CAAC6G,cAAL,CAAoB,QAApB,EAA8Ba,MAA9B,GAAuCW,KAAK,IAAI,KAAKzH,eAArD;AAEA0I,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BvE,IAA/B;AACH;AACD;AACJ;AACA;AACA;;;AAC8B,cAAVzD,UAAU,CAAC8G,KAAD,EAAgBzF,QAAgB,GAAG,IAAnC,EAAyC;AAC/D,cAAI,CAAC,KAAKC,QAAV,EAAoB,MAAM,KAAKC,OAAX;AACpB,eAAKlC,eAAL,GAAuByH,KAAvB;AACA,eAAKJ,WAAL;AACA,cAAG,KAAKrH,eAAL,IAAwB,CAAxB,IAA6BgC,QAAhC,EAA0C,KAAKrC,QAAL,CAAciJ,YAAd;AAC1C,cAAIxE,IAAI,GAAG,KAAKvE,KAAL,CAAW,KAAKG,eAAhB,CAAX;AACA,eAAKJ,UAAL,GAAkBwE,IAAlB;;AACA,cAAIA,IAAJ,EAAU;AACN,iBAAK5E,KAAL,CAAWsH,MAAX,GAAoB,KAApB;AACA,iBAAK1H,IAAL,CAAUqB,IAAV,CAAeJ,YAAf,CAA4B5D,MAA5B,EAAoCoM,YAApC,GAAmD,KAAnD;AACA,iBAAKzJ,IAAL,CAAUqJ,OAAV,CAAkBrE,IAAlB;AACA,gBAAIf,GAAG,GAAG;AAAA;AAAA,kCAAOC,OAAP,CAAec,IAAI,CAACb,EAApB,CAAV;AACA,iBAAKlE,UAAL,CAAgB6G,MAAhB,GAAyB7C,GAAG,CAACyF,QAA7B;AACA,iBAAKxJ,UAAL,CAAgB4G,MAAhB,GAAyB7C,GAAG,CAAC0F,MAA7B;AACA,iBAAKxJ,SAAL,CAAe2G,MAAf,GAAyB,OAAM;AAAA;AAAA,4CAAY7C,GAAG,CAACM,KAAhB,IAAyB,KAAKqF,WAAL,CAAiB5E,IAAI,CAAC6E,KAAtB,CAAzB,GAAwD7E,IAAI,CAAC6E,KAAM,EAAlG;AACA,gBAAIC,OAAJ;AACA,gBAAIC,OAAJ;;AACA,iBAAK,IAAIhF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1E,OAAL,CAAasE,MAAjC,EAAyCI,CAAC,EAA1C,EAA8C;AAC1C+E,cAAAA,OAAO,GAAG,KAAKzJ,OAAL,CAAa0E,CAAb,CAAV;;AACA,kBAAGd,GAAG,CAAC+F,MAAJ,CAAWvC,OAAX,CAAmB1C,CAAC,GAAG,CAAvB,KAA6B,CAAC,CAAjC,EAAmC;AAC/B+E,gBAAAA,OAAO,CAACpC,MAAR,GAAiB,IAAjB;AACAqC,gBAAAA,OAAO,GAAGD,OAAO,CAACjD,cAAR,CAAuB,WAAvB,CAAV;;AACA,oBAAGkD,OAAH,EAAW;AACP,sBAAGhF,CAAC,IAAI,CAAR,EAAU;AAAC;AACP,wBAAId,GAAG,CAACgG,IAAJ,IAAY;AAAA;AAAA,gDAAUC,aAAtB,IAAuCjG,GAAG,CAACmB,QAAJ,IAAgB;AAAA;AAAA,8CAASf,KAApE,EAA2E;AACvE0F,sBAAAA,OAAO,CAACrC,MAAR,GAAiB1C,IAAI,CAAC6E,KAAL,IAAc5F,GAAG,CAACkG,WAAnC;AACH,qBAFD,MAEK;AACDJ,sBAAAA,OAAO,CAACrC,MAAR,GAAiB,KAAjB;AACH;AACJ,mBAND,MAMM,IAAG3C,CAAC,IAAI,CAAR,EAAU;AAAC;AACb,wBAAId,GAAG,CAACgG,IAAJ,IAAY;AAAA;AAAA,gDAAUC,aAAtB,IAAuCjG,GAAG,CAACmB,QAAJ,IAAgB;AAAA;AAAA,8CAASC,GAApE,EAAyE;AACrE0E,sBAAAA,OAAO,CAACrC,MAAR,GAAiB,IAAjB;AACH,qBAFD,MAEK;AACDqC,sBAAAA,OAAO,CAACrC,MAAR,GAAiB,KAAjB;AACH;AACJ;AACJ;AACJ,eAlBD,MAkBK;AACDoC,gBAAAA,OAAO,CAACpC,MAAR,GAAiB,KAAjB;AACH;AAEJ;AACJ,WAnCD,MAmCO;AACH,iBAAKtH,KAAL,CAAWsH,MAAX,GAAoB,IAApB;AACH;AACJ;AAED;;;AACQkC,QAAAA,WAAW,CAACC,KAAD,EAAc;AAC7B;AACA,cAAIO,GAAG,GAAGP,KAAK,CAACQ,QAAN,EAAV;;AACA,cAAGD,GAAG,CAAC3C,OAAJ,CAAY,GAAZ,KAAoB,CAAC,CAAxB,EAA0B;AACtB2C,YAAAA,GAAG,GAAG;AAAA;AAAA,oCAAQP,KAAR,EAAc,CAAd,CAAN;AACH,WAFD,MAEK;AACDO,YAAAA,GAAG,GAAGA,GAAG,GAAG,KAAZ;AACH;;AACD,iBAAOA,GAAP;AACH;;AA5X+B,O","sourcesContent":["import { Button, Component, EventTouch, Input, Label, Node, Sprite, SpriteFrame, Toggle, path, sp, tween } from \"cc\";\r\nimport { Panel } from \"../../GameRoot\";\r\nimport { BagItem } from \"./BagItem\";\r\nimport PlayerData, { } from \"../roleModule/PlayerData\"\r\n import {SPlayerDataItem,SThing} from \"../roleModule/PlayerStruct\";\r\nimport { AutoScroller } from \"../../utils/AutoScroller\";\r\nimport { CardQuality, CfgMgr, ConditionType, ItemSubType, ItemType, Job, JobName, StdCommonType, StdItem, ThingItemId, ThingType } from \"../../manager/CfgMgr\";\r\nimport { FormatCondition } from \"../common/BaseUI\"\r\nimport { AttrSub, ConditionSub } from \"../common/AttrSub\";\r\nimport { ResMgr, folder_icon } from \"../../manager/ResMgr\";\r\nimport { ComboBox } from \"../../utils/ComboBox\";\r\nimport { GetMoreWin } from \"./GetMoreWin\";\r\nimport { ComposePanel } from \"./ComposePanel\";\r\nimport Logger from \"../../utils/Logger\";\r\nimport { EventMgr, Evt_Item_Change, Goto } from \"../../manager/EventMgr\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { Second, ToFixed, formatK, formatNumber } from \"../../utils/Utils\";\r\nimport { OpenBoxPanel } from \"./OpenBoxPanel\";\r\nimport { TradePanel } from \"../trade/TradePanel\";\r\nimport { MsgTypeSend } from \"../../MsgType\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { Tips } from \"../login/Tips\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport { BuildingType } from \"../home/HomeStruct\";\r\nimport { rightsTips } from \"../rights/rightsTips\";\r\nimport { CheckCondition } from \"../../manager/ConditionMgr\";\r\nimport { PANEL_TYPE } from \"../../manager/PANEL_TYPE\";\r\n\r\nexport class BagPanel extends Panel {\r\n    protected prefab: string = \"prefabs/panel/bag/BagPanel\";\r\n\r\n    private page: number;\r\n    private page1: Node;\r\n    private scroller1: AutoScroller;\r\n    private page2: Node;\r\n    private scroller2: AutoScroller;\r\n    private page3: Node;\r\n    private scroller3: AutoScroller;\r\n    private combo1: ComboBox;\r\n    private combo2: ComboBox;\r\n    private item: BagItem;\r\n    private selectName: Label;\r\n    private selectDesc: Label;\r\n    private selectHas: Label;\r\n    private empty: Node;\r\n    private useBtns: Node[];\r\n    private navBtns: Node[];\r\n    private scroller: AutoScroller;\r\n    private selectData: SPlayerDataItem;\r\n    private datas: SPlayerDataItem[];\r\n    private chipJobSort:number;\r\n    private chipQualSort:number;\r\n    private _curSelectIndex:number;\r\n    protected onLoad() {\r\n        this.CloseBy(\"layout/closeBtn\");\r\n        this.CloseBy(\"mask\");\r\n        this.page1 = this.find(\"layout/page1\");\r\n        this.scroller1 = this.page1.getChildByPath(\"ScrollView\").getComponent(AutoScroller);\r\n        this.scroller1.SetHandle(this.updateBagItem.bind(this));\r\n        this.scroller1.node.on('select', this.SelectItem, this);\r\n\r\n        this.page2 = this.find(\"layout/page2\");\r\n        this.scroller2 = this.page2.getChildByPath(\"ScrollView\").getComponent(AutoScroller);\r\n        this.scroller2.SetHandle(this.updateBagItem.bind(this));\r\n        this.scroller2.node.on('select', this.SelectItem, this);\r\n        this.combo1 = this.find(\"layout/page2/selectJob\", ComboBox);\r\n        this.combo1.Init([1, 2, 3, 4], this.updateJobItem.bind(this), this.updateHead1.bind(this));\r\n        this.combo1.node.on('select', this.onSelectJob, this);\r\n        this.combo2 = this.find(\"layout/page2/selectQuality\", ComboBox);\r\n        this.combo2.Init([1, 2, 3, 4, 5], this.updatequalityItem.bind(this), this.updateHead2.bind(this));\r\n        this.combo2.node.on('select', this.onSelectquality, this);\r\n\r\n        this.page3 = this.find(\"layout/page3\");\r\n        this.scroller3 = this.page3.getChildByPath(\"ScrollView\").getComponent(AutoScroller);\r\n        this.scroller3.SetHandle(this.updateBagItem.bind(this));\r\n        this.scroller3.node.on('select', this.SelectItem, this);\r\n\r\n        this.item = this.find(\"layout/infoBar/item\").addComponent(BagItem);\r\n        this.selectName = this.find(\"layout/infoBar/name\", Label);\r\n        this.selectDesc = this.find(\"layout/infoBar/desc\", Label);\r\n        this.selectHas = this.find(\"layout/infoBar/has\", Label);\r\n        this.empty = this.find(\"layout/infoBar/empty\");\r\n        this.useBtns = this.find(\"layout/infoBar/layout\").children.concat();\r\n\r\n        this.useBtns[0].on(Input.EventType.TOUCH_END, this.openJiaoyi, this);\r\n        this.useBtns[1].on(Input.EventType.TOUCH_END, this.openHecheng, this);\r\n        this.useBtns[2].on(Input.EventType.TOUCH_END, this.openUse, this);\r\n        this.useBtns[3].on(Input.EventType.TOUCH_END, this.openGet, this);\r\n\r\n        this.navBtns = this.find(\"layout/nav\").children.concat();\r\n        for (let btn of this.navBtns) {\r\n            btn.on('toggle', this.onPage, this);\r\n        }\r\n\r\n        EventMgr.on(Evt_Item_Change, this.onItemChange, this);\r\n    }\r\n    async SetPage(page: number, isOperat:boolean = true) {\r\n        if (!this.$hasLoad) await this.initSub;\r\n        if (!this.navBtns[page]) return;\r\n        this.page = undefined;\r\n        this.navBtns[page].getComponent(Toggle).isChecked = true;\r\n        this.onPage(this.navBtns[page].getComponent(Toggle), isOperat);\r\n    }\r\n    protected onShow(): void {\r\n        this.chipJobSort = 0;\r\n        this.chipQualSort = 0;\r\n        this.SetPage(0);\r\n    }\r\n    public flush(...args: any[]): void {\r\n\r\n    }\r\n    protected async onHide(...args: any[]) {\r\n        if (!this.$hasLoad) await this.initSub;\r\n        this.combo1.HideList();\r\n        this.combo2.HideList();\r\n        this.scroller = undefined;\r\n        this.datas = undefined;\r\n    }\r\n\r\n    protected onItemChange() {\r\n        if (!this.node.parent) return;\r\n        this.SetPage(this.page, false);\r\n    }\r\n\r\n    protected openJiaoyi() {\r\n        let buildings = PlayerData.GetBuildingByType(BuildingType.ji_di, 101);\r\n        let building = buildings ? buildings[0] : undefined;\r\n        let open_lv = CfgMgr.GetSysOpenCfg(3).ConditionValue1[0]\r\n        if(building && building.level >= open_lv){\r\n            Goto(PANEL_TYPE.TradePanel);\r\n        }else{\r\n           Tips.Show(\"生命树等级不足\");\r\n        }\r\n    }\r\n    protected openHecheng() {\r\n        let std = CfgMgr.Getitem(this.selectData.id);\r\n        if (std.SubType == ItemSubType.shard) {\r\n            ComposePanel.showByItemId(std.Items);\r\n        }\r\n    }\r\n    protected openUse() {\r\n        let std = CfgMgr.Getitem(this.selectData.id);\r\n        let condIds = std.ConditionId;\r\n        let condDatas: ConditionSub[] = [];\r\n        if (condIds && condIds.length) {\r\n            let condVals = std.ConditionId;\r\n            let condId: number;\r\n            let condVal: number;\r\n            for (let i = 0; i < condIds.length; i++) {\r\n                condId = condIds[i];\r\n                condVal = condVals[i];\r\n                let data = FormatCondition(condId, condVal);\r\n                if (data) condDatas.push(data);\r\n            }\r\n            for (const cond of condDatas) {\r\n                if (cond.fail) {\r\n                    MsgPanel.Show(cond.fail);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        switch (std.Itemtpye) {\r\n            case ItemType.box://使用宝箱\r\n                OpenBoxPanel.Show(std);\r\n                break;\r\n            case ItemType.shield:\r\n                 let needLv: number = CfgMgr.GetCommon(StdCommonType.PVP).PVPOpenLevel;\r\n                 let msg = CheckCondition(ConditionType.Home_1, needLv)\r\n                if (msg) {\r\n                    Tips.Show(msg);\r\n                    return;\r\n                }\r\n                let shield_date = DateUtils.SecondsToDetailedTime(std.ItemEffect1);\r\n                let shield_end_time = PlayerData.LootPlayerData.shield_end_time\r\n                let time1 = \"使用后会重置防护时间为\" + shield_date\r\n                rightsTips.Show(std, shield_end_time, time1);\r\n                break;\r\n            case ItemType.rights:\r\n                let rights_date = DateUtils.SecondsToDetailedTime(std.ItemEffect2);\r\n                let cards_time = PlayerData.rightsData.benefit_card.cards[std.ItemEffect1];\r\n                let rights_tips = \"使用后增加权益时长\" + rights_date\r\n                rightsTips.Show(std, cards_time, rights_tips);\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n    protected openGet() {\r\n\r\n        let get_path = CfgMgr.Getitem(this.selectData.id).SkipGet\r\n        GetMoreWin.Show(get_path)\r\n\r\n    }\r\n\r\n    protected updateHead1(item: Node, data: number) {\r\n        item.getChildByName(\"label\").getComponent(Label).string = this.chipJobSort == data ? \"职业\" : JobName[data];\r\n    }\r\n    protected async updateJobItem(item: Node, job: number) {\r\n        let icon = item.getChildByName(\"icon\").getComponent(Sprite);\r\n        icon.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"job/\" + job, \"spriteFrame\"), SpriteFrame);\r\n    }\r\n    protected onSelectJob(value: number) {\r\n        this.chipJobSort = this.chipJobSort == value ? 0 : value;\r\n        this.chipSort();\r\n        this._curSelectIndex = 0;\r\n        this.updateListData(true);\r\n    }\r\n    protected updateHead2(item: Node, data: number) {\r\n        item.getChildByName(\"label\").getComponent(Label).string = this.chipQualSort == data ? \"品质\" : CardQuality[data];\r\n    }\r\n    protected async updatequalityItem(item: Node, quality: number) {\r\n        let icon = item.getChildByName(\"icon\").getComponent(Sprite);\r\n        icon.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_icon, \"quality/\" + CardQuality[quality], \"spriteFrame\"), SpriteFrame);\r\n    }\r\n    protected onSelectquality(value: number) {\r\n        this.chipQualSort = this.chipQualSort == value ? 0 : value;\r\n        this.chipSort();\r\n        this._curSelectIndex = 0;\r\n        this.updateListData(true);\r\n    }\r\n\r\n\r\n    protected onPage(t: Toggle, isOperat:boolean = true) {\r\n        if (!t.isChecked) return;\r\n        if(isOperat) this._curSelectIndex = 0;\r\n        let page = this.navBtns.indexOf(t.node);\r\n        if ((page < 0 || page == this.page)) return;\r\n        \r\n        this.page1.active = false;\r\n        this.page2.active = false;\r\n        this.page3.active = false;\r\n        // console.log(\"onPage\", page);\r\n        switch (page) {\r\n            case 0: // 交易\r\n                this.datas = PlayerData.GetitemBySubType(ItemSubType.material);\r\n                this.datas.sort(this.commSort);\r\n                this.page1.active = true;\r\n                this.scroller = this.scroller1;\r\n                break;\r\n\r\n            case 1: // 碎片\r\n                this.chipSort();\r\n                this.page2.active = true;\r\n                this.scroller = this.scroller2;\r\n                break;\r\n            case 2: // 道具\r\n                this.datas = PlayerData.GetitemBySubType(ItemSubType.cost);\r\n                this.datas.sort(this.commSort);\r\n                this.page3.active = true;\r\n                this.scroller = this.scroller3;\r\n                break;\r\n            case 3: //装备\r\n                MsgPanel.Show(\"功能未开启\");\r\n                this.SetPage(this.page, false);\r\n                //return \r\n                break;\r\n            default:\r\n                this.datas.length = 0;\r\n        }\r\n        this.page = page;\r\n        this.updateListData(isOperat);\r\n    }\r\n    private updateListData(isOperat:boolean):void{\r\n        if (this.scroller && this.datas) {\r\n            this.scroller.UpdateDatas(this.datas);\r\n            this.SelectItem(this._curSelectIndex, isOperat);\r\n        }else{\r\n            this._curSelectIndex = 0;\r\n        }\r\n    }\r\n    private resetSelect():void{\r\n        let cont:Node = this.scroller.node.getChildByPath(\"view/content\");\r\n        let selectIndex:number = -1;\r\n        let defSelect:Node;\r\n        for (let index = 0; index < cont.children.length; index++) {\r\n            let node:Node = cont.children[index];\r\n            let itemIndex:number = node[\"$$index\"];\r\n            if(itemIndex == 0) defSelect = node;\r\n            if(itemIndex == this._curSelectIndex){\r\n                selectIndex = this._curSelectIndex;\r\n                node.getChildByName(\"select\").active = true;\r\n            }else{\r\n                node.getChildByName(\"select\").active = false;\r\n            }\r\n        }\r\n        if(selectIndex < 0){\r\n            selectIndex = 0;\r\n            if(defSelect){\r\n                defSelect.getChildByName(\"select\").active = true;\r\n            }\r\n        }\r\n        this._curSelectIndex = selectIndex;\r\n    }\r\n    private commSort(a:SPlayerDataItem, b:SPlayerDataItem):number{\r\n        let stdA = CfgMgr.Getitem(a.id);\r\n        let stdB = CfgMgr.Getitem(b.id);\r\n        return stdB.Sort - stdA.Sort;\r\n    }\r\n    private chipSort():void{\r\n        this.datas = PlayerData.GetitemBySubType(ItemSubType.shard);\r\n        if(this.chipJobSort < 1 && this.chipQualSort < 1){\r\n            this.datas.sort(this.commSort);\r\n        }else {\r\n            this.chipFilter();\r\n        }\r\n    }\r\n    private chipFilter():void{\r\n        let tempData:SPlayerDataItem;\r\n        let std:StdItem;\r\n        let tempList:SPlayerDataItem[] = [];\r\n        let job:number;\r\n        for (let index = 0; index < this.datas.length; index++) {\r\n            tempData= this.datas[index];\r\n            std = CfgMgr.Getitem(tempData.id);\r\n            job = CfgMgr.GetRole()[std.ItemEffect1].PositionType;\r\n            if(this.chipJobSort > 0){\r\n                if(this.chipJobSort == job){\r\n                    if(this.chipQualSort > 0){\r\n                        if(this.chipQualSort == std.Quality){\r\n                            tempList.push(tempData);\r\n                        }\r\n                    }else{\r\n                        tempList.push(tempData);\r\n                    }\r\n                }\r\n            }else{\r\n                if(this.chipQualSort > 0){\r\n                    if(this.chipQualSort == std.Quality){\r\n                        tempList.push(tempData);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.datas = tempList.sort(this.commSort);\r\n    }\r\n    private updateBagItem(item: Node, data: SPlayerDataItem | SThing, index:number) {\r\n        let bagItem = item.getComponent(BagItem);\r\n        if (!bagItem) bagItem = item.addComponent(BagItem);\r\n        bagItem.setIsShowSelect(false);    \r\n        bagItem.setIsShowRedPoint(true);\r\n        bagItem.SetData(data);\r\n        item.getChildByName(\"select\").active = index == this._curSelectIndex;\r\n        \r\n        console.log(\"updateBagItem===\",data);\r\n    }\r\n    /**\r\n     * 选中道具\r\n     * @param index \r\n     */\r\n    protected async SelectItem(index: number, isOperat:boolean = true) {\r\n        if (!this.$hasLoad) await this.initSub;\r\n        this._curSelectIndex = index;\r\n        this.resetSelect();\r\n        if(this._curSelectIndex == 0 && isOperat) this.scroller.ScrollToHead();\r\n        let data = this.datas[this._curSelectIndex];\r\n        this.selectData = data;\r\n        if (data) {\r\n            this.empty.active = false;\r\n            this.item.node.getComponent(Toggle).interactable = false;\r\n            this.item.SetData(data);\r\n            let std = CfgMgr.Getitem(data.id);\r\n            this.selectName.string = std.ItemName;\r\n            this.selectDesc.string = std.Remark;\r\n            this.selectHas.string = `已拥有：${ThingItemId[std.Items] ? this.setResCount(data.count) : data.count}`;\r\n            let btnNode:Node;\r\n            let redNode:Node;\r\n            for (let i = 0; i < this.useBtns.length; i++) {\r\n                btnNode = this.useBtns[i];\r\n                if(std.Button.indexOf(i + 1) != -1){\r\n                    btnNode.active = true;\r\n                    redNode = btnNode.getChildByName(\"red_point\");\r\n                    if(redNode){\r\n                        if(i == 1){//碎片红点\r\n                            if (std.Type == ThingType.ThingTypeItem && std.Itemtpye == ItemType.shard) {\r\n                                redNode.active = data.count >= std.ItemEffect3;\r\n                            }else{\r\n                                redNode.active = false;\r\n                            }\r\n                        }else if(i == 2){//宝箱红点\r\n                            if (std.Type == ThingType.ThingTypeItem && std.Itemtpye == ItemType.box) {\r\n                                redNode.active = true;\r\n                            }else{\r\n                                redNode.active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }else{\r\n                    btnNode.active = false;\r\n                }\r\n                \r\n            }\r\n        } else {\r\n            this.empty.active = true;\r\n        }\r\n    }\r\n\r\n    /**资源和货币的数量展示 */\r\n    private setResCount(count:number){\r\n        //判断是否是小数\r\n        let str = count.toString();\r\n        if(str.indexOf(\".\") != -1){\r\n            str = ToFixed(count,2);\r\n        }else{\r\n            str = str + \".00\" \r\n        }\r\n        return str;\r\n    }\r\n}\r\n"]}