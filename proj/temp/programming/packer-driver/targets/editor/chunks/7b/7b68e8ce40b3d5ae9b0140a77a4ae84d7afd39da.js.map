{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardsGroupChangePanel.ts"],"names":["CardsGroupChangePanel","Button","Input","Label","Layout","ScrollView","instantiate","CfgMgr","Session","Panel","AutoScroller","PlayerData","Card","Protocol","prefab","tile","scroller","noneListCont","okBtn","clone_item","limit","datas","selects","cardGroupScrollView","deckId","onLoad","CloseBy","find","node","on","onSelect","EventType","CLICK","onOk","onDelete","SetHandle","updateCardGroupItem","bind","onSelectCardGroup","onShow","Send","getplayerdecks","flush","args","iterator","cards","push","sort","a","b","a_cost","GetCard","cardId","Cost","b_cost","content","removeAllChildren","card","TOUCH_END","updateCardItem","addChild","layout","getComponent","enabled","updateLayout","scrollToTop","UpdateDatas","cardNameList","item","data","addComponent","SetData","send_data","setdeckcards","cardIds","children","forEach","setSelect","delete_data","deletedeck","event","getCurrentTarget","index","getSiblingIndex","is_select","getSelectState","id","splice","indexOf","card_name","getChildByName","string","name","card_id","console","log","onHide"],"mappings":"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","sourcesContent":["import { Button, EditBox, EventTouch, Input, Label, Layout, Node, ScrollView, Sprite, SpriteFrame, Toggle, UIOpacity, instantiate } from \"cc\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport { ResMgr } from \"../../manager/ResMgr\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Card } from \"./Card\";\r\nimport  base  from \"../../net/proto/BaseUtils\";\r\nimport { Protocol } from \"../../net/Protocol\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\n\r\n\r\nexport class CardsGroupChangePanel extends Panel {\r\n    protected prefab: string = \"prefabs/cards/CardsGroupChangePanel\";\r\n \r\n    protected tile: Label;\r\n    protected scroller: ScrollView;\r\n    private noneListCont:Node;\r\n    private okBtn:Button;\r\n    private clone_item: Node;\r\n    protected limit = 0;\r\n    protected datas: base.IBattleCard[];\r\n    private selects = [];\r\n    protected cardGroupScrollView: AutoScroller;\r\n    private deckId\r\n\r\n    protected onLoad() {\r\n        this.CloseBy(\"closeBtn\");\r\n        this.noneListCont = this.find(\"noneListCont\");\r\n        this.scroller = this.find(\"ScrollView\", ScrollView);\r\n        this.clone_item = this.find(\"ScrollView/view/content/Cards\");\r\n        this.scroller.node.on('select', this.onSelect, this);\r\n        this.find(\"okBtn\", Button).node.on(Button.EventType.CLICK, this.onOk, this);\r\n        this.find(\"deleteBtn\", Button).node.on(Button.EventType.CLICK, this.onDelete, this);\r\n        this.cardGroupScrollView = this.find(\"cardGroupScrollView\", AutoScroller);\r\n        this.cardGroupScrollView.SetHandle(this.updateCardGroupItem.bind(this));\r\n        this.cardGroupScrollView.node.on('select', this.onSelectCardGroup, this);\r\n    }\r\n\r\n    protected onShow(): void {\r\n        Session.Send(Protocol.getplayerdecks)\r\n    }\r\n\r\n    public flush(...args: any[]): void { \r\n        this.datas = [];\r\n        for (const iterator of PlayerData.cards) {\r\n            this.datas.push(iterator)\r\n        }\r\n        this.datas.sort((a:base.IBattleCard, b:base.IBattleCard)=>{\r\n            let a_cost = CfgMgr.GetCard(a.cardId).Cost;\r\n            let b_cost = CfgMgr.GetCard(b.cardId).Cost;\r\n            return a_cost - b_cost;\r\n        })\r\n        this.scroller.content.removeAllChildren();\r\n        for (const iterator of this.datas) {\r\n            let card = instantiate(this.clone_item);\r\n            card.on(Input.EventType.TOUCH_END, this.onSelect, this)\r\n            this.updateCardItem(card, iterator);\r\n            this.scroller.content.addChild(card);\r\n        }\r\n        const layout = this.scroller.content.getComponent(Layout);\r\n        layout.enabled = false;\r\n        layout.enabled = true;\r\n        layout.updateLayout();\r\n        this.scroller.scrollToTop(0.01)\r\n\r\n        \r\n      this.cardGroupScrollView.UpdateDatas(PlayerData.cardNameList);\r\n    }\r\n   \r\n\r\n\r\n    protected updateCardItem(item: Node, data: base.IBattleCard) {\r\n        let card = item.getComponent(Card);\r\n        if (!card) card = item.addComponent(Card);\r\n        card.SetData(data);\r\n    }\r\n\r\n\r\n\r\n    protected onOk() {\r\n        let send_data = new Protocol.setdeckcards();\r\n        send_data.cardIds = this.selects;\r\n        send_data.deckId = this.deckId;\r\n        Session.Send(send_data);\r\n        this.selects = [];\r\n        this.scroller.content.children.forEach(item =>{\r\n            item.getComponent(Card).setSelect(false);\r\n        })\r\n    }\r\n\r\n    protected onDelete() {\r\n        let delete_data = new Protocol.deletedeck();\r\n        delete_data.deckId = this.deckId;\r\n        Session.Send(delete_data);\r\n    }\r\n\r\n    protected  onSelect(event:EventTouch) {\r\n        let item = event.getCurrentTarget();\r\n        let index = item.getSiblingIndex();\r\n        let cards = item.getComponent(Card);\r\n        let is_select = cards.getSelectState();\r\n        cards.setSelect(!is_select)\r\n        if(!is_select){\r\n            this.selects.push(this.datas[index].id)\r\n        }else{\r\n           this.selects.splice(this.selects.indexOf(this.datas[index].id), 1)\r\n        }\r\n    }\r\n\r\n    protected updateCardGroupItem(item: Node, data: base.IDeckAttrs) {\r\n        let card_name = item.getChildByName(\"name\").getComponent(Label);\r\n        card_name.string = data.name;\r\n        let card_id = item.getChildByName(\"id\").getComponent(Label);\r\n        card_id.string = data.id\r\n    }\r\n\r\n    protected  onSelectCardGroup(index: number, item: Node) {\r\n        let card_name = item.getChildByName(\"name\").getComponent(Label);\r\n    \r\n        let deckId = item.getChildByName(\"id\").getComponent(Label);\r\n        console.log(card_name.string , deckId.string)\r\n        this.deckId = deckId.string;\r\n\r\n        // let getdeckcards = new Protocol.getdeckcards();\r\n        // getdeckcards.deckId = this.card_id;\r\n        // Session.Send(getdeckcards);\r\n    }\r\n\r\n\r\n    protected onHide(...args: any[]): void {\r\n    }\r\n\r\n}\r\n"]}