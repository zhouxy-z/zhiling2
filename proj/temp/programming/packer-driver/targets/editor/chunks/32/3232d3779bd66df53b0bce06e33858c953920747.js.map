{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/task/TaskPanel.ts"],"names":["TaskPanel","Label","Toggle","js","Button","Input","instantiate","Sprite","SpriteFrame","path","EventMgr","Evt_NextDay","Evt_RefreshTaskChange","Evt_Show_Scene","Evt_TaskChange","Evt_TaskShowBoxTips","ActiveTaskCont","TaskItem","DateUtils","TaskActiveBoxTipsCont","Panel","AutoScroller","STaskType","CfgMgr","ItemType","StdCommonType","PlayerData","Route","Session","ItemUtil","ClickTipsPanel","MsgPanel","SeasonActiveTaskCont","ResMgr","folder_item","TaskTabType","prefab","navBtns","activeTaskCont","seasonActiveTaskCont","taskList","noneListCont","timeCont","timeLab","weektimeLab","refreshBtn","max","content","clone_item","banner","task_count","weekActiveTaskList","dayTaskList","tyroTaskList","seasonTaskList","activeBoxTips","weekCurAcNum","weekMaxAcNum","page","max_day_task_limit","cfg_comm","refresh_cost","selectSeasonChapterId","SeasonChapterCfg","onLoad","find","children","concat","addComponent","on","EventType","TOUCH_END","onRefresh","SetHandle","updateTaskItem","bind","btn","onPage","CloseBy","onShow","Send","onUpdateTask","onShowBoxTips","updateRefresh","SetPage","$hasLoad","initSub","undefined","getComponent","isChecked","flush","seasonChapterId","GetSeasonTaskAllChapter","findIndex","data","ID","GetCommon","DailyTask","DailyTaskNum","initSortListData","Page_Daily","time","GetCurSeasonEndTime","ServerTime","active","removeAllChildren","all_tag_data","index","length","cfg_data","tag","tagData","tagName","SeasonChapterName","push","item","name","setPosition","getChildByPath","string","is_lock","GetCurSeasonPastTTime","OpenTime","off","CLICK","openOneTag","addChild","t","target","getSiblingIndex","console","log","seasontime","datas","GetSeasonTaskByChapterID","chapt_cfg_data","element","TaskType","seasonChapter","taskData","player","tasks","TopTask","id","start","end","value","getChildByName","item_list","parent","forEach","node","SetData","UpdateDatas","ScrollToHead","day","FormatTime","Show","indexOf","updateTaskList","isToHead","LoadResAbSub","res","spriteFrame","filtrDayTask","filtrWeekAcivtyTask","Page_Tyro","filtrTyroTask","Page_Season","list","GetTaskByTaskType","weekActive","CompletionNum","iterator","taskItem","std","showPos","clickTarget","GetSThingList","RewardType","RewardID","RewardNumber","Description","GetItemCount","DailyTaskRefreshItem","item_cfg","Getitem","price","Itemtpye","money","icon","Icon","join","refres_count","taskRefreshCount","count_list","DailyTaskRefreshItemNum","count","update","dt","DailyTaskRefreshTime","time_list","next_time","scheduleDailyRefresh","before_time","next_day_zero_time","nextDayHoursTime","DailyTaskRefreshMaxNum","time_lsit","getTimeToNextWeek","h","m","s","onHide","args","emit","getClassByName"],"mappings":"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","sourcesContent":["import { Label, Node, Toggle, Widget, Vec3, js, Button, Input, instantiate, Sprite, SpriteFrame, path} from \"cc\";\r\nimport { EventMgr, Evt_Hide_Scene, Evt_NextDay, Evt_RefreshTaskChange, Evt_Show_Scene, Evt_TaskChange, Evt_TaskShowBoxTips } from \"../../manager/EventMgr\";\r\nimport { ActiveTaskCont } from \"./ActiveTaskCont\";\r\nimport { TaskItem } from \"./TaskItem\";\r\nimport { DateUtils } from \"../../utils/DateUtils\";\r\nimport { TaskActiveBoxTipsCont } from \"./TaskActiveBoxTipsCont\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { SPlayerDataTask, STaskState, STaskType } from \"../player/PlayerStruct\";\r\nimport { CfgMgr, ItemType, StdCommonType, StdTask, StdTaskSeason } from \"../../manager/CfgMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { ItemUtil } from \"../../utils/ItemUtils\";\r\nimport { ClickTipsPanel } from \"../common/ClickTipsPanel\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { SeasonActiveTaskCont } from \"./SeasonActiveTaskCont\";\r\nimport { ResMgr, folder_icon, folder_item } from \"../../manager/ResMgr\";\r\nenum TaskTabType {\r\n    Page_Daily,//日常任务\r\n    Page_Tyro,//新手任务\r\n    Page_Season,//赛季任务\r\n};\r\nexport class TaskPanel extends Panel {\r\n    protected prefab: string = \"prefabs/task/TaskPanel\";\r\n    private navBtns:Node[];\r\n    private activeTaskCont:ActiveTaskCont;//活跃任务\r\n    private seasonActiveTaskCont:SeasonActiveTaskCont;//赛季章节任务\r\n    private taskList: AutoScroller;\r\n    private noneListCont:Node;\r\n    private timeCont:Node;\r\n    private timeLab: Label;\r\n    private weektimeLab: Label;\r\n    private refreshBtn: Node;\r\n    private max: Node;\r\n    private content:Node;\r\n    private clone_item:Node;\r\n    private banner:Sprite\r\n    private task_count:Label;\r\n\r\n    private weekActiveTaskList:SPlayerDataTask[];//每周活跃任务\r\n    private dayTaskList:SPlayerDataTask[];//每日任务\r\n    private tyroTaskList:SPlayerDataTask[];//新手任务\r\n    private seasonTaskList:SPlayerDataTask[];//成就任务\r\n\r\n    private activeBoxTips:TaskActiveBoxTipsCont;\r\n    private weekCurAcNum:number = 0;\r\n    private weekMaxAcNum:number = 0;\r\n    private page:number;\r\n    private max_day_task_limit = 0\r\n\r\n    private cfg_comm:any\r\n\r\n    private refresh_cost = 0;\r\n    private selectSeasonChapterId:number = 0\r\n    private SeasonChapterCfg:StdTaskSeason[]\r\n\r\n    protected onLoad() {\r\n        this.navBtns = this.find(\"panel/navBar/view/content\").children.concat();\r\n        this.activeTaskCont = this.find(\"panel/activeTaskCont\").addComponent(ActiveTaskCont);\r\n        this.seasonActiveTaskCont = this.find(\"panel/seasonActiveTaskCont\").addComponent(SeasonActiveTaskCont);\r\n        this.taskList = this.find(\"panel/taskList\", AutoScroller);\r\n        this.banner = this.find(\"panel/banner\",Sprite);\r\n        this.noneListCont = this.find(\"panel/noneListCont\");\r\n        this.timeCont = this.find(\"panel/timeBg/timeCont\");\r\n        this.timeLab = this.find(\"panel/timeBg/timeCont/timeLab\",Label);\r\n        this.weektimeLab = this.find(\"panel/activeTaskCont/time\",Label);\r\n        this.activeBoxTips = this.find(\"panel/activeBoxTips\").addComponent(TaskActiveBoxTipsCont);\r\n        this.refreshBtn = this.find(\"panel/timeBg/refreshBtn\");\r\n        this.max = this.find(\"panel/timeBg/max\");\r\n        this.task_count = this.find(\"panel/timeBg/task_count\",Label);\r\n        this.refreshBtn.on(Input.EventType.TOUCH_END, this.onRefresh, this)\r\n        this.taskList.SetHandle(this.updateTaskItem.bind(this));\r\n        for (let btn of this.navBtns) {\r\n            btn.on('toggle', this.onPage, this);\r\n        }\r\n        this.CloseBy(\"panel/closeBtn\");\r\n\r\n        this.content = this.find(\"panel/navBar/view/content/btn3/checkMark/content\");\r\n        this.clone_item = this.find(\"panel/navBar/view/content/btn3/checkMark/content/btn4\");\r\n    }\r\n  \r\n    protected onShow(): void {\r\n        Session.Send(Route[\"logic.protocol.getrefreshdailytasktimes\"])\r\n        EventMgr.on(Evt_TaskChange, this.onUpdateTask, this);\r\n        EventMgr.on(Evt_NextDay, this.onUpdateTask, this);\r\n        EventMgr.on(Evt_TaskShowBoxTips, this.onShowBoxTips, this);\r\n        EventMgr.on(Evt_RefreshTaskChange, this.updateRefresh, this);\r\n    }\r\n\r\n    async SetPage(page: number) {\r\n        if (!this.$hasLoad) await this.initSub;\r\n        if (!this.navBtns[page]) return;\r\n        this.page = undefined;\r\n        this.navBtns[page].getComponent(Toggle).isChecked = true;\r\n        this.onPage(this.navBtns[page].getComponent(Toggle));\r\n    }\r\n    public flush(page?: TaskTabType, seasonChapterId?:number): void{\r\n        this.SeasonChapterCfg = PlayerData.GetSeasonTaskAllChapter();\r\n        this.selectSeasonChapterId = 0;\r\n        if(seasonChapterId){\r\n            this.selectSeasonChapterId = this.SeasonChapterCfg.findIndex(data=>data.ID == seasonChapterId)\r\n        }\r\n        this.cfg_comm = CfgMgr.GetCommon(StdCommonType.DailyTask);\r\n        this.max_day_task_limit = this.cfg_comm.DailyTaskNum;\r\n        this.initSortListData();\r\n        this.SetPage(page || TaskTabType.Page_Daily);\r\n    }\r\n\r\n    //初始化赛季列表数据\r\n    private initSortListData() {\r\n        let time = PlayerData.GetCurSeasonEndTime() - DateUtils.ServerTime;\r\n        if(time > 0){\r\n            this.navBtns[2].active = true;\r\n            this.content.removeAllChildren();\r\n            let all_tag_data = []\r\n            for (let index = 0; index <  this.SeasonChapterCfg.length; index++) {\r\n                let cfg_data =  this.SeasonChapterCfg[index];\r\n                let data = {\r\n                    tag: index,\r\n                    tagData: cfg_data,\r\n                    tagName: cfg_data.SeasonChapterName\r\n                }\r\n                all_tag_data.push(data);\r\n                let item = instantiate(this.clone_item);\r\n                item.name = \"item\" + index;\r\n                item.setPosition(0, 0);\r\n                item[\"chapterData\"] = cfg_data;\r\n                item[\"type\"] = index;\r\n                item.getChildByPath(\"defCont/lab\").getComponent(Label).string = cfg_data.SeasonChapterName;\r\n                item.getChildByPath(\"checkMark/lab\").getComponent(Label).string = cfg_data.SeasonChapterName;\r\n                let is_lock = PlayerData.GetCurSeasonPastTTime() <= (cfg_data.OpenTime - 1) * 86400\r\n                item.getChildByPath(\"defCont/lock\").active = is_lock\r\n                item.off(Button.EventType.CLICK, this.openOneTag.bind(this), this);\r\n                item.on(Button.EventType.CLICK, this.openOneTag.bind(this), this);\r\n                this.content.addChild(item);\r\n            }\r\n        }else{\r\n            this.navBtns[2].active = false;\r\n        }\r\n       \r\n    }\r\n\r\n    private openOneTag(t:Button){\r\n        let item = t.target;\r\n        this.selectSeasonChapterId = item.getSiblingIndex();\r\n        console.log(item[\"chapterData\"])\r\n        let cfg_data:StdTaskSeason = item[\"chapterData\"]\r\n        let seasontime = PlayerData.GetCurSeasonPastTTime()\r\n        let is_lock = seasontime >= (cfg_data.OpenTime - 1) * 86400\r\n        this.seasonTaskList = []\r\n        if(is_lock){\r\n            //获取当前章节的任务\r\n            let datas = CfgMgr.GetSeasonTaskByChapterID(cfg_data.ID)\r\n            let chapt_cfg_data:StdTask\r\n            for (let index = 0; index < datas.length; index++) {\r\n                const element = datas[index]; \r\n                if(element.TaskType != STaskType.seasonChapter) {\r\n                    let taskData:proto.base.IPlayerDataTask = PlayerData.player.tasks[element.TopTask];\r\n                    if(taskData){\r\n                        this.seasonTaskList.push(taskData)  \r\n                    }else{\r\n                        let data:proto.base.IPlayerDataTask = {id:element.TopTask, start:null, end:null, value:0}\r\n                        this.seasonTaskList.push(data)  \r\n                    }\r\n                }else{\r\n                    chapt_cfg_data = element\r\n                }\r\n            }\r\n            item.getChildByName(\"checkMark\").active = true;\r\n            let item_list = item.parent.children;\r\n            item_list.forEach(element => {\r\n                if(element[\"type\"] != item[\"type\"]){\r\n                    element.getChildByName(\"checkMark\").active = false;\r\n                }\r\n            });\r\n            this.seasonActiveTaskCont.node.active = true;\r\n            this.seasonActiveTaskCont.SetData(this.seasonTaskList, cfg_data.SeasonChapterName, chapt_cfg_data);\r\n            this.noneListCont.active = this.seasonTaskList.length <= 0; \r\n            this.taskList.UpdateDatas(this.seasonTaskList);\r\n            this.taskList.ScrollToHead();\r\n        }else{\r\n            let day = (cfg_data.OpenTime - 1) * 86400 - seasontime > 86400\r\n            let time = \"\"\r\n            if(day){\r\n                time = DateUtils.FormatTime((cfg_data.OpenTime - 1) * 86400 - seasontime, \"%{d}天%{hh}小时\")\r\n            }else{\r\n                time = DateUtils.FormatTime((cfg_data.OpenTime - 1) * 86400 - seasontime, \"%{hh}小时%{mm}分%{ss}秒\")\r\n            }\r\n            MsgPanel.Show(\"剩余\" + time + \"开启\")\r\n        }\r\n        \r\n    }\r\n\r\n    private onPage(t: Toggle):void{\r\n        if (!t.isChecked) return;\r\n        let page = this.navBtns.indexOf(t.node);\r\n        if (page < 0 || page == this.page) return;\r\n        this.page = page;\r\n        this.updateTaskList(true);\r\n    }\r\n    private onUpdateTask():void{\r\n        this.updateTaskList();\r\n    }\r\n    private updateTaskList(isToHead:boolean = false):void{\r\n        let datas:SPlayerDataTask[];\r\n        this.activeTaskCont.node.active = false;\r\n        this.seasonActiveTaskCont.node.active = false;\r\n        this.refreshBtn.parent.active = false;\r\n        let index = this.page + 1\r\n        ResMgr.LoadResAbSub(\"sheets/task/banner\" + index + \"/spriteFrame\" , SpriteFrame, res=>{\r\n            this.banner.spriteFrame = res;\r\n        })\r\n\r\n        switch (this.page) {\r\n            case TaskTabType.Page_Daily: // 每日任务\r\n                this.refreshBtn.parent.active = true;\r\n                this.filtrDayTask();\r\n                this.filtrWeekAcivtyTask();\r\n                this.updateRefresh();\r\n                this.activeTaskCont.node.active = true;\r\n                this.activeTaskCont.SetData(1, this.weekActiveTaskList, this.weekCurAcNum, this.weekMaxAcNum);\r\n                datas = this.dayTaskList;\r\n                break;\r\n            case TaskTabType.Page_Tyro: // 新手任务\r\n                this.filtrTyroTask();\r\n                datas = this.tyroTaskList;\r\n                break;\r\n            case TaskTabType.Page_Season: // 赛季任务\r\n                this.seasonActiveTaskCont.node.active = true;\r\n                if(this.content.children.length != 0 && this.content.children[this.selectSeasonChapterId]){\r\n                    this.openOneTag(this.content.children[this.selectSeasonChapterId].getComponent(Button));\r\n                }else{\r\n                    MsgPanel.Show(\"暂无该任务\")\r\n                }\r\n                return;\r\n        }\r\n\r\n        this.noneListCont.active = datas.length <= 0; \r\n        this.taskList.UpdateDatas(datas);\r\n        if(isToHead) this.taskList.ScrollToHead();\r\n    }\r\n    //筛选每日任务 \r\n    private filtrDayTask():void{    \r\n        this.dayTaskList = PlayerData.filtrDayTask();\r\n    }\r\n    //新手任务\r\n    private filtrTyroTask():void{   \r\n        this.tyroTaskList = PlayerData.filtrTyroTask();\r\n    }\r\n\r\n    //筛选每周活跃任务 \r\n    private filtrWeekAcivtyTask():void{\r\n        this.weekActiveTaskList = [];\r\n        this.weekMaxAcNum = 0;\r\n        this.weekCurAcNum = 0;\r\n\r\n        let list = CfgMgr.GetTaskByTaskType(STaskType.weekActive);\r\n        this.weekMaxAcNum = list[list.length - 1].CompletionNum\r\n        for (let index = 0; index < list.length; index++) {\r\n            const element = list[index];  \r\n            let taskData:proto.base.IPlayerDataTask = PlayerData.player.tasks[element.TopTask];\r\n            if(taskData){\r\n                this.weekActiveTaskList.push(taskData)  \r\n            }else{\r\n                let data:proto.base.IPlayerDataTask = {id:element.TopTask, start:null, end:null, value:0}\r\n                this.weekActiveTaskList.push(data)  \r\n            }\r\n        }\r\n\r\n        for (const iterator of this.weekActiveTaskList) {\r\n            if(iterator.value > this.weekCurAcNum){\r\n                this.weekCurAcNum = iterator.value;\r\n            }   \r\n        }\r\n    }\r\n\r\n    private updateTaskItem(item: Node, data: SPlayerDataTask):void{\r\n        let taskItem = item.getComponent(TaskItem);\r\n        if (!taskItem) taskItem = item.addComponent(TaskItem);\r\n        taskItem.SetData(data);\r\n    }\r\n    private onShowBoxTips(std:StdTask, showPos:Vec3, clickTarget:Node):void{\r\n        let list:proto.base.IThing[] = ItemUtil.GetSThingList(std.RewardType, std.RewardID, std.RewardNumber);\r\n        this.activeBoxTips.SetData(list, std.Description);\r\n        ClickTipsPanel.Show(this.activeBoxTips.node, this.node, clickTarget, showPos, 0);\r\n                \r\n    }\r\n\r\n    private onRefresh(){\r\n        if(PlayerData.GetItemCount(this.cfg_comm.DailyTaskRefreshItem) >= this.refresh_cost){\r\n            Session.Send(Route[\"logic.protocol.refreshdailytask\"]);\r\n        }else{\r\n            MsgPanel.Show(\"资源不足\")\r\n        }\r\n    }\r\n\r\n    private updateRefresh(){\r\n        let item_cfg = CfgMgr.Getitem(this.cfg_comm.DailyTaskRefreshItem)\r\n        let price = 1\r\n        if(item_cfg.Itemtpye == ItemType.money){\r\n            price = 10000\r\n        }\r\n        let icon = CfgMgr.Getitem(this.cfg_comm.DailyTaskRefreshItem).Icon\r\n        ResMgr.LoadResAbSub(path.join(folder_item, icon,\"spriteFrame\"), SpriteFrame,res=>{\r\n            this.refreshBtn.getChildByName(\"icon\").getComponent(Sprite).spriteFrame = res\r\n        })\r\n        let refres_count = PlayerData.taskRefreshCount\r\n        let count_list = this.cfg_comm.DailyTaskRefreshItemNum\r\n        let max = count_list[count_list.length - 1]\r\n        let count = count_list[refres_count] ? count_list[refres_count] : max\r\n        this.refreshBtn.getChildByName(\"lab\").getComponent(Label).string = count / price + \"\";\r\n        this.refresh_cost = count / price;\r\n        if(this.dayTaskList){\r\n            this.refreshBtn.active = this.dayTaskList.length < this.max_day_task_limit;\r\n            this.max.active = this.dayTaskList.length >= this.max_day_task_limit;\r\n            this.task_count.string = this.dayTaskList.length + \"/\" + this.max_day_task_limit + \"个任务\"     \r\n        }\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        if(this.page == TaskTabType.Page_Season){\r\n            this.timeCont.active = false;\r\n        }else{\r\n            this.timeCont.active = true;\r\n            if(this.page == TaskTabType.Page_Daily){\r\n                let list = this.cfg_comm.DailyTaskRefreshTime;\r\n                let time_list = [24]\r\n                for (let index = 0; index < list.length; index++) {\r\n                    const element = list[index];\r\n                    time_list.push(element);\r\n                }\r\n                \r\n                //最近的时间\r\n                let next_time = DateUtils.scheduleDailyRefresh(time_list)\r\n                //距离凌晨前一个的时间点\r\n                let before_time = DateUtils.scheduleDailyRefresh([list[list.length - 1]])\r\n                //第二天凌晨\r\n                let next_day_zero_time = DateUtils.nextDayHoursTime(DateUtils.ServerTime)\r\n                let time = next_time - DateUtils.ServerTime\r\n                if(next_day_zero_time > before_time){\r\n                    this.timeLab.string = `${this.cfg_comm.DailyTaskRefreshMaxNum}个任务将在${DateUtils.FormatTime(time)}后刷新`;\r\n                }else{\r\n                    this.timeLab.string = `0点后全部任务重置`;\r\n                }\r\n                let time_lsit = DateUtils.getTimeToNextWeek()\r\n                let day = time_lsit[0]\r\n                let h = time_lsit[1];\r\n                let m = time_lsit[2];\r\n                let s = time_lsit[3];\r\n                if(day <= 0 && h > 0){\r\n                    this.weektimeLab.string =  `${h}小时${m}分`;\r\n                }else if(h <= 0 && s > 0){\r\n                    this.weektimeLab.string =  `${m}分${s}秒`;\r\n                }else{\r\n                    this.weektimeLab.string =  `${day}天${h}小时`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n        EventMgr.off(Evt_TaskChange, this.onUpdateTask, this);\r\n        EventMgr.off(Evt_NextDay, this.onUpdateTask, this);\r\n        EventMgr.off(Evt_TaskShowBoxTips, this.onShowBoxTips, this);\r\n        EventMgr.emit(Evt_Show_Scene, js.getClassByName(this));\r\n    \r\n    }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"]}