{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/fight/GameLogic.ts"],"names":["GameLogic","Battle_Area_to_HandCard","Battle_HandCard_To_Area","EventMgr","GameScene","Tips","Second","playCard","cardId","area","i","handCards","length","data","instId","myArea","indexOf","isntance","FlushHandCard","splice","index","push","round_opreate","card","handIndex","SendMyCardToArea","getBack","find","value","Show","pop","LayoutAllArea","Enter","adArea","on","AddHandCard","Round_New","Round_Resume","Round_End","Round_Play","undefined","Round_Settlement"],"mappings":"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","sourcesContent":["import { Battle_Area_to_HandCard, Battle_HandCard_To_Area, EventMgr } from \"../../manager/EventMgr\";\r\nimport { GameScene } from \"./GameScene\";\r\nimport { Tips } from \"../common/Tips\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport base from \"../../net/proto/BaseUtils\";\r\n\r\n/**\r\n * 战斗逻辑\r\n */\r\nexport class GameLogic {\r\n\r\n    protected static handCards: base.IBattleRoomCardData[] = []; // 手牌\r\n    protected static myArea: base.IBattleRoomCardData[][] = [];  // 自己区域\r\n    protected static adArea: base.IBattleRoomCardData[][] = [[], [], []]; // 对手区域\r\n    protected static round_opreate: { card: base.IBattleRoomCardData, area: number, handIndex: number }[] = []; // 本轮的操作\r\n\r\n    /////////////////////////////////////////////////////////////////////////////////////\r\n    //       操作\r\n    /////////////////////////////////////////////////////////////////////////////////////\r\n    /**出牌 */\r\n    protected static playCard(cardId: string, area: number) {\r\n        for (let i = this.handCards.length - 1; i >= 0; i--) {\r\n            let data = this.handCards[i];\r\n            if (data && data.instId == cardId) {\r\n                if (this.myArea[area].indexOf(data) != -1) {\r\n                    GameScene.isntance.FlushHandCard(this.handCards);\r\n                } else {\r\n                    this.handCards.splice(i, 1);\r\n                    let index = this.myArea[area].length;\r\n                    this.myArea[area].push(data);\r\n                    this.round_opreate.push({ card: data, area: area, handIndex: i });\r\n                    //GameScene.getIsntance().lastOperateId = data.instId;\r\n                    GameScene.isntance.SendMyCardToArea(data, area, index);\r\n                    GameScene.isntance.FlushHandCard(this.handCards);\r\n                }\r\n                return data;\r\n            }\r\n        }\r\n        throw \"找不到此牌 instId:\" + cardId + \"area:\" + area;\r\n    }\r\n    /**返回手牌 */\r\n    protected static getBack(cardId: string) {\r\n        if (this.handCards.find(value => value.instId == cardId)) {\r\n            Tips.Show(\"此牌已在手牌里\");\r\n        } else {\r\n            let data = this.round_opreate[this.round_opreate.length - 1];\r\n            if (data.card.instId == cardId) {\r\n                let index = this.myArea[data.area].indexOf(data.card);\r\n                if (index != -1) this.myArea[data.area].splice(index, 1);\r\n                this.round_opreate.pop();\r\n                if (this.round_opreate.length) {\r\n                    //GameScene.getIsntance().lastOperateId = this.round_opreate[this.round_opreate.length].card.instId;\r\n                }\r\n                this.handCards.splice(data.handIndex, 0, data.card);\r\n                GameScene.isntance.FlushHandCard(this.handCards);\r\n            } else {\r\n                GameScene.isntance.LayoutAllArea();\r\n            }\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////////////\r\n    //       主流程\r\n    /////////////////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * 开始游戏\r\n     * @param handCards \r\n     * @param myArea \r\n     * @param adArea \r\n     */\r\n    static async Enter(handCards?: base.IBattleRoomCardData[], myArea?: base.IBattleRoomCardData[][], adArea?: base.IBattleRoomCardData[][]) {\r\n\r\n        if (handCards) this.handCards = handCards;\r\n        if (myArea) this.myArea = myArea;\r\n        if (adArea) this.adArea = adArea;\r\n\r\n        EventMgr.on(Battle_HandCard_To_Area, this.playCard, this);\r\n        EventMgr.on(Battle_Area_to_HandCard, this.getBack, this);\r\n\r\n        // 初始手牌\r\n        for (let data of handCards) {\r\n            GameScene.isntance.AddHandCard(data);\r\n            await Second(0.1);\r\n        }\r\n    }\r\n\r\n    /**同步新回合开始 */\r\n    static Round_New() {\r\n        this.round_opreate = [];\r\n        //GameScene.getIsntance().lastOperateId = undefined;\r\n    }\r\n\r\n    /**同步取消结束回合状态 */\r\n    static Round_Resume() {\r\n        \r\n    }\r\n\r\n    /**同步盖牌状态 */\r\n    static Round_End() {\r\n        //GameScene.getIsntance().CloseCard(this.round_opreate);\r\n    }\r\n\r\n    /**同步回合揭示和战斗表现 */\r\n    static Round_Play() {\r\n        //GameScene.getIsntance().ShowCard(this.round_opreate);\r\n        //清理手牌参数\r\n        //GameScene.getIsntance().lastOperateId = undefined;\r\n        this.round_opreate = undefined;\r\n    }\r\n    \r\n    /**同步回合结算 */\r\n    static Round_Settlement() {\r\n\r\n    }\r\n}"]}