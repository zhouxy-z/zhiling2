{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/fight/opOutput/Out_CardDataChange.ts"],"names":["Out_CardDataChange","proto","BattleBaseComp","battleDataMgr","start","oldCardData","isPlayerA","data","card","playerId","location","base","BattleRoomCardLocation","Hand","getPlayerHandCard","ownerPlayerId","instId","Deck","getPlayerDeckCard","Drop","getPlayerDropCard","Del","getPlayerDelCard","Terrain","getPlayerTerrainCard","console","error","dir","add","remove","valMap","skill","index","skills","length","skillId","push","key","scene","CardDataChange","isExit","power","oldPower","finalValue","curPower","terrainData","getPlayerTerrainFormIdx","area","offsetPower","cardMul","oldTotalPower","getPlayerTerrainTotalPow","FlushAreaPower","oldCost","cost","curCost","exit","reset"],"mappings":"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","sourcesContent":["import proto from \"../../../net/Protocol\";\r\nimport { BattleBaseComp } from \"../../battle/BattleBaseComp\";\r\nimport { battleDataMgr } from \"../../battle/BattleDataMgr\";\r\n\r\n/**\r\n * 卡牌数据变更\r\n */\r\nexport class Out_CardDataChange extends BattleBaseComp<proto.base.IBattleRoomOpOutput_CardDataChange> {\r\n    protected async start(): Promise<void> {\r\n        let oldCardData: proto.base.IBattleRoomCardData;\r\n        let isPlayerA = battleDataMgr.isPlayerA(this.data.card.playerId);\r\n        switch (this.data.card.location) {\r\n            case proto.base.BattleRoomCardLocation.Hand://修改手卡\r\n                oldCardData = battleDataMgr.getPlayerHandCard(this.ownerPlayerId, this.data.card.instId);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Deck://修改卡组\r\n                oldCardData = battleDataMgr.getPlayerDeckCard(this.ownerPlayerId, this.data.card.instId);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Drop://修改弃卡\r\n                oldCardData = battleDataMgr.getPlayerDropCard(this.ownerPlayerId, this.data.card.instId);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Del://修改删除卡\r\n                oldCardData = battleDataMgr.getPlayerDelCard(this.ownerPlayerId, this.data.card.instId);\r\n                break;\r\n            case proto.base.BattleRoomCardLocation.Terrain://修改地形卡\r\n                oldCardData = battleDataMgr.getPlayerTerrainCard(this.ownerPlayerId, this.data.card.instId);\r\n                break;\r\n            default:\r\n                console.error(\"修改来源未知卡\")\r\n                console.dir(this.data.card);\r\n                break;\r\n        }\r\n\r\n        \r\n        let add: proto.base.IBattleRoomSkillData[] = [];//增加的技能\r\n        let remove: proto.base.IBattleRoomSkillData[] = [];//被移除的技能\r\n        let valMap = {};\r\n        let skill: proto.base.IBattleRoomSkillData;\r\n        for (let index = 0; index < oldCardData.skills.length; index++) {\r\n            skill = oldCardData.skills[index];\r\n            valMap[skill.skillId] = skill;\r\n        }\r\n    \r\n        for (let index = 0; index < this.data.card.skills.length; index++) {\r\n            skill = this.data.card.skills[index];\r\n            if (!valMap[skill.skillId]) {\r\n                add.push(skill)\r\n            } else {\r\n                delete valMap[skill.skillId];\r\n            }\r\n        }\r\n        \r\n        for (let key in valMap) {\r\n            remove.push(valMap[key]);\r\n        }\r\n        \r\n        \r\n        await this.scene.CardDataChange(isPlayerA, this.data);\r\n        if (this.isExit) return;\r\n        if (oldCardData && oldCardData.power) {\r\n            let oldPower: number = oldCardData.power.finalValue;\r\n            let curPower: number = this.data.card.power.finalValue;\r\n            if (oldPower != curPower) {\r\n                //战力变更\r\n                let terrainData: proto.base.IBattleRoomTerrainPlayerData = battleDataMgr.getPlayerTerrainFormIdx(oldCardData.playerId, oldCardData.area);\r\n                if (this.data.card.location == proto.base.BattleRoomCardLocation.Terrain) {\r\n                    let offsetPower: number = terrainData.cardMul.finalValue * (curPower - oldPower);\r\n                    let oldTotalPower = battleDataMgr.getPlayerTerrainTotalPow(oldCardData.playerId, oldCardData.area);\r\n                    this.scene.FlushAreaPower(isPlayerA, oldCardData.area, oldTotalPower + offsetPower);\r\n                }\r\n                \r\n            }\r\n            let oldCost: number = oldCardData.cost.finalValue;\r\n            let curCost: number = this.data.card.cost.finalValue;\r\n            if (oldCost != curCost) {\r\n                //费电变更\r\n\r\n            }\r\n\r\n          \r\n        }\r\n        // Second(0.3);\r\n        this.exit();\r\n    }\r\n\r\n    protected reset(): void {\r\n\r\n    }\r\n}"]}