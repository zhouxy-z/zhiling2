{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardsPanel.ts"],"names":["CardsPanel","Button","EditBox","Input","Label","Toggle","UITransform","Vec3","Widget","js","size","sp","view","EventMgr","Evt_Add_Card_Group_update","Evt_Card_Add","Evt_Card_Check_By_Name","Evt_Card_Del","Evt_Card_Group_Update","Evt_Hide_Scene","Evt_Set_Battle_Card_Group_Update","Evt_Show_Scene","Panel","AutoScroller","PlayerData","Card","Session","CardSotrType1","CardSotrType2","CfgMgr","skillType","CardGroupItem","CardInfoStateType","Second","proto","Req","Route","CardsSortOrFiltrate","CardsGroupSetting","Goto","Tips","MsgPanel","Tips2","CardGroupCreatorTips","VList","MoreType","prefab","scroller","noneListCont","sortNode","closeSortBtn","upOrDownBtn","sortNav","filtrateNode","searchNode","editBox","completeBtn","cancelBtn","filtrateClose","filtrateBtn","sortBtn","moreBtn","showNode","cardGroupScrollView","addCardNode","addCardScrollView","back","clone_item","groupNameEditBox","moreNode","moreNav","skillEffNode","costNode","diyNode","sortNodeBack","navBtns","illustratedScrollView","help","card_group_setting","EffNode","Content","card_list","max_card_group","max_card","sort_type_1","Up","sort_type_2","Cost","search_card_list","searchStrList","selects","add_or_change","is_open_add_card_group","selectSkillType","costType","showType","selectSkillList","costTypeList","showTypeList","isCanAdd","old_selects","old_name","tag","data","data_list","select_creator_card_group_card_id","guide_index","onLoad","CloseBy","find","children","concat","btn","off","onPage","on","EventType","TOUCH_END","Show","updateCell","updateCardItem","bind","selectCell","onSelectCard","node","CLICK","onClick","EDITING_DID_ENDED","onEditEnd","active","getChildByName","SetHandle","updateCardGroupItem","onCardGroupSelect","updateCardGroupCardItem","onSelectCardGroupCard","addComponent","onBack","forEach","index","getComponent","isChecked","setCardSort","onMoreBtn","string","skillSearch","costSearch","showSearch","onShow","updateCardsGroupCardData","flush","onReqSaveCardGroup","onAddCard","onDelCard","emit","getClassName","is_show_head_node","SetPage","cardData","setCardState","page","$hasLoad","initSub","undefined","t","indexOf","updateCardGroup","updateAllCardsShow","setHaveCardGroup","cfg_card_list","onSetSearchShow","cellCount","length","updatePanel","name","cur_id","id","getdeckcards","deckId","Send","updateAllCardGroup","size_1","contentSize","size_2","size_3","setContentSize","item","updateAlignment","setSelect","height","panel_width","getVisibleSize","width","paddingLeft","paddingRight","right_width","max_width","item_width","num","Math","floor","yu","jianju","spacingX","iterator","cards","push","setCardsData","player","statusMark","NoobCardsAdd","cardNameList","element","JSON","parse","stringify","initCardGroupCfg","Get","initCardGroup","base","DeckAttrs","create","avatarId","CardGroupHead","cardBackId","CardGroupBack","CardGroupName","unshift","UpdateDatas","cell","cellInfo","card","setIsShowUpEffect","getChildByPath","isSelect","SetData","setGray","cfg","GetCard","cardId","select_card_cfg","Classid","ID","setShowAdd","lastCell","lastInfo","getData","callBack","is_select","getSelectState","IsOpen","setCardGary","splice","findIndex","addCardsGroup","is_has","type","Add","Fill","Change","Del","card_data","CreaterCardGroupAnmition","Creator","setCurCardGroupCardList","card_group_item","onReqCreateCardGroup","list","key","Object","hasOwnProperty","call","sort","a","b","a_data","b_data","Power","is_gray","card_cfg","is_add","isUpdate","isDle","content","delete_node","removeChild","is_open","Down","y","setScale","resetSearchState","del_card","CurFightCardGroup","delete_data","shard","copy","add","inquiry","count","cfg_logic","GetLogic","head_id","HeadID","card_back_id","BackpackerID","attrs","is_change_name","is_change_card","id_list","getCardGroupDataById","Change_name","send_data","cardIds","onHide","args","getClassByName","spine","Skeleton","clearAnimation","setAnimation","setCompleteListener","old_card_list","GetGenerateCardGroup","is_del","callBack1","callBack2","set"],"mappings":"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","sourcesContent":["import { Button, EditBox, Input, Label, Node, Toggle, Tween, UITransform, Vec3, Widget, js, size, sp, tween, view } from \"cc\";\r\nimport { EventMgr, Evt_Add_Card_Group_update, Evt_Card_Add, Evt_Card_Check_By_Name, Evt_Card_Del, Evt_Card_Group_Update, Evt_Hide_Scene, Evt_Set_Battle_Card_Group_Update, Evt_Show_Scene } from \"../../manager/EventMgr\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { Card } from \"./Card\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { CardSotrType1, CardSotrType2, CfgMgr, StdNoobCardGroup, skillType } from \"../../manager/CfgMgr\";\r\nimport { CardGroupItem } from \"./CardGroupItem\";\r\nimport { CardInfoStateType } from \"../player/PlayerStruct\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport proto, { Req, Ret, Route } from \"../../net/Protocol\";\r\nimport { CardsSortOrFiltrate } from \"./CardsSortOrFiltrate\";\r\nimport { CardsGroupSetting } from \"./CardsGroupSetting\";\r\nimport { Goto } from \"../../DL\";\r\nimport { Tips } from \"../common/Tips\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { Tips2 } from \"../common/Tips2\";\r\nimport { CardGroupCreatorTips } from \"./CardGroupCreatorTips\";\r\nimport { CellInfo, VList } from \"../../component/VList\";\r\n\r\nenum MoreType {\r\n    del_card,//删除卡组\r\n    shard,//分享\r\n    copy,//粘贴\r\n    add, //自动填充\r\n    inquiry,//询问精灵\r\n}\r\n\r\n\r\n\r\nexport class CardsPanel extends Panel {\r\n    protected prefab: string = \"prefabs/cards/CardsPanel\";\r\n\r\n    private scroller: VList;\r\n    private noneListCont: Node;\r\n    private sortNode: Node;\r\n    private closeSortBtn: Button;\r\n    private upOrDownBtn: Button;\r\n    private sortNav: Node[];\r\n    private filtrateNode: Node;\r\n    private searchNode: Node;\r\n    private editBox: EditBox;\r\n    private completeBtn: Button;\r\n    private cancelBtn: Button;\r\n\r\n    private filtrateClose: Node;\r\n    private filtrateBtn: Button;\r\n    private sortBtn: Button;\r\n    private moreBtn: Button;\r\n\r\n    private showNode: Node;\r\n    private cardGroupScrollView: AutoScroller;\r\n    private addCardNode: Node;\r\n    private addCardScrollView: AutoScroller;\r\n    private back: Node;\r\n    private clone_item: Node;\r\n    private groupNameEditBox: EditBox;\r\n    private moreNode: Node;\r\n    private moreNav: Node[];\r\n\r\n    private skillEffNode: Node;\r\n    private costNode: Node;\r\n    private diyNode: Node;\r\n\r\n    private sortNodeBack: Node;\r\n    private navBtns: Node[];\r\n    private illustratedScrollView: VList\r\n    private help: Node;\r\n    private card_group_setting: CardsGroupSetting\r\n    private EffNode: Node;\r\n    private Content: Node;\r\n\r\n\r\n    private card_list: proto.base.IBattleCard[] = [];\r\n    private max_card_group: number = 20; //最大卡组数\r\n    private max_card: number = 12; //最大卡牌数\r\n    private sort_type_1: CardSotrType1 = CardSotrType1.Up;\r\n    private sort_type_2: CardSotrType2 = CardSotrType2.Cost;\r\n    private search_card_list: proto.base.IBattleCard[] = [];\r\n\r\n    private searchStrList: string[] = [];\r\n    private selects: proto.base.IBattleCard[] = [];\r\n    private add_or_change: boolean; //添加卡组true 修改卡组false;\r\n    private is_open_add_card_group: boolean = false //false未打开添加卡牌界面\r\n\r\n    private selectSkillType: skillType = 0;\r\n    private costType: number[] = [];\r\n    private showType: boolean = false;\r\n\r\n    private selectSkillList: proto.base.IBattleCard[] = [];\r\n    private costTypeList: proto.base.IBattleCard[] = [];\r\n    private showTypeList: proto.base.IBattleCard[] = [];\r\n\r\n    private isCanAdd: boolean = false;\r\n    private old_selects: proto.base.IBattleCard[] = [];\r\n    private old_name: string;\r\n    private tag: number;\r\n    private data: proto.base.IDeckAttrs;\r\n    private data_list: proto.base.IBattleCard[] = [];\r\n    /**用于生成卡组的卡牌id */\r\n    private select_creator_card_group_card_id\r\n\r\n    private guide_index = 0;\r\n    protected onLoad() {\r\n        this.CloseBy(\"backBtn\");\r\n        this.navBtns = this.find(\"nav\").children.concat();\r\n        for (let btn of this.navBtns) {\r\n            btn.off('toggle', this.onPage, this);\r\n            btn.on('toggle', this.onPage, this);\r\n        }\r\n        this.EffNode = this.find(\"effNode\");\r\n        this.help = this.find(\"filtrateNode/bg/help\");\r\n        this.help.on(Input.EventType.TOUCH_END, () => { Tips2.Show(1) }, this)\r\n        this.noneListCont = this.find(\"noneListCont\");\r\n        this.sortNode = this.find(\"sortNode\");\r\n        this.scroller = this.find(\"ScrollView\", VList);\r\n        this.scroller.updateCell = this.updateCardItem.bind(this);\r\n        this.scroller.selectCell = this.onSelectCard.bind(this);\r\n        this.Content = this.find(\"ScrollView/view/content\");\r\n        this.sortNav = this.find(\"sortNode/bg/nav\").children.concat();\r\n        this.upOrDownBtn = this.find(\"sortNode/bg/upOrDown\", Button);\r\n        this.upOrDownBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.closeSortBtn = this.find(\"sortNode/bg/closeSortBtn\", Button);\r\n        this.closeSortBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.filtrateNode = this.find(\"filtrateNode\");\r\n        this.searchNode = this.find(\"filtrateNode/bg/searchNode\");\r\n        this.editBox = this.find(\"filtrateNode/bg/EditBox\", EditBox)\r\n        this.editBox.node.on(EditBox.EventType.EDITING_DID_ENDED, this.onEditEnd, this)\r\n        this.skillEffNode = this.find(\"filtrateNode/bg/skillEffNode\");\r\n        this.costNode = this.find(\"filtrateNode/bg/costNode\");\r\n        this.diyNode = this.find(\"filtrateNode/bg/diyNode\");\r\n        this.filtrateClose = this.find(\"filtrateNode/filtrateClose\");\r\n        this.filtrateClose.on(Input.EventType.TOUCH_END, () => {\r\n            this.filtrateNode.active = false;\r\n            this.filtrateBtn.node.getChildByName(\"close\").active = true;\r\n            this.filtrateBtn.node.getChildByName(\"open\").active = false;\r\n        }, this)\r\n        this.completeBtn = this.find(\"filtrateNode/bg/complete\", Button);\r\n        this.completeBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.cancelBtn = this.find(\"filtrateNode/bg/cancel\", Button);\r\n        this.cancelBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n\r\n        this.filtrateBtn = this.find(\"filtrateBtn\", Button);\r\n        this.filtrateBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n\r\n        this.sortBtn = this.find(\"sortBtn\", Button);\r\n        this.sortBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.showNode = this.find(\"showNode\");\r\n        this.cardGroupScrollView = this.find(\"showNode/cardGroupScrollView\", AutoScroller);\r\n        this.cardGroupScrollView.SetHandle(this.updateCardGroupItem.bind(this));\r\n        this.cardGroupScrollView.node.on('select', this.onCardGroupSelect, this);\r\n\r\n        this.addCardNode = this.find(\"showNode/addCardNode\");\r\n        this.addCardScrollView = this.find(\"showNode/addCardNode/addCardScrollView\", AutoScroller);\r\n        this.addCardScrollView.SetHandle(this.updateCardGroupCardItem.bind(this));\r\n        this.addCardScrollView.node.on('select', this.onSelectCardGroupCard, this);\r\n        this.back = this.find(\"showNode/addCardNode/back\");\r\n        this.clone_item = this.find(\"ScrollView/view/content/item\");\r\n        this.groupNameEditBox = this.find(\"showNode/addCardNode/groupNameEditBox\", EditBox);\r\n        this.moreBtn = this.find(\"showNode/addCardNode/moreBtn\", Button);\r\n        this.moreBtn.node.on(Button.EventType.CLICK, this.onClick, this)\r\n        this.moreNode = this.find(\"moreNode\");\r\n        this.moreNode.on(Input.EventType.TOUCH_END, () => { this.moreNode.active = false }, this)\r\n        this.moreNav = this.find(\"moreNode/bg/moreNav\").children.concat();\r\n\r\n        this.illustratedScrollView = this.find(\"illustratedScrollView\", VList);\r\n        this.illustratedScrollView.updateCell = this.updateCardItem.bind(this);\r\n\r\n        this.card_group_setting = this.find(\"CardsGroupSetting\").addComponent(CardsGroupSetting)\r\n        this.sortNodeBack = this.find(\"sortNode/back\");\r\n        this.sortNodeBack.on(Input.EventType.TOUCH_END, () => {\r\n            this.sortNode.active = false;\r\n            this.sortBtn.node.getChildByName(\"close\").active = true;\r\n            this.sortBtn.node.getChildByName(\"open\").active = false;\r\n        }, this)\r\n\r\n        this.back.on(Input.EventType.TOUCH_END, () => {\r\n            this.onBack();\r\n        }, this)\r\n\r\n\r\n        this.sortNav.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                node.getComponent(Toggle).isChecked = true;\r\n                this.sort_type_2 = index;\r\n                this.setCardSort();\r\n            }, this)\r\n        })\r\n\r\n        this.moreNav.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                node.getComponent(Toggle).isChecked = true;\r\n                this.onMoreBtn(index);\r\n            }, this)\r\n        })\r\n\r\n        this.searchNode.children.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                this.editBox.string = node.children[0].getComponent(Label).string;\r\n                this.onEditEnd();\r\n            }, this)\r\n        })\r\n\r\n        this.skillEffNode.children.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                this.skillSearch()\r\n            }, this)\r\n        })\r\n\r\n        this.costNode.children.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                this.costSearch()\r\n            }, this)\r\n        })\r\n\r\n        this.diyNode.children.forEach((node, index) => {\r\n            node.on(Input.EventType.TOUCH_END, () => {\r\n                this.showSearch()\r\n            }, this)\r\n        })\r\n    }\r\n    protected onShow(): void {\r\n        EventMgr.on(Evt_Card_Check_By_Name, this.updateCardsGroupCardData, this);\r\n        EventMgr.on(Evt_Set_Battle_Card_Group_Update, this.flush, this);\r\n        EventMgr.on(Evt_Card_Group_Update, this.flush, this);\r\n        EventMgr.on(Evt_Add_Card_Group_update, this.onReqSaveCardGroup, this);\r\n        EventMgr.on(Evt_Card_Add, this.onAddCard, this);\r\n        EventMgr.on(Evt_Card_Del, this.onDelCard, this);\r\n        EventMgr.emit(Evt_Hide_Scene, js.getClassName(this));\r\n    }\r\n    public flush(data: proto.base.IDeckAttrs): void {\r\n        let is_show_head_node = this.card_group_setting.node.getChildByName(\"ornamentNode\").active\r\n        if (!is_show_head_node) {\r\n            this.data = data;\r\n            this.SetPage(0)\r\n        }\r\n    }\r\n\r\n    private onAddCard(cardData: proto.base.IBattleCard): void {\r\n        this.setCardState(cardData, null, true);\r\n    }\r\n\r\n    private onDelCard(cardData: proto.base.IBattleCard): void {\r\n        this.setCardState(cardData, null, false, true);\r\n    }\r\n\r\n    async SetPage(page: number) {\r\n        if (!this.$hasLoad) await this.initSub;\r\n        if (!this.navBtns[page]) return;\r\n        this.tag = undefined;\r\n        this.navBtns[page].getComponent(Toggle).isChecked = true;\r\n        this.onPage(this.navBtns[page].getComponent(Toggle));\r\n    }\r\n\r\n    private onPage(t: Toggle) {\r\n        let page = this.navBtns.indexOf(t.node);\r\n        if (page < 0 || page == this.tag) return;\r\n        this.tag = page;\r\n        this.card_group_setting.node.active = false;\r\n        if (page == 0) {\r\n            this.filtrateBtn.node.active = true;\r\n            this.sortBtn.node.active = true;\r\n            this.illustratedScrollView.node.active = false;\r\n            this.scroller.node.active = true;\r\n            this.showNode.active = true;\r\n            this.updateCardGroup();\r\n            this.updateAllCardsShow();\r\n            if (this.data) {\r\n                this.card_group_setting.node.active = true;\r\n                this.is_open_add_card_group = true;\r\n                this.setHaveCardGroup(this.data)\r\n            }\r\n        } else if (page == 1) {\r\n            this.filtrateBtn.node.active = false;\r\n            this.sortBtn.node.active = false;\r\n            this.illustratedScrollView.node.active = true;\r\n            this.scroller.node.active = false;\r\n            this.showNode.active = false;\r\n            let cfg_card_list = CardsSortOrFiltrate.onSetSearchShow()\r\n            this.data_list = cfg_card_list;\r\n            this.illustratedScrollView.cellCount = cfg_card_list.length;\r\n            // this.illustratedScrollView.UpdateDatas(cfg_card_list)\r\n        }\r\n    }\r\n\r\n    private setHaveCardGroup(data: proto.base.IDeckAttrs) {\r\n        //已有卡组请求该卡组数据\r\n        this.add_or_change = false;\r\n        this.updatePanel();\r\n        this.groupNameEditBox.string = data.name\r\n        this.old_name = data.name;\r\n        PlayerData.cur_id = data.id;\r\n        let getdeckcards = new Req[\"logic.protocol.getdeckcards\"]();\r\n        getdeckcards.deckId = data.id;\r\n        Session.Send(Route[\"logic.protocol.getdeckcards\"], getdeckcards);\r\n    }\r\n\r\n    private updateCardGroup() {\r\n        this.is_open_add_card_group = false;\r\n        this.updatePanel();\r\n        this.updateAllCardGroup();\r\n        this.updateAllCardsShow();\r\n    }\r\n\r\n    private updatePanel() {\r\n        this.cardGroupScrollView.node.active = !this.is_open_add_card_group\r\n        this.addCardNode.active = this.is_open_add_card_group\r\n        let size_1 = this.cardGroupScrollView.getComponent(UITransform).contentSize;\r\n        let size_2 = this.addCardNode.getComponent(UITransform).contentSize\r\n        let size_3 = this.is_open_add_card_group ? size_2 : size_1\r\n        this.showNode.getComponent(UITransform).setContentSize(size_3)\r\n        this.showNode.children.forEach(item => {\r\n            if (item.getComponent(Widget)) {\r\n                item.getComponent(Widget).updateAlignment();\r\n            }\r\n        })\r\n        this.selects = [];\r\n        this.Content.children.forEach(item => {\r\n            if (item.getChildByName(\"Cards\").getComponent(Card)) {\r\n                item.getChildByName(\"Cards\").getComponent(Card).setSelect(false);\r\n            }\r\n        })\r\n\r\n        let height = this.scroller.getComponent(UITransform).contentSize.height\r\n        let panel_width = view.getVisibleSize().width;\r\n        let paddingLeft = 30;\r\n        let paddingRight = 0\r\n        let right_width = size_3.width + paddingLeft + paddingRight;\r\n        let max_width = panel_width - right_width\r\n        this.scroller.getComponent(UITransform).setContentSize(size(max_width, height))\r\n        this.scroller.node.children[0].getComponent(Widget).updateAlignment();\r\n        this.Content.getComponent(UITransform).setContentSize(size(max_width, 238))\r\n\r\n        let item_width = this.clone_item.getComponent(UITransform).contentSize.width\r\n        //最大放几个卡牌\r\n        let num = Math.floor(max_width / item_width)\r\n        //总剩余的间隙\r\n        let yu = max_width % item_width\r\n        //最大间隙\r\n        let jianju = Math.floor(yu / (num - 1))\r\n        //最小间隙15\r\n        if (jianju < 15) {\r\n            jianju = Math.floor((yu + item_width) / (num - 2))\r\n        }\r\n        this.scroller.spacingX = jianju;\r\n        this.scroller.cellCount = this.card_list.length;\r\n    }\r\n\r\n    /**展示所有卡牌 */\r\n    private updateAllCardsShow(): void {\r\n        this.noneListCont.active = false;\r\n        if (this.card_list.length <= 0 || (this.selectSkillType == 0 && this.costType.length == 0 && !this.showType)) {\r\n            this.card_list = [];\r\n            for (const iterator of PlayerData.cards) {\r\n                this.card_list.push(iterator)\r\n            }\r\n        }\r\n        this.setCardSort();\r\n        if (this.card_list.length > 0) {\r\n            this.setCardsData(this.card_list)\r\n        } else {\r\n            this.noneListCont.active = true;\r\n        }\r\n    }\r\n\r\n    /**展示所有卡组 */\r\n    private updateAllCardGroup() {\r\n        let data = [];\r\n        if (PlayerData.player.statusMark.NoobCardsAdd) {\r\n            //已领取新手卡组\r\n            for (let index = 0; index < PlayerData.cardNameList.length; index++) {\r\n                const element = PlayerData.cardNameList[index];\r\n                data.push(JSON.parse(JSON.stringify(element)));\r\n            }\r\n        } else {\r\n            //未领取新手卡组加入一个初始卡组\r\n            let initCardGroupCfg: StdNoobCardGroup = CfgMgr.Get(\"Noob_CardGroup\")[0]\r\n            let initCardGroup: proto.base.IDeckAttrs = proto.base.DeckAttrs.create()\r\n            initCardGroup.avatarId = initCardGroupCfg.CardGroupHead;\r\n            initCardGroup.cardBackId = initCardGroupCfg.CardGroupBack;\r\n            initCardGroup.name = initCardGroupCfg.CardGroupName;\r\n            initCardGroup.size = 12;\r\n            initCardGroup.id = \"\";\r\n            data.push(initCardGroup)\r\n        }\r\n        if (PlayerData.cardNameList.length < this.max_card_group) {\r\n            data.unshift(\"\")\r\n        }\r\n        this.cardGroupScrollView.UpdateDatas(data);\r\n    }\r\n\r\n    /**设置卡牌 */\r\n    private setCardsData(data_list: proto.base.IBattleCard[]) {\r\n        this.data_list = data_list;\r\n        this.scroller.cellCount = this.data_list.length;\r\n    }\r\n\r\n    protected updateCardItem(cell: Node, cellInfo: CellInfo) {\r\n        let card: Card = cell.getChildByName(\"Cards\").getComponent(Card) || cell.getChildByName(\"Cards\").addComponent(Card);\r\n        card.setIsShowUpEffect(true)\r\n        cell.getChildByPath(\"Cards/cardNode/select\").active = cellInfo.isSelect;\r\n        let data = this.data_list[cellInfo.index]\r\n        card.SetData(data);\r\n        if (data && data.id == \"\") {\r\n            card.setGray(true);\r\n        } else {\r\n            card.setGray(false);\r\n            let cfg = CfgMgr.GetCard(data.cardId)\r\n            for (const iterator of this.selects) {\r\n                let select_card_cfg = CfgMgr.GetCard(iterator.cardId)\r\n                //本体\r\n                if (iterator.id == data.id) {\r\n                    card.setSelect(true);\r\n                }\r\n                //多个同样的本体非变体\r\n                if (select_card_cfg.Classid == cfg.Classid && cfg.ID == select_card_cfg.ID && iterator.id != data.id) {\r\n                    card.setGray(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected updateCardGroupCardItem(item: Node, data: proto.base.IBattleCard, index: number) {\r\n        let card = item.getComponent(Card);\r\n        if (!card) card = item.addComponent(Card);\r\n        card.SetData(data);\r\n\r\n        if (!data && index == this.max_card - 1) {\r\n            card.setShowAdd(true)\r\n        } else {\r\n            card.setShowAdd(false)\r\n        }\r\n    }\r\n\r\n    /**选择卡牌 */\r\n    protected onSelectCard(cell: Node, cellInfo: CellInfo, lastCell?: Node, lastInfo?: CellInfo) {\r\n        if (cell && cell.getChildByName(\"Cards\")) {\r\n            let cards = cell.getChildByName(\"Cards\").getComponent(Card);\r\n            let data: proto.base.IBattleCard = cards.getData()\r\n            if (data && data.id != \"\") {\r\n                if (this.is_open_add_card_group) {\r\n                    //卡组打开卡牌加入或删除\r\n                    let cfg = CfgMgr.GetCard(data.cardId)\r\n                    let callBack = () => {\r\n                        let is_select = cards.getSelectState();\r\n                        if (cfg.IsOpen != 1) {\r\n                            MsgPanel.Show(\"此卡未开放\")\r\n                            return;\r\n                        }\r\n                        if (this.selects.length >= 12 && !is_select) {\r\n                            MsgPanel.Show(\"超出上限\")\r\n                            return;\r\n                        }\r\n                        cards.setSelect(!is_select)\r\n                        if (!is_select) {\r\n                            this.selects.push(data)\r\n                            this.setCardGary(data, true);\r\n                        } else {\r\n                            this.selects.splice(this.selects.findIndex(card => card.id == data.id), 1)\r\n                            this.setCardGary(data, false);\r\n                        }\r\n                        this.addCardsGroup();\r\n                    }\r\n                    //查找是否选择的是变体\r\n                    let is_has = false\r\n                    for (const iterator of this.selects) {\r\n                        let select_card_cfg = CfgMgr.GetCard(iterator.cardId)\r\n                        if (select_card_cfg.Classid == cfg.Classid && cfg.ID != select_card_cfg.ID) {\r\n                            is_has = true;\r\n                        }\r\n                    }\r\n                    let type = CardInfoStateType.Add\r\n                    if (this.selects.length >= 12) {\r\n                        type = CardInfoStateType.Fill;\r\n                    }\r\n                    if (is_has) {\r\n                        type = CardInfoStateType.Change\r\n                    } else if (this.selects.findIndex(card => card.id == data.id) != -1) {\r\n                        type = CardInfoStateType.Del\r\n                    }\r\n                    Goto(\"CardInfoPanel\", data, type, callBack.bind(this))\r\n                } else {\r\n                    let callBack = (card_data) => {\r\n                        if (PlayerData.cardNameList.length >= this.max_card_group) {\r\n                            MsgPanel.Show(\"卡组数量已达上限！\")\r\n                            return\r\n                        }\r\n                        this.select_creator_card_group_card_id = card_data.cardId\r\n                        this.CreaterCardGroupAnmition();\r\n                    }\r\n                    Goto(\"CardInfoPanel\", data, CardInfoStateType.Creator, callBack.bind(this))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private addCardsGroup() {\r\n        let data = this.setCurCardGroupCardList(this.selects);;\r\n        this.addCardScrollView.UpdateDatas(data);\r\n    }\r\n\r\n    /**设置卡组 */\r\n    protected updateCardGroupItem(item: Node, data: proto.base.IDeckAttrs, index: number) {\r\n        let card_group_item = item.getComponent(CardGroupItem);\r\n        if (!card_group_item) card_group_item = item.addComponent(CardGroupItem);\r\n        item.name = \"cardGroupItem\" + index;\r\n        card_group_item.SetData(data);\r\n    }\r\n\r\n    /**选择卡组 */\r\n    protected onCardGroupSelect(index: number, item: Node) {\r\n        let data = item.getComponent(CardGroupItem).getData()\r\n        /**添加卡组 */\r\n        this.is_open_add_card_group = true;\r\n        if (typeof data == \"string\") {\r\n            this.updatePanel();\r\n            let card_data = this.setCurCardGroupCardList([]);\r\n            this.addCardScrollView.UpdateDatas(card_data);\r\n            this.onReqCreateCardGroup();\r\n        } else {\r\n            //已有卡组请求该卡组数据\r\n            this.setHaveCardGroup(data)\r\n        }\r\n        this.card_group_setting.node.active = true;\r\n        this.card_group_setting.SetPage(0, this.onBack.bind(this));\r\n    }\r\n\r\n    /**展示卡组中卡牌 */\r\n    private updateCardsGroupCardData(data) {\r\n        let list: proto.base.IBattleCard[] = [];\r\n        this.old_selects = [];\r\n        for (const key in data) {\r\n            if (Object.hasOwnProperty.call(data, key)) {\r\n                const element = data[key];\r\n                list.push(element);\r\n                this.old_selects.push(element)\r\n            }\r\n        }\r\n        list.sort((a: proto.base.IBattleCard, b: proto.base.IBattleCard) => {\r\n            let a_data = CfgMgr.GetCard(a.cardId);\r\n            let b_data = CfgMgr.GetCard(b.cardId);\r\n            if (a_data.Cost == b_data.Cost) {\r\n                if (a_data.Power == b_data.Power) {\r\n                    return a_data.ID - b_data.ID\r\n                }\r\n                return a_data.Power - b_data.Power\r\n            }\r\n            return a_data.Cost - b_data.Cost;\r\n        })\r\n\r\n        this.selects = list;\r\n        for (let index = 0; index < this.selects.length; index++) {\r\n            const element = this.selects[index];\r\n            this.setCardState(element, true);\r\n            this.setCardGary(element, true);\r\n        }\r\n\r\n        let data_list = this.setCurCardGroupCardList(list);\r\n        this.addCardScrollView.UpdateDatas(data_list);\r\n    }\r\n\r\n    private setCardGary(data: proto.base.IBattleCard, is_gray: boolean) {\r\n        let cfg = CfgMgr.GetCard(data.cardId)\r\n        for (const iterator of this.Content.children) {\r\n            let item = iterator.getChildByName(\"Cards\").getComponent(Card)\r\n            let card_data = item.getData()\r\n            let card_cfg = CfgMgr.GetCard(card_data.cardId)\r\n            if (is_gray) {\r\n                if (cfg.Classid == card_cfg.Classid && data.id != card_data.id) {\r\n                    item.setGray(is_gray)\r\n                }\r\n            } else {\r\n                if (cfg.Classid == card_cfg.Classid) {\r\n                    item.setGray(is_gray)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**设置当前选中卡组的卡牌 */\r\n    private setCurCardGroupCardList(list) {\r\n        let data_list = [];\r\n        for (let index = 0; index < 12; index++) {\r\n            let element = list[index] ? list[index] : null;\r\n            data_list.push(element);\r\n        }\r\n        return data_list\r\n    }\r\n    private onSelectCardGroupCard(index: number, item: Node) {\r\n        let cards = item.getComponent(Card);\r\n        let is_add = item.getChildByName(\"add\").active\r\n\r\n        if (is_add) {\r\n            Tips.Show(\"是否自动填充卡组\", this.CreaterCardGroupAnmition.bind(this))\r\n        }\r\n        if (!cards) return;\r\n        let data = cards.getData();\r\n        if (data) {\r\n            let callBack = () => {\r\n                this.selects.splice(this.selects.indexOf(data), 1)\r\n                this.addCardsGroup();\r\n                this.setCardState(data, false)\r\n                this.setCardGary(data, false)\r\n            }\r\n            Goto(\"CardInfoPanel\", data, CardInfoStateType.Del, callBack.bind(this))\r\n        }\r\n    }\r\n\r\n    private setCardState(data: proto.base.IBattleCard, is_select: boolean = null, isUpdate?: boolean, isDle?: boolean) {\r\n\r\n        let content = this.Content.children\r\n        let delete_node: Node;\r\n        for (let index = 0; index < content.length; index++) {\r\n            const element = content[index];\r\n            let card = element.getChildByName(\"Cards\").getComponent(Card);\r\n            if (!card) card = element.getChildByName(\"Cards\").addComponent(Card);\r\n            if (card.getData().id == data.id) {\r\n                if (is_select != null) { card.setSelect(is_select); }\r\n                if (isUpdate) { card.SetData(data); }\r\n                if (isDle) { delete_node = element; }\r\n                break\r\n            }\r\n        }\r\n\r\n        if (isDle) {\r\n            this.Content.removeChild(delete_node)\r\n        }\r\n\r\n    }\r\n\r\n    private onClick(btn: Button) {\r\n        let name = btn.node.name\r\n        switch (name) {\r\n            case \"filtrateBtn\":\r\n                let is_open = this.filtrateBtn.node.getChildByName(\"open\").active\r\n                this.filtrateNode.active = !is_open;\r\n                this.filtrateBtn.node.getChildByName(\"close\").active = is_open;\r\n                this.filtrateBtn.node.getChildByName(\"open\").active = !is_open;\r\n                break;\r\n            case \"sortBtn\":\r\n                this.sortNode.active = true;\r\n                this.sortBtn.node.getChildByName(\"close\").active = false;\r\n                this.sortBtn.node.getChildByName(\"open\").active = true;\r\n                break;\r\n            case \"closeSortBtn\":\r\n                this.sortNode.active = false;\r\n                this.sortBtn.node.getChildByName(\"close\").active = true;\r\n                this.sortBtn.node.getChildByName(\"open\").active = false;\r\n                break;\r\n            case \"upOrDown\":\r\n                this.sort_type_1 = this.sort_type_1 == CardSotrType1.Up ? CardSotrType1.Down : CardSotrType1.Up;\r\n                let y = this.sort_type_1 == CardSotrType1.Up ? -1 : 1;\r\n                this.upOrDownBtn.node.getChildByName(\"icon\").setScale(new Vec3(1, y, 1))\r\n                this.setCardSort();\r\n                break;\r\n            case \"complete\":\r\n                this.filtrateNode.active = false;\r\n                this.filtrateBtn.node.getChildByName(\"close\").active = true;\r\n                this.filtrateBtn.node.getChildByName(\"open\").active = false;\r\n                break;\r\n            case \"cancel\":\r\n                this.resetSearchState();\r\n                this.setCardSort();\r\n                break;\r\n            case \"moreBtn\":\r\n                this.moreNode.active = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**重置筛选状态 */\r\n    private resetSearchState() {\r\n        this.editBox.string = \"\";\r\n        this.costNode.children.forEach(node => {\r\n            node.getComponent(Toggle).isChecked = false;\r\n        })\r\n\r\n        this.skillEffNode.children.forEach(node => {\r\n            node.getComponent(Toggle).isChecked = false;\r\n        })\r\n\r\n        this.diyNode.children.forEach(node => {\r\n            node.getComponent(Toggle).isChecked = false;\r\n        })\r\n        this.card_list = PlayerData.cards;\r\n\r\n        this.selectSkillType = skillType.undefined;\r\n        this.costType = [];\r\n        this.showType = false;\r\n    }\r\n\r\n    private onMoreBtn(index) {\r\n        switch (index) {\r\n            case MoreType.del_card:\r\n                let callBack = () => {\r\n                    if (PlayerData.CurFightCardGroup.id == PlayerData.cur_id) {\r\n                        MsgPanel.Show(\"出战卡组，不可删除！\");\r\n                        return\r\n                    }\r\n\r\n                    if (PlayerData.cardNameList.length == 1) {\r\n                        MsgPanel.Show(\"唯一卡组，不可删除！\");\r\n                        return\r\n                    }\r\n\r\n                    let delete_data = new Req[\"logic.protocol.deletedeck\"]();\r\n                    delete_data.deckId = PlayerData.cur_id;\r\n                    Session.Send(Route[\"logic.protocol.deletedeck\"], delete_data);\r\n\r\n                    this.setCardsData(this.card_list)\r\n                }\r\n                Tips.Show(\"删除卡组\", callBack.bind(this))\r\n                break;\r\n            case MoreType.shard:\r\n\r\n                break;\r\n            case MoreType.copy:\r\n\r\n                break;\r\n            case MoreType.add:\r\n                if (this.selects.length < this.max_card) {\r\n                    this.CreaterCardGroupAnmition();\r\n                } else {\r\n                    Tips.Show(\"卡牌已达上限\")\r\n                }\r\n                break;\r\n            case MoreType.inquiry:\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.moreNode.active = false;\r\n\r\n    }\r\n\r\n    /**设置空卡组 */\r\n    private onReqCreateCardGroup() {\r\n        let count = PlayerData.cardNameList.length + 1\r\n        this.groupNameEditBox.string = \"自动-卡组\" + count;\r\n        this.old_name = \"自动-卡组\" + count;\r\n        this.add_or_change = true;\r\n        let cfg_logic = CfgMgr.GetLogic(\"InitDeck\")\r\n        let head_id = cfg_logic.HeadID;\r\n        let card_back_id = cfg_logic.BackpackerID\r\n        if (this.add_or_change) {\r\n            let add = new Req[\"logic.protocol.adddeck\"]();\r\n            add.attrs = { id: null, name: this.groupNameEditBox.string, type: null, avatarId: head_id, cardBackId: card_back_id };\r\n            Session.Send(Route[\"logic.protocol.adddeck\"], add);\r\n        }\r\n    }\r\n\r\n    /**修改后保存卡组 */\r\n    private onReqSaveCardGroup() {\r\n        if (this.isCanAdd) {\r\n            let is_change_name = false;\r\n            if (this.old_name != this.groupNameEditBox.string) {\r\n                is_change_name = true;\r\n            }\r\n\r\n            let is_change_card = false\r\n            if (this.old_selects.length == this.selects.length) {\r\n                for (const iterator of this.selects) {\r\n                    let index = this.old_selects.findIndex(card => card.id == iterator.id)\r\n                    if (index == -1) {\r\n                        is_change_card = true;\r\n                    }\r\n                }\r\n            } else {\r\n                is_change_card = true;\r\n            }\r\n\r\n            if (is_change_name || is_change_card) {\r\n                let id_list = [];\r\n                if (is_change_name && !is_change_card) {\r\n                    //只修改名字\r\n                    let data = PlayerData.getCardGroupDataById(PlayerData.cur_id);\r\n                    data.name = this.groupNameEditBox.string\r\n                    let Change_name = new Req[\"logic.protocol.setdeckattrs\"]();\r\n                    Change_name.attrs = data;\r\n                    Session.Send(Route[\"logic.protocol.setdeckattrs\"], Change_name)\r\n                } else {\r\n                    for (const iterator of this.selects) {\r\n                        id_list.push(iterator.id);\r\n                    }\r\n                    let data = PlayerData.getCardGroupDataById(PlayerData.cur_id);\r\n                    data.name = this.groupNameEditBox.string\r\n                    let send_data = new Req[\"logic.protocol.setdeckcards\"]();\r\n                    send_data.attrs = data;\r\n                    send_data.cardIds = id_list;\r\n                    send_data.deckId = PlayerData.cur_id;\r\n                    Session.Send(Route[\"logic.protocol.setdeckcards\"], send_data);\r\n                }\r\n            } else {\r\n                this.updateCardGroup();\r\n            }\r\n            this.isCanAdd = false;\r\n        }\r\n    }\r\n\r\n    private onBack() {\r\n        this.isCanAdd = true;\r\n        this.card_group_setting.node.active = false;\r\n        this.onReqSaveCardGroup()\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n        EventMgr.off(Evt_Card_Check_By_Name, this.updateCardsGroupCardData, this);\r\n        EventMgr.off(Evt_Card_Group_Update, this.updateCardGroup, this);\r\n        EventMgr.off(Evt_Add_Card_Group_update, this.onReqSaveCardGroup, this);\r\n        EventMgr.off(Evt_Card_Add, this.onAddCard, this);\r\n        EventMgr.off(Evt_Card_Del, this.onDelCard, this);\r\n        if (this.is_open_add_card_group) {\r\n            this.isCanAdd = true;\r\n            this.onReqSaveCardGroup()\r\n        }\r\n        EventMgr.emit(Evt_Show_Scene, js.getClassByName(this));\r\n    }\r\n\r\n    //——————————————————————————————————————————————————————————————————排序相关————————————————————————————————————————\r\n\r\n    private setCardSort() {\r\n        this.card_list = CardsSortOrFiltrate.setCardSort(this.sort_type_1, this.sort_type_2, this.card_list)\r\n        this.setCardsData(this.card_list)\r\n    }\r\n    //——————————————————————————————————————————————————————————————————————筛选相关————————————————————————————————————————————————————————\r\n\r\n    //搜索后的卡牌\r\n    private onEditEnd() {\r\n        let list = CardsSortOrFiltrate.onEditEnd(this.editBox, this.searchStrList, this.searchNode, this.search_card_list, this.selectSkillType, this.costType, this.showType);\r\n        this.setCardsData(list);\r\n        this.card_list = list;\r\n    }\r\n\r\n    //筛选特殊技能效果的卡牌\r\n    private async skillSearch() {\r\n        await Second(0);\r\n        this.selectSkillType = skillType.undefined\r\n        let data = CardsSortOrFiltrate.skillSearch(this.editBox, this.skillEffNode, this.selectSkillList, this.selectSkillType, this.costType, this.showType);\r\n        this.selectSkillList = data[0];\r\n        this.selectSkillType = data[1];\r\n        this.setCardsData(this.selectSkillList)\r\n        this.card_list = this.selectSkillList;\r\n    }\r\n\r\n    //筛选能量消耗的卡牌\r\n    private async costSearch() {\r\n        await Second(0);\r\n        this.costType = [];\r\n        let data = CardsSortOrFiltrate.costSearch(this.editBox, this.costNode, this.costTypeList, this.selectSkillType, this.costType, this.showType);\r\n        this.costTypeList = data[0];\r\n        this.costType = data[1];\r\n        this.setCardsData(this.costTypeList)\r\n        this.card_list = this.costTypeList;\r\n    }\r\n\r\n    //筛选自定义展示的卡牌\r\n    private async showSearch() {\r\n        await Second(0);\r\n        this.showType = false;\r\n        let data = CardsSortOrFiltrate.showSearch(this.editBox, this.diyNode, this.showTypeList, this.selectSkillType, this.costType, this.showType);\r\n        this.showTypeList = data[0]\r\n        this.showType = data[1]\r\n        this.setCardsData(this.showTypeList)\r\n        this.card_list = this.showTypeList;\r\n    }\r\n\r\n    //----------------------------------动画展示------------------------------\r\n\r\n    /**生成卡组动画展示 */\r\n    private CreaterCardGroupAnmition() {\r\n        //打开添加卡牌\r\n        if (this.is_open_add_card_group) {\r\n            this.EffNode.active = true;\r\n            let spine = this.EffNode.children[0].getComponent(sp.Skeleton)\r\n            spine.clearAnimation();\r\n            spine.setAnimation(0, \"animation\", false);\r\n            spine.setCompleteListener(() => {\r\n                this.EffNode.active = false;\r\n                //播放结束 展示列表\r\n                this.old_selects = [];\r\n                let old_card_list = JSON.parse(JSON.stringify(this.selects));\r\n                this.select_creator_card_group_card_id = this.selects.length > 0 ? this.selects[0].cardId : null;\r\n                this.selects = PlayerData.GetGenerateCardGroup(this.select_creator_card_group_card_id)\r\n                this.addCardsGroup()\r\n                //加入的\r\n                for (let index = 0; index < this.selects.length; index++) {\r\n                    const element = this.selects[index];\r\n                    let is_add = old_card_list.findIndex(card_data => card_data.id == element.id)\r\n                    if (is_add == -1) {\r\n                        this.setCardState(element, true);\r\n                        this.setCardGary(element, true);\r\n                    }\r\n                }\r\n                //移除的\r\n                for (let index = 0; index < old_card_list.length; index++) {\r\n                    const element = old_card_list[index];\r\n                    let is_del = this.selects.findIndex(card_data => card_data.id == element.id)\r\n                    if (is_del == -1) {\r\n                        this.setCardState(element, false);\r\n                        this.setCardGary(element, false);\r\n                    }\r\n                }\r\n            })\r\n        } else {\r\n            let callBack1 = () => {\r\n                let data = PlayerData.getCardGroupDataById(PlayerData.cur_id)\r\n                this.card_group_setting.node.active = true;\r\n                this.is_open_add_card_group = true;\r\n                if (data) {\r\n                    this.setHaveCardGroup(data)\r\n                }\r\n            }\r\n\r\n            let callBack2 = () => {\r\n                let data = PlayerData.getCardGroupDataById(PlayerData.cur_id)\r\n                if (data) {\r\n                    let set = new Req[\"logic.protocol.setdeckdefault\"]();\r\n                    set.deckId = data.id;\r\n                    Session.Send(Route[\"logic.protocol.setdeckdefault\"], set);\r\n                }\r\n            }\r\n            this.old_selects = [];\r\n            this.isCanAdd = true; \r\n            this.selects = PlayerData.GetGenerateCardGroup(this.select_creator_card_group_card_id)\r\n            let card_list = JSON.parse(JSON.stringify(this.selects));\r\n            CardGroupCreatorTips.Show(this.select_creator_card_group_card_id, card_list, callBack1.bind(this), callBack2.bind(this))\r\n            this.onReqCreateCardGroup();\r\n        }\r\n    }\r\n}"]}