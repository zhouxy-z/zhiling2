{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/net/Http.ts"],"names":["Http","MsgId","protocol","uri","msgType","game","HttpInterfaceSelf","GetLoginInfo","isGet","SendChaoyouToken","SendGetAllNotice","serverUrl","headers","SendGetAllNoticeJy","SendGetAllNoticeHc","SendGetRoleRankData","SERVER_HOST","on","cb","module","isOnce","msgId","handles","msgHandles","handle","mod","push","del","has","delete","dispatchDatas","args","i","length","splice","call","CheckProtocol","awaitList","list","concat","rely","states","totalTime","Get","url","assetType","init","method","console","log","response","fetch","json","blob","buffer","arrayBuffer","body","e","Post","JSON","stringify","Send","respObj","warn","awaitTick","Number","MAX_SAFE_INTEGER","check","match","replace","shift","$uri","len","obj","k","request","status","Promise","resolve","statusText","loadBody","res","ArrayBuffer","responseText","decoder","TextDecoder","decode","error","header","toLocaleLowerCase","Map"],"mappings":"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","sourcesContent":["import { AssetManager, game, resources } from \"cc\";\r\n\r\n/**\r\n * 云信消息协议\r\n * @im消息无序，所以上下行消息合成一条完整协议，避免下行消息前后错乱\r\n * @请务必研究消息针对游戏业务逻辑所需的上下行耦合策略，如果有耦合错误则会导致其他依赖此消息的协议出现数据错乱的风险\r\n */\r\nexport type HttpInterface = {\r\n    readonly serverUrl?: string;//服务器地址   \r\n    readonly uri: string;// 消息接口地址\r\n    readonly isGet?: boolean;// 是否GET方法，不配默认POST\r\n    readonly msgType?: string;// 消息类型\r\n    readonly awaitList?: HttpInterface | HttpInterface[]; // 需要等待的前置消息列表，前置消息未返回则无法向服务器发送此协议\r\n    readonly awaitMsg?: string;// 消息未返回提示\r\n    readonly awaitTick?: number;\r\n    readonly headers?: Record<string, string>;//消息头参数\r\n}\r\n\r\n/**表示自己 */\r\nexport const HttpInterfaceSelf: HttpInterface = { uri: \"$self\" }; //占位作用不可修改\r\n\r\n/**获取toke */\r\nexport const GetLoginInfo: HttpInterface = {\r\n    uri: \"/wechat_login\",\r\n    isGet: false,\r\n};\r\n\r\n/**潮游sdk登录 */\r\nexport const SendChaoyouToken: HttpInterface = {\r\n    uri: \"/chaoyou_login\",\r\n    isGet: false,\r\n};\r\n\r\n/**畅游戏服获取公告列表 */\r\nexport const SendGetAllNotice: HttpInterface = {\r\n    serverUrl: \"https://mgapi.chaoyouhuyu.com\",\r\n    uri: \"/biz-marketing/public/announcement/getAll\",\r\n    headers: { \"X-SERVER-APP-ID\": \"zljq\", \"X-APP-ID\": \"zljq\" },\r\n    isGet: false,\r\n};\r\n/**精英服获取公告列表 */\r\nexport const SendGetAllNoticeJy: HttpInterface = {\r\n    serverUrl: \"https://mgapi.chaoyouhuyu.com\",\r\n    uri: \"/biz-marketing/public/announcement/getAll\",\r\n    headers: { \"X-SERVER-APP-ID\": \"zljqjy\", \"X-APP-ID\": \"zljqjy\" },\r\n    isGet: false,\r\n};\r\n/**幻彩服获取公告列表 */\r\nexport const SendGetAllNoticeHc: HttpInterface = {\r\n    serverUrl: \"https://mgapi.chaoyouhuyu.com\",\r\n    uri: \"/biz-marketing/public/announcement/getAll\",\r\n    headers: { \"X-SERVER-APP-ID\": \"zljqhc\", \"X-APP-ID\": \"zljqhc\" },\r\n    isGet: false,\r\n};\r\n/**获取排行榜植灵数据列表 */\r\nexport const SendGetRoleRankData: HttpInterface = {\r\n    serverUrl: \"http://192.168.0.93:9898\",\r\n    uri: \"/role/ranking\",\r\n};\r\n\r\nconst SERVER_HOST = \"https://192.168.0.118:7880\"; //周科本地\r\n\r\ntype HandleStruct = {\r\n    cb: Function,\r\n    mod: any,\r\n    isOnce: boolean,\r\n    protocol: HttpInterface\r\n}\r\nexport function MsgId(protocol: HttpInterface) { return protocol.uri + \"->\" + (protocol.msgType ? protocol.msgType : \"\"); }\r\n\r\n/**\r\n * 会话\r\n */\r\nexport class Http {\r\n    private static msgHandles: Map<string, HandleStruct[]> = new Map<string, HandleStruct[]>();\r\n    static on(protocol: HttpInterface, cb: Function, module: any, isOnce = false) {\r\n        let msgId = MsgId(protocol);\r\n        let handles: HandleStruct[] = this.msgHandles[msgId];\r\n        if (!handles) {\r\n            handles = [];\r\n            this.msgHandles[msgId] = handles;\r\n        }\r\n        for (var handle of handles) {\r\n            if (handle.cb == cb && handle.mod == module) {\r\n                return false;\r\n            }\r\n        }\r\n        handles.push({ cb: cb, mod: module, isOnce: isOnce, protocol: protocol });\r\n        return true;\r\n    }\r\n    static del(protocol: HttpInterface) {\r\n        let msgId = MsgId(protocol);\r\n        if (this.msgHandles.has(msgId)) {\r\n            this.msgHandles.delete(msgId);\r\n        }\r\n    }\r\n\r\n    private static dispatchDatas(msgId: string, ...args: any[]) {\r\n        let handles: HandleStruct[] = this.msgHandles[msgId];\r\n        if (!handles) return;\r\n        for (let i = 0; i < handles.length;) {\r\n            let handle = handles[i];\r\n            if (handle.isOnce) {\r\n                handles.splice(i, 1);\r\n            } else {\r\n                i++;\r\n            }\r\n            let cb = handle.cb\r\n            cb.call(handle.mod, ...args);\r\n        }\r\n    }\r\n    private static states: { [msgId: string]: number } = {};\r\n\r\n    /**\r\n     * 检测协议是否可以发送\r\n     * @param protocol \r\n     * @returns \r\n     */\r\n    static CheckProtocol(protocol: HttpInterface) {\r\n        if (!protocol.awaitList) return null;\r\n        let list = [].concat(protocol.awaitList);\r\n        if (list.length == 0) return null;\r\n        for (let rely of list) {\r\n            let msgId = rely == HttpInterfaceSelf ? MsgId(protocol) : MsgId(rely);\r\n            if (this.states[msgId] > game.totalTime / 1000) return rely;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * get方法\r\n     * @param url 请求数据路径\r\n     * @param assetType 数据类型\r\n     * @returns \r\n     */\r\n    static async Get(url: string, assetType = \"json\") {\r\n        var init: any = { method: 'GET' };\r\n        console.log(\"http>>>\", url);\r\n        try {\r\n            const response = await fetch(url, init);\r\n            console.log(\"http<<<\", url);\r\n            switch (assetType) {\r\n                case \"json\":\r\n                    const json = await response.json();\r\n                    console.log(\"http<<<\", url, json);\r\n                    return json;\r\n                case \"blob\":\r\n                    const blob = await response.blob();\r\n                    console.log(\"http<<<\", url, blob);\r\n                    return blob;\r\n                case \"buffer\":\r\n                    const buffer = await response.arrayBuffer();\r\n                    console.log(\"http<<<\", url, buffer);\r\n                    return buffer;\r\n                case \"body\":\r\n                    const body = response.body;\r\n                    console.log(\"http<<<\", url, body);\r\n                    return body;\r\n            }\r\n            console.log(\"http<<<\", url);\r\n            return response;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * post方法\r\n     * @param url 请求地址\r\n     * @param body 上传数据封装\r\n     * @returns \r\n     */\r\n    static async Post(url: string, body?: any) {\r\n        let json = \"\";\r\n        let headers: Record<string, string> = {};\r\n        headers['Content-Type'] = 'application/json';\r\n        var init: any = {\r\n            method: 'POST',\r\n            headers\r\n        };\r\n        if (body) {\r\n            init[\"body\"] = JSON.stringify(body);\r\n            json = init[\"body\"];\r\n        }\r\n        console.log(\"http>>>\", url, json);\r\n        try {\r\n            const response = await fetch(url, init);\r\n            const json = await response.json();\r\n            console.log(\"http<<<\", url, json);\r\n            return json;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 发送消息\r\n     * @param protocol \r\n     * @param body \r\n     * @param uri \r\n     * @returns \r\n     */\r\n    static async Send(protocol: HttpInterface, body?: any, uri?: any[], respObj?: any): Promise<any> {\r\n        let rely = this.CheckProtocol(protocol);\r\n        if (rely) {\r\n            console.warn(\"前置协议尚未返回->\", MsgId(rely));\r\n            // if (protocol.awaitMsg) Tips.Show(protocol.awaitMsg);\r\n        } else {\r\n            //记录请求状态\r\n            let msgId = MsgId(protocol);\r\n            this.states[MsgId(protocol)] = protocol.awaitTick ? game.totalTime / 1000 + protocol.awaitTick : Number.MAX_SAFE_INTEGER;\r\n\r\n            //格式化url\r\n            let url = protocol.uri;\r\n            while (uri && uri.length) {\r\n                let check = url.match(/\\{[^\\}]*\\}/);\r\n                if (!check) break;\r\n                url = url.replace(check[0], uri.shift());\r\n            }\r\n            let $uri = \"\";\r\n            for (let i = 0, len = uri ? uri.length : 0; i < len; i++) {\r\n                if ($uri != \"\") {\r\n                    $uri += \"&\";\r\n                } else $uri += \"?\";\r\n\r\n                let obj = uri[i];\r\n                for (let k in obj) {\r\n                    $uri = $uri + k + \"=\" + obj[k];\r\n                }\r\n            }\r\n            url = url + $uri;\r\n\r\n            //发出请求\r\n            const method = protocol.isGet ? \"GET\" : \"POST\";\r\n            let response = await this.request(protocol.serverUrl, url, protocol.headers, method, body);\r\n            // console.log(\"http<<<\", response);\r\n            if (!response) {\r\n                console.warn(\"http请求失败！\");\r\n            } else if (response.status == 200) {\r\n                let json = await response.json();\r\n                // if (json['code'] != 200) {\r\n                //     // Tips.ShowTop(json['msg']);\r\n                //     console.warn(json);\r\n                //     this.states[msgId] = 0;\r\n                //     return new Promise(() => { });\r\n                // }\r\n                // json = json.data;\r\n                console.log(\"http<<<\", msgId, JSON.stringify(json));\r\n                // if (respObj) {\r\n                //     json = ParseJson(json, respObj);\r\n                // }\r\n                this.dispatchDatas(msgId, json);\r\n                this.states[msgId] = 0;\r\n                return Promise.resolve(json);\r\n            } else {\r\n                console.warn(msgId, \"statusText:\", response.status, response.statusText);\r\n                // let json = await response.json();\r\n                // console.warn(json);\r\n                // if (json.msg) {\r\n                //     // MsgPanel.Show(json.msg);\r\n                // } else {\r\n                //     // MsgPanel.Show(json.code);\r\n                // }\r\n                this.states[msgId] = 0;\r\n                this.dispatchDatas(msgId, body);\r\n                return Promise.resolve(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    static loadBody(res: any) {\r\n        if (res instanceof ArrayBuffer) {\r\n            let responseText = '';\r\n            try {\r\n                const decoder = new TextDecoder();\r\n                responseText = decoder.decode(res);\r\n\r\n                console.log(\"Response body:\", responseText); // 输出服务器返回的内容\r\n\r\n                // 对responseText进行处理或提取所需数据\r\n                // ...\r\n            } catch (e) {\r\n                console.error(\"Failed to decode the response text.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 发消息\r\n     * @param url \r\n     * @param body \r\n     * @param token \r\n     * @returns \r\n     */\r\n    private static async request(serverUrl: string, uri: string, header: Record<string, string>, method: string, body: any): Promise<Response> {\r\n        let url = `${serverUrl || SERVER_HOST}${uri}`;\r\n        let json = \"\";\r\n        if (method.toLocaleLowerCase() == \"post\") {\r\n            let headers: Record<string, string> = header || {};\r\n            headers['Content-Type'] = 'application/json';\r\n            var init: any = {\r\n                method: 'POST',\r\n                headers\r\n            };\r\n            if (body) {\r\n                init[\"body\"] = JSON.stringify(body);\r\n                json = init[\"body\"];\r\n            }\r\n        } else {\r\n            var init: any = {\r\n                method: 'GET'\r\n            }\r\n        }\r\n        console.log(\"http>>>\", url, json);\r\n        try {\r\n            const response = await fetch(url, init);\r\n            return response;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}"]}