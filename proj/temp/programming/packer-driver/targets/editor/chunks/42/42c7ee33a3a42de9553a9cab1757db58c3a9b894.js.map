{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/common/Transform3d.ts"],"names":["_decorator","Component","Enum","UITransform","v3","Vec3","GameSet","Utils","ccclass","property","requireComponent","$LayoutV","$LayoutH","Transform3d","type","_layoutV","_layoutH","$width","$height","thickness","mat","matInvert","$left","$right","$top","$bottom","leftv","rightv","topv","bottomv","layoutV","value","children","node","child","h","ut","getComponent","height","scale","y","PixelSize","MapBound","top","setPosition","position","x","z","middle","bottom","layoutH","w","width","left","center","right","onLoad","sx","sy","contentSize","rect","getWorldMatrix","invert","transformMat4"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAgDC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,I,OAAAA,I;;AACxFC,MAAAA,O,iBAAAA,O;;AACAC,MAAAA,K,iBAAAA,K;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA;AAArB,O,GAA0CV,U;;AAE3CW,MAAAA,Q,0BAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;eAAAA,Q;QAAAA,Q;;AAMAC,MAAAA,Q,0BAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;AAAAA,QAAAA,Q,CAAAA,Q;eAAAA,Q;QAAAA,Q;;6BAQQC,W,WADZL,OAAO,CAAC,aAAD,C,UAGHC,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEZ,IAAI,CAACS,QAAD;AAAZ,OAAD,C,UAwBRF,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEZ,IAAI,CAACU,QAAD;AAAZ,OAAD,C,2BA3Bb,MACaC,WADb,SACiCZ,SADjC,CAC2C;AAAA;AAAA;AAAA,eAwB7Bc,QAxB6B;AAAA,eAgD7BC,QAhD6B;AAAA,eAkD7BC,MAlD6B,GAkDZ,CAlDY;AAAA,eAmD7BC,OAnD6B,GAmDX,CAnDW;AAAA,eAoD7BC,SApD6B,GAoDT,CApDS;AAAA,eAqD7BC,GArD6B;AAAA,eAsD7BC,SAtD6B;AAAA,eAuD7BC,KAvD6B;AAAA,eAwD7BC,MAxD6B;AAAA,eAyD7BC,IAzD6B;AAAA,eA0D7BC,OA1D6B;AAAA,eAiF/BC,KAjF+B,GAiFjBtB,EAAE,EAjFe;AAAA,eAkF/BuB,MAlF+B,GAkFhBvB,EAAE,EAlFc;AAAA,eAmF/BwB,IAnF+B,GAmFlBxB,EAAE,EAnFgB;AAAA,eAoF/ByB,OApF+B,GAoFfzB,EAAE,EApFa;AAAA;;AAG5B,YAAP0B,OAAO,GAAG;AAAE,iBAAO,KAAKf,QAAZ;AAAsB;;AAC3B,YAAPe,OAAO,CAACC,KAAD,EAAgB;AACvB,eAAKhB,QAAL,GAAgBgB,KAAhB;AACA,cAAIC,QAAQ,GAAG,KAAKC,IAAL,CAAUD,QAAzB;;AACA,eAAK,IAAIE,KAAT,IAAkBF,QAAlB,EAA4B;AACxB,gBAAIG,CAAC,GAAG,CAAR;AACA,gBAAIC,EAAE,GAAGF,KAAK,CAACG,YAAN,CAAmBlC,WAAnB,CAAT;;AACA,gBAAIiC,EAAJ,EAAQ;AACJD,cAAAA,CAAC,GAAGC,EAAE,CAACE,MAAH,GAAYJ,KAAK,CAACK,KAAN,CAAYC,CAAxB,GAA4B;AAAA;AAAA,sCAAQC,SAAxC;AACH,aAFD,MAEO;AACHN,cAAAA,CAAC,GAAG;AAAA;AAAA,kCAAMO,QAAN,CAAeR,KAAf,EAAsBI,MAA1B;AACH;;AACD,gBAAIP,KAAK,IAAIpB,QAAQ,CAACgC,GAAtB,EAA2B;AACvBT,cAAAA,KAAK,CAACU,WAAN,CAAkBV,KAAK,CAACW,QAAN,CAAeC,CAAjC,EAAoCX,CAAC,GAAG,CAAxC,EAA2CD,KAAK,CAACW,QAAN,CAAeE,CAA1D;AACH,aAFD,MAEO,IAAIhB,KAAK,IAAIpB,QAAQ,CAACqC,MAAtB,EAA8B;AACjCd,cAAAA,KAAK,CAACU,WAAN,CAAkBV,KAAK,CAACW,QAAN,CAAeC,CAAjC,EAAoC,CAApC,EAAuCZ,KAAK,CAACW,QAAN,CAAeE,CAAtD;AACH,aAFM,MAEA,IAAIhB,KAAK,IAAIpB,QAAQ,CAACsC,MAAtB,EAA8B;AACjCf,cAAAA,KAAK,CAACU,WAAN,CAAkBV,KAAK,CAACW,QAAN,CAAeC,CAAjC,EAAoC,CAACX,CAAD,GAAK,CAAzC,EAA4CD,KAAK,CAACW,QAAN,CAAeE,CAA3D;AACH;AACJ;AACJ;;AAIU,YAAPG,OAAO,GAAG;AAAE,iBAAO,KAAKlC,QAAZ;AAAsB;;AAC3B,YAAPkC,OAAO,CAACnB,KAAD,EAAgB;AACvB,eAAKf,QAAL,GAAgBe,KAAhB;AACA,cAAIC,QAAQ,GAAG,KAAKC,IAAL,CAAUD,QAAzB;;AACA,eAAK,IAAIE,KAAT,IAAkBF,QAAlB,EAA4B;AACxB,gBAAImB,CAAC,GAAG,CAAR;AACA,gBAAIf,EAAE,GAAGF,KAAK,CAACG,YAAN,CAAmBlC,WAAnB,CAAT;;AACA,gBAAIiC,EAAJ,EAAQ;AACJe,cAAAA,CAAC,GAAGf,EAAE,CAACgB,KAAH,GAAWlB,KAAK,CAACK,KAAN,CAAYO,CAAvB,GAA2B;AAAA;AAAA,sCAAQL,SAAvC;AACH,aAFD,MAEO;AACHU,cAAAA,CAAC,GAAG;AAAA;AAAA,kCAAMT,QAAN,CAAeR,KAAf,EAAsBkB,KAA1B;AACH;;AACD,gBAAIrB,KAAK,IAAInB,QAAQ,CAACyC,IAAtB,EAA4B;AACxBnB,cAAAA,KAAK,CAACU,WAAN,CAAkBO,CAAC,GAAG,CAAtB,EAAyBjB,KAAK,CAACW,QAAN,CAAeL,CAAxC,EAA2CN,KAAK,CAACW,QAAN,CAAeE,CAA1D;AACH,aAFD,MAEO,IAAIhB,KAAK,IAAInB,QAAQ,CAAC0C,MAAtB,EAA8B;AACjCpB,cAAAA,KAAK,CAACU,WAAN,CAAkB,CAAlB,EAAqBV,KAAK,CAACW,QAAN,CAAeL,CAApC,EAAuCN,KAAK,CAACW,QAAN,CAAeE,CAAtD;AACH,aAFM,MAEA,IAAIhB,KAAK,IAAInB,QAAQ,CAAC2C,KAAtB,EAA6B;AAChCrB,cAAAA,KAAK,CAACU,WAAN,CAAkB,CAACO,CAAD,GAAK,CAAvB,EAA0BjB,KAAK,CAACW,QAAN,CAAeL,CAAzC,EAA4CN,KAAK,CAACW,QAAN,CAAeE,CAA3D;AACH;AACJ;AACJ;;AAYSS,QAAAA,MAAM,GAAS;AACrB,cAAIC,EAAE,GAAG,KAAKxB,IAAL,CAAUM,KAAV,CAAgBO,CAAzB;AAAA,cAA4BY,EAAE,GAAG,KAAKzB,IAAL,CAAUM,KAAV,CAAgBC,CAAjD;AACA,cAAIJ,EAAE,GAAG,KAAKC,YAAL,CAAkBlC,WAAlB,CAAT;;AACA,cAAIiC,EAAJ,EAAQ;AACJ,iBAAKnB,MAAL,GAAcmB,EAAE,CAACuB,WAAH,CAAeP,KAAf,GAAuBK,EAArC;AACA,iBAAKvC,OAAL,GAAekB,EAAE,CAACuB,WAAH,CAAerB,MAAf,GAAwBoB,EAAvC;AACH,WAHD,MAGO;AACH,gBAAIE,IAAI,GAAG;AAAA;AAAA,gCAAMlB,QAAN,CAAe,KAAKT,IAApB,CAAX;AACA,iBAAKhB,MAAL,GAAc2C,IAAI,CAACR,KAAnB;AACA,iBAAKlC,OAAL,GAAe0C,IAAI,CAACtB,MAApB;AACH;;AACD,eAAKhB,KAAL,GAAalB,EAAE,CAAC,CAAC,KAAKa,MAAN,GAAe,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAf;AACA,eAAKM,MAAL,GAAcnB,EAAE,CAAC,KAAKa,MAAL,GAAc,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAhB;AACA,eAAKO,IAAL,GAAYpB,EAAE,CAAC,CAAD,EAAI,KAAKc,OAAL,GAAe,CAAnB,EAAsB,CAAtB,CAAd;AACA,eAAKO,OAAL,GAAerB,EAAE,CAAC,CAAC,KAAKc,OAAN,GAAgB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAjB;AACA,eAAKE,GAAL,GAAW,KAAKa,IAAL,CAAU4B,cAAV,EAAX;AACA,eAAKxC,SAAL,GAAiB,KAAKD,GAAL,CAAS0C,MAAT,EAAjB;AACH;;AAEQ,YAALV,KAAK,GAAG;AAAE,iBAAO,KAAKnC,MAAZ;AAAqB;;AACzB,YAANqB,MAAM,GAAG;AAAE,iBAAO,KAAKpB,OAAZ;AAAsB;;AAO7B,YAAJmC,IAAI,GAAG;AACPhD,UAAAA,IAAI,CAAC0D,aAAL,CAAmB,KAAKrC,KAAxB,EAA+B,KAAKJ,KAApC,EAA2C,KAAKF,GAAhD;AACA,iBAAO,KAAKM,KAAZ;AACH;;AACQ,YAAL6B,KAAK,GAAG;AACRlD,UAAAA,IAAI,CAAC0D,aAAL,CAAmB,KAAKpC,MAAxB,EAAgC,KAAKJ,MAArC,EAA6C,KAAKH,GAAlD;AACA,iBAAO,KAAKO,MAAZ;AACH;;AACM,YAAHgB,GAAG,GAAG;AACNtC,UAAAA,IAAI,CAAC0D,aAAL,CAAmB,KAAKnC,IAAxB,EAA8B,KAAKJ,IAAnC,EAAyC,KAAKJ,GAA9C;AACA,iBAAO,KAAKQ,IAAZ;AACH;;AACS,YAANqB,MAAM,GAAG;AACT5C,UAAAA,IAAI,CAAC0D,aAAL,CAAmB,KAAKlC,OAAxB,EAAiC,KAAKJ,OAAtC,EAA+C,KAAKL,GAApD;AACA,iBAAO,KAAKS,OAAZ;AACH;;AArGsC,O","sourcesContent":["import { _decorator, Component, Enum, Layout, math, sp, Sprite, SpriteRenderer, UITransform, v3, Vec3 } from \"cc\";\nimport { GameSet } from \"../../manager/GameSet\";\nimport { Utils } from \"../../utils/Utils\";\n\nconst { ccclass, property, requireComponent } = _decorator;\n\nenum $LayoutV {\n    none,\n    top,\n    middle,\n    bottom\n}\nenum $LayoutH {\n    none,\n    right,\n    center,\n    left\n}\n\n@ccclass('Transform3d')\nexport class Transform3d extends Component {\n\n    @property({ type: Enum($LayoutV) })\n    get layoutV() { return this._layoutV };\n    set layoutV(value: number) {\n        this._layoutV = value;\n        let children = this.node.children;\n        for (let child of children) {\n            let h = 0;\n            let ut = child.getComponent(UITransform);\n            if (ut) {\n                h = ut.height * child.scale.y * GameSet.PixelSize;\n            } else {\n                h = Utils.MapBound(child).height;\n            }\n            if (value == $LayoutV.top) {\n                child.setPosition(child.position.x, h / 2, child.position.z);\n            } else if (value == $LayoutV.middle) {\n                child.setPosition(child.position.x, 0, child.position.z);\n            } else if (value == $LayoutV.bottom) {\n                child.setPosition(child.position.x, -h / 2, child.position.z);\n            }\n        }\n    }\n    protected _layoutV: number;\n\n    @property({ type: Enum($LayoutH) })\n    get layoutH() { return this._layoutH };\n    set layoutH(value: number) {\n        this._layoutH = value;\n        let children = this.node.children;\n        for (let child of children) {\n            let w = 0;\n            let ut = child.getComponent(UITransform);\n            if (ut) {\n                w = ut.width * child.scale.x * GameSet.PixelSize;\n            } else {\n                w = Utils.MapBound(child).width;\n            }\n            if (value == $LayoutH.left) {\n                child.setPosition(w / 2, child.position.y, child.position.z);\n            } else if (value == $LayoutH.center) {\n                child.setPosition(0, child.position.y, child.position.z);\n            } else if (value == $LayoutH.right) {\n                child.setPosition(-w / 2, child.position.y, child.position.z);\n            }\n        }\n    }\n    protected _layoutH: number;\n\n    protected $width: number = 0;\n    protected $height: number = 0;\n    protected thickness: number = 1;\n    protected mat: math.Mat4;\n    protected matInvert: math.Mat4;\n    protected $left: Vec3;\n    protected $right: Vec3;\n    protected $top: Vec3;\n    protected $bottom: Vec3;\n    protected onLoad(): void {\n        let sx = this.node.scale.x, sy = this.node.scale.y;\n        let ut = this.getComponent(UITransform);\n        if (ut) {\n            this.$width = ut.contentSize.width * sx;\n            this.$height = ut.contentSize.height * sy;\n        } else {\n            let rect = Utils.MapBound(this.node);\n            this.$width = rect.width;\n            this.$height = rect.height;\n        }\n        this.$left = v3(-this.$width / 2, 0, 0);\n        this.$right = v3(this.$width / 2, 0, 0);\n        this.$top = v3(0, this.$height / 2, 0);\n        this.$bottom = v3(-this.$height / 2, 0, 0);\n        this.mat = this.node.getWorldMatrix();\n        this.matInvert = this.mat.invert();\n    }\n\n    get width() { return this.$width; }\n    get height() { return this.$height; }\n\n    private leftv: Vec3 = v3();\n    private rightv: Vec3 = v3();\n    private topv: Vec3 = v3();\n    private bottomv: Vec3 = v3();\n\n    get left() {\n        Vec3.transformMat4(this.leftv, this.$left, this.mat);\n        return this.leftv;\n    }\n    get right() {\n        Vec3.transformMat4(this.rightv, this.$right, this.mat);\n        return this.rightv;\n    }\n    get top() {\n        Vec3.transformMat4(this.topv, this.$top, this.mat);\n        return this.topv;\n    }\n    get bottom() {\n        Vec3.transformMat4(this.bottomv, this.$bottom, this.mat);\n        return this.bottomv;\n    }\n}"]}