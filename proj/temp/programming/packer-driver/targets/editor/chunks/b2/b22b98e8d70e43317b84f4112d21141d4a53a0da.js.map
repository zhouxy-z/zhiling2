{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/resources/bag/OpenBoxPage.ts"],"names":["OpenBoxPage","Component","Label","Layout","Sprite","SpriteFrame","Toggle","UIOpacity","instantiate","path","CardQuality","CfgMgr","ItemType","ResMgr","folder_quality","Second","Tips","item","isSelect","maxCount","limit","callBack","$loadSub","complete","hasLoad","onLoad","node","getChildByName","getComponent","getChildByPath","loadSub","thisObj","Promise","resolve","reject","SetData","data","count","is_select","callback","removeAllChildren","updateItem","index","length","bg","icon","num","mask","maskBg","max_num","id","toggle","on","onSelect","isChecked","spriteFrame","LoadResAbSub","resData","iconBgUrl","iconUrl","std","Getitem","Itemtpye","shard","active","join","ItemEffect2","string","opacity","interactable","addChild","selects","chidlren","children","child","push","getSiblingIndex","indexOf","splice","Show","setSelectNum"],"mappings":"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","sourcesContent":["import { Component, Label, Layout, Node, Sprite, SpriteFrame, Toggle, UIOpacity, instantiate, path } from \"cc\";\r\nimport { CardQuality, CfgMgr, ItemType, StdItem, ThingType } from \"../../manager/CfgMgr\";\r\nimport { ResMgr, folder_icon, folder_item, folder_quality } from \"../../manager/ResMgr\";\r\nimport { Second } from \"../../utils/Utils\";\r\nimport { Tips } from \"../login/Tips\";\r\nimport {  } from \"../roleModule/PlayerData\"\n import {SThing} from \"../roleModule/PlayerStruct\";\r\n\r\nexport class OpenBoxPage extends Component {\r\n    private Layout: Layout;\r\n    private item: Node\r\n\r\n    private isSelect: boolean;\r\n    private maxCount: number\r\n    private limit: number;\r\n    private callBack: Function;\r\n\r\n\r\n    protected $loadSub: Promise<any>;\r\n    protected complete: Function;\r\n    protected hasLoad = false;\r\n\r\n    protected onLoad(): void {\r\n        this.Layout = this.node.getChildByName(\"Layout\").getComponent(Layout);\r\n        this.item = this.node.getChildByPath(\"Layout/item\")\r\n        this.hasLoad = true;\r\n        this.complete?.();\r\n    }\r\n\r\n    protected get loadSub() {\r\n        if (this.$loadSub) return this.$loadSub;\r\n        let thisObj = this;\r\n        this.$loadSub = new Promise((resolve, reject) => {\r\n            thisObj.complete = resolve;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 刷新道具数据\r\n     * @param data \r\n     */\r\n    async SetData(data, count: number, limit, is_select: boolean, callback: Function) {\r\n        if (!this.hasLoad) await this.loadSub;\r\n        this.callBack = callback;\r\n        this.Layout.node.removeAllChildren();\r\n        this.updateItem(data);\r\n        this.maxCount = count;\r\n        this.limit = limit;\r\n        this.isSelect = is_select;\r\n    }\r\n\r\n    private async updateItem(data: SThing[]) {\r\n        for (let index = 0; index < data.length; index++) {\r\n            let item = instantiate(this.item)\r\n            let bg = item.getChildByName(\"bg\").getComponent(Sprite);\r\n            let icon = item.getChildByPath(\"bg/icon\").getComponent(Sprite);\r\n            let num = item.getChildByPath(\"bg/num\").getComponent(Label);\r\n            let mask = item.getChildByPath(\"mask\").getComponent(UIOpacity);\r\n            let maskBg = item.getChildByPath(\"bg/maskBg\").getComponent(Sprite);\r\n            let max_num = item.getChildByPath(\"mask/max_num\").getComponent(Label);\r\n            let id = item.getChildByName(\"id\").getComponent(Label);\r\n            let toggle = item.getComponent(Toggle);\r\n            toggle.node.on(\"toggle\", this.onSelect, this)\r\n            toggle.isChecked = false;\r\n            bg.spriteFrame = await ResMgr.LoadResAbSub(data[index].resData.iconBgUrl, SpriteFrame);\r\n            icon.spriteFrame = await ResMgr.LoadResAbSub(data[index].resData.iconUrl, SpriteFrame);\r\n            if(data[index].item){\r\n                let std: StdItem = CfgMgr.Getitem(data[index].item.id);\r\n                if (std.Itemtpye == ItemType.shard) {\r\n                    maskBg.node.active = true;\r\n                    maskBg.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_quality, CardQuality[std.ItemEffect2] + \"_bag_mask\", \"spriteFrame\"), SpriteFrame);\r\n                }else{\r\n                    maskBg.node.active = false;\r\n                }\r\n                id.string = data[index].item.id + \"\"\r\n                num.string = (data[index].item.count ? data[index].item.count : \"\") + \"\";\r\n            }else{\r\n                num.string = \"1\";\r\n            }\r\n            max_num.string = this.maxCount + \"\";\r\n            mask.opacity = this.isSelect ? 0 : 255;\r\n            toggle.interactable = this.isSelect;\r\n            this.Layout.node.addChild(item)\r\n        }\r\n    }\r\n\r\n    protected async onSelect(toggle: Toggle) {\r\n        if (!this.limit || !this.isSelect) return;\r\n        await Second(0);\r\n        let selects = [];\r\n        let chidlren = this.Layout.node.children;\r\n        let num = 0;\r\n        for (let child of chidlren) {\r\n            let isSelect = child.getComponent(Toggle).isChecked;\r\n            if (isSelect) {\r\n                num++;\r\n                if (this.isSelect) { } {\r\n                    child.getChildByName(\"mask\").getComponent(UIOpacity).opacity = 255;\r\n                }\r\n                selects.push(child.getSiblingIndex());\r\n            }else{\r\n                child.getChildByName(\"mask\").getComponent(UIOpacity).opacity = 0;\r\n            }\r\n        }\r\n        if (num > this.limit) {\r\n            toggle.isChecked = false;\r\n            toggle.node.getChildByName(\"mask\").getComponent(UIOpacity).opacity = 0;\r\n            let index = selects.indexOf(toggle.node.getSiblingIndex());\r\n            if (index > -1) {\r\n                selects.splice(index, 1);\r\n            }\r\n            Tips.Show(\"只能选择\" + this.limit + \"个\");\r\n        }\r\n        this.callBack(selects);\r\n    }\r\n\r\n    public setSelectNum(count, is_select) {\r\n        let chidlren = this.Layout.node.children;\r\n        for (let child of chidlren) {\r\n            let isSelect = child.getComponent(Toggle).isChecked;\r\n            if (isSelect && is_select) { \r\n                child.getChildByName(\"mask\").getComponent(UIOpacity).opacity = 255;       \r\n            }  \r\n            child.getChildByPath(\"mask/max_num\").getComponent(Label).string = count + \"\"\r\n        }\r\n    }\r\n}"]}