{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/battle/BattleModule.ts"],"names":["BattleModule","Battle_Exit","Battle_ShowSettlement","EventMgr","Evt_BattleCreatRoomResult","Evt_BattleDoubleUpdate","Evt_BattleLogGet","Evt_BattleLogInfo","Evt_Cancel_Match","Evt_EnterFight","Evt_Match_Complete","Evt_PlayerDataInit","Evt_Start_Match","proto","Req","Ret","Route","Session","MsgPanel","RoomPanel","battleDataMgr","FightUI","GameSet","battleCompMgr","GameScene","MainPanel","LoginPanel","FightLogPanel","Second","Utils","ServerPanel","VSModelPanel","constructor","roomPingTime","curRoom","isDoubleInt","on","onCreatRoomResult","onEnterRoomResult","BattleRoomOpOutputPush","onBattleRoomOpOutputPush","onBattleroomleave","onGetbattlerecentrecords","onGetbattlereplayroom","onCreatebattlereplayroom","onBattleroomdouble","onGetlastbattleroomsummary","BattleRoomPlayersPush","onBattleRoomPlayersPush","onMatchmaking","onMatchcancel","MatchMakingPush","onMatchMakingPush","onBattleSettlement","onExitFight","onPlayerDataInit","roomId","playerAId","data","isGiveUp","leavePlayerId","isntance","EndAllAction","stopComp","clearCurBattlePack","removeTick","update","clearBattleData","Show","Hide","room","Send","decode","console","log","res","code","CopyProto","roomSummary","base","BattleRoomSummary","setCreatRoomData","msg","emit","result","creatRoomData","enterRoom","addBattleData","outputs","clearRoomPing","records","dir","replayRoomSummary","server","pb","Server","create","id","serverId","setRoomDouble","players","onPingRoom","setInterval","sendRoomPing","bind","clearInterval","roomData","cancelled","isVs","ShowUI","addTick"],"mappings":"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","sourcesContent":["import { Battle_Exit, Battle_ShowSettlement, EventMgr, Evt_BattleCreatRoomResult, Evt_BattleDoubleUpdate, Evt_BattleLogGet, Evt_BattleLogInfo, Evt_Cancel_Match, Evt_EnterFight, Evt_Match_Complete, Evt_PlayerDataInit, Evt_Start_Match } from \"../../manager/EventMgr\";\r\nimport proto, { Req, Ret, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { MsgPanel } from \"../common/MsgPanel\";\r\nimport { RoomPanel } from \"../room/RoomPanel\";\r\nimport { battleDataMgr } from \"./BattleDataMgr\";\r\nimport { FightUI } from \"../fight/FightUI\";\r\nimport { GameSet } from \"../../manager/GameSet\";\r\nimport { battleCompMgr } from \"./BattleCompMgr\";\r\nimport { GameScene } from \"../fight/GameScene\";\r\nimport { MainPanel } from \"../main/MainPanel\";\r\nimport { LoginPanel } from \"../login/LoginPanel\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { FightLogPanel } from \"../fight/FightLogPanel\";\r\nimport { Second, Utils } from \"../../utils/Utils\";\r\nimport { ServerPanel } from \"../login/ServerPanel\";\r\nimport { VSModelPanel } from \"../vs/VSModelPanel\";\r\n\r\nexport class BattleModule {\r\n    private roomPingTime: any;\r\n    private curRoom: proto.base.IBattleRoomSummary;\r\n    private isDoubleInt: boolean;\r\n    constructor() {\r\n        Session.on(Route[\"battle_mgr.protocol.createbattlemgruserroom\"], this.onCreatRoomResult, this);\r\n        Session.on(Route[\"battle.protocol.battleroomenter\"], this.onEnterRoomResult, this);\r\n        Session.on(Route.BattleRoomOpOutputPush, this.onBattleRoomOpOutputPush, this);\r\n        Session.on(Route[\"battle.protocol.battleroomleave\"], this.onBattleroomleave, this);\r\n        Session.on(Route[\"battle_mgr.protocol.getbattlerecentrecords\"], this.onGetbattlerecentrecords, this);\r\n        Session.on(Route[\"battle_mgr.protocol.getbattlereplayroom\"], this.onGetbattlereplayroom, this);\r\n        Session.on(Route[\"battle_mgr.protocol.createbattlereplayroom\"], this.onCreatebattlereplayroom, this);\r\n        Session.on(Route[\"battle.protocol.battleroomdouble\"], this.onBattleroomdouble, this);\r\n        Session.on(Route[\"battle_mgr.protocol.getlastbattleroomsummary\"], this.onGetlastbattleroomsummary, this);\r\n        Session.on(Route.BattleRoomPlayersPush, this.onBattleRoomPlayersPush, this);\r\n        Session.on(Route[\"match.protocol.matchmaking\"], this.onMatchmaking, this);\r\n        Session.on(Route[\"match.protocol.matchcancel\"], this.onMatchcancel, this);\r\n        Session.on(Route.MatchMakingPush, this.onMatchMakingPush, this);\r\n        EventMgr.on(Battle_ShowSettlement, this.onBattleSettlement, this);\r\n        EventMgr.on(Battle_Exit, this.onExitFight, this);\r\n        EventMgr.on(Evt_PlayerDataInit, this.onPlayerDataInit, this);\r\n    }\r\n\r\n    private onBattleSettlement(roomId: string, playerAId: string, data: proto.base.BattleRoomOpOutput_Settlement): void {\r\n        let isGiveUp: boolean = data.leavePlayerId != null || data.leavePlayerId != \"\";\r\n        if (isGiveUp) {\r\n            GameScene.isntance.EndAllAction();\r\n            battleCompMgr.stopComp();\r\n            battleDataMgr.clearCurBattlePack();\r\n        }\r\n    }\r\n\r\n    private onExitFight(): void {\r\n        GameScene.isntance.EndAllAction();\r\n        GameSet.removeTick(battleCompMgr.update, battleCompMgr);\r\n        battleCompMgr.stopComp();\r\n        battleDataMgr.clearBattleData();\r\n        MainPanel.Show();\r\n        GameScene.Hide();\r\n    }\r\n\r\n    private onPlayerDataInit(): void {\r\n        //获取有效战斗房间摘要\r\n        let room = new Req[\"battle_mgr.protocol.getlastbattleroomsummary\"]();\r\n        Session.Send(Route[\"battle_mgr.protocol.getlastbattleroomsummary\"], room);\r\n    }\r\n\r\n    private onCreatRoomResult(data: any): void {\r\n        let room = Ret[\"battle_mgr.protocol.createbattlemgruserroom\"].decode(data);\r\n        console.log(\"onCreatRoomResult\", room);\r\n        if (room.res.code == 200) {\r\n            this.curRoom = Utils.CopyProto(room.roomSummary, proto.base.BattleRoomSummary);//structuredClone(room.roomSummary);\r\n            battleDataMgr.setCreatRoomData(room.roomSummary);\r\n            MsgPanel.Show(\"创建房间成功\");\r\n        } else {\r\n            MsgPanel.Show(room.res.msg);\r\n        }\r\n        // GameSet.debug = true;\r\n        EventMgr.emit(Evt_BattleCreatRoomResult);\r\n    }\r\n\r\n    private async onEnterRoomResult(data: any) {\r\n        let result = Ret[\"battle.protocol.battleroomenter\"].decode(data);\r\n        console.log(\"onEnterRoomResult\", result);\r\n        if (!battleDataMgr.creatRoomData) return;\r\n        if (battleDataMgr.creatRoomData.roomId != result.roomId) return;\r\n        if (result.res.code != 200) {\r\n            MsgPanel.Show(result.res.msg);\r\n            return;\r\n        }\r\n        this.enterRoom(true);\r\n    }\r\n\r\n    private onBattleRoomOpOutputPush(data: any): void {\r\n        let result = Ret.BattleRoomOpOutputPush.decode(data);\r\n        battleDataMgr.addBattleData(result.roomId, result.outputs);\r\n    }\r\n\r\n    public onBattleroomleave(data: any): void {\r\n        let result = Ret[\"battle.protocol.battleroomleave\"].decode(data);\r\n        if (!battleDataMgr.creatRoomData || battleDataMgr.creatRoomData.roomId != result.roomId) return;\r\n        if (result.res.code == 200) {\r\n            this.clearRoomPing();\r\n            //battleDataMgr.clearCurBattlePack();\r\n            //battleCompMgr.stopComp(battleDataMgr.checkIsStopBattlePack);\r\n            //GameSet.removeTick(battleCompMgr.update, battleCompMgr);\r\n            //GameSet.removeTick(this.onPingRoom, this);\r\n            /* setTimeout(() => {\r\n                battleDataMgr.leaveRoom();\r\n            }, 3); */\r\n        } else {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public onGetbattlerecentrecords(data: any): void {\r\n        let result = Ret[\"battle_mgr.protocol.getbattlerecentrecords\"].decode(data);\r\n        if (result.res.code == 200) {\r\n            EventMgr.emit(Evt_BattleLogGet, result.records);\r\n        } else {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n\r\n    }\r\n\r\n    private onGetbattlereplayroom(data: any): void {\r\n        let result = Ret[\"battle_mgr.protocol.getbattlereplayroom\"].decode(data);\r\n        if (result.res.code == 200) {\r\n            console.log(\"--------->getbattlereplayroom\")\r\n            console.dir(result.replayRoomSummary)\r\n            EventMgr.emit(Evt_BattleLogInfo, result.replayRoomSummary);\r\n        } else {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n\r\n    }\r\n\r\n    private async onCreatebattlereplayroom(data: any): Promise<void> {\r\n        let result = Ret[\"battle_mgr.protocol.createbattlereplayroom\"].decode(data);\r\n        if (result.res.code == 200) {\r\n            this.curRoom = Utils.CopyProto(result.roomSummary, proto.base.BattleRoomSummary);//structuredClone(result.roomSummary);\r\n            battleDataMgr.setCreatRoomData(result.roomSummary);\r\n            this.enterRoom();\r\n        } else {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n    }\r\n\r\n    private onBattleroomdouble(data: any): void {\r\n        let result = Ret[\"battle.protocol.battleroomdouble\"].decode(data);\r\n        if (!battleDataMgr.creatRoomData || battleDataMgr.creatRoomData.roomId != result.roomId) return;\r\n        if (result.res.code == 200) {\r\n            MsgPanel.Show(\"加倍成功\");\r\n        } else {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n    }\r\n\r\n    private async onGetlastbattleroomsummary(data: any): Promise<void> {\r\n        let result = Ret[\"battle_mgr.protocol.getlastbattleroomsummary\"].decode(data);\r\n        if (result.res.code == 200) {\r\n            if(result.roomSummary) {\r\n\r\n                GameScene.isntance.EndAllAction();\r\n                battleCompMgr.stopComp();\r\n                battleDataMgr.clearBattleData();\r\n                this.curRoom = Utils.CopyProto(result.roomSummary, proto.base.BattleRoomSummary);//structuredClone(result.roomSummary);\r\n                battleDataMgr.setCreatRoomData(result.roomSummary);\r\n                await this.enterRoom();\r\n                let server: proto.pb.IServer = proto.pb.Server.create();\r\n                server.id = this.curRoom.serverId;\r\n                let enterRoom = new Req[\"battle.protocol.battleroomroundretransmission\"]();\r\n                enterRoom.server = server;\r\n                enterRoom.roomId = this.curRoom.roomId;\r\n                Session.Send(Route[\"battle.protocol.battleroomroundretransmission\"], enterRoom);\r\n            }   \r\n        }\r\n    }\r\n\r\n    private onBattleRoomPlayersPush(data: any): void {\r\n        let result = Ret.BattleRoomPlayersPush.decode(data);\r\n        if (this.curRoom && this.curRoom.roomId == result.roomId) {\r\n            battleDataMgr.setRoomDouble(result.roomId, result.players);\r\n            console.log(\"加倍结果--->\" + result.players);\r\n            EventMgr.emit(Evt_BattleDoubleUpdate, this.isDoubleInt);\r\n            this.isDoubleInt = true;\r\n        }\r\n\r\n    }\r\n\r\n    private onPingRoom(): void {\r\n        this.clearRoomPing();\r\n        this.roomPingTime = setInterval(this.sendRoomPing.bind(this), 5000);\r\n    }\r\n\r\n    private clearRoomPing(): void {\r\n        if (this.roomPingTime) {\r\n            clearInterval(this.roomPingTime);\r\n            this.roomPingTime = null;\r\n        }\r\n    }\r\n\r\n    private sendRoomPing(): void {\r\n        if (!battleDataMgr.roomData) {\r\n            this.clearRoomPing();\r\n            return;\r\n        }\r\n        let server: proto.pb.IServer = proto.pb.Server.create();\r\n        server.id = this.curRoom.serverId;\r\n        let data = new Req[\"battle.protocol.battleroomping\"]();\r\n        data.server = server;\r\n        data.roomId = battleDataMgr.roomData.roomId;\r\n        Session.Send(Route[\"battle.protocol.battleroomping\"], data);\r\n    }\r\n\r\n    private onMatchmaking(data: any) {\r\n        let result = Ret[\"match.protocol.matchmaking\"].decode(data);\r\n        console.log(\"发起匹配\", result)\r\n        if (result.res.code != 200) {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n        EventMgr.emit(Evt_Start_Match, result.res.code == 200);\r\n    }\r\n    private onMatchcancel(data: any) {\r\n        let result = Ret[\"match.protocol.matchcancel\"].decode(data);\r\n        if (result.res.code != 200) {\r\n            MsgPanel.Show(result.res.msg);\r\n        }\r\n        EventMgr.emit(Evt_Cancel_Match, result.cancelled);\r\n    }\r\n\r\n    private onMatchMakingPush(data: any) {\r\n        let result = Ret.MatchMakingPush.decode(data);\r\n        console.log(\"匹配结果推送\", result)\r\n        if (result.result.code == 200) {\r\n            MsgPanel.Show(\"匹配成功\");\r\n            this.curRoom = Utils.CopyProto(result.roomSummary, proto.base.BattleRoomSummary);//structuredClone(result.roomSummary);\r\n            battleDataMgr.setCreatRoomData(result.roomSummary);\r\n            let server: proto.pb.IServer = proto.pb.Server.create();\r\n            server.id = battleDataMgr.creatRoomData.serverId;\r\n            let enterRoom = new Req[\"battle.protocol.battleroomenter\"]();\r\n            enterRoom.roomId = battleDataMgr.creatRoomData.roomId;\r\n            enterRoom.server = server;\r\n            Session.Send(Route[\"battle.protocol.battleroomenter\"], enterRoom);\r\n            console.log(`请求进入房间${enterRoom.roomId}`)\r\n        } else {\r\n            MsgPanel.Show(result.result.msg);\r\n        }\r\n        EventMgr.emit(Evt_Match_Complete, result.result.code == 200, this.curRoom);\r\n    }\r\n\r\n    private async enterRoom(isVs: boolean = false): Promise<void> {\r\n        this.isDoubleInt = false;\r\n        this.onPingRoom();\r\n        MsgPanel.Show(\"进入房间\");\r\n        RoomPanel.Hide();\r\n        FightUI.ShowUI(this.curRoom);\r\n        ServerPanel.Hide();\r\n        LoginPanel.Hide();\r\n        FightLogPanel.Hide();\r\n        await MainPanel.Hide();\r\n        await GameScene.Show();\r\n        console.log(\"进入成功\");\r\n        VSModelPanel.Hide();\r\n        EventMgr.emit(Evt_EnterFight);\r\n        if (isVs) await Second(2);\r\n        GameSet.addTick(battleCompMgr.update, battleCompMgr);\r\n    }\r\n\r\n}"]}