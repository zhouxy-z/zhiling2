{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/friend/FriendListPanel.ts"],"names":["FriendListPanel","Button","Input","Label","EventMgr","Evt_GetDownLineInfo","Session","AutoScroller","Panel","SFriendSortType","Req","Route","prefab","friendNum","vipNum","filtrateBtn","ScrollView","pageBg","pageLabel","left","right","noneListCont","tipsNode","clone_item","maxPage","curPage","pageSize","sortType","searchPlayerID","filter_type","onLoad","CloseBy","find","getComponent","node","on","onFiltrate","SetHandle","updateItem","bind","EventType","TOUCH_END","SendSessionView","onShow","updateFriendData","SortBindTimeAsc","flush","maxFriendNum","string","data","UpdateDatas","item","index","player_name","getChildByPath","friendIncomeNum","friendAllIncomeNum","friendNode","incomeNode","playerInfo","nickName","playerId","inviterId","friendLevel","friend_data","level","Send","callBack","sort_type","playerid","onHide","args","off"],"mappings":"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","sourcesContent":["import { Button, Input, Label, Node, Size, Sprite, SpriteFrame, UITransform, Vec3, instantiate, path} from \"cc\";\r\nimport { EventMgr, Evt_GetDownLineInfo, Evt_GetIncommons } from \"../../manager/EventMgr\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { AutoScroller } from \"../../component/AutoScroller\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { SDownlineInfo, SFriendSortType, SGetDownlines } from \"../player/PlayerStruct\";\r\nimport { Req, Route } from \"../../net/Protocol\";\r\n\r\n\r\n\r\nexport class FriendListPanel extends Panel {\r\n    protected prefab: string = \"prefabs/friend/FriendListPanel\";\r\n\r\n    private friendNum: Label;\r\n    private vipNum: Label;\r\n    private filtrateBtn: Button;\r\n    private ScrollView: AutoScroller\r\n    private pageBg: Node\r\n    private pageLabel: Label;\r\n    private left: Node;\r\n    private right: Node;\r\n    private noneListCont:Node;\r\n    private tipsNode:Node;\r\n    private clone_item: Node;\r\n\r\n    private maxPage: number\r\n    private curPage: number = 1;\r\n    private pageSize: number = 5;\r\n    private sortType: SFriendSortType;\r\n    private searchPlayerID: string = \"\"\r\n    private filter_type: number = 0;\r\n    protected onLoad(): void {\r\n        this.CloseBy(\"mask\");\r\n        this.CloseBy(\"frame/closeBtn\");\r\n        this.noneListCont = this.find(\"frame/noneListCont\")\r\n        this.friendNum = this.find(\"frame/friendInfoPage/friendNum\", Label);\r\n        this.vipNum = this.find(\"frame/friendInfoPage/vipNum\", Label);\r\n        this.filtrateBtn = this.find(\"frame/friendInfoPage/filtrateBtn\", Button);\r\n        this.ScrollView = this.find(\"frame/ScrollView\").getComponent(AutoScroller);\r\n\r\n        this.pageBg = this.find(`frame/pageBg`);\r\n        this.pageLabel = this.find(`frame/pageBg/Label`, Label);\r\n        this.left = this.find(`frame/pageBg/left`);\r\n        this.right = this.find(`frame/pageBg/right`);\r\n        this.tipsNode = this.find(`frame/tipsNode`);\r\n        this.clone_item = this.find(`frame/tipsNode/layout/item`);\r\n\r\n        this.filtrateBtn.node.on(\"click\", this.onFiltrate, this);\r\n        this.ScrollView.SetHandle(this.updateItem.bind(this));\r\n        this.left.on(Input.EventType.TOUCH_END, () => {\r\n            if (this.curPage > 1) {\r\n                this.curPage--;\r\n                this.SendSessionView();\r\n            }\r\n        })\r\n\r\n        this.right.on(Input.EventType.TOUCH_END, () => {\r\n            this.curPage++;\r\n            if (this.curPage <= this.maxPage) {\r\n                this.SendSessionView();\r\n            } else {\r\n                this.curPage--;\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    protected onShow(): void {\r\n        EventMgr.on(Evt_GetDownLineInfo, this.updateFriendData, this);\r\n        this.sortType = SFriendSortType.SortBindTimeAsc;\r\n        this.filter_type = 0;\r\n        this.SendSessionView();\r\n    }\r\n\r\n    async flush(maxFriendNum: number) {\r\n        this.friendNum.string = maxFriendNum + \"\";\r\n        this.vipNum.string = \"暂无\";\r\n        this.curPage = 1;\r\n\r\n        // let rights_list = CfgMgr.GetEquityCardTab(1);\r\n        // let content = this.tipsNode.getChildByName(\"layout\")\r\n        // content.removeAllChildren()\r\n        // for (let index = 0; index < rights_list.EquityCardIds.length; index++) {\r\n        //     const element = rights_list.EquityCardIds[index];\r\n        //     let cfg = CfgMgr.getEquityCardById(element);\r\n        //     let item = instantiate(this.clone_item);\r\n        //     let item_cfg = CfgMgr.Getitem(cfg.Item_Id)\r\n        //     item.getChildByName(\"name\").getComponent(Label).string = cfg.name;\r\n        //     ResMgr.LoadResAbSub(path.join(folder_item, item_cfg.Icon, \"spriteFrame\"),SpriteFrame, res=>{\r\n        //         item.getChildByName(\"icon\").getComponent(Sprite).spriteFrame = res;\r\n        //     })\r\n        //     item[\"card_id\"] = element;\r\n        //     content.addChild(item);\r\n        // } \r\n       \r\n    }\r\n\r\n    private updateFriendData(data: SGetDownlines[]) {\r\n        // let count = Math.ceil(data.total_count / this.pageSize);\r\n        // this.maxPage = count == 0 ? 1 : count; \r\n        // this.pageLabel.string = this.curPage + \"/\" + this.maxPage;\r\n        // this.noneListCont.active = false;\r\n        // if(!data.downlines || data.downlines.length == 0 ){\r\n        //     this.noneListCont.active = true;\r\n        // }\r\n        this.ScrollView.UpdateDatas( data);\r\n\r\n    }\r\n\r\n    private updateItem(item: Node, data: SGetDownlines, index: number) {\r\n        // let headItem:HeadItem = item.getChildByPath(\"frame/HeadItem\").addComponent(HeadItem);\r\n        let player_name = item.getChildByPath(\"frame/player_name\").getComponent(Label);\r\n        let friendIncomeNum = item.getChildByPath(\"frame/friendNode/todayNode/friendIncomeNum\").getComponent(Label);\r\n        let friendAllIncomeNum = item.getChildByPath(\"frame/friendNode/allNode/friendAllIncomeNum\").getComponent(Label);\r\n        let friendNode = item.getChildByPath(\"frame/friendNode\")\r\n        let incomeNode = item.getChildByPath(\"frame/incomeNode\")\r\n        // let rightsBtn = item.getChildByPath(\"frame/rightsBtn\")\r\n        // rightsBtn.off(Input.EventType.TOUCH_END)\r\n        // rightsBtn.on(Input.EventType.TOUCH_END,()=>{\r\n\r\n            // let cardNodeList: Node[] = this.tipsNode.getChildByName(\"layout\").children;\r\n            // let cardNode: Node;\r\n            // for (let index = 0; index < cardNodeList.length; index++) {\r\n            //     cardNode = cardNodeList[index];\r\n            //     if (data.cards.indexOf(cardNode[\"card_id\"]) > -1) {\r\n            //         SetNodeGray(cardNode, false, false);\r\n            //     } else {\r\n            //         SetNodeGray(cardNode, true, false);\r\n            //     }\r\n            // }\r\n\r\n        //     let btnSize: Size = rightsBtn.getComponent(UITransform).contentSize;\r\n        //     let showPos: Vec3 = rightsBtn.worldPosition.clone();\r\n        //     showPos.x = showPos.x;\r\n        //     showPos.y = showPos.y - btnSize.height - this.tipsNode.getComponent(UITransform).height * 0.5 + 30;\r\n        //     // ClickTipsPanel.Show(this.tipsNode, this.node, rightsBtn, showPos, 0, () => {\r\n    \r\n        //     });\r\n        // },this)\r\n        // rightsBtn.active = data.cards && data.cards.length > 0;\r\n\r\n        // let viewInfo:SPlayerViewInfo = {player_id: data.player_id};\r\n        // headItem.SetData(viewInfo);\r\n\r\n        // friendNode.active = true;\r\n        // incomeNode.active = false;\r\n        // icon.spriteFrame = await ResMgr.LoadResAbSub(path.join(folder_head_round, data.icon_url, \"spriteFrame\"), SpriteFrame);\r\n        player_name.string = \"绑定：\" + data.playerInfo.nickName + data.playerInfo.playerId + \"被绑定：\" + data.playerInfo.inviterId + \"层级：\" + data.friendLevel\r\n        \r\n        // friendIncomeNum.string =  ToFixed(data.daily_output, 4) + \"\";\r\n        // friendAllIncomeNum.string = ToFixed(data.total_output, 4) + \"\";\r\n    }\r\n\r\n    private SendSessionView() {\r\n        // let data = {\r\n        //     type: MsgTypeSend.GetDownlinesRequest,\r\n        //     data: { page: this.curPage, page_size: this.pageSize, sort_type: this.sortType, filter_type: this.filter_type,  search_player_id: this.searchPlayerID }\r\n        // }\r\n        // Session.Send(data);\r\n\r\n        let friend_data = new Req[\"user.protocol.getfriends\"]();\r\n        // friend_data.uid = \"\";\r\n        friend_data.level = 1;\r\n        Session.Send(Route[\"user.protocol.getfriends\"],friend_data);\r\n    }\r\n\r\n    private callBack(sort_type: SFriendSortType, playerid: string, filter_type: number) {\r\n        this.sortType = sort_type;\r\n        this.searchPlayerID = playerid;\r\n        this.filter_type = filter_type;\r\n        this.curPage = 1;\r\n    }\r\n\r\n    private onFiltrate() {\r\n        // FriendSortPanel.Show(this.pageSize, this.callBack.bind(this), this.sortType, this.searchPlayerID, this.filter_type);\r\n    }\r\n\r\n\r\n    protected onHide(...args: any[]): void {\r\n        this.curPage = 1;\r\n        EventMgr.off(Evt_GetDownLineInfo)\r\n    }\r\n}"]}