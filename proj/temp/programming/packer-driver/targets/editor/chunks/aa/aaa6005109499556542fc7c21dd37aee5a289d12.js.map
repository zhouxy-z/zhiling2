{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/CardUpgradePanel.ts"],"names":["CardUpgradePanel","Button","Label","path","RichText","Sprite","SpriteFrame","UITransform","CfgMgr","Panel","Card","PlayerData","EventMgr","Evt_Card_Chage","HaveItem","CostItem","card_quality","ResMgr","Req","Route","Session","VList","CardTitleItem","base","ClickTipsPanel","prefab","skillDescLab","frameIcon","frameNameLab","haveItemCont","card","upgradeCont","notNextLvCont","expLab","qualLab","upLvBtn","nextLvBtn","upgradeBtn","costCont","cardClassList","awardCardList","notCardTips","tipsLab","upgradeList","curUpgrade","selectCardData","cardClassDatas","awardCardDatas","onLoad","find","addComponent","updateCell","updateCardCalssCell","bind","selectCondCheck","selectCell","selectCardCalssCell","updateAwardCardCell","clickCell","awardCardClick","node","on","EventType","CLICK","onBtnClick","CloseBy","onShow","onUpdateCard","onHide","off","flush","id","cardId","initCardClass","btn","toUpgrade","selectCard","data","GetCardUpgradeList","cfg","GetCard","string","SkillDesc","initHaveItem","quality","SetData","updateShow","initAwardCard","length","nextLv","targetQuality","Quality","Send","console","log","stdQual","GetCardUpgradeShow","Title","LoadResAbSub","join","Picture","res","spriteFrame","nextUpgrade","active","updateCost","CostItemIds","CostItemNums","nextQual","exp","haveItemIds","map","std","haveItem","index","children","getComponent","itemIds","itemNums","costItem","stdEndUpgrade","awardCardId","RewardTypes","RewardIds","cardDatas","GetCardDataByCfgId","cardData","BattleCard","create","CardID","level","cellCount","cards","GetCardClassList","getCards","notCards","cardClassCardDatas","ID","isGet","cardClassData","sort","a","b","concat","selectIndex","classInfo","cell","cellInfo","cellCom","getChildByPath","isSelect","onShowNotCardTips","lastCell","lastInfo","show","showPos","worldPosition","clone","y","height","Show"],"mappings":"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","sourcesContent":["import { Button, Label, Node, path, RichText, Sprite, SpriteFrame, UITransform } from \"cc\";\r\nimport { CfgMgr, StdCard, StdCardUpgrade, StdCardUpgradeShow } from \"../../manager/CfgMgr\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { Card } from \"./Card\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { EventMgr, Evt_Card_Chage } from \"../../manager/EventMgr\";\r\nimport { HaveItem } from \"../common/HaveItem\";\r\nimport { CostItem } from \"../common/CostItem\";\r\nimport { card_quality, ResMgr } from \"../../manager/ResMgr\";\r\nimport { Req, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { CellInfo, VList } from \"../../component/VList\";\r\nimport { CardTitleItem } from \"./CardTitleItem\";\r\nimport base from \"../../net/proto/BaseUtils\";\r\nimport { ClickTipsPanel } from \"../common/ClickTipsPanel\";\r\nexport class CardUpgradePanel extends Panel {\r\n    protected prefab: string = \"prefabs/cards/CardUpgradePanel\";\r\n    private skillDescLab: RichText;\r\n    private frameIcon: Sprite;\r\n    private frameNameLab: Label;\r\n    private haveItemCont: Node;\r\n    private card: Card;\r\n    private upgradeCont: Node;\r\n    private notNextLvCont: Node;\r\n    private expLab: Label;\r\n    private qualLab: Label;\r\n    private upLvBtn: Button;\r\n    private nextLvBtn: Button;\r\n    private upgradeBtn: Button;\r\n    private costCont: Node;\r\n    private cardClassList: VList;\r\n    private awardCardList: VList;\r\n    private notCardTips: Node;\r\n    private tipsLab: Label;\r\n    private upgradeList: StdCardUpgrade[];\r\n    private curUpgrade: StdCardUpgrade;\r\n    private selectCardData: base.IBattleCard;\r\n    private cardClassDatas: base.IBattleCard[];\r\n    private awardCardDatas: base.IBattleCard[];\r\n    protected onLoad() {\r\n        this.skillDescLab = this.find(\"baseInfoCont/skillDescLab\", RichText);\r\n        this.frameIcon = this.find(\"baseInfoCont/frameCont/frameIcon\", Sprite);\r\n        this.frameNameLab = this.find(\"baseInfoCont/frameCont/frameNameLab\", Label);\r\n        this.card = this.find(\"curCardCont/Cards\").addComponent(Card);\r\n        this.upgradeCont = this.find(\"curCardCont/upgradeCont\");\r\n        this.expLab = this.find(\"curCardCont/upgradeCont/addExp/expLab\", Label);\r\n        this.qualLab = this.find(\"curCardCont/upgradeCont/qualLab\", Label);\r\n        this.haveItemCont = this.find(\"haveItemCont\");\r\n        this.upLvBtn = this.find(\"curCardCont/upgradeCont/upLvBtn\", Button);\r\n        this.nextLvBtn = this.find(\"curCardCont/upgradeCont/nextLvBtn\", Button);\r\n        this.upgradeBtn = this.find(\"curCardCont/upgradeCont/upgradeBtn\", Button);\r\n        this.costCont = this.find(\"curCardCont/upgradeCont/upgradeBtn/costCont\");\r\n        this.notNextLvCont = this.find(\"curCardCont/notNextLvCont\");\r\n        this.cardClassList = this.find(\"cardCont/cardClassList\", VList);\r\n        this.cardClassList.updateCell = this.updateCardCalssCell.bind(this);\r\n        this.cardClassList.selectCondCheck = this.selectCondCheck.bind(this);\r\n        this.cardClassList.selectCell = this.selectCardCalssCell.bind(this);\r\n        this.awardCardList = this.find(\"cardCont/awardCardList\", VList);\r\n        this.awardCardList.updateCell = this.updateAwardCardCell.bind(this);\r\n        this.awardCardList.clickCell = this.awardCardClick.bind(this);\r\n        this.notCardTips = this.find(\"notCardTips\");\r\n        this.tipsLab = this.find(\"notCardTips/tipsLab\", Label);\r\n        this.upLvBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.nextLvBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.upgradeBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.CloseBy(\"mask\");\r\n    }\r\n\r\n    protected onShow(): void {\r\n        EventMgr.on(Evt_Card_Chage, this.onUpdateCard, this);\r\n    }\r\n\r\n    protected onHide(): void {\r\n        EventMgr.off(Evt_Card_Chage, this.onUpdateCard, this);\r\n    }\r\n\r\n    public flush(id: string, cardId: number) {\r\n        this.initCardClass(id, cardId);\r\n        \r\n    }\r\n\r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.upLvBtn:\r\n                \r\n                break;\r\n            case this.nextLvBtn:\r\n            \r\n                break;\r\n            case this.upgradeBtn:\r\n                this.toUpgrade();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    private selectCard(data: base.IBattleCard): void {\r\n        this.selectCardData = data;\r\n        this.upgradeList = CfgMgr.GetCardUpgradeList(this.selectCardData.cardId);\r\n        let cfg = CfgMgr.GetCard(this.selectCardData.cardId);\r\n        this.skillDescLab.string = cfg.SkillDesc || \"\";\r\n        this.initHaveItem();\r\n        this.curUpgrade = this.upgradeList[this.selectCardData.quality - 1];\r\n        this.card.SetData(this.selectCardData);\r\n        this.updateShow();\r\n        this.initAwardCard();\r\n    }   \r\n\r\n    private toUpgrade(): void {\r\n        if (this.selectCardData.quality < this.upgradeList.length) {\r\n            let nextLv: StdCardUpgrade = this.upgradeList[this.selectCardData.quality];\r\n            let data = new Req[\"logic.protocol.battlecardupgrade\"]();\r\n            data.cardId = this.selectCardData.id;\r\n            data.targetQuality = nextLv.Quality;\r\n            Session.Send(Route[\"logic.protocol.battlecardupgrade\"], data);\r\n            console.log(\"发送卡牌升级----id\" + this.selectCardData.id + \" cardId--->\" + this.selectCardData.cardId + \" quality---->\" + nextLv.Quality);\r\n        }\r\n    }\r\n\r\n    private onUpdateCard(): void {\r\n        if (this.selectCardData) {\r\n            this.flush(this.selectCardData.id, this.selectCardData.cardId);\r\n        }\r\n    }\r\n\r\n    private updateShow(): void {\r\n        let stdQual: StdCardUpgradeShow = CfgMgr.GetCardUpgradeShow(this.curUpgrade.Quality);\r\n        this.frameNameLab.string = stdQual.Title;\r\n        ResMgr.LoadResAbSub(path.join(card_quality, stdQual.Picture, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.frameIcon.spriteFrame = res;\r\n        });\r\n        let nextUpgrade: StdCardUpgrade = this.upgradeList[this.selectCardData.quality];\r\n        //满级\r\n        if (!nextUpgrade) {\r\n            this.upgradeCont.active = false;\r\n            this.notNextLvCont.active = true;\r\n        } else {\r\n            this.upgradeCont.active = true;\r\n            this.notNextLvCont.active = false;\r\n            this.updateCost(nextUpgrade.CostItemIds, nextUpgrade.CostItemNums);\r\n            let nextQual: StdCardUpgradeShow = CfgMgr.GetCardUpgradeShow(nextUpgrade.Quality);\r\n            this.qualLab.string = nextQual.Title;\r\n            this.expLab.string = `+${nextUpgrade.exp}`;\r\n        }\r\n    }\r\n\r\n    private initHaveItem(): void {\r\n        let haveItemIds: number[] = [];\r\n        let map: object = {};\r\n        for (let std of this.upgradeList) {\r\n            for (let id of std.CostItemIds) {\r\n                if (!map[id]) {\r\n                    haveItemIds[haveItemIds.length] = id;\r\n                }\r\n            }\r\n        }\r\n        let node: Node;\r\n        let haveItem: HaveItem;\r\n        for (let index = 0; index < this.haveItemCont.children.length; index++) {\r\n            node = this.haveItemCont.children[index];\r\n            if (index < haveItemIds.length) {\r\n                node.active = true;\r\n                haveItem = node.getComponent(HaveItem) || node.addComponent(HaveItem);\r\n                haveItem.SetData(haveItemIds[index]);\r\n            } else {\r\n                node.active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateCost(itemIds: number[], itemNums: number[]): void {\r\n        let node: Node;\r\n        let costItem: CostItem;\r\n        for (let index = 0; index < this.costCont.children.length; index++) {\r\n            node = this.costCont.children[index];\r\n            if (index < itemIds.length) {\r\n                node.active = true;\r\n                costItem = node.getComponent(CostItem) || node.addComponent(CostItem);\r\n                costItem.SetData(itemIds[index], itemNums[index], \"#D64532\");\r\n            } else {\r\n                node.active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private initAwardCard(): void {\r\n        this.awardCardDatas = [];\r\n        let stdEndUpgrade: StdCardUpgrade = this.upgradeList[this.upgradeList.length - 1];\r\n        let awardCardId: number[] = [];\r\n        if (stdEndUpgrade.RewardTypes){\r\n            for (let index = 0; index < stdEndUpgrade.RewardTypes.length; index++) {\r\n                if (stdEndUpgrade.RewardTypes[index] == 3) {\r\n                    awardCardId[awardCardId.length] = stdEndUpgrade.RewardIds[index];\r\n                }\r\n                \r\n            }\r\n        }\r\n        for (let index = 0; index < awardCardId.length; index++) {\r\n            let cardDatas: base.IBattleCard[] = PlayerData.GetCardDataByCfgId(awardCardId[index]);\r\n            if (cardDatas.length) {\r\n                for (let data of cardDatas) {\r\n                    this.awardCardDatas[this.awardCardDatas.length] = data;\r\n                }\r\n            } else {\r\n                let cardData: base.IBattleCard = base.BattleCard.create();\r\n                cardData.cardId = stdEndUpgrade.CardID;\r\n                cardData.quality = 1,\r\n                cardData.level = 1;\r\n                cardData.exp = 0;\r\n                this.awardCardDatas[this.awardCardDatas.length] = cardData;\r\n            }\r\n            \r\n        }\r\n        \r\n        this.awardCardList.cellCount = this.awardCardDatas.length;\r\n    }\r\n\r\n    private initCardClass(id: string, cardId: number): void {\r\n        this.cardClassDatas = [];\r\n        let cards: StdCard[] = CfgMgr.GetCardClassList(cardId);\r\n        let getCards: base.IBattleCard[] = [];\r\n        let notCards: base.IBattleCard[] = [];\r\n        \r\n        for (let std of cards) {\r\n            let cardClassCardDatas: base.IBattleCard[] = PlayerData.GetCardDataByCfgId(std.ID);\r\n            let isGet: boolean = false;\r\n            for (let data of cardClassCardDatas) {\r\n                getCards[getCards.length] = data;\r\n                isGet = true;\r\n            }\r\n            if (!isGet) {\r\n                let cardClassData: base.IBattleCard = base.BattleCard.create();\r\n                cardClassData.cardId = std.ID;\r\n                cardClassData.quality = 1,\r\n                cardClassData.level = 1;\r\n                cardClassData.exp = 0;\r\n                notCards[notCards.length] = cardClassData;\r\n            }\r\n        }\r\n        getCards.sort((a: base.IBattleCard, b: base.IBattleCard) => {\r\n            return a.cardId - b.cardId;\r\n        });\r\n        notCards.sort((a: base.IBattleCard, b: base.IBattleCard) => {\r\n            return a.cardId - b.cardId;\r\n        });\r\n        this.cardClassDatas = getCards.concat(notCards);\r\n        let selectIndex: number = 0;\r\n        let classInfo: base.IBattleCard;\r\n        for (let index = 0; index < this.cardClassDatas.length; index++) {\r\n            classInfo = this.cardClassDatas[index];\r\n            if (classInfo.id == id && cardId) {\r\n                selectIndex = index;\r\n                break;\r\n            }\r\n        }\r\n        this.cardClassList.cellCount = this.cardClassDatas.length;\r\n        this.cardClassList.selectIndex(selectIndex);\r\n    }\r\n\r\n    private updateCardCalssCell(cell: Node, cellInfo: CellInfo): void {\r\n        let cellCom: CardTitleItem = cell.getComponent(CardTitleItem) || cell.addComponent(CardTitleItem);\r\n        cell.getChildByPath(\"Cards/cardNode/select\").active = cellInfo.isSelect;\r\n        cellCom.SetData(this.cardClassDatas[cellInfo.index]);\r\n    }\r\n\r\n    private selectCondCheck(cell: Node, cellInfo: CellInfo): boolean {\r\n        let data: base.IBattleCard = this.cardClassDatas[cellInfo.index];\r\n        if (data.id) return true;\r\n        this.tipsLab.string = \"暂未获得此卡\";\r\n        if (cell) this.onShowNotCardTips(cell);\r\n        return false;\r\n    }\r\n\r\n    private selectCardCalssCell(cell: Node, cellInfo: CellInfo, lastCell?: Node, lastInfo?: CellInfo): void {\r\n        if (cell) {\r\n            cell.getChildByPath(\"Cards/cardNode/select\").active = cellInfo.isSelect;\r\n        }\r\n        if (lastCell && lastInfo) {\r\n            lastCell.getChildByPath(\"Cards/cardNode/select\").active = lastInfo.isSelect;\r\n        } \r\n        this.selectCard(this.cardClassDatas[cellInfo.index]);\r\n        \r\n    }\r\n\r\n    private updateAwardCardCell(cell: Node, cellInfo: CellInfo): void {\r\n        let cellCom: CardTitleItem = cell.getComponent(CardTitleItem) || cell.addComponent(CardTitleItem);\r\n        cellCom.SetData(this.awardCardDatas[cellInfo.index], \"渡劫卡\");\r\n    }\r\n\r\n    private awardCardClick(cell: Node, cellInfo: CellInfo): void {\r\n        let data: base.IBattleCard = this.awardCardDatas[cellInfo.index];\r\n        if (data.id) {\r\n            this.flush(data.id, data.cardId);\r\n        } else {\r\n            let stdEndUpgrade: StdCardUpgrade = this.upgradeList[this.upgradeList.length - 1];\r\n            this.tipsLab.string = stdEndUpgrade.show;\r\n            this.onShowNotCardTips(cell);\r\n        }\r\n    }\r\n\r\n    private onShowNotCardTips(node: Node,): void {\r\n        let showPos: Vec3 = node.worldPosition.clone();\r\n        showPos.y += node.getComponent(UITransform).height / 2;\r\n        ClickTipsPanel.Show(this.notCardTips, this.node, node, showPos);\r\n    }\r\n\r\n}"]}