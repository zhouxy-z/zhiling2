{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/debug/DragDropExample.ts"],"names":["_decorator","Component","Node","DragDropMgr","DragDropGrid","ccclass","property","DragDropExample","type","start","on","dragLayer","id","index","grid1","children","length","element","com","addComponent","addDragNode","node","addDropNode","setData","grid2","update","deltaTime","onDrag","dragData","onDrop","dropNode","dragNode","parent","position","dragNodePos","dragParentNode","chekIsCanDrag","icon","getChildByName","creatDragNode","clone"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nimport { DragDropMgr, IDragData, IDragDropEvent } from '../manager/DragDropMgr';\r\nimport { DragDropGrid } from './DragDropGrid';\r\nconst { ccclass, property } = _decorator;\r\nexport interface IGridData {\r\n    id:number;\r\n}\r\n@ccclass('DragDropExample')\r\nexport class DragDropExample extends Component implements IDragDropEvent {\r\n    \r\n    @property({ type: Node})\r\n    grid1:Node;\r\n\r\n    @property({ type: Node})\r\n    grid2:Node;\r\n\r\n    @property({ type: Node})\r\n    dragLayer:Node;\r\n    start() {\r\n        DragDropMgr.on(this, this.dragLayer);\r\n        let id: number = 1;\r\n        for (let index = 0; index < this.grid1.children.length; index++) {\r\n            const element = this.grid1.children[index];\r\n            const com:DragDropGrid = element.addComponent(DragDropGrid);\r\n            DragDropMgr.addDragNode(com.node);\r\n            DragDropMgr.addDropNode(com.node);\r\n            com.setData({id:id});\r\n            id ++;\r\n        }\r\n\r\n        for (let index = 0; index < this.grid2.children.length; index++) {\r\n            const element = this.grid2.children[index];\r\n            const com:DragDropGrid = element.addComponent(DragDropGrid);\r\n            DragDropMgr.addDragNode(com.node);\r\n            DragDropMgr.addDropNode(com.node);\r\n            com.setData({id:id});\r\n            id ++;\r\n        }\r\n        \r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n    onDrag(dragData: IDragData): void {\r\n        \r\n    }\r\n    onDrop(dropNode: Node, dragData: IDragData): void {\r\n        if (dropNode){\r\n            dragData.dragNode.parent = dropNode;\r\n            dragData.dragNode.position = dragData.dragNodePos;\r\n        }else{\r\n            dragData.dragNode.parent = dragData.dragParentNode;\r\n            dragData.dragNode.position = dragData.dragNodePos;\r\n        }\r\n        \r\n    }\r\n\r\n    chekIsCanDrag(node: Node): boolean {\r\n        let icon: Node = node.getChildByName(\"icon\");\r\n        return icon != null;\r\n    }\r\n\r\n    creatDragNode(node: Node): IDragData {\r\n        let dragNode: Node = node.getChildByName(\"icon\");\r\n        let dragData: IDragData<IGridData> = {\r\n            dragNode: dragNode,\r\n            dragNodePos: dragNode.position.clone(),\r\n            dragParentNode: node,\r\n        };\r\n        return dragData;\r\n    }\r\n}\r\n\r\n\r\n"]}