{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/fight/SeasonSettlePanel.ts"],"names":["SeasonSettlePanel","Button","Label","ProgressBar","sp","Sprite","v3","path","SpriteFrame","tween","Vec3","easing","UITransform","NodePool","instantiate","SpriteLabel","Panel","Card","proto","CfgMgr","ItemType","PlayerData","folder_item","ResMgr","Utils","Bezier","Goto","prefab","maskBtn","sectionCont","doubleCont","tempPointImg","doubleNumLab","sectionIcon","sectionNameImg","starCont","maxStarCont","maxStarNumLab","expNumCont","expLineBg","curNumLab","maxNumLab","pro","resultImg","getAwardBtn","bomEffect","awardCont","getEffect","card","cont","itemCont","itemIcon","itemCurLab","itemNeedNumLab","cardUpBtn","maxQualLab","upCardData","data","curStdPVPSnatch","flyPool","flyNum","hideCallBack","showCallBack","oldStar","playerId","onLoad","find","addComponent","font","Skeleton","node","on","EventType","CLICK","onBtnClick","onShow","active","onHide","args","flush","GetStdPVPSnatch","rankRecord","seasonId","showSection","btn","Hide","showGetAward","interactable","base","doublingTimes","Math","pow","string","toString","resultStr","result","PvpResult","PvpResultTie","PvpResultWin","LoadResAbSub","join","res","spriteFrame","setSection","pointBefore","addPoint","pointAfter","posA","worldPosition","x","y","posB","barSprite","getComponent","width","creatFlyPoint","clone","setCompleteListener","sectionShowEnd","num","pos1","pos2","pos3","flyNode","index","get","parent","position","flyPoint","delay","partPos","bezier","create","update","target","ratio","v","setWorldPosition","to","onUpdate","call","clearAnimation","setAnimation","put","setNewSection","start","rankPoints","isChange","curStdPvpLv","GetStdPvpLvByPoint","RankGroupID","point","max","LevelPoints","curStar","floor","StarPoints","maxStar","Star","starNode","getChildByName","bright","isShowEffect","children","length","LevelIcon","LevelNameImg","curExp","mapExp","progress","changeSection","d","newPoint","scheduleOnce","rewardThings","showAward","scale","awardItem","item","stdItem","Getitem","id","Itemtpye","piece","cardDatas","battlePlayers","cards","GetCardDataByItemId","SetData","haveNum","GetItemCount","upgradeList","GetCardUpgradeList","cardId","nextUpgrade","quality","costItemId","costItemNum","CostItemIds","CostItemNums","std","Icon","colorStr","NumberRool","count","backOut"],"mappings":"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","sourcesContent":["import { Node, Button, Label, ProgressBar, sp, Sprite, v3, path, SpriteFrame, tween, Vec3, easing, UITransform, NodePool, instantiate } from \"cc\";\r\nimport { SpriteLabel } from \"../../component/SpriteLabel\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\nimport { Card } from \"../cards/Card\";\r\nimport proto from \"../../net/Protocol\";\r\nimport { CfgMgr, ItemType, StdCardUpgrade, StdItem, StdPvpLevel, StdPVPSnatch } from \"../../manager/CfgMgr\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { folder_item, ResMgr } from \"../../manager/ResMgr\";\r\nimport { Utils } from \"../../utils/Utils\";\r\nimport { Bezier } from \"../../utils/Bezier\";\r\nimport { Goto } from \"../../DL\";\r\n\r\nexport class SeasonSettlePanel extends Panel {\r\n    protected prefab: string = \"prefabs/fight/SeasonSettlePanel\";\r\n    private maskBtn: Button;\r\n    private sectionCont: Node;\r\n    private doubleCont: Node;\r\n    private tempPointImg: Node;\r\n    private doubleNumLab: SpriteLabel;\r\n    private sectionIcon: Sprite;\r\n    private sectionNameImg: Sprite;\r\n    private starCont: Node;\r\n    private maxStarCont: Node;\r\n    private maxStarNumLab: Label;\r\n    private expNumCont: Node;\r\n    private expLineBg: Node;\r\n    private curNumLab: Label;\r\n    private maxNumLab: Label;\r\n    private pro: ProgressBar;\r\n    private resultImg: Sprite;\r\n    private getAwardBtn: Button;\r\n    private bomEffect: sp.Skeleton;\r\n\r\n    private awardCont: Node;\r\n    private getEffect: sp.Skeleton;\r\n    private card: Card;\r\n    private cont: Node;\r\n    private itemCont: Node;\r\n    private itemIcon: Sprite;\r\n    private itemCurLab: Label;\r\n    private itemNeedNumLab: Label;\r\n    private cardUpBtn: Button;\r\n    private maxQualLab: Label;\r\n    private upCardData: proto.base.IBattleCard;\r\n    private data: proto.pb.PlayerPvpRankBattleSettlePush;\r\n    private curStdPVPSnatch: StdPVPSnatch;\r\n    private flyPool: NodePool = new NodePool();\r\n    private flyNum: number;\r\n    private hideCallBack: Function;\r\n    private showCallBack: Function;\r\n    private oldStar: number;\r\n    private playerId: string;\r\n    protected onLoad(): void {\r\n        this.maskBtn = this.find(\"mask\", Button);\r\n\r\n        this.sectionCont = this.find(\"sectionCont\");\r\n        this.doubleCont = this.find(\"sectionCont/doubleCont\");\r\n        this.doubleNumLab = this.find(\"sectionCont/doubleCont/effect/doubleNumLab\").addComponent(SpriteLabel);\r\n        this.doubleNumLab.font = \"sheets/numberImg/num2\";\r\n        this.sectionIcon = this.find(\"sectionCont/sectionCont/sectionIcon\", Sprite);\r\n        this.sectionNameImg = this.find(\"sectionCont/sectionCont/sectionNameImg\", Sprite);\r\n        this.expNumCont = this.find(\"sectionCont/sectionCont/expCont\");\r\n        this.expLineBg = this.find(\"sectionCont/sectionCont/expCont/expLineBg\");\r\n        this.curNumLab = this.find(\"sectionCont/sectionCont/expCont/numCont/curNumLab\", Label);\r\n        this.maxNumLab = this.find(\"sectionCont/sectionCont/expCont/numCont/maxNumLab\", Label);\r\n        this.starCont = this.find(\"sectionCont/sectionCont/starCont\");\r\n        this.maxStarCont = this.find(\"sectionCont/sectionCont/maxStarCont\");\r\n        this.maxStarNumLab = this.find(\"sectionCont/sectionCont/maxStarCont/maxStarNumLab\", Label);\r\n        this.pro = this.find(\"sectionCont/sectionCont/pro\", ProgressBar);\r\n        this.resultImg = this.find(\"sectionCont/resultImg\", Sprite);\r\n        this.getAwardBtn = this.find(\"sectionCont/getAwardBtn\", Button);\r\n        this.bomEffect = this.find(\"sectionCont/bomEffect\", sp.Skeleton);\r\n        this.tempPointImg = this.find(\"tempPointImg\");\r\n\r\n        this.awardCont = this.find(\"awardCont\");\r\n        \r\n        this.getEffect = this.find(\"awardCont/getEffect\", sp.Skeleton);\r\n        this.card = this.find(\"awardCont/Cards\").addComponent(Card);\r\n        this.cont = this.find(\"awardCont/cont\");\r\n        this.itemCont = this.find(\"awardCont/cont/itemCont\");\r\n        this.itemIcon = this.find(\"awardCont/cont/itemCont/icon\", Sprite);\r\n        this.itemCurLab = this.find(\"awardCont/cont/itemCont/numCont/curNumLab\", Label);\r\n        this.itemNeedNumLab = this.find(\"awardCont/cont/itemCont/numCont/needNumLab\", Label);\r\n        this.cardUpBtn = this.find(\"awardCont/cont/cardUpBtn\", Button);\r\n        this.maxQualLab = this.find(\"awardCont/cont/maxQualLab\", Label);\r\n\r\n        this.getAwardBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.maskBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n        this.cardUpBtn.node.on(Button.EventType.CLICK, this.onBtnClick, this);\r\n    }\r\n\r\n    protected onShow(): void {\r\n        if (this.showCallBack != null) this.showCallBack();\r\n        this.sectionCont.active = false;\r\n        this.awardCont.active = false;\r\n        this.bomEffect.node.active = false;\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n        if (this.hideCallBack != null) this.hideCallBack();\r\n        this.hideCallBack = null;\r\n    }\r\n\r\n    /**\r\n     * 刷新战斗ui\r\n     * @param data \r\n     */\r\n    public flush(data: proto.pb.PlayerPvpRankBattleSettlePush, playerId:string, showCallBack: Function, hideCallBack: Function) {\r\n        this.sectionCont.active = false;\r\n        this.awardCont.active = false;\r\n        this.data = data;\r\n        this.playerId = playerId;\r\n        if (showCallBack != null) showCallBack();\r\n        this.hideCallBack = hideCallBack;\r\n        /* if (!this.data) {\r\n            let newData = proto.pb.PlayerPvpRankBattleSettlePush.create();\r\n            newData.rankRecord = proto.base.PlayerPvpRankRecord.create();\r\n            newData.rankRecord.doublingTimes = 4;\r\n            newData.rankRecord.pointAfter = 850;\r\n            newData.rankRecord.pointBefore = 780;\r\n            newData.rankRecord.seasonId = 10001;\r\n            newData.rankRecord.roomId = \"101\";\r\n            this.data = newData;\r\n        } */\r\n        this.curStdPVPSnatch = CfgMgr.GetStdPVPSnatch(this.data.rankRecord.seasonId);\r\n        this.showSection();\r\n    }\r\n    \r\n    private onBtnClick(btn: Button): void {\r\n        switch (btn) {\r\n            case this.maskBtn: \r\n                this.Hide();\r\n                break;\r\n            case this.cardUpBtn:\r\n                this.Hide();\r\n                Goto(\"CardInfoPanel\",this.upCardData, null, null, true);\r\n                break;\r\n            case this.getAwardBtn:\r\n                this.showGetAward();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private showSection(): void {\r\n        this.sectionCont.active = true;\r\n        this.getAwardBtn.node.active = false;\r\n        this.maskBtn.interactable = false;\r\n        let base: number = 1;\r\n        let doubleCont: number = this.data.rankRecord.doublingTimes;\r\n        base = base * Math.pow(2, doubleCont);\r\n        this.doubleNumLab.string = base.toString();\r\n        let resultStr: string = \"\";\r\n        if (this.data.rankRecord.result == proto.base.PvpResult.PvpResultTie) {\r\n            resultStr = \"draw\";\r\n        } else if (this.data.rankRecord.result == proto.base.PvpResult.PvpResultWin) {\r\n            resultStr = \"win\";\r\n        } else {\r\n            resultStr = \"lost\";\r\n        }\r\n        ResMgr.LoadResAbSub(path.join(\"sheets/fight\", resultStr, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.resultImg.spriteFrame = res;\r\n        });\r\n        \r\n        this.setSection(this.data.rankRecord.pointBefore);\r\n        let addPoint: number = this.data.rankRecord.pointAfter - this.data.rankRecord.pointBefore;\r\n        if (addPoint > 0) {\r\n            let posA: Vec3 = v3(this.doubleCont.worldPosition.x, this.doubleCont.worldPosition.y + 40);\r\n            let posB: Vec3 = v3(this.pro.barSprite.node.worldPosition.x + this.pro.barSprite.node.getComponent(UITransform).width, this.pro.barSprite.node.worldPosition.y);\r\n            this.creatFlyPoint(posA, posB, addPoint);\r\n            this.bomEffect.node.worldPosition = posB.clone();\r\n            //this.bomEffect.node.active = true;\r\n            this.bomEffect.setCompleteListener(()=>{\r\n                this.bomEffect.node.active = false;\r\n            });\r\n        } else {\r\n            this.sectionShowEnd();\r\n        }\r\n        \r\n    }\r\n\r\n    private creatFlyPoint(posA: Vec3, posB: Vec3, num: number): void {\r\n        let pos1: Vec3 = new Vec3(posA.x + 100, posA.y - 200);\r\n        let pos2: Vec3 = new Vec3(posA.x + 200, posA.y + 100);\r\n        let pos3: Vec3 = new Vec3(posA.x + 300, posA.y + 200);\r\n        this.flyNum = num;\r\n        let flyNode: Node;\r\n        for (let index = 0; index < num; index++) {\r\n            flyNode = this.flyPool.get() || instantiate(this.tempPointImg);   \r\n            flyNode.active = true;\r\n            flyNode.parent = this.node;\r\n            flyNode.position = posA;\r\n            this.flyPoint(flyNode, index * 0.05, posA, posB, [pos1, pos2, pos3]);\r\n        }\r\n        \r\n    }\r\n\r\n    private flyPoint(node: Node, delay: number, posA: Vec3, posB: Vec3, partPos: Vec3[]): void {\r\n        let bezier = Bezier.create(posA, posB, partPos);\r\n        let update = (target: Node, ratio: number) => {\r\n            if (bezier) {\r\n                let v = bezier.update(ratio);\r\n                bezier && target.setWorldPosition(v);\r\n            }\r\n        }\r\n        tween(node)\r\n        .delay(delay)\r\n        .to(0.2, {}, {onUpdate: update })\r\n        .call(() => {\r\n            this.bomEffect.node.active = true;\r\n            this.bomEffect.clearAnimation();\r\n            this.bomEffect.setAnimation(0, \"animation\", false);\r\n            this.flyPool.put(node);\r\n            this.flyNum--;\r\n            if (this.flyNum <= 0) {\r\n                \r\n                this.setNewSection();\r\n            }\r\n        })\r\n        .start();\r\n    }\r\n\r\n    private setSection(rankPoints: number, isChange: boolean = false): void {\r\n        let curStdPvpLv: StdPvpLevel = CfgMgr.GetStdPvpLvByPoint(this.curStdPVPSnatch.RankGroupID, rankPoints);\r\n        let point: number = Math.max(rankPoints - curStdPvpLv.LevelPoints, 0);\r\n        let curStar: number = Math.floor( point / curStdPvpLv.StarPoints);\r\n        let maxStar: number = curStdPvpLv.Star - 1;\r\n        if (curStdPvpLv.Star == 1) {\r\n            this.starCont.active = false;\r\n            this.expLineBg.active = false;\r\n            this.maxStarCont.active = true;\r\n            this.maxStarNumLab.string = `x ${curStar}`;\r\n            this.expNumCont.position = v3(296, -268, 0);\r\n            let starNode: Node = this.maxStarCont.getChildByName(\"star\");\r\n            let bright: sp.Skeleton = starNode.getChildByName(\"bright\").getComponent(sp.Skeleton);\r\n            let isShowEffect: boolean = isChange && curStar > 0 && curStar > this.oldStar;\r\n            bright.node.active = curStar > 0;\r\n            if (isShowEffect) {\r\n                bright.clearAnimation();\r\n                bright.setAnimation(0, `show`, false);\r\n                bright.setCompleteListener(() => {\r\n                    bright.setAnimation(0, `loop`, true);\r\n                });\r\n            } else {\r\n                bright.setAnimation(0, `loop`, true);\r\n            }\r\n        } else {\r\n            this.maxStarCont.active = false;\r\n            this.expLineBg.active = true;\r\n            this.starCont.active = true;\r\n            this.expNumCont.position = v3(0, -194, 0);\r\n            \r\n            for (let index = 0; index < this.starCont.children.length; index++) {\r\n                let starNode: Node = this.starCont.children[index];\r\n                if (index < maxStar) {\r\n                    starNode.active = true;\r\n                    let bright: sp.Skeleton = starNode.getChildByName(\"bright\").getComponent(sp.Skeleton);\r\n                    let isShowEffect: boolean = isChange && !bright.node.active;\r\n                    bright.node.active = curStar > index;\r\n                    if (isShowEffect) {\r\n                        bright.clearAnimation();\r\n                        bright.setAnimation(0, `show`, false);\r\n                        bright.setCompleteListener(() => {\r\n                            bright.setAnimation(0, `loop`, true);\r\n                        });\r\n                    } else {\r\n                        bright.setAnimation(0, `loop`, true);\r\n                    }\r\n                } else {\r\n                    starNode.active = false;\r\n                }\r\n                \r\n            }\r\n        }\r\n        this.oldStar = curStar;\r\n        ResMgr.LoadResAbSub(path.join(\"sheets/sectionIcon\", curStdPvpLv.LevelIcon, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.sectionIcon.spriteFrame = res;\r\n        });\r\n        ResMgr.LoadResAbSub(path.join(\"sheets/sectionIcon\", curStdPvpLv.LevelNameImg, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n            this.sectionNameImg.spriteFrame = res;\r\n        });\r\n        let curExp: number = point % curStdPvpLv.StarPoints;\r\n        let mapExp: number = curStdPvpLv.StarPoints;\r\n        this.curNumLab.string = curExp.toString();\r\n        this.maxNumLab.string = mapExp.toString();\r\n        this.pro.progress = curExp / mapExp;\r\n    }\r\n\r\n    private setNewSection(): void {\r\n        /* this.setSection(this.data.rankRecord.pointAfter);\r\n        this.sectionShowEnd();\r\n        return; */\r\n        \r\n        let addPoint: number = this.data.rankRecord.pointAfter - this.data.rankRecord.pointBefore;\r\n        for (let index = 0; index < addPoint; index++) {\r\n            let point: number = this.data.rankRecord.pointBefore + (index + 1);\r\n            this.changeSection(index * 0.05, point, this.data.rankRecord.pointAfter);\r\n        }\r\n        /* let starStd: StdPvpLevel = CfgMgr.GetStdPvpLvByPoint(this.curStdPVPSnatch.RankGroupID, this.data.rankRecord.pointBefore);\r\n        let endStd: StdPvpLevel = CfgMgr.GetStdPvpLvByPoint(this.curStdPVPSnatch.RankGroupID, this.data.rankRecord.pointAfter);\r\n        let stdLvList: StdPvpLevel[] = CfgMgr.GetStdPvpLvListByPoint(this.curStdPVPSnatch.RankGroupID, starStd.LevelPoints, endStd.LevelPoints);\r\n        for (let index = 0; index < stdLvList.length; index++) {\r\n            let std = stdLvList[index];\r\n            \r\n        } */\r\n    }\r\n\r\n    private changeSection(d: number, point: number, newPoint: number): void {\r\n        this.scheduleOnce(()=>{\r\n            this.setSection(point, true);\r\n            if (point == newPoint) {\r\n                this.sectionShowEnd();\r\n            }\r\n        }, d)\r\n    }\r\n\r\n    private sectionShowEnd(): void {\r\n        if (!this.data.rewardThings || this.data.rewardThings.length < 1) {\r\n            this.maskBtn.interactable = true;\r\n        } else {\r\n            this.getAwardBtn.node.active = true;\r\n        }\r\n    }\r\n\r\n    private showGetAward(): void {\r\n        this.awardCont.active = true;\r\n        this.sectionCont.active = false;\r\n        this.maxQualLab.node.active = false;\r\n        this.cardUpBtn.node.active = false;\r\n        this.itemCont.active = false;\r\n        this.upCardData = null;\r\n        this.card.node.active = false;\r\n        this.getEffect.node.active = true;\r\n        this.getEffect.clearAnimation();\r\n        this.getEffect.setAnimation(0, `start`, false);\r\n        this.getEffect.setCompleteListener(() => {\r\n            //this.getEffect.node.active = false;\r\n        });\r\n        this.scheduleOnce(() => {\r\n            this.showAward();\r\n        }, 0.3);\r\n        \r\n    }\r\n\r\n    private showAward(): void {\r\n        this.card.node.scale = v3(0.5, 0.5 , 1);\r\n        let awardItem: proto.base.IThingItem = this.data.rewardThings[0].item;\r\n        let stdItem: StdItem = CfgMgr.Getitem(awardItem.id);\r\n        if (stdItem && stdItem.Itemtpye == ItemType.piece) {\r\n            let cardDatas: proto.base.IBattleCard[] = this.data.rankRecord.battlePlayers[this.playerId].cards;\r\n            this.upCardData = PlayerData.GetCardDataByItemId(awardItem.id, cardDatas);\r\n        }\r\n         \r\n        if (this.upCardData) {\r\n            this.card.node.active = true;\r\n            this.card.SetData(this.upCardData);\r\n            let haveNum: number = PlayerData.GetItemCount(awardItem.id);\r\n            let upgradeList: StdCardUpgrade[] = CfgMgr.GetCardUpgradeList(this.upCardData.cardId);\r\n            let nextUpgrade: StdCardUpgrade = upgradeList[this.upCardData.quality];\r\n            let costItemId: number;\r\n            let costItemNum: number;\r\n            if (nextUpgrade) {\r\n                for (let index = 0; index < nextUpgrade.CostItemIds.length; index++) {\r\n                    if (nextUpgrade.CostItemIds[index] == awardItem.id) {\r\n                        costItemId = nextUpgrade.CostItemIds[index];\r\n                        costItemNum = nextUpgrade.CostItemNums[index];\r\n                        break;\r\n                    }   \r\n                }\r\n            }\r\n            if (costItemId) {\r\n                let std: StdItem = CfgMgr.Getitem(costItemId);\r\n                if (std) {\r\n                    ResMgr.LoadResAbSub(path.join(folder_item, std.Icon, \"spriteFrame\"), SpriteFrame, (res: SpriteFrame) => {\r\n                        this.itemIcon.spriteFrame = res;\r\n                    });\r\n                    \r\n                }\r\n                this.itemCont.active = true;\r\n                let colorStr: string;\r\n                if (haveNum >= costItemNum) {\r\n                    this.cardUpBtn.node.active = true;\r\n                    colorStr = \"#F9DE73\";\r\n                } else {\r\n                    colorStr = \"#D64532\";\r\n                }\r\n                Utils.NumberRool(this.itemCurLab, awardItem.count, haveNum);\r\n                this.itemNeedNumLab.string = `/${costItemNum}`;\r\n            } else {\r\n                this.maxQualLab.node.active = true;\r\n            }\r\n            \r\n        }\r\n\r\n        tween(this.card.node)\r\n        .to(0.3, {scale: new Vec3(1.4, 1.4, 1)}, { easing: easing.backOut })\r\n        .call(() => {\r\n            this.cont.active = true;\r\n            this.maskBtn.interactable = true;\r\n        })\r\n        .start();\r\n    }\r\n    \r\n}\r\n\r\n"]}