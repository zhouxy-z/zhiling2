{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/battle/opOutput/Out_TerrainToTerrain_2d.ts"],"names":["Out_TerrainToTerrain_2d","tween","BattleBaseComp","battleLogicMgr","battleDataMgr","BattleCard","start","data","showCardLayer","active","toMove","exit","reset","success","manual","isPlayerA","fromTerrainPlayerId","toTerrainPlayerId","startPos","targetPos","terrainArea","terrainAreaList","grid","terraninAreaListA","terraninAreaListB","index","length","terrainData","instId","fromTerrainInstId","gridList","cardData","card","setData","node","worldPosition","toTerrainInstId","cardNode","fromPoolCard","cardCom","getComponent","addComponent","parent","layer","to","easing","call","putCardToPool","resetAreaData","terrainDataList","getPlayerTerrainDatas","areaIdx","cards"],"mappings":"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","sourcesContent":["import { base } from \"../../../net/proto/proto\";\r\nimport { BattleBaseComp } from \"../BattleBaseComp\";\r\nimport { battleLogicMgr } from \"../BattleLogicMgr\";\r\nimport { BattleTerrainGrid } from \"../BattleTerrainGrid\";\r\nimport { battleDataMgr } from \"../BattleDataMgr\";\r\nimport { Node, tween, Vec3 } from \"cc\";\r\nimport { BattleTerrainArea } from \"../BattleTerrainArea\";\r\nimport { BattleCardGrid } from \"../BattleCardGrid\";\r\nimport { BattleCard } from \"../BattleCard\";\r\n/**\r\n * 房间区域数据\r\n */\r\nexport class Out_TerrainToTerrain_2d extends BattleBaseComp<base.IBattleRoomOpOutput_TerrainToTerrain> {\r\n    \r\n    protected start(): void {\r\n        if (!this.data) {\r\n            battleLogicMgr.showCardLayer.active = true;\r\n            this.toMove();\r\n        } else {\r\n            this.exit();\r\n        }\r\n    }\r\n\r\n    protected reset(): void {\r\n       \r\n    }\r\n\r\n    private toMove(): void {\r\n        if (this.data.success) {\r\n            //手动移动并且第一视觉方移动不做处理（因为在操作移动上已修改数据了）\r\n            if (this.data.manual && battleDataMgr.isPlayerA(this.data.fromTerrainPlayerId) && battleDataMgr.isPlayerA(this.data.toTerrainPlayerId)) {\r\n                this.exit();\r\n                return;\r\n            }\r\n            //移动成功\r\n            let startPos: Vec3;\r\n            let targetPos: Vec3;\r\n            let terrainArea: BattleTerrainArea;\r\n            let terrainAreaList: BattleTerrainArea[];\r\n            let grid: BattleCardGrid\r\n            if (battleDataMgr.isPlayerA(this.data.fromTerrainPlayerId)) {\r\n                terrainAreaList = battleLogicMgr.terraninAreaListA;\r\n            } else {\r\n                terrainAreaList = battleLogicMgr.terraninAreaListB;\r\n            }\r\n            for (let index = 0; index < terrainAreaList.length; index++) {\r\n                terrainArea = terrainAreaList[index];\r\n                if (terrainArea.terrainData.instId == this.data.fromTerrainInstId) {\r\n                    for (let index = 0; index < terrainArea.gridList.length; index++) {\r\n                        grid = terrainArea.gridList[index];\r\n                        if (grid.cardData && grid.cardData.instId == this.data.card.instId) {\r\n                            grid.setData(null);\r\n                            startPos = grid.node.worldPosition;\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if (battleDataMgr.isPlayerA(this.data.toTerrainPlayerId)) {\r\n                terrainAreaList = battleLogicMgr.terraninAreaListA;\r\n            } else {\r\n                terrainAreaList = battleLogicMgr.terraninAreaListB;\r\n            }\r\n            for (let index = 0; index < terrainAreaList.length; index++) {\r\n                terrainArea = terrainAreaList[index];\r\n                if (terrainArea.terrainData.instId == this.data.toTerrainInstId) {\r\n                    for (let index = 0; index < terrainArea.gridList.length; index++) {\r\n                        grid = terrainArea.gridList[index];\r\n                        if (!grid.cardData) {\r\n                            //grid.setData(this.data.card);\r\n                            targetPos = grid.node.worldPosition;\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            let cardNode: Node = battleLogicMgr.fromPoolCard;\r\n            let cardCom: BattleCard = cardNode.getComponent(BattleCard) || cardNode.addComponent(BattleCard);\r\n            cardCom.setData(this.data.card);\r\n            cardNode.parent = battleLogicMgr.showCardLayer;\r\n            cardNode.layer = cardNode.parent.layer;\r\n            cardNode.worldPosition = startPos;\r\n            cardNode.active = true;\r\n            tween(cardNode)\r\n            .to(0.5, { worldPosition: targetPos }, { easing: 'cubicIn' })\r\n            .call(()=>{\r\n                battleLogicMgr.putCardToPool(cardNode);\r\n                this.resetAreaData();\r\n                this.exit();\r\n            })\r\n            .start();\r\n\r\n        } else {\r\n            /**\r\n             * TODO 暂时没有移动失败的表现\r\n             */\r\n            this.exit();\r\n        }\r\n    \r\n    }\r\n\r\n    private resetAreaData(): void {\r\n        let terrainAreaList: BattleTerrainArea[];\r\n        let terrainArea: BattleTerrainArea;\r\n        let terrainDataList: base.IBattleRoomTerrainPlayerData[];\r\n        let terrainData: base.IBattleRoomTerrainPlayerData;\r\n        let grid: BattleCardGrid;\r\n        if (battleDataMgr.isPlayerA(this.data.fromTerrainPlayerId)) {\r\n            terrainAreaList = battleLogicMgr.terraninAreaListA;\r\n        } else {\r\n            terrainAreaList = battleLogicMgr.terraninAreaListB;\r\n        }\r\n        terrainDataList = battleDataMgr.getPlayerTerrainDatas(this.data.fromTerrainPlayerId);\r\n        for (let areaIdx = 0; areaIdx < terrainAreaList.length; areaIdx++) {\r\n            terrainArea = terrainAreaList[areaIdx];\r\n            terrainData = terrainDataList[areaIdx];\r\n            for (let index = 0; index < terrainArea.gridList.length; index++) {\r\n                grid = terrainArea.gridList[index];\r\n                let cardData = terrainData.cards[index] || null;\r\n                grid.setData(cardData);\r\n            }\r\n        }\r\n\r\n        if (battleDataMgr.isPlayerA(this.data.toTerrainPlayerId)) {\r\n            terrainAreaList = battleLogicMgr.terraninAreaListA;\r\n        } else {\r\n            terrainAreaList = battleLogicMgr.terraninAreaListB;\r\n        }\r\n        terrainDataList = battleDataMgr.getPlayerTerrainDatas(this.data.toTerrainPlayerId);\r\n        for (let areaIdx = 0; areaIdx < terrainAreaList.length; areaIdx++) {\r\n            terrainArea = terrainAreaList[areaIdx];\r\n            terrainData = terrainDataList[areaIdx];\r\n            for (let index = 0; index < terrainArea.gridList.length; index++) {\r\n                grid = terrainArea.gridList[index];\r\n                let cardData = terrainData.cards[index] || null;\r\n                grid.setData(cardData);\r\n            }\r\n        }\r\n\r\n    }\r\n}"]}