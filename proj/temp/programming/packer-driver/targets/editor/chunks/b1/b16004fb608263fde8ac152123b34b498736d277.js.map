{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/cards/cardGroupSettingTips.ts"],"names":["cardGroupSettingTips","Input","Label","Sprite","SpriteFrame","Toggle","path","Panel","Req","Route","Session","PlayerData","CfgMgr","ResMgr","cardBack","CardGroupHead","prefab","tile","btn1","btn2","select","backItem","headItem","headData","cardBackdata","type","onLoad","find","on","EventType","TOUCH_END","onSet","onAllCardGroup","CloseBy","Hide","addComponent","onShow","flush","data","msg","node","active","str_name","cardGroupData","getCardGroupDataById","cur_id","cfg_head_data","GetHead","avatarId","is_use","SetData","like","name","getChildByName","cardBackId","icon","getComponent","cfg_card_back_data","GetCardBackCfgById","LoadResAbSub","join","res","spriteFrame","string","isChecked","Change_name","attrs","Send","iterator","cardNameList","setLike","is_like","setHeadData","infos","setCardBackData","onHide","args"],"mappings":"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","sourcesContent":["import { Input, Label, Node, Sprite, SpriteFrame, Toggle, path } from \"cc\";\r\nimport { Panel, UILay } from \"../../manager/GameRoot\";\r\nimport proto, { Req, Route } from \"../../net/Protocol\";\r\nimport { Session } from \"../../net/Session\";\r\nimport { PlayerData } from \"../player/PlayerData\";\r\nimport { CfgMgr } from \"../../manager/CfgMgr\";\r\nimport { ResMgr, cardBack, folder_icon } from \"../../manager/ResMgr\";\r\nimport { CardGroupHead } from \"./CardGroupHead\";\r\n\r\nexport class cardGroupSettingTips extends Panel {\r\n    protected prefab: string = \"prefabs/cards/cardGroupSettingTips\";\r\n    private tile: Label;\r\n    private btn1: Node;\r\n    private btn2: Node;\r\n    private select:Toggle\r\n    private backItem:Node;\r\n    private headItem:CardGroupHead;\r\n\r\n    private headData:proto.base.IAvatarInfo\r\n    private cardBackdata:proto.base.CardBackInfo\r\n   \r\n\r\n    /**1是头像 2是卡背 */\r\n    private type:number\r\n\r\n    protected onLoad(): void {\r\n        this.tile = this.find(\"tile\", Label);\r\n        this.btn1 = this.find(\"btn1\");\r\n        this.btn2 = this.find(\"btn2\");\r\n        this.btn1.on(Input.EventType.TOUCH_END, this.onSet, this);\r\n        this.btn2.on(Input.EventType.TOUCH_END, this.onAllCardGroup, this);\r\n        this.CloseBy(\"mask\");\r\n        this.find(\"closeBtn\").on(Input.EventType.TOUCH_END, this.Hide, this);\r\n        this.select = this.find(\"select\", Toggle)\r\n        this.backItem = this.find(\"backitem\");\r\n        this.headItem = this.find(\"headitem\").addComponent(CardGroupHead);\r\n    }\r\n\r\n    protected onShow(): void {\r\n\r\n    }\r\n    async flush(type: number, data:proto.base.IAvatarInfo | proto.base.CardBackInfo) {\r\n        this.type = type;\r\n        let msg = \"\"\r\n        this.headItem.node.active = false;\r\n        this.backItem.active = false;\r\n        let str_name :string = \"\"\r\n        let cardGroupData = PlayerData.getCardGroupDataById(PlayerData.cur_id)\r\n        if(type == 1){\r\n            msg = \"头像设置\"\r\n            this.headData = data as proto.base.IAvatarInfo;\r\n            let cfg_head_data = CfgMgr.GetHead(this.headData.avatarId)\r\n            let is_use = cardGroupData.avatarId == this.headData.avatarId;\r\n            this.headItem.SetData(this.headData.avatarId, data.like, is_use)\r\n            str_name = cfg_head_data.name;\r\n            this.headItem.node.active = true;\r\n        }else{\r\n            msg = \"卡背设置\"\r\n            this.cardBackdata = data as proto.base.CardBackInfo\r\n            this.backItem.getChildByName(\"favorite\").active = data.like;\r\n            this.backItem.getChildByName(\"use\").active = cardGroupData.cardBackId == this.cardBackdata.cardBackId;\r\n            let icon = this.backItem.getChildByName(\"icon\").getComponent(Sprite);\r\n            let cfg_card_back_data = CfgMgr.GetCardBackCfgById(this.cardBackdata.cardBackId)\r\n            ResMgr.LoadResAbSub(path.join(cardBack, cfg_card_back_data.icon, \"spriteFrame\"), SpriteFrame, res => {\r\n                icon.spriteFrame =  res;\r\n            });\r\n            str_name = cfg_card_back_data.name;\r\n            this.backItem.active = true;\r\n        }\r\n        this.find(\"namelabel\").getComponent(Label).string = str_name\r\n        this.tile.string = msg;\r\n        this.select.isChecked = data.like\r\n    }\r\n\r\n    private onSet() {\r\n        let data = PlayerData.getCardGroupDataById(PlayerData.cur_id);\r\n        if(this.type == 1){\r\n            //装备到卡组\r\n            data.avatarId = this.headData.avatarId\r\n            let Change_name = new Req[\"logic.protocol.setdeckattrs\"]();\r\n            Change_name.attrs = data;\r\n            Session.Send(Route[\"logic.protocol.setdeckattrs\"], Change_name)\r\n        }else{\r\n            //装备到卡组\r\n            data.cardBackId = this.cardBackdata.cardBackId\r\n            let Change_name = new Req[\"logic.protocol.setdeckattrs\"]();\r\n            Change_name.attrs = data;\r\n            Session.Send(Route[\"logic.protocol.setdeckattrs\"], Change_name)\r\n\r\n        }\r\n\r\n        this.Hide();\r\n    }\r\n    private onAllCardGroup() {\r\n        if(this.type == 1){\r\n            //装备到卡组\r\n            for (const iterator of PlayerData.cardNameList) {  \r\n                iterator.avatarId = this.headData.avatarId   \r\n                let Change_name = new Req[\"logic.protocol.setdeckattrs\"]();\r\n                Change_name.attrs = iterator;\r\n                Session.Send(Route[\"logic.protocol.setdeckattrs\"], Change_name)\r\n            }\r\n        }else{\r\n            //装备到卡组\r\n            for (const iterator of PlayerData.cardNameList) {      \r\n                iterator.cardBackId = this.cardBackdata.cardBackId\r\n                let Change_name = new Req[\"logic.protocol.setdeckattrs\"]();\r\n                Change_name.attrs = iterator;\r\n                Session.Send(Route[\"logic.protocol.setdeckattrs\"], Change_name)\r\n            }\r\n        }\r\n        this.Hide();\r\n    }\r\n\r\n    private setLike(){\r\n        let is_like = this.select.isChecked\r\n        if(this.type == 1){\r\n            this.headData.like = is_like;     \r\n            //设为最爱\r\n            let setHeadData = new Req[\"logic.protocol.setavatarinfos\"]()\r\n            setHeadData.infos = [this.headData];\r\n            Session.Send(Route[\"logic.protocol.setavatarinfos\"], setHeadData)\r\n            \r\n        }else{\r\n            this.cardBackdata.like = is_like \r\n            //设为最爱\r\n            let setCardBackData = new Req[\"logic.protocol.setcardbackinfos\"]()\r\n            setCardBackData.infos = [this.cardBackdata];\r\n            Session.Send(Route[\"logic.protocol.setcardbackinfos\"], setCardBackData)\r\n            \r\n        }\r\n    }\r\n\r\n    protected onHide(...args: any[]): void {\r\n        this.setLike();\r\n   \r\n    }\r\n}"]}