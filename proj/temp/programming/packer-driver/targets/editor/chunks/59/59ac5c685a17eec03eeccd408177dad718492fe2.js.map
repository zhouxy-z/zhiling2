{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/manager/ResMgr.ts"],"names":["ResMgr","Material","Node","SpriteFrame","Texture2D","assetManager","error","resources","resMap","Map","$seed","$loadSeed","LoadSeed","obj","uuid","CheckSeed","seed","PrevLoad","success1","promise1","Promise","resolve","reject","loadBundle","err","ab","success2","promise2","loadDir","data","depth_material_uuid","get","all","getDepthMaterial","GetResources","GetAsset","path","res","undefined","cb","onProgress","success","fail","promise","load","set","HasResource","getInfoWithPath","resAb","getBundle","LoadResAbSub","resType","uri","split","pop","console","warn","resData","LoadRemoteSpriteFrame","url","loadRemote","maxRetryCount","imageAsset","spriteFrame","texture","image","folder_money","folder_icon","folder_quality","folder_head","folder_head_round","folder_attr","folder_common","folder_item","folder_card","folder_loot","folder_skill","folder_mail","quality_color","skill_quality_color","bg_quality_color","folder_sound","folder_bgm","folder_scene","card_quality","roleimage","cardBack"],"mappings":"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","sourcesContent":["import { Asset, EffectAsset, ImageAsset, Material, Node, Sprite, SpriteFrame, Texture2D, UITransform, __private, assetManager, error, resources } from \"cc\";\r\n\r\nlet resMap: Map<string, any> = new Map<string, any>();\r\ntype classz<T = unknown> = new (...args: any[]) => T;\r\nlet $seed = 0;\r\nlet $loadSeed = {};\r\n\r\nexport class ResMgr {\r\n    static LoadSeed(obj: Node | string) {\r\n        let uuid: string;\r\n        if (obj instanceof Node) {\r\n            uuid = obj.uuid;\r\n        } else {\r\n            uuid = obj;\r\n        }\r\n        $loadSeed[uuid] = ++$seed;\r\n        return $loadSeed[uuid];\r\n    }\r\n    static CheckSeed(obj: Node | string, seed: number) {\r\n        let uuid: string;\r\n        if (obj instanceof Node) {\r\n            uuid = obj.uuid;\r\n        } else {\r\n            uuid = obj;\r\n        }\r\n        return $loadSeed[uuid] == seed;\r\n    }\r\n\r\n    /**\r\n     * 预加载\r\n     */\r\n    static async PrevLoad() {\r\n        let success1: Function;\r\n        let promise1: Promise<any> = new Promise((resolve, reject) => {\r\n            success1 = resolve;\r\n        });\r\n        assetManager.loadBundle(\"res\", (err, ab) => {\r\n            success1(ab);\r\n        });\r\n\r\n        let success2: Function;\r\n        let promise2: Promise<any> = new Promise((resolve, reject) => {\r\n            success2 = resolve;\r\n        })\r\n        resources.loadDir('materials', (err, data) => {\r\n            ResMgr.depth_material_uuid = resources.get(\"materials/depth-test-spine\", Material).uuid;\r\n            success2();\r\n        })\r\n\r\n        return Promise.all([promise1, promise2]);\r\n    }\r\n\r\n    static depth_material_uuid: string;\r\n    static async getDepthMaterial() {\r\n        return this.GetResources<Material>(\"materials/depth-test-spine\");\r\n    }\r\n\r\n    /**\r\n     * 获取已加载的资源\r\n     * @param path \r\n     * @returns \r\n     */\r\n    static GetAsset<T>(path: string) {\r\n        if (resMap[path]) {\r\n            let res: T = resMap[path];\r\n            return res;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 加载resources\r\n     * @param path \r\n     * @param cb \r\n     */\r\n    static async GetResources<T>(path: string, cb?: (res: T) => void, onProgress?: (value: number, total: number) => void) {\r\n        if (path == \"ui\") throw path;\r\n        if (path == \"gameobj\") {\r\n            throw \"error\";\r\n        }\r\n        if (resMap[path]) {\r\n            let res: T = resMap[path];\r\n            cb && cb(res);\r\n            return Promise.resolve(res);\r\n        }\r\n        let success: Function, fail: Function;\r\n        let promise: Promise<T> = new Promise((resolve, reject) => {\r\n            success = resolve;\r\n            fail = reject;\r\n        });\r\n        resources.load(path, onProgress, (err, data) => {\r\n            if (err) {\r\n                error(err);\r\n                cb && cb(null);\r\n                fail();\r\n            } else {\r\n                let res = data as (T);\r\n                resMap.set(path, res);\r\n                cb && cb(res);\r\n                success(res);\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * 判断资源是否已加载\r\n     * @param path \r\n     * @returns \r\n     */\r\n    static HasResource(path: string) {\r\n        if (resources.getInfoWithPath(path)) {\r\n            return true;\r\n        }\r\n        const resAb = assetManager.getBundle(\"res\");\r\n        if (resAb.getInfoWithPath(path)) return true;\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * 加载res包资源\r\n     * @param path 资源路径\r\n     * @param resType 资源类型\r\n     * @param cb 回调\r\n     * @returns \r\n     */\r\n    public static LoadResAbSub<T extends Asset>(path: string, resType: classz<T>, cb?: (res: T) => void): Promise<T> {\r\n        let uri = \"res/\" + path;\r\n        if (<any>resType === SpriteFrame) {\r\n            if (uri.split(/[\\\\\\/]/).pop() != \"spriteFrame\") uri += \"spriteFrame\";\r\n        }\r\n        if (resMap[uri]) return resMap[uri];\r\n        let resAb = assetManager.getBundle(\"res\");\r\n        if (!resAb.getInfoWithPath(path)) {\r\n            console.warn(\"无此资源:\" + path);\r\n            cb?.(undefined);\r\n            return Promise.resolve(undefined);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            // 加载 Prefab\r\n            resAb.load(path, resType, function (err, resData) {\r\n                if (err) {\r\n                    error(err);\r\n                    resolve(undefined);\r\n                }\r\n                if (resData) {\r\n                    cb && cb(resData as T);\r\n                    resolve(resData);\r\n                }\r\n\r\n            });\r\n        })\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * 加载远程资源\r\n     * @param url \r\n     * @param cb \r\n     * @returns \r\n     */\r\n    static async LoadRemoteSpriteFrame<T>(url: string, cb?: (res: SpriteFrame) => void) {\r\n        let success: Function, fail: Function;\r\n        let promise: Promise<T> = new Promise((resolve, reject) => {\r\n            success = resolve;\r\n            fail = reject;\r\n        });\r\n        if (resMap[url]) {\r\n            cb && cb(resMap[url]);\r\n            success(resMap[url]);\r\n            return promise;\r\n        }\r\n        assetManager.loadRemote<ImageAsset>(url, { maxRetryCount: 1 }, function (err, imageAsset) {\r\n            if (err || !imageAsset) {\r\n                error(err);\r\n                cb && cb(null);\r\n            } else {\r\n                const spriteFrame = new SpriteFrame();\r\n                const texture = new Texture2D();\r\n                texture.image = imageAsset;\r\n                spriteFrame.texture = texture;\r\n                resMap[url] = spriteFrame;\r\n                cb && cb(spriteFrame);\r\n                success(spriteFrame);\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n}\r\n\r\n/**money */\r\nexport const folder_money = \"sheets/main/\";\r\n/**动态图标 */\r\nexport const folder_icon = \"sheets/icons/\";\r\n/**品质 */\r\nexport const folder_quality = \"sheets/icons/quality\";\r\n/**头像目录 */\r\nexport const folder_head = \"sheets/icons/head\";\r\n/**圆头像 */\r\nexport const folder_head_round = \"sheets/icons/head/round/\";\r\n/**属性图标 */\r\nexport const folder_attr = \"sheets/icons/attr/\";\r\n/**公共图标 */\r\nexport const folder_common = \"sheets/common\";\r\n/**道具图标 */\r\nexport const folder_item = \"sheets/items/\";\r\n/**卡片图标 */\r\nexport const folder_card = \"sheets/cards/\";\r\n/**道具抢夺 */\r\nexport const folder_loot = \"sheets/loot/\";\r\n/**技能图标 */\r\nexport const folder_skill = \"skill/\";\r\n/**公共图标 */\r\nexport const folder_mail = \"sheets/mails\";\r\n/**品质颜色 */\r\nexport const quality_color = [`#ffffff`, `#82d760`, `#6bbfe7`, `#e789e7`, `#ffb30f`, `#ec665a`]\r\n/**技能品质颜色 */\r\nexport const skill_quality_color = [`#ffffff`, `#8AEF4A`, `#8AE9F5`, `#F188F1`, `#F8B034`, `#F17161`, `#ff0000`, `#00ff00`, `#0000ff`]\r\n\r\n/**角色底框品质颜色 */\r\nexport const bg_quality_color = [`#ffffff`, `#9ce86c`, `#9edee6`, `#dc9edc`, `#f6b252`, `#ec7769`]\r\n\r\n/**音效 */\r\nexport const folder_sound = \"audio/sound/\";\r\n\r\n/**bgm */\r\nexport const folder_bgm = \"audio/music/\";\r\n\r\n/**环境音效 */\r\nexport const folder_scene = \"audio/scene/\";\r\n\r\n/**卡品质 */\r\nexport const card_quality = \"sheets/cardframe/\";\r\n\r\n/**卡牌立绘 */\r\nexport const roleimage = \"sheets/roleimage/\";\r\n\r\n/**卡牌卡背 */\r\nexport const cardBack = \"sheets/cardBack/\";\r\n"]}