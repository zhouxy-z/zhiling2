{"version":3,"sources":["file:///D:/plants_client/trunk/proj/assets/scripts/module/trade/TradeHeroPanel.ts"],"names":["TradeHeroPanel","Color","Input","Label","Sprite","SpriteFrame","find","path","sp","Panel","prefab","role","body","midScroller","skillLayout","Power","PowerLabel","light","level","onLoad","Skeleton","AutoScroller","getChildByName","addComponent","SpriteLabel","CloseBy","node","on","EventType","TOUCH_START","Hide","SetHandle","updateItem","bind","onUpdateSkill","ShowMerge","Show","flush","string","CfgMgr","GetRole","type","Prefab","skeletonData","ResMgr","LoadResAbSub","join","SkeletonData","setAnimation","ls","spr","datas","index","id","data","FormatAttr","value","GetAttrValueByIndex","icon","folder_item","SetPerValue","push","console","log","datas2","AttrFightData","FormatRoleFightAttr","attr_data_list","AttrFight","AttackVal","HPMax","i","length","element","data1","name","Attr","LeaderShip","next","per","data2","concat","UpdateDatas","passive_skills","battlePower","CountPower","quality","font","CardQuality","spriteFrame","item","getComponent","now","active","stdSkill","GetPassiveSkill","skill_id","bg","skillLV","Name","Level","color","fromHEX","skill_quality_color","RareLevel","iconUrl","folder_skill","Icon","toString","res","qualityUrl","folder_quality","onShow","onHide","args"],"mappings":";;;gJAIaA,c;;;;;;;;;;;;;;;AAJJC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;AAAqBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAoDC,MAAAA,I,OAAAA,I;AAAYC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,E,OAAAA,E;;AACjHC,MAAAA,K,iBAAAA,K;;;;;;;;;gCAGIT,c,GAAN,MAAMA,cAAN;AAAA;AAAA,0BAAmC;AAAA;AAAA;AAAA,eAC5BU,MAD4B,GACX,oCADW;AAAA,eAG9BC,IAH8B;AAAA,eAI9BC,IAJ8B;AAAA,eAK9BC,WAL8B;AAAA,eAM9BC,WAN8B;AAAA,eAO9BC,KAP8B;AAAA,eAQ9BC,UAR8B;AAAA,eAS9BC,KAT8B;AAAA,eAU9BC,KAV8B;AAAA;;AAY5BC,QAAAA,MAAM,GAAG;AACf,eAAKP,IAAL,GAAY,KAAKN,IAAL,CAAU,MAAV,EAAkBE,EAAE,CAACY,QAArB,CAAZ;AACA,eAAKP,WAAL,GAAmB,KAAKP,IAAL,CAAW,WAAX,EAAuBe,YAAvB,CAAnB;AACA,eAAKP,WAAL,GAAmB,KAAKR,IAAL,CAAW,aAAX,EAAyBe,YAAzB,CAAnB;AACA,eAAKN,KAAL,GAAa,KAAKT,IAAL,CAAW,OAAX,CAAb;AACA,eAAKY,KAAL,GAAa,KAAKZ,IAAL,CAAU,OAAV,EAAmBH,KAAnB,CAAb;AACA,eAAKa,UAAL,GAAkB,KAAKD,KAAL,CAAWO,cAAX,CAA2B,OAA3B,EAAmCC,YAAnC,CAAgDC,WAAhD,CAAlB;AACA,eAAKP,KAAL,GAAa,KAAKX,IAAL,CAAU,OAAV,EAAmBF,MAAnB,CAAb;AACA,eAAKqB,OAAL,CAAa,OAAb;AACA,eAAKC,IAAL,CAAUC,EAAV,CAAazB,KAAK,CAAC0B,SAAN,CAAgBC,WAA7B,EAAyC,KAAKC,IAA9C,EAAmD,IAAnD;AAEA,eAAKjB,WAAL,CAAiBkB,SAAjB,CAA2B,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAA3B;AACA,eAAKnB,WAAL,CAAiBiB,SAAjB,CAA2B,KAAKG,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAA3B;AACH;;AAEe,eAATE,SAAS,CAACxB,IAAD,EAAwB;AACpC,eAAKyB,IAAL,CAAUzB,IAAV;AACH;;AAEU,cAAL0B,KAAK,CAAC1B,IAAD,EAAwB;AAC/B,eAAKA,IAAL,GAAYA,IAAZ;AACA,eAAKO,KAAL,CAAWoB,MAAX,GAAoB,QAAQ3B,IAAI,CAACO,KAAjC;AACA,cAAIR,MAAM,GAAG6B,MAAM,CAACC,OAAP,GAAiB7B,IAAI,CAAC8B,IAAtB,EAA4BC,MAAzC;AACA,eAAK9B,IAAL,CAAU+B,YAAV,GAAyB,MAAMC,MAAM,CAACC,YAAP,CAAoBtC,IAAI,CAACuC,IAAL,CAAU,cAAV,EAA0BpC,MAA1B,EAAkCA,MAAlC,CAApB,EAA+DF,EAAE,CAACuC,YAAlE,CAA/B;AACA,eAAKnC,IAAL,CAAUoC,YAAV,CAAuB,CAAvB,EAA2B,MAA3B,EAAkC,IAAlC;AAEA,gBAAMC,EAAY,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,EAAP,CAArB;AACA,cAAIC,GAAG,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,SAA5B,CAAV;AACA,cAAIC,KAAK,GAAG,EAAZ;AACA,cAAIC,KAAK,GAAG,CAAZ;;AACA,eAAK,IAAIC,EAAT,IAAeJ,EAAf,EAAmB;AACf,gBAAIK,IAAI,GAAGC,UAAU,CAACF,EAAD,EAAK,KAAL,CAArB;AACA,gBAAIG,KAAK,GAAGC,mBAAmB,CAAC,KAAK9C,IAAN,EAA+B0C,EAA/B,CAA/B;;AACA,gBAAIG,KAAK,IAAI,CAAb,EAAgB;AACZF,cAAAA,IAAI,CAACI,IAAL,GAAYnD,IAAI,CAACuC,IAAL,CAAUa,WAAV,EAAuBT,GAAG,CAACE,KAAD,CAA1B,EAAmC,aAAnC,CAAZ;AACAI,cAAAA,KAAK,GAAGI,WAAW,CAACN,IAAD,EAAOE,KAAP,CAAnB;AACAF,cAAAA,IAAI,CAACE,KAAL,GAAaA,KAAb;AACAL,cAAAA,KAAK,CAACU,IAAN,CAAWP,IAAX;AACH;;AACDF,YAAAA,KAAK;AACR;;AACDU,UAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AAEA,cAAIa,MAAiB,GAAG,EAAxB;AACA,cAAIC,aAAa,GAAGC,mBAAmB,CAACvD,IAAD,CAAvC;AACA,cAAIwD,cAAc,GAAG,EAArB;AACA,cAAId,EAAE,GAAG,CAACe,SAAS,CAACC,SAAX,EAAsBD,SAAS,CAACE,KAAhC,CAAT;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,EAAE,CAACmB,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,iBAAK,IAAInB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGa,aAAa,CAACO,MAA1C,EAAkDpB,KAAK,EAAvD,EAA2D;AACvD,oBAAMqB,OAAO,GAAGR,aAAa,CAACb,KAAD,CAA7B;;AACA,kBAAGqB,OAAO,CAACpB,EAAR,IAAcA,EAAE,CAACkB,CAAD,CAAnB,EAAuB;AACnBJ,gBAAAA,cAAc,CAACN,IAAf,CAAoBY,OAApB;AACH;AACJ;AACJ,WAnC8B,CAqC9B;;;AACA,cAAIC,KAAc,GAAG;AAClBhB,YAAAA,IAAI,EAAE,IADY;AAElBiB,YAAAA,IAAI,EAAE,MAFY;AAGlBnB,YAAAA,KAAK,EAAEC,mBAAmB,CAAC9C,IAAD,EAAOiE,IAAI,CAACC,UAAZ,CAHR;AAIlBC,YAAAA,IAAI,EAAE,CAJY;AAKlBC,YAAAA,GAAG,EAAE;AALa,WAArB;AAODf,UAAAA,MAAM,CAACH,IAAP,CAAYa,KAAZ;AAEA,cAAIM,KAAc,GAAG;AACjBtB,YAAAA,IAAI,EAAE,IADW;AAEjBiB,YAAAA,IAAI,EAAE,KAFW;AAGjBnB,YAAAA,KAAK,EAAEW,cAAc,CAAC,CAAD,CAAd,CAAkBX,KAHR;AAIjBsB,YAAAA,IAAI,EAAE,CAJW;AAKjBC,YAAAA,GAAG,EAAE;AALY,WAArB;AAOAf,UAAAA,MAAM,CAACH,IAAP,CAAYmB,KAAZ,EAtD+B,CAwD/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAhB,UAAAA,MAAM,GAAGA,MAAM,CAACiB,MAAP,CAAc9B,KAAd,CAAT;AAEA,eAAKtC,WAAL,CAAiBqE,WAAjB,CAA6BlB,MAA7B;AACA,eAAKlD,WAAL,CAAiBoE,WAAjB,CAA6BvE,IAAI,CAACwE,cAAlC;AAEA,cAAIC,WAAW,GAAGC,UAAU,CAAC,KAAK1E,IAAL,CAAU8B,IAAX,EAAiB,KAAK9B,IAAL,CAAU2E,OAA3B,EAAoC,KAAK3E,IAAzC,CAA5B;AACA,eAAKK,UAAL,CAAgBuE,IAAhB,GAAuB,4BAAvB;AACA,eAAKvE,UAAL,CAAgBsB,MAAhB,GAA0B,GAAE8C,WAAY,EAAxC;AAEA,cAAInE,KAAK,GAAGV,IAAI,CAACuC,IAAL,CAAU,cAAV,EAA0B0C,WAAW,CAAC7E,IAAI,CAAC2E,OAAN,CAArC,EAAqD,aAArD,CAAZ;AACA,eAAKrE,KAAL,CAAWwE,WAAX,GAAyB,MAAM7C,MAAM,CAACC,YAAP,CAAoB5B,KAApB,EAA2BZ,WAA3B,CAA/B;AACH;;AAEyB,cAAV2B,UAAU,CAAC0D,IAAD,EAAapC,IAAb,EAAwB;AAAA;;AAC9C,cAAIqB,IAAI,2BAAGe,IAAI,CAACpE,cAAL,CAAoB,MAApB,CAAH,qBAAG,qBAA6BqE,YAA7B,CAA0CxF,KAA1C,CAAX;AACA,cAAIyF,GAAG,4BAAGF,IAAI,CAACpE,cAAL,CAAoB,UAApB,CAAH,qBAAG,sBAAiCqE,YAAjC,CAA8CxF,KAA9C,CAAV;AACA,cAAIuD,IAAI,4BAAGgC,IAAI,CAACpE,cAAL,CAAoB,QAApB,CAAH,qBAAG,sBAA+BqE,YAA/B,CAA4CvF,MAA5C,CAAX;;AACA,cAAGkD,IAAI,CAACI,IAAR,EAAa;AACTA,YAAAA,IAAI,CAAChC,IAAL,CAAUmE,MAAV,GAAmB,IAAnB;AACAnC,YAAAA,IAAI,CAAC+B,WAAL,GAAmB,MAAM7C,MAAM,CAACC,YAAP,CAAoBS,IAAI,CAACI,IAAzB,EAA+BrD,WAA/B,CAAzB;AACH,WAHD,MAGK;AACDqD,YAAAA,IAAI,CAAChC,IAAL,CAAUmE,MAAV,GAAmB,KAAnB;AACH;;AACD,cAAIlB,IAAJ,EAAUA,IAAI,CAACrC,MAAL,GAAcgB,IAAI,CAACqB,IAAnB;AACViB,UAAAA,GAAG,CAACtD,MAAJ,GAAagB,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACyB,GAA/B;AACH;;AAEO7C,QAAAA,aAAa,CAACwD,IAAD,EAAapC,IAAb,EAAqC;AACtD,cAAIA,IAAJ,EAAU;AACN,gBAAIwC,QAAyB,GAAGvD,MAAM,CAACwD,eAAP,CAAuBzC,IAAI,CAAC0C,QAA5B,EAAsC1C,IAAI,CAACpC,KAA3C,CAAhC;AACA,gBAAI+E,EAAE,GAAG3F,IAAI,CAAE,IAAF,EAAOoF,IAAP,CAAJ,CAAiBC,YAAjB,CAA8BvF,MAA9B,CAAT;AACA,gBAAIsD,IAAI,GAAGpD,IAAI,CAAE,WAAF,EAAcoF,IAAd,CAAJ,CAAwBC,YAAxB,CAAqCvF,MAArC,CAAX;AACA,gBAAIuE,IAAI,GAAGrE,IAAI,CAAE,YAAF,EAAeoF,IAAf,CAAJ,CAAyBC,YAAzB,CAAsCxF,KAAtC,CAAX;AACA,gBAAI+F,OAAO,GAAG5F,IAAI,CAAE,cAAF,EAAiBoF,IAAjB,CAAJ,CAA2BC,YAA3B,CAAwCxF,KAAxC,CAAd;;AACA,gBAAI2F,QAAJ,EAAc;AACVnB,cAAAA,IAAI,CAACrC,MAAL,GAAe,GAAEwD,QAAQ,CAACK,IAAK,EAA/B;AACAD,cAAAA,OAAO,CAAC5D,MAAR,GAAkB,GAAEwD,QAAQ,CAACM,KAAM,EAAnC;AACAzB,cAAAA,IAAI,CAAC0B,KAAL,GAAa,IAAIpG,KAAJ,GAAYqG,OAAZ,CAAoBC,mBAAmB,CAACT,QAAQ,CAACU,SAAV,CAAvC,CAAb;AACA,kBAAIC,OAAe,GAAGlG,IAAI,CAACuC,IAAL,CAAU4D,YAAV,EAAwBZ,QAAQ,CAACa,IAAT,CAAcC,QAAd,EAAxB,EAAkD,aAAlD,CAAtB;AACAhE,cAAAA,MAAM,CAACC,YAAP,CAAoB4D,OAApB,EAA6BpG,WAA7B,EAA0CwG,GAAG,IAAI;AAC7CnD,gBAAAA,IAAI,CAAC+B,WAAL,GAAmBoB,GAAnB;AACH,eAFD;AAIA,kBAAIC,UAAkB,GAAGvG,IAAI,CAACuC,IAAL,CAAUiE,cAAV,EAA0B,gBAAgBjB,QAAQ,CAACU,SAAT,CAAmBI,QAAnB,EAA1C,EAAyE,aAAzE,CAAzB;AACAhE,cAAAA,MAAM,CAACC,YAAP,CAAoBiE,UAApB,EAAgCzG,WAAhC,EAA6CwG,GAAG,IAAI;AAChDZ,gBAAAA,EAAE,CAACR,WAAH,GAAiBoB,GAAjB;AACH,eAFD;AAGH;AACJ;AACJ;;AAESG,QAAAA,MAAM,GAAS,CACxB;;AACSC,QAAAA,MAAM,CAAC,GAAGC,IAAJ,EAAuB,CACtC;;AArJqC,O","sourcesContent":["import { Color, Input, Label, Node, Slider, Sprite, SpriteFrame, Toggle, Tween, UIOpacity, UITransform, find, game, path, sp, tween, v3 } from \"cc\";\r\nimport { Panel } from \"../../manager/GameRoot\";\r\n\r\n\r\nexport class TradeHeroPanel extends Panel {\r\n    protected prefab: string = \"prefabs/panel/Trade/TradeHeroPanel\";\r\n\r\n    private role: SPlayerDataRole;\r\n    private body: sp.Skeleton;\r\n    private midScroller: AutoScroller;\r\n    private skillLayout: AutoScroller;\r\n    private Power: Node;\r\n    private PowerLabel: SpriteLabel;\r\n    private light: Sprite;\r\n    private level:Label;\r\n\r\n    protected onLoad() {\r\n        this.body = this.find(\"body\", sp.Skeleton);\r\n        this.midScroller = this.find(`midLayout`, AutoScroller);\r\n        this.skillLayout = this.find(`skillLayout`, AutoScroller);\r\n        this.Power = this.find(`Power`);\r\n        this.level = this.find(\"level\", Label);\r\n        this.PowerLabel = this.Power.getChildByName(`label`).addComponent(SpriteLabel);\r\n        this.light = this.find(\"light\", Sprite);\r\n        this.CloseBy(\"close\");\r\n        this.node.on(Input.EventType.TOUCH_START,this.Hide,this);\r\n\r\n        this.midScroller.SetHandle(this.updateItem.bind(this));\r\n        this.skillLayout.SetHandle(this.onUpdateSkill.bind(this));\r\n    }\r\n\r\n    static ShowMerge(role: SPlayerDataRole) {\r\n        this.Show(role);\r\n    }\r\n\r\n    async flush(role: SPlayerDataRole) {\r\n        this.role = role;\r\n        this.level.string = \"Lv.\" + role.level;\r\n        let prefab = CfgMgr.GetRole()[role.type].Prefab;\r\n        this.body.skeletonData = await ResMgr.LoadResAbSub(path.join(\"spine/role_p\", prefab, prefab), sp.SkeletonData);\r\n        this.body.setAnimation(0, `Idle`, true);\r\n\r\n        const ls: number[] = [5,7,9,11];\r\n        let spr = [\"mucai\", \"shui\", \"shitou\", \"zhongzi\"]\r\n        let datas = [];\r\n        let index = 0\r\n        for (let id of ls) {\r\n            let data = FormatAttr(id, false);\r\n            let value = GetAttrValueByIndex(this.role as SPlayerDataRole, id);\r\n            if (value != 0) {\r\n                data.icon = path.join(folder_item, spr[index], \"spriteFrame\")\r\n                value = SetPerValue(data, value);\r\n                data.value = value;\r\n                datas.push(data);\r\n            }\r\n            index++;\r\n        }\r\n        console.log(datas);\r\n\r\n        let datas2: AttrSub[] = [];\r\n        let AttrFightData = FormatRoleFightAttr(role)\r\n        let attr_data_list = [];\r\n        let id = [AttrFight.AttackVal, AttrFight.HPMax]\r\n        for (let i = 0; i < id.length; i++) {\r\n            for (let index = 0; index < AttrFightData.length; index++) {\r\n                const element = AttrFightData[index];\r\n                if(element.id == id[i]){\r\n                    attr_data_list.push(element)\r\n                }      \r\n            }  \r\n        }\r\n\r\n         // 附加属性\r\n         let data1: AttrSub = {\r\n            icon: null,\r\n            name: \"兵力数量\",\r\n            value: GetAttrValueByIndex(role, Attr.LeaderShip),\r\n            next: 0,\r\n            per: \"\"\r\n        }\r\n        datas2.push(data1);\r\n\r\n        let data2: AttrSub = {\r\n            icon: null,\r\n            name: \"攻击力\",\r\n            value: attr_data_list[0].value,\r\n            next: 0,\r\n            per: \"\"\r\n        }\r\n        datas2.push(data2);\r\n\r\n        // let data3: AttrSub = {\r\n        //     icon: null,\r\n        //     name: \"生命值\",\r\n        //     value: attr_data_list[1].value,\r\n        //     next: 0,\r\n        //     per: \"\"\r\n        // }\r\n        // datas2.push(data3); \r\n        datas2 = datas2.concat(datas)\r\n      \r\n        this.midScroller.UpdateDatas(datas2);\r\n        this.skillLayout.UpdateDatas(role.passive_skills);\r\n\r\n        let battlePower = CountPower(this.role.type, this.role.quality, this.role);\r\n        this.PowerLabel.font = \"sheets/common/number/font2\";\r\n        this.PowerLabel.string = `${battlePower}`;\r\n\r\n        let light = path.join(\"sheets/fanyu\", CardQuality[role.quality], \"spriteFrame\");\r\n        this.light.spriteFrame = await ResMgr.LoadResAbSub(light, SpriteFrame);\r\n    }\r\n\r\n    protected async updateItem(item: Node, data: any) {\r\n        let name = item.getChildByName(\"name\")?.getComponent(Label);\r\n        let now = item.getChildByName(\"nowValue\")?.getComponent(Label);\r\n        let icon = item.getChildByName(\"iconJP\")?.getComponent(Sprite);\r\n        if(data.icon){\r\n            icon.node.active = true;\r\n            icon.spriteFrame = await ResMgr.LoadResAbSub(data.icon, SpriteFrame);\r\n        }else{\r\n            icon.node.active = false;\r\n        }\r\n        if (name) name.string = data.name;\r\n        now.string = data.value + data.per;\r\n    }\r\n\r\n    private onUpdateSkill(item: Node, data: SPlayerDataSkill) {\r\n        if (data) {\r\n            let stdSkill: StdPassiveLevel = CfgMgr.GetPassiveSkill(data.skill_id, data.level);\r\n            let bg = find(`bg`, item).getComponent(Sprite);\r\n            let icon = find(`Mask/icon`, item).getComponent(Sprite);\r\n            let name = find(`skill_name`, item).getComponent(Label);\r\n            let skillLV = find(`lvCont/lvLab`, item).getComponent(Label);\r\n            if (stdSkill) {\r\n                name.string = `${stdSkill.Name}`;\r\n                skillLV.string = `${stdSkill.Level}`;\r\n                name.color = new Color().fromHEX(skill_quality_color[stdSkill.RareLevel]);\r\n                let iconUrl: string = path.join(folder_skill, stdSkill.Icon.toString(), \"spriteFrame\");\r\n                ResMgr.LoadResAbSub(iconUrl, SpriteFrame, res => {\r\n                    icon.spriteFrame = res;\r\n                });\r\n\r\n                let qualityUrl: string = path.join(folder_quality, \"p_skill_bg_\" + stdSkill.RareLevel.toString(), \"spriteFrame\");\r\n                ResMgr.LoadResAbSub(qualityUrl, SpriteFrame, res => {\r\n                    bg.spriteFrame = res;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onShow(): void {\r\n    }\r\n    protected onHide(...args: any[]): void {\r\n    }\r\n}\r\n"]}